
exe/EFM32_Boot.out:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006878  00000000  00000000  00008000  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00006878  00006878  0000e878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000a04  20000000  00006880  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001f68  20000b00  00007400  00010b00  2**8
                  ALLOC
  4 .heap         00000c00  20002a68  20002a68  00010a08  2**3
                  CONTENTS, READONLY
  5 .stack_dummy  00000400  20002a68  20002a68  00011608  2**3
                  CONTENTS, READONLY
  6 .ARM.attributes 00000029  00000000  00000000  00011a08  2**0
                  CONTENTS, READONLY
  7 .comment      00000070  00000000  00000000  00011a31  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000fece  00000000  00000000  00011aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e77  00000000  00000000  0002196f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007ea8  00000000  00000000  000247e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000818  00000000  00000000  0002c68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000878  00000000  00000000  0002cea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004375  00000000  00000000  0002d71e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000328e  00000000  00000000  00031a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001bcc  00000000  00000000  00034d24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__isr_vector>:
       0:	20004000 	.word	0x20004000
       4:	00003a01 	.word	0x00003a01
       8:	00003a37 	.word	0x00003a37
       c:	00003a39 	.word	0x00003a39
      10:	00003a3b 	.word	0x00003a3b
      14:	00003a3d 	.word	0x00003a3d
      18:	00003a3f 	.word	0x00003a3f
      1c:	00003a35 	.word	0x00003a35
      20:	00003a35 	.word	0x00003a35
      24:	00003a35 	.word	0x00003a35
      28:	00003a35 	.word	0x00003a35
      2c:	00003a41 	.word	0x00003a41
      30:	00003a43 	.word	0x00003a43
      34:	00003a35 	.word	0x00003a35
      38:	00003a45 	.word	0x00003a45
      3c:	00003a47 	.word	0x00003a47
      40:	000008e1 	.word	0x000008e1
      44:	00003a4b 	.word	0x00003a4b
      48:	00003a4d 	.word	0x00003a4d
      4c:	00003a4f 	.word	0x00003a4f
      50:	00003a51 	.word	0x00003a51
      54:	00003a53 	.word	0x00003a53
      58:	00003a55 	.word	0x00003a55
      5c:	00003a57 	.word	0x00003a57
      60:	00003a59 	.word	0x00003a59
      64:	00003a5b 	.word	0x00003a5b
      68:	00003a5d 	.word	0x00003a5d
      6c:	00003a5f 	.word	0x00003a5f
      70:	00003a61 	.word	0x00003a61
      74:	00003a63 	.word	0x00003a63
      78:	00003a65 	.word	0x00003a65
      7c:	00003a67 	.word	0x00003a67
      80:	00003a69 	.word	0x00003a69
      84:	00003a6b 	.word	0x00003a6b
      88:	00003a6d 	.word	0x00003a6d
      8c:	00003a6f 	.word	0x00003a6f
      90:	00003a71 	.word	0x00003a71
      94:	00003a73 	.word	0x00003a73
      98:	00003a75 	.word	0x00003a75
      9c:	00003a77 	.word	0x00003a77
      a0:	00002809 	.word	0x00002809
      a4:	00003a7b 	.word	0x00003a7b
      a8:	00003a7d 	.word	0x00003a7d
      ac:	00003a7f 	.word	0x00003a7f
      b0:	00003a81 	.word	0x00003a81
      b4:	00003a83 	.word	0x00003a83
	...

00000100 <__do_global_dtors_aux>:
     100:	b510      	push	{r4, lr}
     102:	4c05      	ldr	r4, [pc, #20]	; (118 <__do_global_dtors_aux+0x18>)
     104:	7823      	ldrb	r3, [r4, #0]
     106:	b933      	cbnz	r3, 116 <__do_global_dtors_aux+0x16>
     108:	4b04      	ldr	r3, [pc, #16]	; (11c <__do_global_dtors_aux+0x1c>)
     10a:	b113      	cbz	r3, 112 <__do_global_dtors_aux+0x12>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x20>)
     10e:	f3af 8000 	nop.w
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	20000b00 	.word	0x20000b00
     11c:	00000000 	.word	0x00000000
     120:	00006874 	.word	0x00006874

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b06      	ldr	r3, [pc, #24]	; (140 <frame_dummy+0x1c>)
     128:	b11b      	cbz	r3, 132 <frame_dummy+0xe>
     12a:	4806      	ldr	r0, [pc, #24]	; (144 <frame_dummy+0x20>)
     12c:	4906      	ldr	r1, [pc, #24]	; (148 <frame_dummy+0x24>)
     12e:	f3af 8000 	nop.w
     132:	4806      	ldr	r0, [pc, #24]	; (14c <frame_dummy+0x28>)
     134:	6803      	ldr	r3, [r0, #0]
     136:	b113      	cbz	r3, 13e <frame_dummy+0x1a>
     138:	4b05      	ldr	r3, [pc, #20]	; (150 <frame_dummy+0x2c>)
     13a:	b103      	cbz	r3, 13e <frame_dummy+0x1a>
     13c:	4798      	blx	r3
     13e:	bd08      	pop	{r3, pc}
     140:	00000000 	.word	0x00000000
     144:	00006874 	.word	0x00006874
     148:	20000b04 	.word	0x20000b04
     14c:	20000a04 	.word	0x20000a04
     150:	00000000 	.word	0x00000000

00000154 <_mainCRTStartup>:
     154:	4b15      	ldr	r3, [pc, #84]	; (1ac <_mainCRTStartup+0x58>)
     156:	2b00      	cmp	r3, #0
     158:	bf08      	it	eq
     15a:	4b13      	ldreq	r3, [pc, #76]	; (1a8 <_mainCRTStartup+0x54>)
     15c:	469d      	mov	sp, r3
     15e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     162:	2100      	movs	r1, #0
     164:	468b      	mov	fp, r1
     166:	460f      	mov	r7, r1
     168:	4813      	ldr	r0, [pc, #76]	; (1b8 <_mainCRTStartup+0x64>)
     16a:	4a14      	ldr	r2, [pc, #80]	; (1bc <_mainCRTStartup+0x68>)
     16c:	1a12      	subs	r2, r2, r0
     16e:	f003 fcc1 	bl	3af4 <memset>
     172:	4b0f      	ldr	r3, [pc, #60]	; (1b0 <_mainCRTStartup+0x5c>)
     174:	2b00      	cmp	r3, #0
     176:	d000      	beq.n	17a <_mainCRTStartup+0x26>
     178:	4798      	blx	r3
     17a:	4b0e      	ldr	r3, [pc, #56]	; (1b4 <_mainCRTStartup+0x60>)
     17c:	2b00      	cmp	r3, #0
     17e:	d000      	beq.n	182 <_mainCRTStartup+0x2e>
     180:	4798      	blx	r3
     182:	2000      	movs	r0, #0
     184:	2100      	movs	r1, #0
     186:	0004      	movs	r4, r0
     188:	000d      	movs	r5, r1
     18a:	480d      	ldr	r0, [pc, #52]	; (1c0 <_mainCRTStartup+0x6c>)
     18c:	2800      	cmp	r0, #0
     18e:	d002      	beq.n	196 <_mainCRTStartup+0x42>
     190:	480c      	ldr	r0, [pc, #48]	; (1c4 <_mainCRTStartup+0x70>)
     192:	f004 fd91 	bl	4cb8 <atexit>
     196:	f003 fc85 	bl	3aa4 <__libc_init_array>
     19a:	0020      	movs	r0, r4
     19c:	0029      	movs	r1, r5
     19e:	f002 fb67 	bl	2870 <main>
     1a2:	f003 fc6f 	bl	3a84 <exit>
     1a6:	bf00      	nop
     1a8:	00080000 	.word	0x00080000
     1ac:	20004000 	.word	0x20004000
	...
     1b8:	20000b00 	.word	0x20000b00
     1bc:	20002a68 	.word	0x20002a68
     1c0:	00004cb9 	.word	0x00004cb9
     1c4:	00004cc5 	.word	0x00004cc5

000001c8 <SystemHFClockGet>:
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
  uint32_t ret;
  
  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
     1c8:	4a20      	ldr	r2, [pc, #128]	; (24c <SystemHFClockGet+0x84>)
     1ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     1cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
     1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     1d4:	d035      	beq.n	242 <SystemHFClockGet+0x7a>
     1d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     1da:	d004      	beq.n	1e6 <SystemHFClockGet+0x1e>
     1dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     1e0:	d104      	bne.n	1ec <SystemHFClockGet+0x24>
      ret = EFM32_LFRCO_FREQ;
      break;
      
    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
     1e2:	4b1b      	ldr	r3, [pc, #108]	; (250 <SystemHFClockGet+0x88>)
     1e4:	e000      	b.n	1e8 <SystemHFClockGet+0x20>
  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
                         CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
     1e6:	4b1b      	ldr	r3, [pc, #108]	; (254 <SystemHFClockGet+0x8c>)
      ret = EFM32_LFRCO_FREQ;
      break;
      
    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
     1e8:	6818      	ldr	r0, [r3, #0]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
     1ea:	4770      	bx	lr
      
    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
     1ec:	68d3      	ldr	r3, [r2, #12]
     1ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     1f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     1f6:	d016      	beq.n	226 <SystemHFClockGet+0x5e>
     1f8:	d808      	bhi.n	20c <SystemHFClockGet+0x44>
     1fa:	b1b3      	cbz	r3, 22a <SystemHFClockGet+0x62>
     1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     200:	d11d      	bne.n	23e <SystemHFClockGet+0x76>
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     202:	4b15      	ldr	r3, [pc, #84]	; (258 <SystemHFClockGet+0x90>)
        ret = 11000000;
        break;

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
     204:	4a15      	ldr	r2, [pc, #84]	; (25c <SystemHFClockGet+0x94>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     206:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        ret = 11000000;
        break;

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
     208:	4b15      	ldr	r3, [pc, #84]	; (260 <SystemHFClockGet+0x98>)
     20a:	e012      	b.n	232 <SystemHFClockGet+0x6a>
      ret = 0;
#endif
      break;
      
    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
     20c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     210:	d01a      	beq.n	248 <SystemHFClockGet+0x80>
     212:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     216:	d004      	beq.n	222 <SystemHFClockGet+0x5a>
     218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     21c:	d10f      	bne.n	23e <SystemHFClockGet+0x76>
      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
        break;

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
     21e:	4811      	ldr	r0, [pc, #68]	; (264 <SystemHFClockGet+0x9c>)
        break;
     220:	4770      	bx	lr
      
    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
      {
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
     222:	4811      	ldr	r0, [pc, #68]	; (268 <SystemHFClockGet+0xa0>)
     224:	4770      	bx	lr
      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
        break;

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
     226:	4811      	ldr	r0, [pc, #68]	; (26c <SystemHFClockGet+0xa4>)
        break;
     228:	4770      	bx	lr
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     22a:	4b0b      	ldr	r3, [pc, #44]	; (258 <SystemHFClockGet+0x90>)
          ret = 7000000;
        break;

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
     22c:	4a10      	ldr	r2, [pc, #64]	; (270 <SystemHFClockGet+0xa8>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
     22e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
          ret = 7000000;
        break;

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
     230:	4b10      	ldr	r3, [pc, #64]	; (274 <SystemHFClockGet+0xac>)
     232:	f1b0 5f98 	cmp.w	r0, #318767104	; 0x13000000
     236:	bf34      	ite	cc
     238:	4610      	movcc	r0, r2
     23a:	4618      	movcs	r0, r3
     23c:	4770      	bx	lr
        else
          ret = 1000000;
        break;

      default:
        ret = 0;
     23e:	2000      	movs	r0, #0
        break;
     240:	4770      	bx	lr
      ret = 0;
#endif
      break;
      
    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
     242:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     246:	4770      	bx	lr
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
        break;

      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
     248:	480b      	ldr	r0, [pc, #44]	; (278 <SystemHFClockGet+0xb0>)
      }
      break;
  }

  return ret;
}
     24a:	4770      	bx	lr
     24c:	400c8000 	.word	0x400c8000
     250:	20000004 	.word	0x20000004
     254:	20000000 	.word	0x20000000
     258:	0fe081b0 	.word	0x0fe081b0
     25c:	006acfc0 	.word	0x006acfc0
     260:	0064b540 	.word	0x0064b540
     264:	00d59f80 	.word	0x00d59f80
     268:	01ab3f00 	.word	0x01ab3f00
     26c:	00a7d8c0 	.word	0x00a7d8c0
     270:	000f4240 	.word	0x000f4240
     274:	00124f80 	.word	0x00124f80
     278:	01406f40 	.word	0x01406f40

0000027c <SystemCoreClockGet>:
 *
 * @return
 *   The current core clock frequency in Hz.
 ******************************************************************************/
uint32_t SystemCoreClockGet(void)
{
     27c:	b508      	push	{r3, lr}
  uint32_t ret;
  
  ret = SystemHFClockGet();
     27e:	f7ff ffa3 	bl	1c8 <SystemHFClockGet>
#if defined (_EFM32_GIANT_FAMILY)
  /* Leopard/Giant Gecko has an additional divider */
  ret =  ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)>>_CMU_CTRL_HFCLKDIV_SHIFT));
#endif
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >> 
     282:	4b04      	ldr	r3, [pc, #16]	; (294 <SystemCoreClockGet+0x18>)
     284:	685b      	ldr	r3, [r3, #4]
     286:	f003 030f 	and.w	r3, r3, #15
     28a:	40d8      	lsrs	r0, r3
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
     28c:	4b02      	ldr	r3, [pc, #8]	; (298 <SystemCoreClockGet+0x1c>)
     28e:	6018      	str	r0, [r3, #0]

  return ret;
}
     290:	bd08      	pop	{r3, pc}
     292:	bf00      	nop
     294:	400c8000 	.word	0x400c8000
     298:	2000281c 	.word	0x2000281c

0000029c <SystemInit>:
 *   This function is invoked during system init, before the main() routine
 *   and any data has been initialized. For this reason, it cannot do any
 *   initialization of variables etc.
 *****************************************************************************/
void SystemInit(void)
{
     29c:	4770      	bx	lr

0000029e <SystemLFRCOClockGet>:
{
  /* Currently we assume that this frequency is properly tuned during */
  /* manufacturing and is not changed after reset. If future requirements */
  /* for re-tuning by user, we can add support for that. */
  return EFM32_LFRCO_FREQ;
}
     29e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     2a2:	4770      	bx	lr

000002a4 <SystemLFXOClockGet>:
#if (EFM32_LFXO_FREQ > 0)
  return SystemLFXOClock;
#else
  return 0;
#endif
}
     2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <SystemLFXOClockGet+0x8>)
     2a6:	6818      	ldr	r0, [r3, #0]
     2a8:	4770      	bx	lr
     2aa:	bf00      	nop
     2ac:	20000000 	.word	0x20000000

000002b0 <assertEFM>:
 *
 * @par line
 *   Line number in source file where assertion failed.
 ******************************************************************************/
void assertEFM(const char *file, int line)
{
     2b0:	e7fe      	b.n	2b0 <assertEFM>
	...

000002b4 <CMU_FlashWaitStateMax>:
 ******************************************************************************/
static void CMU_FlashWaitStateMax(void)
{
  uint32_t cfg;

  cfg = MSC->READCTRL;
     2b4:	490a      	ldr	r1, [pc, #40]	; (2e0 <CMU_FlashWaitStateMax+0x2c>)
     2b6:	684b      	ldr	r3, [r1, #4]

  switch(cfg & _MSC_READCTRL_MODE_MASK)
     2b8:	f003 0207 	and.w	r2, r3, #7
     2bc:	2a03      	cmp	r2, #3
     2be:	d80c      	bhi.n	2da <CMU_FlashWaitStateMax+0x26>
     2c0:	e8df f002 	tbb	[pc, r2]
     2c4:	07070202 	.word	0x07070202

#if defined( MSC_READCTRL_MODE_WS2 )
  case MSC_READCTRL_MODE_WS2:
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2;
#else
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
     2c8:	f023 0307 	bic.w	r3, r3, #7
     2cc:	f043 0301 	orr.w	r3, r3, #1
#endif
    break;
     2d0:	e003      	b.n	2da <CMU_FlashWaitStateMax+0x26>

#if defined( MSC_READCTRL_MODE_WS2SCBTP )
  case MSC_READCTRL_MODE_WS2SCBTP:
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS2SCBTP;
#elif defined( MSC_READCTRL_MODE_WS1SCBTP )
    cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1SCBTP;
     2d2:	f023 0307 	bic.w	r3, r3, #7
     2d6:	f043 0303 	orr.w	r3, r3, #3
#if defined( MSC_READCTRL_MODE_WS2SCBTP ) || \
    defined( MSC_READCTRL_MODE_WS1SCBTP ) || defined( MSC_READCTRL_MODE_WS0SCBTP )
      break;
#endif
  }
  MSC->READCTRL = cfg;
     2da:	604b      	str	r3, [r1, #4]
     2dc:	4770      	bx	lr
     2de:	bf00      	nop
     2e0:	400c0000 	.word	0x400c0000

000002e4 <CMU_FlashWaitStateControl>:
      break;
    }
  }
#endif

  if ((hfcoreclk > CMU_MAX_FREQ_0WS) && (hfcoreclk <= CMU_MAX_FREQ_1WS))
     2e4:	4a10      	ldr	r2, [pc, #64]	; (328 <CMU_FlashWaitStateControl+0x44>)
 *
 * @param[in] hfcoreclk
 *   HFCORECLK frequency that flash access wait states must be configured for.
 ******************************************************************************/
static void CMU_FlashWaitStateControl(uint32_t hfcoreclk)
{
     2e6:	b510      	push	{r4, lr}
      break;
    }
  }
#endif

  if ((hfcoreclk > CMU_MAX_FREQ_0WS) && (hfcoreclk <= CMU_MAX_FREQ_1WS))
     2e8:	4c10      	ldr	r4, [pc, #64]	; (32c <CMU_FlashWaitStateControl+0x48>)
 ******************************************************************************/
static void CMU_FlashWaitStateControl(uint32_t hfcoreclk)
{
  uint32_t cfg;

  cfg = MSC->READCTRL;
     2ea:	4911      	ldr	r1, [pc, #68]	; (330 <CMU_FlashWaitStateControl+0x4c>)
      break;
    }
  }
#endif

  if ((hfcoreclk > CMU_MAX_FREQ_0WS) && (hfcoreclk <= CMU_MAX_FREQ_1WS))
     2ec:	4402      	add	r2, r0
     2ee:	42a2      	cmp	r2, r4
 ******************************************************************************/
static void CMU_FlashWaitStateControl(uint32_t hfcoreclk)
{
  uint32_t cfg;

  cfg = MSC->READCTRL;
     2f0:	684b      	ldr	r3, [r1, #4]
      break;
    }
  }
#endif

  if ((hfcoreclk > CMU_MAX_FREQ_0WS) && (hfcoreclk <= CMU_MAX_FREQ_1WS))
     2f2:	d80b      	bhi.n	30c <CMU_FlashWaitStateControl+0x28>
  {
    switch (cfg & _MSC_READCTRL_MODE_MASK)
     2f4:	f003 0207 	and.w	r2, r3, #7
     2f8:	3a02      	subs	r2, #2
     2fa:	2a01      	cmp	r2, #1
     2fc:	f023 0307 	bic.w	r3, r3, #7
    case MSC_READCTRL_MODE_WS2SCBTP:
#endif
#if defined( MSC_READCTRL_MODE_WS1SCBTP ) && defined( MSC_READCTRL_MODE_WS0SCBTP )
    case MSC_READCTRL_MODE_WS0SCBTP:
    case MSC_READCTRL_MODE_WS1SCBTP:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1SCBTP;
     300:	bf94      	ite	ls
     302:	f043 0303 	orrls.w	r3, r3, #3
    defined( MSC_READCTRL_MODE_WS1SCBTP ) || defined( MSC_READCTRL_MODE_WS0SCBTP )
      break;
#endif

    default:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS1;
     306:	f043 0301 	orrhi.w	r3, r3, #1
      break;
     30a:	e00b      	b.n	324 <CMU_FlashWaitStateControl+0x40>
    }
  }

  if (hfcoreclk <= CMU_MAX_FREQ_0WS)
     30c:	4a09      	ldr	r2, [pc, #36]	; (334 <CMU_FlashWaitStateControl+0x50>)
     30e:	4290      	cmp	r0, r2
     310:	d808      	bhi.n	324 <CMU_FlashWaitStateControl+0x40>
  {
    switch (cfg & _MSC_READCTRL_MODE_MASK)
     312:	f003 0207 	and.w	r2, r3, #7
     316:	3a02      	subs	r2, #2
     318:	2a01      	cmp	r2, #1
     31a:	f023 0307 	bic.w	r3, r3, #7
    case MSC_READCTRL_MODE_WS2SCBTP:
#endif
#if defined( MSC_READCTRL_MODE_WS0SCBTP )
    case MSC_READCTRL_MODE_WS1SCBTP:
    case MSC_READCTRL_MODE_WS0SCBTP:
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0SCBTP;
     31e:	bf98      	it	ls
     320:	f043 0302 	orrls.w	r3, r3, #2
      cfg = (cfg & ~_MSC_READCTRL_MODE_MASK) | MSC_READCTRL_MODE_WS0;
      break;
    }
  }

  MSC->READCTRL = cfg;
     324:	604b      	str	r3, [r1, #4]
     326:	bd10      	pop	{r4, pc}
     328:	ff0bdbff 	.word	0xff0bdbff
     32c:	00f423ff 	.word	0x00f423ff
     330:	400c0000 	.word	0x400c0000
     334:	00f42400 	.word	0x00f42400

00000338 <CMU_DivToLog2>:
__STATIC_INLINE uint32_t CMU_DivToLog2(CMU_ClkDiv_TypeDef div)
{
  uint32_t log2;

  /* Prescalers take argument of 32768 or less */
  EFM_ASSERT((div>0) && (div <= 32768));
     338:	1e43      	subs	r3, r0, #1
     33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 *        numbers equal to 2^n
 * @param[in] div Unscaled dividend,
 * @return Base 2 logarithm of input, as used by fixed prescalers
 ******************************************************************************/
__STATIC_INLINE uint32_t CMU_DivToLog2(CMU_ClkDiv_TypeDef div)
{
     33e:	b510      	push	{r4, lr}
     340:	4604      	mov	r4, r0
  uint32_t log2;

  /* Prescalers take argument of 32768 or less */
  EFM_ASSERT((div>0) && (div <= 32768));
     342:	d303      	bcc.n	34c <CMU_DivToLog2+0x14>
     344:	4804      	ldr	r0, [pc, #16]	; (358 <CMU_DivToLog2+0x20>)
     346:	2187      	movs	r1, #135	; 0x87
     348:	f7ff ffb2 	bl	2b0 <assertEFM>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
     34c:	fab4 f484 	clz	r4, r4
     350:	b2e0      	uxtb	r0, r4

  /* Count leading zeroes and "reverse" result, Cortex-M3 intrinsic */
  log2 = (31 - __CLZ(div));

  return log2;
}
     352:	f1c0 001f 	rsb	r0, r0, #31
     356:	bd10      	pop	{r4, pc}
     358:	00006170 	.word	0x00006170

0000035c <CMU_Sync>:
 ******************************************************************************/
__STATIC_INLINE void CMU_Sync(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE)
     35c:	4b03      	ldr	r3, [pc, #12]	; (36c <CMU_Sync+0x10>)
     35e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     360:	07d2      	lsls	r2, r2, #31
     362:	d402      	bmi.n	36a <CMU_Sync+0xe>
    return;

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask)
     364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     366:	4210      	tst	r0, r2
     368:	d1fc      	bne.n	364 <CMU_Sync+0x8>
     36a:	4770      	bx	lr
     36c:	400c8000 	.word	0x400c8000

00000370 <CMU_LFClkGet>:
 ******************************************************************************/
static uint32_t CMU_LFClkGet(unsigned int lfClkBranch)
{
  uint32_t ret;

  EFM_ASSERT(lfClkBranch == CMU_LFA || lfClkBranch == CMU_LFB);
     370:	2801      	cmp	r0, #1
 * @return
 *   The LFnCLK frequency in Hz. If no LFnCLK is selected (disabled), 0 is
 *   returned.
 ******************************************************************************/
static uint32_t CMU_LFClkGet(unsigned int lfClkBranch)
{
     372:	b510      	push	{r4, lr}
     374:	4604      	mov	r4, r0
  uint32_t ret;

  EFM_ASSERT(lfClkBranch == CMU_LFA || lfClkBranch == CMU_LFB);
     376:	d904      	bls.n	382 <CMU_LFClkGet+0x12>
     378:	480f      	ldr	r0, [pc, #60]	; (3b8 <CMU_LFClkGet+0x48>)
     37a:	f240 1177 	movw	r1, #375	; 0x177
     37e:	f7ff ff97 	bl	2b0 <assertEFM>

  switch ((CMU->LFCLKSEL >> (lfClkBranch * 2)) & 0x3)
     382:	4b0e      	ldr	r3, [pc, #56]	; (3bc <CMU_LFClkGet+0x4c>)
     384:	0064      	lsls	r4, r4, #1
     386:	6a98      	ldr	r0, [r3, #40]	; 0x28
     388:	40e0      	lsrs	r0, r4
     38a:	f000 0003 	and.w	r0, r0, #3
     38e:	2802      	cmp	r0, #2
     390:	d007      	beq.n	3a2 <CMU_LFClkGet+0x32>
     392:	2803      	cmp	r0, #3
     394:	d009      	beq.n	3aa <CMU_LFClkGet+0x3a>
     396:	2801      	cmp	r0, #1
     398:	d10b      	bne.n	3b2 <CMU_LFClkGet+0x42>
    ret = 0;
    break;
  }

  return ret;
}
     39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  EFM_ASSERT(lfClkBranch == CMU_LFA || lfClkBranch == CMU_LFB);

  switch ((CMU->LFCLKSEL >> (lfClkBranch * 2)) & 0x3)
  {
  case _CMU_LFCLKSEL_LFA_LFRCO:
    ret = SystemLFRCOClockGet();
     39e:	f7ff bf7e 	b.w	29e <SystemLFRCOClockGet>
    ret = 0;
    break;
  }

  return ret;
}
     3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  case _CMU_LFCLKSEL_LFA_LFRCO:
    ret = SystemLFRCOClockGet();
    break;

  case _CMU_LFCLKSEL_LFA_LFXO:
    ret = SystemLFXOClockGet();
     3a6:	f7ff bf7d 	b.w	2a4 <SystemLFXOClockGet>
    else
    {
      ret = SystemCoreClockGet() / 2;
    }
#else
    ret = SystemCoreClockGet() / 2;
     3aa:	f7ff ff67 	bl	27c <SystemCoreClockGet>
     3ae:	0840      	lsrs	r0, r0, #1
     3b0:	bd10      	pop	{r4, pc}
    else
    {
      ret = 0;
    }
#else
    ret = 0;
     3b2:	2000      	movs	r0, #0
    ret = 0;
    break;
  }

  return ret;
}
     3b4:	bd10      	pop	{r4, pc}
     3b6:	bf00      	nop
     3b8:	00006170 	.word	0x00006170
     3bc:	400c8000 	.word	0x400c8000

000003c0 <CMU_ClockDivSet>:
{
  uint32_t freq;
  uint32_t divReg;

  /* Get divisor reg id */
  divReg = (clock >> CMU_DIV_REG_POS) & CMU_DIV_REG_MASK;
     3c0:	f3c0 1303 	ubfx	r3, r0, #4, #4

  switch (divReg)
     3c4:	3b01      	subs	r3, #1
 *
 * @param[in] div
 *   The clock divisor to use (<= cmuClkDiv_512).
 ******************************************************************************/
void CMU_ClockDivSet(CMU_Clock_TypeDef clock, CMU_ClkDiv_TypeDef div)
{
     3c6:	b510      	push	{r4, lr}
     3c8:	460c      	mov	r4, r1
  uint32_t divReg;

  /* Get divisor reg id */
  divReg = (clock >> CMU_DIV_REG_POS) & CMU_DIV_REG_MASK;

  switch (divReg)
     3ca:	2b03      	cmp	r3, #3
     3cc:	f200 809a 	bhi.w	504 <Stack_Size+0x104>
     3d0:	e8df f003 	tbb	[pc, r3]
     3d4:	642e1502 	.word	0x642e1502
    CMU_FlashWaitStateControl(freq);
    break;
#endif

  case CMU_HFPERCLKDIV_REG:
    EFM_ASSERT((div >= cmuClkDiv_1) && (div <= cmuClkDiv_512));
     3d8:	1e4b      	subs	r3, r1, #1
     3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
     3de:	d304      	bcc.n	3ea <CMU_ClockDivSet+0x2a>
     3e0:	484c      	ldr	r0, [pc, #304]	; (514 <Stack_Size+0x114>)
     3e2:	f240 311a 	movw	r1, #794	; 0x31a
     3e6:	f7ff ff63 	bl	2b0 <assertEFM>
    /* Convert to correct scale */
    div = CMU_DivToLog2(div);
     3ea:	4620      	mov	r0, r4
     3ec:	f7ff ffa4 	bl	338 <CMU_DivToLog2>
    CMU->HFPERCLKDIV = (CMU->HFPERCLKDIV & ~_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK) |
     3f0:	4b49      	ldr	r3, [pc, #292]	; (518 <Stack_Size+0x118>)
     3f2:	689a      	ldr	r2, [r3, #8]
     3f4:	f022 020f 	bic.w	r2, r2, #15
     3f8:	4310      	orrs	r0, r2
     3fa:	6098      	str	r0, [r3, #8]
                       (div << _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT);
    break;
     3fc:	bd10      	pop	{r4, pc}

  case CMU_HFCORECLKDIV_REG:
    EFM_ASSERT(div <= cmuClkDiv_512);
     3fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     402:	d904      	bls.n	40e <Stack_Size+0xe>
     404:	4843      	ldr	r0, [pc, #268]	; (514 <Stack_Size+0x114>)
     406:	f240 3122 	movw	r1, #802	; 0x322
     40a:	f7ff ff51 	bl	2b0 <assertEFM>

    /* Configure worst case wait states for flash access before setting divisor */
    CMU_FlashWaitStateMax();
     40e:	f7ff ff51 	bl	2b4 <CMU_FlashWaitStateMax>
                         _CMU_HFCORECLKDIV_HFCORECLKLEDIV_SHIFT, 1);
    }
#endif

    /* Convert to correct scale */
    div = CMU_DivToLog2(div);
     412:	4620      	mov	r0, r4
     414:	f7ff ff90 	bl	338 <CMU_DivToLog2>

    CMU->HFCORECLKDIV = (CMU->HFCORECLKDIV & ~_CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) |
     418:	4b3f      	ldr	r3, [pc, #252]	; (518 <Stack_Size+0x118>)
     41a:	685a      	ldr	r2, [r3, #4]
     41c:	f022 020f 	bic.w	r2, r2, #15
     420:	4310      	orrs	r0, r2
     422:	6058      	str	r0, [r3, #4]
                        (div << _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT);

    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();
     424:	f7ff ff2a 	bl	27c <SystemCoreClockGet>

  default:
    EFM_ASSERT(0);
    break;
  }
}
     428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();

    /* Optimize flash access wait state setting for current core clk */
    CMU_FlashWaitStateControl(freq);
     42c:	f7ff bf5a 	b.w	2e4 <CMU_FlashWaitStateControl>
    break;

  case CMU_LFAPRESC0_REG:
    switch (clock)
     430:	4b3a      	ldr	r3, [pc, #232]	; (51c <Stack_Size+0x11c>)
     432:	4298      	cmp	r0, r3
     434:	d004      	beq.n	440 <Stack_Size+0x40>
     436:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
     43a:	4298      	cmp	r0, r3
     43c:	d014      	beq.n	468 <Stack_Size+0x68>
     43e:	e029      	b.n	494 <Stack_Size+0x94>
    {
    case cmuClock_RTC:
      EFM_ASSERT(div <= cmuClkDiv_32768);
     440:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
     444:	d904      	bls.n	450 <Stack_Size+0x50>
     446:	4833      	ldr	r0, [pc, #204]	; (514 <Stack_Size+0x114>)
     448:	f240 3151 	movw	r1, #849	; 0x351
     44c:	f7ff ff30 	bl	2b0 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFAPRESC0);
     450:	2004      	movs	r0, #4
     452:	f7ff ff83 	bl	35c <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     456:	4620      	mov	r0, r4
     458:	f7ff ff6e 	bl	338 <CMU_DivToLog2>

      CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_RTC_MASK) |
     45c:	4b2e      	ldr	r3, [pc, #184]	; (518 <Stack_Size+0x118>)
     45e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
     460:	f022 020f 	bic.w	r2, r2, #15
     464:	4310      	orrs	r0, r2
     466:	e013      	b.n	490 <Stack_Size+0x90>
                       (div << _CMU_LFAPRESC0_RTC_SHIFT);
      break;

#if defined(_CMU_LFAPRESC0_LETIMER0_MASK)
    case cmuClock_LETIMER0:
      EFM_ASSERT(div <= cmuClkDiv_32768);
     468:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
     46c:	d904      	bls.n	478 <Stack_Size+0x78>
     46e:	4829      	ldr	r0, [pc, #164]	; (514 <Stack_Size+0x114>)
     470:	f240 315f 	movw	r1, #863	; 0x35f
     474:	f7ff ff1c 	bl	2b0 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFAPRESC0);
     478:	2004      	movs	r0, #4
     47a:	f7ff ff6f 	bl	35c <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     47e:	4620      	mov	r0, r4
     480:	f7ff ff5a 	bl	338 <CMU_DivToLog2>

      CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LETIMER0_MASK) |
     484:	4b24      	ldr	r3, [pc, #144]	; (518 <Stack_Size+0x118>)
     486:	6e9a      	ldr	r2, [r3, #104]	; 0x68
     488:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
     48c:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
     490:	6698      	str	r0, [r3, #104]	; 0x68
                       (div << _CMU_LFAPRESC0_LETIMER0_SHIFT);
      break;
     492:	bd10      	pop	{r4, pc}
                       (div << _CMU_LFAPRESC0_LESENSE_SHIFT);
      break;
#endif /* defined(LESENSE_PRESENT) */

    default:
      EFM_ASSERT(0);
     494:	481f      	ldr	r0, [pc, #124]	; (514 <Stack_Size+0x114>)
     496:	f240 318b 	movw	r1, #907	; 0x38b
     49a:	e036      	b.n	50a <Stack_Size+0x10a>
      break;
    }
    break;

  case CMU_LFBPRESC0_REG:
    switch (clock)
     49c:	4b20      	ldr	r3, [pc, #128]	; (520 <Stack_Size+0x120>)
     49e:	4298      	cmp	r0, r3
     4a0:	d004      	beq.n	4ac <Stack_Size+0xac>
     4a2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
     4a6:	4298      	cmp	r0, r3
     4a8:	d013      	beq.n	4d2 <Stack_Size+0xd2>
     4aa:	e027      	b.n	4fc <Stack_Size+0xfc>
    {
#if defined(_CMU_LFBPRESC0_LEUART0_MASK)
    case cmuClock_LEUART0:
      EFM_ASSERT(div <= cmuClkDiv_8);
     4ac:	2908      	cmp	r1, #8
     4ae:	d904      	bls.n	4ba <Stack_Size+0xba>
     4b0:	4818      	ldr	r0, [pc, #96]	; (514 <Stack_Size+0x114>)
     4b2:	f240 3195 	movw	r1, #917	; 0x395
     4b6:	f7ff fefb 	bl	2b0 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFBPRESC0);
     4ba:	2040      	movs	r0, #64	; 0x40
     4bc:	f7ff ff4e 	bl	35c <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     4c0:	4620      	mov	r0, r4
     4c2:	f7ff ff39 	bl	338 <CMU_DivToLog2>

      CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART0_MASK) |
     4c6:	4b14      	ldr	r3, [pc, #80]	; (518 <Stack_Size+0x118>)
     4c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     4ca:	f022 0203 	bic.w	r2, r2, #3
     4ce:	4310      	orrs	r0, r2
     4d0:	e012      	b.n	4f8 <Stack_Size+0xf8>
      break;
#endif

#if defined(_CMU_LFBPRESC0_LEUART1_MASK)
    case cmuClock_LEUART1:
      EFM_ASSERT(div <= cmuClkDiv_8);
     4d2:	2908      	cmp	r1, #8
     4d4:	d904      	bls.n	4e0 <Stack_Size+0xe0>
     4d6:	480f      	ldr	r0, [pc, #60]	; (514 <Stack_Size+0x114>)
     4d8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
     4dc:	f7ff fee8 	bl	2b0 <assertEFM>

      /* LF register about to be modified require sync. busy check */
      CMU_Sync(CMU_SYNCBUSY_LFBPRESC0);
     4e0:	2040      	movs	r0, #64	; 0x40
     4e2:	f7ff ff3b 	bl	35c <CMU_Sync>

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
     4e6:	4620      	mov	r0, r4
     4e8:	f7ff ff26 	bl	338 <CMU_DivToLog2>

      CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART1_MASK) |
     4ec:	4b0a      	ldr	r3, [pc, #40]	; (518 <Stack_Size+0x118>)
     4ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     4f0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
     4f4:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
     4f8:	6718      	str	r0, [r3, #112]	; 0x70
                       (((uint32_t)div) << _CMU_LFBPRESC0_LEUART1_SHIFT);
      break;
     4fa:	bd10      	pop	{r4, pc}
#endif

    default:
      EFM_ASSERT(0);
     4fc:	4805      	ldr	r0, [pc, #20]	; (514 <Stack_Size+0x114>)
     4fe:	f240 31b2 	movw	r1, #946	; 0x3b2
     502:	e002      	b.n	50a <Stack_Size+0x10a>
      break;
    }
    break;

  default:
    EFM_ASSERT(0);
     504:	4803      	ldr	r0, [pc, #12]	; (514 <Stack_Size+0x114>)
     506:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    break;
  }
}
     50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    }
    break;

  default:
    EFM_ASSERT(0);
     50e:	f7ff becf 	b.w	2b0 <assertEFM>
     512:	bf00      	nop
     514:	00006170 	.word	0x00006170
     518:	400c8000 	.word	0x400c8000
     51c:	00080430 	.word	0x00080430
     520:	00140540 	.word	0x00140540

00000524 <CMU_ClockEnable>:
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK)
     524:	f3c0 2303 	ubfx	r3, r0, #8, #4
     528:	3b01      	subs	r3, #1
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
     52a:	b570      	push	{r4, r5, r6, lr}
     52c:	460d      	mov	r5, r1
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK)
     52e:	2b05      	cmp	r3, #5
     530:	d810      	bhi.n	554 <CMU_ClockEnable+0x30>
     532:	e8df f003 	tbb	[pc, r3]
     536:	1916      	.short	0x1916
     538:	0c090603 	.word	0x0c090603
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     53c:	2300      	movs	r3, #0
  case CMU_HFPERCLKEN0_EN_REG:
    reg = &(CMU->HFPERCLKEN0);
    break;

  case CMU_HFCORECLKEN0_EN_REG:
    reg = &(CMU->HFCORECLKEN0);
     53e:	4c12      	ldr	r4, [pc, #72]	; (588 <CMU_ClockEnable+0x64>)
      /* Set DIV4 factor for peripheral clock */
      BITBAND_Peripheral(&(CMU->HFCORECLKDIV),
                         _CMU_HFCORECLKDIV_HFCORECLKLEDIV_SHIFT, 1);
    }
#endif
    break;
     540:	e014      	b.n	56c <CMU_ClockEnable+0x48>

  case CMU_LFACLKEN0_EN_REG:
    reg  = &(CMU->LFACLKEN0);
    sync = CMU_SYNCBUSY_LFACLKEN0;
     542:	2301      	movs	r3, #1
    }
#endif
    break;

  case CMU_LFACLKEN0_EN_REG:
    reg  = &(CMU->LFACLKEN0);
     544:	4c11      	ldr	r4, [pc, #68]	; (58c <CMU_ClockEnable+0x68>)
    sync = CMU_SYNCBUSY_LFACLKEN0;
    break;
     546:	e011      	b.n	56c <CMU_ClockEnable+0x48>

  case CMU_LFBCLKEN0_EN_REG:
    reg  = &(CMU->LFBCLKEN0);
    sync = CMU_SYNCBUSY_LFBCLKEN0;
     548:	2310      	movs	r3, #16
    reg  = &(CMU->LFACLKEN0);
    sync = CMU_SYNCBUSY_LFACLKEN0;
    break;

  case CMU_LFBCLKEN0_EN_REG:
    reg  = &(CMU->LFBCLKEN0);
     54a:	4c11      	ldr	r4, [pc, #68]	; (590 <CMU_ClockEnable+0x6c>)
    sync = CMU_SYNCBUSY_LFBCLKEN0;
    break;
     54c:	e00e      	b.n	56c <CMU_ClockEnable+0x48>
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     54e:	2300      	movs	r3, #0
    reg  = &(CMU->LFBCLKEN0);
    sync = CMU_SYNCBUSY_LFBCLKEN0;
    break;

  case CMU_PCNT_EN_REG:
    reg = &(CMU->PCNTCTRL);
     550:	4c10      	ldr	r4, [pc, #64]	; (594 <CMU_ClockEnable+0x70>)
    break;
     552:	e00b      	b.n	56c <CMU_ClockEnable+0x48>

  default: /* Cannot enable/disable clock point */
    EFM_ASSERT(0);
     554:	4810      	ldr	r0, [pc, #64]	; (598 <CMU_ClockEnable+0x74>)
     556:	f240 410d 	movw	r1, #1037	; 0x40d
    CMU_Sync(sync);
  }

  /* Set/clear bit as requested */
  BITBAND_Peripheral(reg, bit, (unsigned int)enable);
}
     55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  case CMU_PCNT_EN_REG:
    reg = &(CMU->PCNTCTRL);
    break;

  default: /* Cannot enable/disable clock point */
    EFM_ASSERT(0);
     55e:	f7ff bea7 	b.w	2b0 <assertEFM>
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     562:	2300      	movs	r3, #0

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK)
  {
  case CMU_HFPERCLKDIV_EN_REG:
    reg = &(CMU->HFPERCLKDIV);
     564:	4c0d      	ldr	r4, [pc, #52]	; (59c <CMU_ClockEnable+0x78>)
     566:	e001      	b.n	56c <CMU_ClockEnable+0x48>
    break;

  case CMU_HFPERCLKEN0_EN_REG:
    reg = &(CMU->HFPERCLKEN0);
     568:	4c0d      	ldr	r4, [pc, #52]	; (5a0 <CMU_ClockEnable+0x7c>)
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;
     56a:	2300      	movs	r3, #0
    EFM_ASSERT(0);
    return;
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
     56c:	f3c0 3604 	ubfx	r6, r0, #12, #5

  /* LF synchronization required? */
  if (sync)
     570:	b113      	cbz	r3, 578 <CMU_ClockEnable+0x54>
  {
    CMU_Sync(sync);
     572:	4618      	mov	r0, r3
     574:	f7ff fef2 	bl	35c <CMU_Sync>
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
     578:	f104 7404 	add.w	r4, r4, #34603008	; 0x2100000
     57c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
     580:	00b6      	lsls	r6, r6, #2
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
     582:	6035      	str	r5, [r6, #0]
     584:	bd70      	pop	{r4, r5, r6, pc}
     586:	bf00      	nop
     588:	400c8040 	.word	0x400c8040
     58c:	400c8058 	.word	0x400c8058
     590:	400c8060 	.word	0x400c8060
     594:	400c8078 	.word	0x400c8078
     598:	00006170 	.word	0x00006170
     59c:	400c8008 	.word	0x400c8008
     5a0:	400c8044 	.word	0x400c8044

000005a4 <CMU_ClockSelectGet>:
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
  uint32_t           selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
     5a4:	f000 000f 	and.w	r0, r0, #15

  switch (selReg)
     5a8:	3801      	subs	r0, #1
 * @return
 *   Reference clock used for clocking selected branch, #cmuSelect_Error if
 *   invalid @p clock provided.
 *****************************************************************************/
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
     5aa:	b508      	push	{r3, lr}
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
  uint32_t           selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;

  switch (selReg)
     5ac:	2803      	cmp	r0, #3
     5ae:	d82e      	bhi.n	60e <CMU_ClockSelectGet+0x6a>
     5b0:	e8df f000 	tbb	[pc, r0]
     5b4:	341e1402 	.word	0x341e1402
  {
  case CMU_HFCLKSEL_REG:
    switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
     5b8:	4b1a      	ldr	r3, [pc, #104]	; (624 <CMU_ClockSelectGet+0x80>)
     5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     5bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
     5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
     5c4:	d008      	beq.n	5d8 <CMU_ClockSelectGet+0x34>
     5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
     5ca:	d029      	beq.n	620 <CMU_ClockSelectGet+0x7c>
     5cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    case CMU_STATUS_HFXOSEL:
      ret = cmuSelect_HFXO;
      break;

    default:
      ret = cmuSelect_HFRCO;
     5d0:	bf0c      	ite	eq
     5d2:	2004      	moveq	r0, #4
     5d4:	2005      	movne	r0, #5
     5d6:	bd08      	pop	{r3, pc}
    case CMU_STATUS_LFXOSEL:
      ret = cmuSelect_LFXO;
      break;

    case CMU_STATUS_LFRCOSEL:
      ret = cmuSelect_LFRCO;
     5d8:	2003      	movs	r0, #3
     5da:	bd08      	pop	{r3, pc}
      break;
    }
    break;

  case CMU_LFACLKSEL_REG:
    switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK)
     5dc:	4b11      	ldr	r3, [pc, #68]	; (624 <CMU_ClockSelectGet+0x80>)
     5de:	6a98      	ldr	r0, [r3, #40]	; 0x28
     5e0:	f000 0003 	and.w	r0, r0, #3
     5e4:	2802      	cmp	r0, #2
     5e6:	d01c      	beq.n	622 <CMU_ClockSelectGet+0x7e>
     5e8:	2803      	cmp	r0, #3
     5ea:	d00e      	beq.n	60a <CMU_ClockSelectGet+0x66>
     5ec:	2801      	cmp	r0, #1
     5ee:	e008      	b.n	602 <CMU_ClockSelectGet+0x5e>
      break;
    }
    break;

  case CMU_LFBCLKSEL_REG:
    switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK)
     5f0:	4b0c      	ldr	r3, [pc, #48]	; (624 <CMU_ClockSelectGet+0x80>)
     5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     5f4:	f003 030c 	and.w	r3, r3, #12
     5f8:	2b08      	cmp	r3, #8
     5fa:	d011      	beq.n	620 <CMU_ClockSelectGet+0x7c>
     5fc:	2b0c      	cmp	r3, #12
     5fe:	d004      	beq.n	60a <CMU_ClockSelectGet+0x66>
     600:	2b04      	cmp	r3, #4
      {
        ret = cmuSelect_ULFRCO;
        break;
      }
#else
      ret = cmuSelect_Disabled;
     602:	bf0c      	ite	eq
     604:	2003      	moveq	r0, #3
     606:	2001      	movne	r0, #1
     608:	bd08      	pop	{r3, pc}
    case CMU_LFCLKSEL_LFB_LFXO:
      ret = cmuSelect_LFXO;
      break;

    case CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2:
      ret = cmuSelect_CORELEDIV2;
     60a:	2006      	movs	r0, #6
      break;
     60c:	bd08      	pop	{r3, pc}
    }
    break;
#endif

  default:
    EFM_ASSERT(0);
     60e:	4806      	ldr	r0, [pc, #24]	; (628 <CMU_ClockSelectGet+0x84>)
     610:	f240 5155 	movw	r1, #1365	; 0x555
     614:	f7ff fe4c 	bl	2b0 <assertEFM>
    ret = cmuSelect_Error;
     618:	2000      	movs	r0, #0
    break;
     61a:	bd08      	pop	{r3, pc}
      ret = cmuSelect_HFCLK;
      break;
    }
#endif
#if defined(_EFM32_GECKO_FAMILY)
    ret = cmuSelect_AUXHFRCO;
     61c:	2007      	movs	r0, #7
     61e:	bd08      	pop	{r3, pc}
    case CMU_LFCLKSEL_LFB_LFRCO:
      ret = cmuSelect_LFRCO;
      break;

    case CMU_LFCLKSEL_LFB_LFXO:
      ret = cmuSelect_LFXO;
     620:	2002      	movs	r0, #2
    ret = cmuSelect_Error;
    break;
  }

  return ret;
}
     622:	bd08      	pop	{r3, pc}
     624:	400c8000 	.word	0x400c8000
     628:	00006170 	.word	0x00006170

0000062c <CMU_ClockFreqGet>:
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     62c:	f400 1078 	and.w	r0, r0, #4063232	; 0x3e0000
     630:	f5b0 2f20 	cmp.w	r0, #655360	; 0xa0000
 *
 * @return
 *   The current frequency in Hz.
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
     634:	b508      	push	{r3, lr}
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     636:	d03c      	beq.n	6b2 <CMU_ClockFreqGet+0x86>
     638:	d819      	bhi.n	66e <CMU_ClockFreqGet+0x42>
     63a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
     63e:	d02f      	beq.n	6a0 <CMU_ClockFreqGet+0x74>
     640:	d809      	bhi.n	656 <CMU_ClockFreqGet+0x2a>
     642:	2800      	cmp	r0, #0
     644:	d052      	beq.n	6ec <CMU_ClockFreqGet+0xc0>
     646:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
     64a:	d157      	bne.n	6fc <CMU_ClockFreqGet+0xd0>
    defined(PRS_PRESENT) || \
    defined(VCMP_PRESENT)|| \
    defined(GPIO_PRESENT)
    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = SystemHFClockGet();
     64c:	f7ff fdbc 	bl	1c8 <SystemHFClockGet>
#if defined( _CMU_CTRL_HFCLKDIV_MASK )
      /* Leopard/Giant Gecko has an additional divider */
      ret = ret / (1 + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK) >>
                        _CMU_CTRL_HFCLKDIV_SHIFT));
#endif
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK) >>
     650:	4b2f      	ldr	r3, [pc, #188]	; (710 <CMU_ClockFreqGet+0xe4>)
     652:	689b      	ldr	r3, [r3, #8]
     654:	e02a      	b.n	6ac <CMU_ClockFreqGet+0x80>
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     656:	f5b0 2fc0 	cmp.w	r0, #393216	; 0x60000
     65a:	d025      	beq.n	6a8 <CMU_ClockFreqGet+0x7c>
     65c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
     660:	d14c      	bne.n	6fc <CMU_ClockFreqGet+0xd0>
      ret = CMU_LFClkGet(CMU_LFA);
    } break;
#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFA);
     662:	2000      	movs	r0, #0
     664:	f7ff fe84 	bl	370 <CMU_LFClkGet>
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >>
     668:	4b29      	ldr	r3, [pc, #164]	; (710 <CMU_ClockFreqGet+0xe4>)
     66a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     66c:	e01e      	b.n	6ac <CMU_ClockFreqGet+0x80>
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     66e:	f5b0 1fb0 	cmp.w	r0, #1441792	; 0x160000
     672:	d02c      	beq.n	6ce <CMU_ClockFreqGet+0xa2>
     674:	d80d      	bhi.n	692 <CMU_ClockFreqGet+0x66>
     676:	f5b0 1f90 	cmp.w	r0, #1179648	; 0x120000
     67a:	d023      	beq.n	6c4 <CMU_ClockFreqGet+0x98>
     67c:	f5b0 1fa0 	cmp.w	r0, #1310720	; 0x140000
     680:	d13c      	bne.n	6fc <CMU_ClockFreqGet+0xd0>
      ret = CMU_LFClkGet(CMU_LFB);
    } break;
#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFB);
     682:	2001      	movs	r0, #1
     684:	f7ff fe74 	bl	370 <CMU_LFClkGet>
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK) >>
     688:	4b21      	ldr	r3, [pc, #132]	; (710 <CMU_ClockFreqGet+0xe4>)
     68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     68c:	f003 0303 	and.w	r3, r3, #3
     690:	e016      	b.n	6c0 <CMU_ClockFreqGet+0x94>
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch(clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS))
     692:	f5b0 1fc0 	cmp.w	r0, #1572864	; 0x180000
     696:	d022      	beq.n	6de <CMU_ClockFreqGet+0xb2>
     698:	f5b0 1fd0 	cmp.w	r0, #1703936	; 0x1a0000
     69c:	d035      	beq.n	70a <CMU_ClockFreqGet+0xde>
     69e:	e02d      	b.n	6fc <CMU_ClockFreqGet+0xd0>
      EFM_ASSERT(0);
      ret = 0;
    } break;
  }
  return ret;
}
     6a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    defined(DMA_PRESENT) || \
    defined(EBI_PRESENT) || \
    defined(USB_PRESENT)
    case (CMU_HFCORE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemCoreClockGet();
     6a4:	f7ff bdea 	b.w	27c <SystemCoreClockGet>
    } break;
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = CMU_LFClkGet(CMU_LFA);
     6a8:	2000      	movs	r0, #0
     6aa:	e00c      	b.n	6c6 <CMU_ClockFreqGet+0x9a>
    } break;
#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK) >>
     6ac:	f003 030f 	and.w	r3, r3, #15
     6b0:	e006      	b.n	6c0 <CMU_ClockFreqGet+0x94>
    } break;
#endif
#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFA);
     6b2:	2000      	movs	r0, #0
     6b4:	f7ff fe5c 	bl	370 <CMU_LFClkGet>
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK) >>
     6b8:	4b15      	ldr	r3, [pc, #84]	; (710 <CMU_ClockFreqGet+0xe4>)
     6ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     6bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
     6c0:	40d8      	lsrs	r0, r3
              _CMU_LFAPRESC0_LETIMER0_SHIFT;
    } break;
     6c2:	bd08      	pop	{r3, pc}
              _CMU_LFAPRESC0_LESENSE_SHIFT;
    } break;
#endif
    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = CMU_LFClkGet(CMU_LFB);
     6c4:	2001      	movs	r0, #1
      EFM_ASSERT(0);
      ret = 0;
    } break;
  }
  return ret;
}
     6c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
              _CMU_LFAPRESC0_LESENSE_SHIFT;
    } break;
#endif
    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = CMU_LFClkGet(CMU_LFB);
     6ca:	f7ff be51 	b.w	370 <CMU_LFClkGet>
    } break;
#endif
#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret   = CMU_LFClkGet(CMU_LFB);
     6ce:	2001      	movs	r0, #1
     6d0:	f7ff fe4e 	bl	370 <CMU_LFClkGet>
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK) >>
     6d4:	4b0e      	ldr	r3, [pc, #56]	; (710 <CMU_ClockFreqGet+0xe4>)
     6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     6d8:	f3c3 1301 	ubfx	r3, r3, #4, #2
     6dc:	e7f0      	b.n	6c0 <CMU_ClockFreqGet+0x94>
{
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_DBG);
     6de:	480d      	ldr	r0, [pc, #52]	; (714 <CMU_ClockFreqGet+0xe8>)
     6e0:	f7ff ff60 	bl	5a4 <CMU_ClockSelectGet>

  switch(clk)
     6e4:	2807      	cmp	r0, #7
     6e6:	d010      	beq.n	70a <CMU_ClockFreqGet+0xde>
     6e8:	2808      	cmp	r0, #8
     6ea:	d103      	bne.n	6f4 <CMU_ClockFreqGet+0xc8>
      EFM_ASSERT(0);
      ret = 0;
    } break;
  }
  return ret;
}
     6ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  clk = CMU_ClockSelectGet(cmuClock_DBG);

  switch(clk)
  {
  case cmuSelect_HFCLK:
    ret = SystemHFClockGet();
     6f0:	f7ff bd6a 	b.w	1c8 <SystemHFClockGet>
  case cmuSelect_AUXHFRCO:
    ret = CMU_AUXClkGet();
    break;

  default:
    EFM_ASSERT(0);
     6f4:	4808      	ldr	r0, [pc, #32]	; (718 <CMU_ClockFreqGet+0xec>)
     6f6:	f44f 71b0 	mov.w	r1, #352	; 0x160
     6fa:	e002      	b.n	702 <CMU_ClockFreqGet+0xd6>
      ret = CMU_USBCClkGet();
    } break;
#endif
    default:
    {
      EFM_ASSERT(0);
     6fc:	4806      	ldr	r0, [pc, #24]	; (718 <CMU_ClockFreqGet+0xec>)
     6fe:	f240 41b7 	movw	r1, #1207	; 0x4b7
     702:	f7ff fdd5 	bl	2b0 <assertEFM>
      ret = 0;
     706:	2000      	movs	r0, #0
    } break;
     708:	bd08      	pop	{r3, pc}
      ret  = CMU_DBGClkGet();
    } break;

    case (CMU_AUX_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret  = CMU_AUXClkGet();
     70a:	4804      	ldr	r0, [pc, #16]	; (71c <CMU_ClockFreqGet+0xf0>)
      EFM_ASSERT(0);
      ret = 0;
    } break;
  }
  return ret;
}
     70c:	bd08      	pop	{r3, pc}
     70e:	bf00      	nop
     710:	400c8000 	.word	0x400c8000
     714:	00180004 	.word	0x00180004
     718:	00006170 	.word	0x00006170
     71c:	00d59f80 	.word	0x00d59f80

00000720 <CMU_OscillatorEnable>:
 *   @li true - wait for oscillator start-up time to timeout before returning.
 *   @li false - do not wait for oscillator start-up time to timeout before
 *     returning.
 ******************************************************************************/
void CMU_OscillatorEnable(CMU_Osc_TypeDef osc, bool enable, bool wait)
{
     720:	b510      	push	{r4, lr}
  uint32_t status;
  uint32_t enBit;
  uint32_t disBit;

  switch (osc)
     722:	2804      	cmp	r0, #4
     724:	d80f      	bhi.n	746 <CMU_OscillatorEnable+0x26>
     726:	e8df f000 	tbb	[pc, r0]
     72a:	0609      	.short	0x0609
     72c:	1518      	.short	0x1518
     72e:	03          	.byte	0x03
     72f:	00          	.byte	0x00
    disBit = CMU_OSCENCMD_HFXODIS;
    status = CMU_STATUS_HFXORDY;
    break;

  case cmuOsc_AUXHFRCO:
    enBit  = CMU_OSCENCMD_AUXHFRCOEN;
     730:	2010      	movs	r0, #16
    disBit = CMU_OSCENCMD_AUXHFRCODIS;
    status = CMU_STATUS_AUXHFRCORDY;
     732:	2320      	movs	r3, #32
    break;
     734:	e013      	b.n	75e <CMU_OscillatorEnable+0x3e>

  case cmuOsc_LFRCO:
    enBit  = CMU_OSCENCMD_LFRCOEN;
     736:	2040      	movs	r0, #64	; 0x40
    disBit = CMU_OSCENCMD_LFRCODIS;
    status = CMU_STATUS_LFRCORDY;
     738:	2380      	movs	r3, #128	; 0x80
    break;
     73a:	e010      	b.n	75e <CMU_OscillatorEnable+0x3e>

  case cmuOsc_LFXO:
    enBit  = CMU_OSCENCMD_LFXOEN;
     73c:	f44f 7080 	mov.w	r0, #256	; 0x100
    disBit = CMU_OSCENCMD_LFXODIS;
    status = CMU_STATUS_LFXORDY;
     740:	f44f 7300 	mov.w	r3, #512	; 0x200
    break;
     744:	e00b      	b.n	75e <CMU_OscillatorEnable+0x3e>
    return;
#endif

  default:
    /* Undefined clock source */
    EFM_ASSERT(0);
     746:	480c      	ldr	r0, [pc, #48]	; (778 <CMU_OscillatorEnable+0x58>)
     748:	f240 71f6 	movw	r1, #2038	; 0x7f6
    CMU->OSCENCMD = disBit;
  }

  /* Keep EMU module informed */
  EMU_UpdateOscConfig();
}
     74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return;
#endif

  default:
    /* Undefined clock source */
    EFM_ASSERT(0);
     750:	f7ff bdae 	b.w	2b0 <assertEFM>
  uint32_t disBit;

  switch (osc)
  {
  case cmuOsc_HFRCO:
    enBit  = CMU_OSCENCMD_HFRCOEN;
     754:	2001      	movs	r0, #1
    disBit = CMU_OSCENCMD_HFRCODIS;
    status = CMU_STATUS_HFRCORDY;
     756:	2302      	movs	r3, #2
     758:	e001      	b.n	75e <CMU_OscillatorEnable+0x3e>
    break;

  case cmuOsc_HFXO:
    enBit  = CMU_OSCENCMD_HFXOEN;
     75a:	2004      	movs	r0, #4
    disBit = CMU_OSCENCMD_HFXODIS;
    status = CMU_STATUS_HFXORDY;
     75c:	2308      	movs	r3, #8
     75e:	4c07      	ldr	r4, [pc, #28]	; (77c <CMU_OscillatorEnable+0x5c>)
    /* Undefined clock source */
    EFM_ASSERT(0);
    return;
  }

  if (enable)
     760:	b129      	cbz	r1, 76e <CMU_OscillatorEnable+0x4e>
  {
    CMU->OSCENCMD = enBit;
     762:	6220      	str	r0, [r4, #32]

    /* Wait for clock to stabilize if requested */
    if (wait)
     764:	b122      	cbz	r2, 770 <CMU_OscillatorEnable+0x50>
    {
      while (!(CMU->STATUS & status))
     766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     768:	4213      	tst	r3, r2
     76a:	d0fc      	beq.n	766 <CMU_OscillatorEnable+0x46>
     76c:	e000      	b.n	770 <CMU_OscillatorEnable+0x50>
        ;
    }
  }
  else
  {
    CMU->OSCENCMD = disBit;
     76e:	6223      	str	r3, [r4, #32]
  }

  /* Keep EMU module informed */
  EMU_UpdateOscConfig();
}
     770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  {
    CMU->OSCENCMD = disBit;
  }

  /* Keep EMU module informed */
  EMU_UpdateOscConfig();
     774:	f000 b9d8 	b.w	b28 <EMU_UpdateOscConfig>
     778:	00006170 	.word	0x00006170
     77c:	400c8000 	.word	0x400c8000

00000780 <CMU_ClockSelectSet>:
 *   @li #cmuSelect_AUXHFRC
 *   @li #cmuSelect_HFCLK
 *   @li #cmuSelect_ULFRCO
 *****************************************************************************/
void CMU_ClockSelectSet(CMU_Clock_TypeDef clock, CMU_Select_TypeDef ref)
{
     780:	b510      	push	{r4, lr}
#if !defined(_EFM32_GECKO_FAMILY)
  uint32_t        lfExtended = 0;
#endif
  uint32_t        tmp;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
     782:	f000 040f 	and.w	r4, r0, #15

  switch (selReg)
     786:	2c01      	cmp	r4, #1
     788:	d003      	beq.n	792 <CMU_ClockSelectSet+0x12>
     78a:	d355      	bcc.n	838 <CMU_ClockSelectSet+0xb8>
     78c:	2c03      	cmp	r4, #3
     78e:	d926      	bls.n	7de <CMU_ClockSelectSet+0x5e>
     790:	e052      	b.n	838 <CMU_ClockSelectSet+0xb8>
  {
  case CMU_HFCLKSEL_REG:
    switch (ref)
     792:	3902      	subs	r1, #2
     794:	2903      	cmp	r1, #3
     796:	d809      	bhi.n	7ac <CMU_ClockSelectSet+0x2c>
     798:	e8df f001 	tbb	[pc, r1]
     79c:	05020f0c 	.word	0x05020f0c
      osc    = cmuOsc_LFRCO;
      break;

    case cmuSelect_HFXO:
      select = CMU_CMD_HFCLKSEL_HFXO;
      osc    = cmuOsc_HFXO;
     7a0:	2002      	movs	r0, #2
      select = CMU_CMD_HFCLKSEL_LFRCO;
      osc    = cmuOsc_LFRCO;
      break;

    case cmuSelect_HFXO:
      select = CMU_CMD_HFCLKSEL_HFXO;
     7a2:	4604      	mov	r4, r0
        /* use another oscillator frequency */
        CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK) |
          CMU_CTRL_HFXOBUFCUR_BOOSTUPTO32MHZ;
      }
#endif
      break;
     7a4:	e00b      	b.n	7be <CMU_ClockSelectSet+0x3e>

    case cmuSelect_HFRCO:
      select = CMU_CMD_HFCLKSEL_HFRCO;
      osc    = cmuOsc_HFRCO;
     7a6:	2003      	movs	r0, #3
      }
#endif
      break;

    case cmuSelect_HFRCO:
      select = CMU_CMD_HFCLKSEL_HFRCO;
     7a8:	2401      	movs	r4, #1
      osc    = cmuOsc_HFRCO;
      break;
     7aa:	e008      	b.n	7be <CMU_ClockSelectSet+0x3e>
      EFM_ASSERT(0);
      break;
#endif

    default:
      EFM_ASSERT(0);
     7ac:	4826      	ldr	r0, [pc, #152]	; (848 <CMU_ClockSelectSet+0xc8>)
     7ae:	f240 51c6 	movw	r1, #1478	; 0x5c6
     7b2:	e044      	b.n	83e <CMU_ClockSelectSet+0xbe>
  case CMU_HFCLKSEL_REG:
    switch (ref)
    {
    case cmuSelect_LFXO:
      select = CMU_CMD_HFCLKSEL_LFXO;
      osc    = cmuOsc_LFXO;
     7b4:	2000      	movs	r0, #0
  {
  case CMU_HFCLKSEL_REG:
    switch (ref)
    {
    case cmuSelect_LFXO:
      select = CMU_CMD_HFCLKSEL_LFXO;
     7b6:	2404      	movs	r4, #4
     7b8:	e001      	b.n	7be <CMU_ClockSelectSet+0x3e>
      osc    = cmuOsc_LFXO;
      break;

    case cmuSelect_LFRCO:
      select = CMU_CMD_HFCLKSEL_LFRCO;
      osc    = cmuOsc_LFRCO;
     7ba:	2001      	movs	r0, #1
      select = CMU_CMD_HFCLKSEL_LFXO;
      osc    = cmuOsc_LFXO;
      break;

    case cmuSelect_LFRCO:
      select = CMU_CMD_HFCLKSEL_LFRCO;
     7bc:	2403      	movs	r4, #3
      EFM_ASSERT(0);
      return;
    }

    /* Ensure selected oscillator is enabled, waiting for it to stabilize */
    CMU_OscillatorEnable(osc, true, true);
     7be:	2101      	movs	r1, #1
     7c0:	460a      	mov	r2, r1
     7c2:	f7ff ffad 	bl	720 <CMU_OscillatorEnable>

    /* Configure worst case wait states for flash access before selecting */
    CMU_FlashWaitStateMax();
     7c6:	f7ff fd75 	bl	2b4 <CMU_FlashWaitStateMax>

    /* Switch to selected oscillator */
    CMU->CMD = select;
     7ca:	4b20      	ldr	r3, [pc, #128]	; (84c <CMU_ClockSelectSet+0xcc>)
     7cc:	625c      	str	r4, [r3, #36]	; 0x24

    /* Keep EMU module informed */
    EMU_UpdateOscConfig();
     7ce:	f000 f9ab 	bl	b28 <EMU_UpdateOscConfig>

    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();
     7d2:	f7ff fd53 	bl	27c <SystemCoreClockGet>

  default:
    EFM_ASSERT(0);
    break;
  }
}
     7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    /* Update CMSIS core clock variable */
    /* (The function will update the global variable) */
    freq = SystemCoreClockGet();

    /* Optimize flash access wait state setting for currently selected core clk */
    CMU_FlashWaitStateControl(freq);
     7da:	f7ff bd83 	b.w	2e4 <CMU_FlashWaitStateControl>
    break;

  case CMU_LFACLKSEL_REG:
  case CMU_LFBCLKSEL_REG:

    switch (ref)
     7de:	3901      	subs	r1, #1
     7e0:	2905      	cmp	r1, #5
     7e2:	d817      	bhi.n	814 <CMU_ClockSelectSet+0x94>
     7e4:	e8df f001 	tbb	[pc, r1]
     7e8:	160a031a 	.word	0x160a031a
     7ec:	1116      	.short	0x1116
      tmp = _CMU_LFCLKSEL_LFA_DISABLED;
      break;

    case cmuSelect_LFXO:
      /* Ensure selected oscillator is enabled, waiting for it to stabilize */
      CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
     7ee:	2101      	movs	r1, #1
     7f0:	2000      	movs	r0, #0
     7f2:	460a      	mov	r2, r1
     7f4:	f7ff ff94 	bl	720 <CMU_OscillatorEnable>
      tmp = _CMU_LFCLKSEL_LFA_LFXO;
     7f8:	2302      	movs	r3, #2
      break;
     7fa:	e010      	b.n	81e <CMU_ClockSelectSet+0x9e>

    case cmuSelect_LFRCO:
      /* Ensure selected oscillator is enabled, waiting for it to stabilize */
      CMU_OscillatorEnable(cmuOsc_LFRCO, true, true);
     7fc:	2001      	movs	r0, #1
     7fe:	4601      	mov	r1, r0
     800:	4602      	mov	r2, r0
     802:	f7ff ff8d 	bl	720 <CMU_OscillatorEnable>
      tmp = _CMU_LFCLKSEL_LFA_LFRCO;
     806:	2301      	movs	r3, #1
      break;
     808:	e009      	b.n	81e <CMU_ClockSelectSet+0x9e>
     80a:	4b11      	ldr	r3, [pc, #68]	; (850 <CMU_ClockSelectSet+0xd0>)
     80c:	2201      	movs	r2, #1
     80e:	601a      	str	r2, [r3, #0]

    case cmuSelect_CORELEDIV2:
      /* Ensure HFCORE to LE clocking is enabled */
      BITBAND_Peripheral(&(CMU->HFCORECLKEN0), _CMU_HFCORECLKEN0_LE_SHIFT, 1);
      tmp = _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2;
     810:	2303      	movs	r3, #3
     812:	e004      	b.n	81e <CMU_ClockSelectSet+0x9e>
      break;
#endif

    default:
      /* Illegal clock source for LFA/LFB selected */
      EFM_ASSERT(0);
     814:	480c      	ldr	r0, [pc, #48]	; (848 <CMU_ClockSelectSet+0xc8>)
     816:	f44f 61c2 	mov.w	r1, #1552	; 0x610
     81a:	e010      	b.n	83e <CMU_ClockSelectSet+0xbe>
  case CMU_LFBCLKSEL_REG:

    switch (ref)
    {
    case cmuSelect_Disabled:
      tmp = _CMU_LFCLKSEL_LFA_DISABLED;
     81c:	2300      	movs	r3, #0
     81e:	4a0b      	ldr	r2, [pc, #44]	; (84c <CMU_ClockSelectSet+0xcc>)
      EFM_ASSERT(0);
      return;
    }


    if (selReg == CMU_LFACLKSEL_REG)
     820:	2c02      	cmp	r4, #2
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFA_MASK | _CMU_LFCLKSEL_LFAE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFA_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFAE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFA_MASK) |
     822:	6a91      	ldr	r1, [r2, #40]	; 0x28
     824:	bf0b      	itete	eq
     826:	f021 0103 	biceq.w	r1, r1, #3
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFB_MASK | _CMU_LFCLKSEL_LFBE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFBE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFB_MASK) |
     82a:	f021 010c 	bicne.w	r1, r1, #12
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFA_MASK | _CMU_LFCLKSEL_LFAE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFA_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFAE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFA_MASK) |
     82e:	430b      	orreq	r3, r1
    {
      #if !defined(_EFM32_GECKO_FAMILY)
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~(_CMU_LFCLKSEL_LFB_MASK | _CMU_LFCLKSEL_LFBE_MASK) ) |
                    (tmp << _CMU_LFCLKSEL_LFB_SHIFT) | (lfExtended << _CMU_LFCLKSEL_LFBE_SHIFT);
      #else
      CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFB_MASK) |
     830:	ea41 0383 	orrne.w	r3, r1, r3, lsl #2
     834:	6293      	str	r3, [r2, #40]	; 0x28
     836:	bd10      	pop	{r4, pc}
    /* Wait until clock has been activated */
    break;
#endif

  default:
    EFM_ASSERT(0);
     838:	4803      	ldr	r0, [pc, #12]	; (848 <CMU_ClockSelectSet+0xc8>)
     83a:	f240 6172 	movw	r1, #1650	; 0x672
    break;
  }
}
     83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    /* Wait until clock has been activated */
    break;
#endif

  default:
    EFM_ASSERT(0);
     842:	f7ff bd35 	b.w	2b0 <assertEFM>
     846:	bf00      	nop
     848:	00006170 	.word	0x00006170
     84c:	400c8000 	.word	0x400c8000
     850:	43900808 	.word	0x43900808

00000854 <DMA_Prepare>:
                        bool primary,
                        bool useBurst,
                        void *dst,
                        void *src,
                        unsigned int nMinus1)
{
     854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
     858:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8dc <DMA_Prepare+0x88>
     85c:	0104      	lsls	r4, r0, #4
     85e:	f8d8 c008 	ldr.w	ip, [r8, #8]
                        bool primary,
                        bool useBurst,
                        void *dst,
                        void *src,
                        unsigned int nMinus1)
{
     862:	9d06      	ldr	r5, [sp, #24]
     864:	9f07      	ldr	r7, [sp, #28]
     866:	9e08      	ldr	r6, [sp, #32]
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
     868:	44a4      	add	ip, r4

  /* Find descriptor to configure */
  if (primary)
     86a:	b91a      	cbnz	r2, 874 <DMA_Prepare+0x20>
  {
    descr = primDescr;
  }
  else
  {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
     86c:	f8d8 800c 	ldr.w	r8, [r8, #12]
     870:	4444      	add	r4, r8
     872:	e000      	b.n	876 <DMA_Prepare+0x22>
  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;

  /* Find descriptor to configure */
  if (primary)
  {
    descr = primDescr;
     874:	4664      	mov	r4, ip
  }

  /* If callback defined, update info on whether callback is issued */
  /* for primary or alternate descriptor. Mainly needed for ping-pong */
  /* cycles. */
  cb = (DMA_CB_TypeDef *)(primDescr->USER);
     876:	f8dc c00c 	ldr.w	ip, [ip, #12]
  if (cb)
     87a:	f1bc 0f00 	cmp.w	ip, #0
     87e:	d001      	beq.n	884 <DMA_Prepare+0x30>
  {
    cb->primary = (uint8_t)primary;
     880:	f88c 2008 	strb.w	r2, [ip, #8]
  }

  if (src)
     884:	b157      	cbz	r7, 89c <DMA_Prepare+0x48>
  {
    inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
     886:	f8d4 c008 	ldr.w	ip, [r4, #8]
     88a:	f3cc 6c81 	ubfx	ip, ip, #26, #2
    if (inc == _DMA_CTRL_SRC_INC_NONE)
     88e:	f1bc 0f03 	cmp.w	ip, #3
    {
      descr->SRCEND = src;
    }
    else
    {
      descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
     892:	bf1c      	itt	ne
     894:	fa06 fc0c 	lslne.w	ip, r6, ip
     898:	4467      	addne	r7, ip
     89a:	6027      	str	r7, [r4, #0]
    }
  }

  if (dst)
     89c:	b13d      	cbz	r5, 8ae <DMA_Prepare+0x5a>
  {
    inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
     89e:	68a7      	ldr	r7, [r4, #8]
     8a0:	0fbf      	lsrs	r7, r7, #30
    if (inc == _DMA_CTRL_DST_INC_NONE)
     8a2:	2f03      	cmp	r7, #3
    {
      descr->DSTEND = dst;
    }
    else
    {
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
     8a4:	bf1c      	itt	ne
     8a6:	fa06 f707 	lslne.w	r7, r6, r7
     8aa:	19ed      	addne	r5, r5, r7
     8ac:	6065      	str	r5, [r4, #4]
    }
  }

  chBit = 1 << channel;
     8ae:	2501      	movs	r5, #1
     8b0:	fa05 f000 	lsl.w	r0, r5, r0
     8b4:	4d09      	ldr	r5, [pc, #36]	; (8dc <DMA_Prepare+0x88>)
  if (useBurst)
     8b6:	b10b      	cbz	r3, 8bc <DMA_Prepare+0x68>
  {
    DMA->CHUSEBURSTS = chBit;
     8b8:	61a8      	str	r0, [r5, #24]
     8ba:	e000      	b.n	8be <DMA_Prepare+0x6a>
  }
  else
  {
    DMA->CHUSEBURSTC = chBit;
     8bc:	61e8      	str	r0, [r5, #28]
  }

  if (primary)
     8be:	b10a      	cbz	r2, 8c4 <DMA_Prepare+0x70>
  {
    DMA->CHALTC = chBit;
     8c0:	6368      	str	r0, [r5, #52]	; 0x34
     8c2:	e000      	b.n	8c6 <DMA_Prepare+0x72>
  }
  else
  {
    DMA->CHALTS = chBit;
     8c4:	6328      	str	r0, [r5, #48]	; 0x30
  }

  /* Set cycle control */
  tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
     8c6:	68a3      	ldr	r3, [r4, #8]
     8c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
     8cc:	f023 0337 	bic.w	r3, r3, #55	; 0x37
  tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
     8d0:	430b      	orrs	r3, r1
  tmp        |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
     8d2:	ea43 1606 	orr.w	r6, r3, r6, lsl #4
  descr->CTRL = tmp;
     8d6:	60a6      	str	r6, [r4, #8]
     8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8dc:	400c2000 	.word	0x400c2000

000008e0 <DMA_IRQHandler>:
  uint32_t               prio;
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
     8e0:	4b1a      	ldr	r3, [pc, #104]	; (94c <DMA_IRQHandler+0x6c>)
     8e2:	4a1b      	ldr	r2, [pc, #108]	; (950 <DMA_IRQHandler+0x70>)
  pending &= DMA->IEN;
     8e4:	f241 010c 	movw	r1, #4108	; 0x100c
  uint32_t               prio;
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
     8e8:	6812      	ldr	r2, [r2, #0]
 *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 *   with a \#define statement or with the compiler option -D.
 *
 ******************************************************************************/
void DMA_IRQHandler(void)
{
     8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
  pending &= DMA->IEN;
     8ee:	585f      	ldr	r7, [r3, r1]

  /* Check for bus error */
  if (pending & DMA_IF_ERR)
     8f0:	4017      	ands	r7, r2
     8f2:	d500      	bpl.n	8f6 <DMA_IRQHandler+0x16>
     8f4:	e7fe      	b.n	8f4 <DMA_IRQHandler+0x14>
      ;
  }

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
     8f6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
  pendingPrio = pending & prio;
     8fa:	2602      	movs	r6, #2
     8fc:	ea07 0508 	and.w	r5, r7, r8
 *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 *   with a \#define statement or with the compiler option -D.
 *
 ******************************************************************************/
void DMA_IRQHandler(void)
{
     900:	2400      	movs	r4, #0
  for (i = 0; i < 2; i++)
  {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio)
     902:	b1ed      	cbz	r5, 940 <DMA_IRQHandler+0x60>
    {
      if (pendingPrio & 1)
     904:	07eb      	lsls	r3, r5, #31
     906:	d518      	bpl.n	93a <DMA_IRQHandler+0x5a>
      {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
        uint32_t chmask = 1 << channel;
     908:	2101      	movs	r1, #1
     90a:	40a1      	lsls	r1, r4
    /* honouring priority within group. */
    while (pendingPrio)
    {
      if (pendingPrio & 1)
      {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     90c:	4b0f      	ldr	r3, [pc, #60]	; (94c <DMA_IRQHandler+0x6c>)
        uint32_t chmask = 1 << channel;

        /* Clear pending interrupt prior to invoking callback, in case it */
        /* sets up another DMA cycle. */
        DMA->IFC = chmask;
     90e:	4a11      	ldr	r2, [pc, #68]	; (954 <DMA_IRQHandler+0x74>)
    /* honouring priority within group. */
    while (pendingPrio)
    {
      if (pendingPrio & 1)
      {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     910:	689b      	ldr	r3, [r3, #8]
        uint32_t chmask = 1 << channel;

        /* Clear pending interrupt prior to invoking callback, in case it */
        /* sets up another DMA cycle. */
        DMA->IFC = chmask;
     912:	6011      	str	r1, [r2, #0]

        /* Normally, no point in enabling interrupt without callback, but */
        /* check if callback is defined anyway. Callback info is always */
        /* located in primary descriptor. */
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
     914:	eb03 1304 	add.w	r3, r3, r4, lsl #4
     918:	68db      	ldr	r3, [r3, #12]
        if (cb)
     91a:	b173      	cbz	r3, 93a <DMA_IRQHandler+0x5a>
        {
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
     91c:	7a19      	ldrb	r1, [r3, #8]
          cb->primary ^= 1;
          if (cb->cbFunc)
     91e:	f8d3 c000 	ldr.w	ip, [r3]
        if (cb)
        {
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
          cb->primary ^= 1;
     922:	f081 0201 	eor.w	r2, r1, #1
     926:	721a      	strb	r2, [r3, #8]
          if (cb->cbFunc)
     928:	f1bc 0f00 	cmp.w	ip, #0
     92c:	d005      	beq.n	93a <DMA_IRQHandler+0x5a>
          {
            cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
     92e:	3100      	adds	r1, #0
     930:	4620      	mov	r0, r4
     932:	bf18      	it	ne
     934:	2101      	movne	r1, #1
     936:	685a      	ldr	r2, [r3, #4]
     938:	47e0      	blx	ip
          }
        }
      }

      pendingPrio >>= 1;
     93a:	086d      	lsrs	r5, r5, #1
      channel++;
     93c:	3401      	adds	r4, #1
     93e:	e7e0      	b.n	902 <DMA_IRQHandler+0x22>

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++)
     940:	3e01      	subs	r6, #1
      pendingPrio >>= 1;
      channel++;
    }

    /* On second iteration, process default priority channels */
    pendingPrio = pending & ~prio;
     942:	ea27 0508 	bic.w	r5, r7, r8

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++)
     946:	d1db      	bne.n	900 <DMA_IRQHandler+0x20>
     948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     94c:	400c2000 	.word	0x400c2000
     950:	400c3000 	.word	0x400c3000
     954:	400c3008 	.word	0x400c3008

00000958 <DMA_ActivateBasic>:
                       bool primary,
                       bool useBurst,
                       void *dst,
                       void *src,
                       unsigned int nMinus1)
{
     958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     95c:	2807      	cmp	r0, #7
                       bool primary,
                       bool useBurst,
                       void *dst,
                       void *src,
                       unsigned int nMinus1)
{
     95e:	4604      	mov	r4, r0
     960:	460f      	mov	r7, r1
     962:	4616      	mov	r6, r2
     964:	4698      	mov	r8, r3
     966:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     968:	d904      	bls.n	974 <DMA_ActivateBasic+0x1c>
     96a:	4810      	ldr	r0, [pc, #64]	; (9ac <DMA_ActivateBasic+0x54>)
     96c:	f240 11cd 	movw	r1, #461	; 0x1cd
     970:	f7ff fc9e 	bl	2b0 <assertEFM>
  EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
     974:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
     978:	d304      	bcc.n	984 <DMA_ActivateBasic+0x2c>
     97a:	480c      	ldr	r0, [pc, #48]	; (9ac <DMA_ActivateBasic+0x54>)
     97c:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
     980:	f7ff fc96 	bl	2b0 <assertEFM>

  DMA_Prepare(channel,
     984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     986:	4620      	mov	r0, r4
     988:	9301      	str	r3, [sp, #4]
     98a:	f8cd 8000 	str.w	r8, [sp]
     98e:	4633      	mov	r3, r6
     990:	9502      	str	r5, [sp, #8]
     992:	2101      	movs	r1, #1
     994:	463a      	mov	r2, r7
     996:	f7ff ff5d 	bl	854 <DMA_Prepare>
              dst,
              src,
              nMinus1);

  /* Enable channel, request signal is provided by peripheral device */
  DMA->CHENS = 1 << channel;
     99a:	2301      	movs	r3, #1
     99c:	fa03 f404 	lsl.w	r4, r3, r4
     9a0:	4b03      	ldr	r3, [pc, #12]	; (9b0 <DMA_ActivateBasic+0x58>)
     9a2:	629c      	str	r4, [r3, #40]	; 0x28
}
     9a4:	b004      	add	sp, #16
     9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9aa:	bf00      	nop
     9ac:	00006186 	.word	0x00006186
     9b0:	400c2000 	.word	0x400c2000

000009b4 <DMA_CfgChannel>:
 ******************************************************************************/
void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
{
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     9b4:	2807      	cmp	r0, #7
 *
 * @param[in] cfg
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
{
     9b6:	b538      	push	{r3, r4, r5, lr}
     9b8:	4604      	mov	r4, r0
     9ba:	460d      	mov	r5, r1
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     9bc:	d904      	bls.n	9c8 <DMA_CfgChannel+0x14>
     9be:	4815      	ldr	r0, [pc, #84]	; (a14 <DMA_CfgChannel+0x60>)
     9c0:	f240 21c5 	movw	r1, #709	; 0x2c5
     9c4:	f7ff fc74 	bl	2b0 <assertEFM>
  EFM_ASSERT(cfg);
     9c8:	b925      	cbnz	r5, 9d4 <DMA_CfgChannel+0x20>
     9ca:	4812      	ldr	r0, [pc, #72]	; (a14 <DMA_CfgChannel+0x60>)
     9cc:	f240 21c6 	movw	r1, #710	; 0x2c6
     9d0:	f7ff fc6e 	bl	2b0 <assertEFM>

  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     9d4:	4b10      	ldr	r3, [pc, #64]	; (a18 <DMA_CfgChannel+0x64>)
  descr[channel].USER = (uint32_t)(cfg->cb);
     9d6:	68aa      	ldr	r2, [r5, #8]

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
     9d8:	6899      	ldr	r1, [r3, #8]
  descr[channel].USER = (uint32_t)(cfg->cb);
     9da:	eb01 1104 	add.w	r1, r1, r4, lsl #4
     9de:	60ca      	str	r2, [r1, #12]

  /* Set to specified priority for channel */
  if (cfg->highPri)
     9e0:	7829      	ldrb	r1, [r5, #0]
     9e2:	2201      	movs	r2, #1
  {
    DMA->CHPRIS = 1 << channel;
     9e4:	40a2      	lsls	r2, r4
  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
  descr[channel].USER = (uint32_t)(cfg->cb);

  /* Set to specified priority for channel */
  if (cfg->highPri)
     9e6:	b109      	cbz	r1, 9ec <DMA_CfgChannel+0x38>
  {
    DMA->CHPRIS = 1 << channel;
     9e8:	639a      	str	r2, [r3, #56]	; 0x38
     9ea:	e000      	b.n	9ee <DMA_CfgChannel+0x3a>
  }
  else
  {
    DMA->CHPRIC = 1 << channel;
     9ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set DMA signal source select */
  DMA->CH[channel].CTRL = cfg->select;
     9ee:	686a      	ldr	r2, [r5, #4]
     9f0:	f504 6188 	add.w	r1, r4, #1088	; 0x440
     9f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
     9f8:	4b08      	ldr	r3, [pc, #32]	; (a1c <DMA_CfgChannel+0x68>)

  /* Enable/disable interrupt as specified */
  if (cfg->enableInt)
     9fa:	786a      	ldrb	r2, [r5, #1]
     9fc:	4423      	add	r3, r4
     9fe:	b132      	cbz	r2, a0e <DMA_CfgChannel+0x5a>
  {
    DMA->IFC = (1 << channel);
     a00:	2201      	movs	r2, #1
     a02:	fa02 f404 	lsl.w	r4, r2, r4
     a06:	4804      	ldr	r0, [pc, #16]	; (a18 <DMA_CfgChannel+0x64>)
     a08:	f241 0108 	movw	r1, #4104	; 0x1008
     a0c:	5044      	str	r4, [r0, r1]
__STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
                                        uint32_t bit,
                                        uint32_t val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t tmp =
     a0e:	009b      	lsls	r3, r3, #2
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *((volatile uint32_t *)tmp) = (uint32_t)val;
     a10:	601a      	str	r2, [r3, #0]
     a12:	bd38      	pop	{r3, r4, r5, pc}
     a14:	00006186 	.word	0x00006186
     a18:	400c2000 	.word	0x400c2000
     a1c:	10e18060 	.word	0x10e18060

00000a20 <DMA_CfgDescr>:
                  bool primary,
                  DMA_CfgDescr_TypeDef *cfg)
{
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     a20:	2807      	cmp	r0, #7
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgDescr(unsigned int channel,
                  bool primary,
                  DMA_CfgDescr_TypeDef *cfg)
{
     a22:	b570      	push	{r4, r5, r6, lr}
     a24:	4605      	mov	r5, r0
     a26:	460e      	mov	r6, r1
     a28:	4614      	mov	r4, r2
  DMA_DESCRIPTOR_TypeDef *descr;

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
     a2a:	d904      	bls.n	a36 <DMA_CfgDescr+0x16>
     a2c:	4811      	ldr	r0, [pc, #68]	; (a74 <DMA_CfgDescr+0x54>)
     a2e:	f240 3112 	movw	r1, #786	; 0x312
     a32:	f7ff fc3d 	bl	2b0 <assertEFM>
  EFM_ASSERT(cfg);
     a36:	b924      	cbnz	r4, a42 <DMA_CfgDescr+0x22>
     a38:	480e      	ldr	r0, [pc, #56]	; (a74 <DMA_CfgDescr+0x54>)
     a3a:	f240 3113 	movw	r1, #787	; 0x313
     a3e:	f7ff fc37 	bl	2b0 <assertEFM>
     a42:	4b0d      	ldr	r3, [pc, #52]	; (a78 <DMA_CfgDescr+0x58>)

  /* Find descriptor to configure */
  if (primary)
     a44:	b10e      	cbz	r6, a4a <DMA_CfgDescr+0x2a>
  {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
     a46:	689b      	ldr	r3, [r3, #8]
     a48:	e000      	b.n	a4c <DMA_CfgDescr+0x2c>
  }
  else
  {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
     a4a:	68db      	ldr	r3, [r3, #12]
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
     a4c:	7922      	ldrb	r2, [r4, #4]
    (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
     a4e:	78e1      	ldrb	r1, [r4, #3]
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
     a50:	0492      	lsls	r2, r2, #18
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
     a52:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
     a56:	7821      	ldrb	r1, [r4, #0]
  }
  else
  {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
  }
  descr += channel;
     a58:	eb03 1505 	add.w	r5, r3, r5, lsl #4

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
     a5c:	78a3      	ldrb	r3, [r4, #2]
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
     a5e:	7860      	ldrb	r0, [r4, #1]
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
    (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
     a60:	0789      	lsls	r1, r1, #30
     a62:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
     a66:	ea41 6180 	orr.w	r1, r1, r0, lsl #26
    (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
     a6a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
    ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
    (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
    (0 << _DMA_CTRL_N_MINUS_1_SHIFT) |         /* Set when activated */
    (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |     /* Set when activated */
     a6e:	4313      	orrs	r3, r2
  }
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL =
     a70:	60ab      	str	r3, [r5, #8]
     a72:	bd70      	pop	{r4, r5, r6, pc}
     a74:	00006186 	.word	0x00006186
     a78:	400c2000 	.word	0x400c2000

00000a7c <DMA_Reset>:

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
     a7c:	4b0f      	ldr	r3, [pc, #60]	; (abc <DMA_Reset+0x40>)
     a7e:	2001      	movs	r0, #1
     a80:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
     a84:	4b0e      	ldr	r3, [pc, #56]	; (ac0 <DMA_Reset+0x44>)
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
     a86:	22ff      	movs	r2, #255	; 0xff

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
     a88:	2100      	movs	r1, #0
     a8a:	6059      	str	r1, [r3, #4]
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
     a8c:	61da      	str	r2, [r3, #28]
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
     a8e:	625a      	str	r2, [r3, #36]	; 0x24
  DMA->CHENC       = _DMA_CHENC_MASK;
     a90:	62da      	str	r2, [r3, #44]	; 0x2c
  DMA->CHALTC      = _DMA_CHALTC_MASK;
     a92:	635a      	str	r2, [r3, #52]	; 0x34
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
     a94:	63da      	str	r2, [r3, #60]	; 0x3c
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
     a96:	64d8      	str	r0, [r3, #76]	; 0x4c
  DMA->IEN         = _DMA_IEN_RESETVALUE;
     a98:	f241 020c 	movw	r2, #4108	; 0x100c
  DMA->IFC         = _DMA_IFC_MASK;
     a9c:	4809      	ldr	r0, [pc, #36]	; (ac4 <DMA_Reset+0x48>)
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
  DMA->CHENC       = _DMA_CHENC_MASK;
  DMA->CHALTC      = _DMA_CHALTC_MASK;
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
     a9e:	5099      	str	r1, [r3, r2]
  DMA->IFC         = _DMA_IFC_MASK;
     aa0:	f241 0208 	movw	r2, #4104	; 0x1008
     aa4:	5098      	str	r0, [r3, r2]

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
     aa6:	460a      	mov	r2, r1
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
     aa8:	f502 6188 	add.w	r1, r2, #1088	; 0x440
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
     aac:	3201      	adds	r2, #1
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
     aae:	2000      	movs	r0, #0
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
     ab0:	2a08      	cmp	r2, #8
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
     ab2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++)
     ab6:	d1f7      	bne.n	aa8 <DMA_Reset+0x2c>
  {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
  }
}
     ab8:	4770      	bx	lr
     aba:	bf00      	nop
     abc:	e000e100 	.word	0xe000e100
     ac0:	400c2000 	.word	0x400c2000
     ac4:	800000ff 	.word	0x800000ff

00000ac8 <DMA_Init>:
 *
 * @param[in] init
 *   Pointer to a structure containing DMA init information.
 ******************************************************************************/
void DMA_Init(DMA_Init_TypeDef *init)
{
     ac8:	b510      	push	{r4, lr}
  EFM_ASSERT(init);
     aca:	4604      	mov	r4, r0
     acc:	b920      	cbnz	r0, ad8 <DMA_Init+0x10>
     ace:	4812      	ldr	r0, [pc, #72]	; (b18 <DMA_Init+0x50>)
     ad0:	f240 31eb 	movw	r1, #1003	; 0x3eb
     ad4:	f7ff fbec 	bl	2b0 <assertEFM>

  /* Make sure control block is properly aligned */
  EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
     ad8:	7923      	ldrb	r3, [r4, #4]
     ada:	b123      	cbz	r3, ae6 <DMA_Init+0x1e>
     adc:	480e      	ldr	r0, [pc, #56]	; (b18 <DMA_Init+0x50>)
     ade:	f240 31ee 	movw	r1, #1006	; 0x3ee
     ae2:	f7ff fbe5 	bl	2b0 <assertEFM>

  /* Make sure DMA clock is enabled prior to accessing DMA module */
  CMU_ClockEnable(cmuClock_DMA, true);
     ae6:	2101      	movs	r1, #1
     ae8:	480c      	ldr	r0, [pc, #48]	; (b1c <DMA_Init+0x54>)
     aea:	f7ff fd1b 	bl	524 <CMU_ClockEnable>

  /* Make sure DMA controller is set to a known reset state */
  DMA_Reset();
     aee:	f7ff ffc5 	bl	a7c <DMA_Reset>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     af2:	4b0b      	ldr	r3, [pc, #44]	; (b20 <DMA_Init+0x58>)
     af4:	2201      	movs	r2, #1
     af6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
     afa:	601a      	str	r2, [r3, #0]
  /* Clear/enable DMA interrupts */
  NVIC_ClearPendingIRQ(DMA_IRQn);
  NVIC_EnableIRQ(DMA_IRQn);

  /* Enable bus error interrupt */
  DMA->IEN = DMA_IEN_ERR;
     afc:	4b09      	ldr	r3, [pc, #36]	; (b24 <DMA_Init+0x5c>)
     afe:	f241 020c 	movw	r2, #4108	; 0x100c
     b02:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     b06:	5099      	str	r1, [r3, r2]

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
     b08:	6862      	ldr	r2, [r4, #4]
     b0a:	609a      	str	r2, [r3, #8]

  /* Configure and enable the DMA controller */
  DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT) | DMA_CONFIG_EN;
     b0c:	7822      	ldrb	r2, [r4, #0]
     b0e:	0152      	lsls	r2, r2, #5
     b10:	f042 0201 	orr.w	r2, r2, #1
     b14:	605a      	str	r2, [r3, #4]
     b16:	bd10      	pop	{r4, pc}
     b18:	00006186 	.word	0x00006186
     b1c:	00041300 	.word	0x00041300
     b20:	e000e100 	.word	0xe000e100
     b24:	400c2000 	.word	0x400c2000

00000b28 <EMU_UpdateOscConfig>:
 *   up-to-date.
 ******************************************************************************/
void EMU_UpdateOscConfig(void)
{
  /* Fetch current configuration */
  cmuStatus = (uint16_t)(CMU->STATUS);
     b28:	4b02      	ldr	r3, [pc, #8]	; (b34 <EMU_UpdateOscConfig+0xc>)
     b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     b2c:	4b02      	ldr	r3, [pc, #8]	; (b38 <EMU_UpdateOscConfig+0x10>)
     b2e:	801a      	strh	r2, [r3, #0]
     b30:	4770      	bx	lr
     b32:	bf00      	nop
     b34:	400c8000 	.word	0x400c8000
     b38:	20000b1c 	.word	0x20000b1c

00000b3c <GPIO_PinModeSet>:
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
  EFM_ASSERT(GPIO_PORT_VALID(port) && GPIO_PIN_VALID(pin));
     b3c:	2805      	cmp	r0, #5
 ******************************************************************************/
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
     b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b40:	4605      	mov	r5, r0
     b42:	460c      	mov	r4, r1
     b44:	4616      	mov	r6, r2
     b46:	461f      	mov	r7, r3
  EFM_ASSERT(GPIO_PORT_VALID(port) && GPIO_PIN_VALID(pin));
     b48:	d801      	bhi.n	b4e <GPIO_PinModeSet+0x12>
     b4a:	290f      	cmp	r1, #15
     b4c:	d903      	bls.n	b56 <GPIO_PinModeSet+0x1a>
     b4e:	4822      	ldr	r0, [pc, #136]	; (bd8 <GPIO_PinModeSet+0x9c>)
     b50:	21cb      	movs	r1, #203	; 0xcb
     b52:	f7ff fbad 	bl	2b0 <assertEFM>

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled)
     b56:	b176      	cbz	r6, b76 <GPIO_PinModeSet+0x3a>
     b58:	2301      	movs	r3, #1
     b5a:	2224      	movs	r2, #36	; 0x24
  {
    if (out)
    {
      GPIO->P[port].DOUTSET = 1 << pin;
     b5c:	40a3      	lsls	r3, r4

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled)
  {
    if (out)
     b5e:	b137      	cbz	r7, b6e <GPIO_PinModeSet+0x32>
    {
      GPIO->P[port].DOUTSET = 1 << pin;
     b60:	436a      	muls	r2, r5
     b62:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b66:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
     b6a:	6113      	str	r3, [r2, #16]
     b6c:	e003      	b.n	b76 <GPIO_PinModeSet+0x3a>
    }
    else
    {
      GPIO->P[port].DOUTCLR = 1 << pin;
     b6e:	fb02 f105 	mul.w	r1, r2, r5
     b72:	4a1a      	ldr	r2, [pc, #104]	; (bdc <GPIO_PinModeSet+0xa0>)
     b74:	5053      	str	r3, [r2, r1]
     b76:	2224      	movs	r2, #36	; 0x24
     b78:	436a      	muls	r2, r5
    }
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8)
     b7a:	2c07      	cmp	r4, #7
     b7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     b80:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
     b84:	d80a      	bhi.n	b9c <GPIO_PinModeSet+0x60>
  {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
     b86:	00a3      	lsls	r3, r4, #2
     b88:	210f      	movs	r1, #15
     b8a:	4099      	lsls	r1, r3
                          (mode << (pin * 4));
     b8c:	fa06 f303 	lsl.w	r3, r6, r3

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8)
  {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
     b90:	6850      	ldr	r0, [r2, #4]
     b92:	ea20 0101 	bic.w	r1, r0, r1
     b96:	430b      	orrs	r3, r1
     b98:	6053      	str	r3, [r2, #4]
     b9a:	e00c      	b.n	bb6 <GPIO_PinModeSet+0x7a>
                          (mode << (pin * 4));
  }
  else
  {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xF << ((pin - 8) * 4))) |
     b9c:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
     ba0:	3908      	subs	r1, #8
     ba2:	0089      	lsls	r1, r1, #2
     ba4:	230f      	movs	r3, #15
     ba6:	408b      	lsls	r3, r1
                          (mode << ((pin - 8) * 4));
     ba8:	fa06 f101 	lsl.w	r1, r6, r1
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xF << (pin * 4))) |
                          (mode << (pin * 4));
  }
  else
  {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xF << ((pin - 8) * 4))) |
     bac:	6890      	ldr	r0, [r2, #8]
     bae:	ea20 0303 	bic.w	r3, r0, r3
     bb2:	4319      	orrs	r1, r3
     bb4:	6091      	str	r1, [r2, #8]
                          (mode << ((pin - 8) * 4));
  }

  if (mode == gpioModeDisabled)
     bb6:	b96e      	cbnz	r6, bd4 <GPIO_PinModeSet+0x98>
     bb8:	2201      	movs	r2, #1
     bba:	2324      	movs	r3, #36	; 0x24
  {
    if (out)
    {
      GPIO->P[port].DOUTSET = 1 << pin;
     bbc:	fa02 f404 	lsl.w	r4, r2, r4
     bc0:	435d      	muls	r5, r3
                          (mode << ((pin - 8) * 4));
  }

  if (mode == gpioModeDisabled)
  {
    if (out)
     bc2:	b12f      	cbz	r7, bd0 <GPIO_PinModeSet+0x94>
    {
      GPIO->P[port].DOUTSET = 1 << pin;
     bc4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
     bc8:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
     bcc:	612c      	str	r4, [r5, #16]
     bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
      GPIO->P[port].DOUTCLR = 1 << pin;
     bd0:	4b02      	ldr	r3, [pc, #8]	; (bdc <GPIO_PinModeSet+0xa0>)
     bd2:	515c      	str	r4, [r3, r5]
     bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd6:	bf00      	nop
     bd8:	000061b2 	.word	0x000061b2
     bdc:	40006014 	.word	0x40006014

00000be0 <LEUART_Sync>:
 ******************************************************************************/
__STATIC_INLINE void LEUART_Sync(LEUART_TypeDef *leuart, uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (leuart->FREEZE & LEUART_FREEZE_REGFREEZE)
     be0:	6c03      	ldr	r3, [r0, #64]	; 0x40
     be2:	07db      	lsls	r3, r3, #31
     be4:	d402      	bmi.n	bec <LEUART_Sync+0xc>
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (leuart->SYNCBUSY & mask)
     be6:	6c43      	ldr	r3, [r0, #68]	; 0x44
     be8:	4219      	tst	r1, r3
     bea:	d1fc      	bne.n	be6 <LEUART_Sync+0x6>
     bec:	4770      	bx	lr
	...

00000bf0 <LEUART_BaudrateSet>:
 *   Baudrate to try to achieve for LEUART.
 ******************************************************************************/
void LEUART_BaudrateSet(LEUART_TypeDef *leuart,
                        uint32_t refFreq,
                        uint32_t baudrate)
{
     bf0:	b570      	push	{r4, r5, r6, lr}
     bf2:	4604      	mov	r4, r0
     bf4:	460d      	mov	r5, r1
  uint32_t          clkdiv;
  CMU_Clock_TypeDef clock;

  /* Inhibit divide by 0 */
  EFM_ASSERT(baudrate);
     bf6:	4616      	mov	r6, r2
     bf8:	b922      	cbnz	r2, c04 <Heap_Size+0x4>
     bfa:	4818      	ldr	r0, [pc, #96]	; (c5c <Heap_Size+0x5c>)
     bfc:	f44f 7184 	mov.w	r1, #264	; 0x108
     c00:	f7ff fb56 	bl	2b0 <assertEFM>
   * and calculate 1/8 of CLKDIV first. This allows for fLEUARTn
   * up to 128MHz without overflowing a 32 bit value!
   */

  /* Get current frequency? */
  if (!refFreq)
     c04:	b99d      	cbnz	r5, c2e <Heap_Size+0x2e>
  {
    if (leuart == LEUART0)
     c06:	4b16      	ldr	r3, [pc, #88]	; (c60 <Heap_Size+0x60>)
     c08:	429c      	cmp	r4, r3
     c0a:	d00a      	beq.n	c22 <Heap_Size+0x22>
    {
      clock = cmuClock_LEUART0;
    }
#if (LEUART_COUNT > 1)
    else if (leuart == LEUART1)
     c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     c10:	429c      	cmp	r4, r3
     c12:	d008      	beq.n	c26 <Heap_Size+0x26>

  /* LF register about to be modified require sync. busy check */
  LEUART_Sync(leuart, LEUART_SYNCBUSY_CLKDIV);

  leuart->CLKDIV = clkdiv;
}
     c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      clock = cmuClock_LEUART1;
    }
#endif
    else
    {
      EFM_ASSERT(0);
     c18:	4810      	ldr	r0, [pc, #64]	; (c5c <Heap_Size+0x5c>)
     c1a:	f44f 719a 	mov.w	r1, #308	; 0x134
     c1e:	f7ff bb47 	b.w	2b0 <assertEFM>
  /* Get current frequency? */
  if (!refFreq)
  {
    if (leuart == LEUART0)
    {
      clock = cmuClock_LEUART0;
     c22:	4810      	ldr	r0, [pc, #64]	; (c64 <Heap_Size+0x64>)
     c24:	e000      	b.n	c28 <Heap_Size+0x28>
    }
#if (LEUART_COUNT > 1)
    else if (leuart == LEUART1)
    {
      clock = cmuClock_LEUART1;
     c26:	4810      	ldr	r0, [pc, #64]	; (c68 <Heap_Size+0x68>)
    {
      EFM_ASSERT(0);
      return;
    }

    refFreq = CMU_ClockFreqGet(clock);
     c28:	f7ff fd00 	bl	62c <CMU_ClockFreqGet>
     c2c:	4605      	mov	r5, r0
  }

  /* Calculate and set CLKDIV with fractional bits */
  clkdiv  = (32 * refFreq) / baudrate;
     c2e:	016d      	lsls	r5, r5, #5
     c30:	fbb5 f5f6 	udiv	r5, r5, r6
  clkdiv -= 32;
     c34:	3d20      	subs	r5, #32
  clkdiv *= 8;
     c36:	00ed      	lsls	r5, r5, #3

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(clkdiv <= _LEUART_CLKDIV_MASK);
     c38:	f647 73f8 	movw	r3, #32760	; 0x7ff8
     c3c:	429d      	cmp	r5, r3
     c3e:	d904      	bls.n	c4a <Heap_Size+0x4a>
     c40:	4806      	ldr	r0, [pc, #24]	; (c5c <Heap_Size+0x5c>)
     c42:	f240 1141 	movw	r1, #321	; 0x141
     c46:	f7ff fb33 	bl	2b0 <assertEFM>

  /* If EFM_ASSERT is not enabled, make sure we don't write to reserved bits */
  clkdiv &= _LEUART_CLKDIV_MASK;
     c4a:	f647 76f8 	movw	r6, #32760	; 0x7ff8
     c4e:	402e      	ands	r6, r5

  /* LF register about to be modified require sync. busy check */
  LEUART_Sync(leuart, LEUART_SYNCBUSY_CLKDIV);
     c50:	4620      	mov	r0, r4
     c52:	2104      	movs	r1, #4
     c54:	f7ff ffc4 	bl	be0 <LEUART_Sync>

  leuart->CLKDIV = clkdiv;
     c58:	60e6      	str	r6, [r4, #12]
     c5a:	bd70      	pop	{r4, r5, r6, pc}
     c5c:	000061c9 	.word	0x000061c9
     c60:	40084000 	.word	0x40084000
     c64:	00140540 	.word	0x00140540
     c68:	00161540 	.word	0x00161540

00000c6c <LEUART_Init>:
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void LEUART_Init(LEUART_TypeDef *leuart, LEUART_Init_TypeDef const *init)
{
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     c6c:	4b16      	ldr	r3, [pc, #88]	; (cc8 <LEUART_Init+0x5c>)
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void LEUART_Init(LEUART_TypeDef *leuart, LEUART_Init_TypeDef const *init)
{
     c6e:	b570      	push	{r4, r5, r6, lr}
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     c70:	4298      	cmp	r0, r3
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void LEUART_Init(LEUART_TypeDef *leuart, LEUART_Init_TypeDef const *init)
{
     c72:	4604      	mov	r4, r0
     c74:	460d      	mov	r5, r1
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     c76:	d008      	beq.n	c8a <LEUART_Init+0x1e>
     c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     c7c:	4298      	cmp	r0, r3
     c7e:	d004      	beq.n	c8a <LEUART_Init+0x1e>
     c80:	4812      	ldr	r0, [pc, #72]	; (ccc <LEUART_Init+0x60>)
     c82:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
     c86:	f7ff fb13 	bl	2b0 <assertEFM>

  /* LF register about to be modified require sync. busy check */
  LEUART_Sync(leuart, LEUART_SYNCBUSY_CMD);
     c8a:	4620      	mov	r0, r4
     c8c:	2102      	movs	r1, #2
     c8e:	f7ff ffa7 	bl	be0 <LEUART_Sync>

  /* Ensure disabled while doing config */
  leuart->CMD = LEUART_CMD_RXDIS | LEUART_CMD_TXDIS;
     c92:	230a      	movs	r3, #10
     c94:	6063      	str	r3, [r4, #4]
     * - then enables freeze before LF sync completed
     * - then modifies the same register again
     * since modifying a register while it is in sync progress should be
     * avoided.
     */
    while (leuart->SYNCBUSY)
     c96:	6c66      	ldr	r6, [r4, #68]	; 0x44
     c98:	2e00      	cmp	r6, #0
     c9a:	d1fc      	bne.n	c96 <LEUART_Init+0x2a>
      ;

    leuart->FREEZE = LEUART_FREEZE_REGFREEZE;
     c9c:	2301      	movs	r3, #1
     c9e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
     ca0:	6823      	ldr	r3, [r4, #0]
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
     ca2:	7b2a      	ldrb	r2, [r5, #12]

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
     ca4:	f023 031c 	bic.w	r3, r3, #28
                                   _LEUART_CTRL_STOPBITS_MASK)) |
     ca8:	4313      	orrs	r3, r2
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
     caa:	7b6a      	ldrb	r2, [r5, #13]
                 (uint32_t)(init->stopbits);

  /* Configure baudrate */
  LEUART_BaudrateSet(leuart, init->refFreq, init->baudrate);
     cac:	4620      	mov	r0, r4
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
     cae:	4313      	orrs	r3, r2
                 (uint32_t)(init->parity) |
                 (uint32_t)(init->stopbits);
     cb0:	7baa      	ldrb	r2, [r5, #14]

  /* Configure baudrate */
  LEUART_BaudrateSet(leuart, init->refFreq, init->baudrate);
     cb2:	6869      	ldr	r1, [r5, #4]

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
                                   _LEUART_CTRL_STOPBITS_MASK)) |
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
     cb4:	4313      	orrs	r3, r2

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Configure databits and stopbits */
  leuart->CTRL = (leuart->CTRL & ~(_LEUART_CTRL_PARITY_MASK |
     cb6:	6023      	str	r3, [r4, #0]
                 (uint32_t)(init->databits) |
                 (uint32_t)(init->parity) |
                 (uint32_t)(init->stopbits);

  /* Configure baudrate */
  LEUART_BaudrateSet(leuart, init->refFreq, init->baudrate);
     cb8:	68aa      	ldr	r2, [r5, #8]
     cba:	f7ff ff99 	bl	bf0 <LEUART_BaudrateSet>

  /* Finally enable (as specified) */
  leuart->CMD = (uint32_t)(init->enable);
     cbe:	782b      	ldrb	r3, [r5, #0]
     cc0:	6063      	str	r3, [r4, #4]

    leuart->FREEZE = LEUART_FREEZE_REGFREEZE;
  }
  else
  {
    leuart->FREEZE = 0;
     cc2:	6426      	str	r6, [r4, #64]	; 0x40
     cc4:	bd70      	pop	{r4, r5, r6, pc}
     cc6:	bf00      	nop
     cc8:	40084000 	.word	0x40084000
     ccc:	000061c9 	.word	0x000061c9

00000cd0 <LEUART_Reset>:
 *   Pointer to LEUART peripheral register block.
 ******************************************************************************/
void LEUART_Reset(LEUART_TypeDef *leuart)
{
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     cd0:	4b10      	ldr	r3, [pc, #64]	; (d14 <LEUART_Reset+0x44>)
 *
 * @param[in] leuart
 *   Pointer to LEUART peripheral register block.
 ******************************************************************************/
void LEUART_Reset(LEUART_TypeDef *leuart)
{
     cd2:	b510      	push	{r4, lr}
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     cd4:	4298      	cmp	r0, r3
 *
 * @param[in] leuart
 *   Pointer to LEUART peripheral register block.
 ******************************************************************************/
void LEUART_Reset(LEUART_TypeDef *leuart)
{
     cd6:	4604      	mov	r4, r0
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(LEUART_REF_VALID(leuart));
     cd8:	d008      	beq.n	cec <LEUART_Reset+0x1c>
     cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     cde:	4298      	cmp	r0, r3
     ce0:	d004      	beq.n	cec <LEUART_Reset+0x1c>
     ce2:	480d      	ldr	r0, [pc, #52]	; (d18 <LEUART_Reset+0x48>)
     ce4:	f240 11f3 	movw	r1, #499	; 0x1f3
     ce8:	f7ff fae2 	bl	2b0 <assertEFM>
     * - then enables freeze before LF sync completed
     * - then modifies the same register again
     * since modifying a register while it is in sync progress should be
     * avoided.
     */
    while (leuart->SYNCBUSY)
     cec:	6c63      	ldr	r3, [r4, #68]	; 0x44
     cee:	2b00      	cmp	r3, #0
     cf0:	d1fc      	bne.n	cec <LEUART_Reset+0x1c>
      ;

    leuart->FREEZE = LEUART_FREEZE_REGFREEZE;
     cf2:	2201      	movs	r2, #1
     cf4:	6422      	str	r2, [r4, #64]	; 0x40

  /* Freeze registers to avoid stalling for LF synchronization */
  LEUART_FreezeEnable(leuart, true);

  /* Make sure disabled first, before resetting other registers */
  leuart->CMD = LEUART_CMD_RXDIS | LEUART_CMD_TXDIS | LEUART_CMD_RXBLOCKDIS |
     cf6:	22ea      	movs	r2, #234	; 0xea
     cf8:	6062      	str	r2, [r4, #4]
  leuart->CTRL       = _LEUART_CTRL_RESETVALUE;
  leuart->CLKDIV     = _LEUART_CLKDIV_RESETVALUE;
  leuart->STARTFRAME = _LEUART_STARTFRAME_RESETVALUE;
  leuart->SIGFRAME   = _LEUART_SIGFRAME_RESETVALUE;
  leuart->IEN        = _LEUART_IEN_RESETVALUE;
  leuart->IFC        = _LEUART_IFC_MASK;
     cfa:	f240 72f9 	movw	r2, #2041	; 0x7f9
  LEUART_FreezeEnable(leuart, true);

  /* Make sure disabled first, before resetting other registers */
  leuart->CMD = LEUART_CMD_RXDIS | LEUART_CMD_TXDIS | LEUART_CMD_RXBLOCKDIS |
                LEUART_CMD_CLEARTX | LEUART_CMD_CLEARRX;
  leuart->CTRL       = _LEUART_CTRL_RESETVALUE;
     cfe:	6023      	str	r3, [r4, #0]
  leuart->CLKDIV     = _LEUART_CLKDIV_RESETVALUE;
     d00:	60e3      	str	r3, [r4, #12]
  leuart->STARTFRAME = _LEUART_STARTFRAME_RESETVALUE;
     d02:	6123      	str	r3, [r4, #16]
  leuart->SIGFRAME   = _LEUART_SIGFRAME_RESETVALUE;
     d04:	6163      	str	r3, [r4, #20]
  leuart->IEN        = _LEUART_IEN_RESETVALUE;
     d06:	63a3      	str	r3, [r4, #56]	; 0x38
  leuart->IFC        = _LEUART_IFC_MASK;
     d08:	6362      	str	r2, [r4, #52]	; 0x34
  leuart->PULSECTRL  = _LEUART_PULSECTRL_RESETVALUE;
     d0a:	63e3      	str	r3, [r4, #60]	; 0x3c
  leuart->ROUTE      = _LEUART_ROUTE_RESETVALUE;
     d0c:	6563      	str	r3, [r4, #84]	; 0x54

    leuart->FREEZE = LEUART_FREEZE_REGFREEZE;
  }
  else
  {
    leuart->FREEZE = 0;
     d0e:	6423      	str	r3, [r4, #64]	; 0x40
     d10:	bd10      	pop	{r4, pc}
     d12:	bf00      	nop
     d14:	40084000 	.word	0x40084000
     d18:	000061c9 	.word	0x000061c9

00000d1c <USART_BaudrateSyncSet>:
 *
 * @param[in] baudrate
 *   Baudrate to try to achieve for USART.
 ******************************************************************************/
void USART_BaudrateSyncSet(USART_TypeDef *usart, uint32_t refFreq, uint32_t baudrate)
{
     d1c:	b570      	push	{r4, r5, r6, lr}
     d1e:	4606      	mov	r6, r0
     d20:	460d      	mov	r5, r1
  uint32_t clkdiv;

  /* Inhibit divide by 0 */
  EFM_ASSERT(baudrate);
     d22:	4614      	mov	r4, r2
     d24:	b922      	cbnz	r2, d30 <USART_BaudrateSyncSet+0x14>
     d26:	480f      	ldr	r0, [pc, #60]	; (d64 <USART_BaudrateSyncSet+0x48>)
     d28:	f44f 71da 	mov.w	r1, #436	; 0x1b4
     d2c:	f7ff fac0 	bl	2b0 <assertEFM>
   * and calculate 1/64 of CLKDIV first. This allows for fHFPERCLK
   * up to 2GHz without overflowing a 32 bit value!
   */

  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq)
     d30:	b91d      	cbnz	r5, d3a <USART_BaudrateSyncSet+0x1e>
  {
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
     d32:	480d      	ldr	r0, [pc, #52]	; (d68 <USART_BaudrateSyncSet+0x4c>)
     d34:	f7ff fc7a 	bl	62c <CMU_ClockFreqGet>
     d38:	4605      	mov	r5, r0
  }

  /* Calculate and set CLKDIV with fractional bits */
  clkdiv  = 2 * refFreq;
  clkdiv += baudrate - 1;
     d3a:	1e63      	subs	r3, r4, #1
     d3c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
  clkdiv /= baudrate;
     d40:	fbb5 f4f4 	udiv	r4, r5, r4
  clkdiv -= 4;
  clkdiv *= 64;
     d44:	01a4      	lsls	r4, r4, #6
  /* Make sure we don't use fractional bits by rounding CLKDIV */
  /* up (and thus reducing baudrate, not increasing baudrate above */
  /* specified value). */
  clkdiv += 0xc0;
     d46:	3c40      	subs	r4, #64	; 0x40
  clkdiv &= 0xffffff00;

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(clkdiv <= _USART_CLKDIV_MASK);
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <USART_BaudrateSyncSet+0x50>)
  clkdiv *= 64;
  /* Make sure we don't use fractional bits by rounding CLKDIV */
  /* up (and thus reducing baudrate, not increasing baudrate above */
  /* specified value). */
  clkdiv += 0xc0;
  clkdiv &= 0xffffff00;
     d4a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(clkdiv <= _USART_CLKDIV_MASK);
     d4e:	429a      	cmp	r2, r3
     d50:	d904      	bls.n	d5c <USART_BaudrateSyncSet+0x40>
     d52:	4804      	ldr	r0, [pc, #16]	; (d64 <USART_BaudrateSyncSet+0x48>)
     d54:	f240 11e3 	movw	r1, #483	; 0x1e3
     d58:	f7ff faaa 	bl	2b0 <assertEFM>

  /* If EFM_ASSERT is not enabled, make sure we don't write to reserved bits */
  clkdiv &= _USART_CLKDIV_DIV_MASK;
     d5c:	4b04      	ldr	r3, [pc, #16]	; (d70 <USART_BaudrateSyncSet+0x54>)
     d5e:	4023      	ands	r3, r4

  usart->CLKDIV = clkdiv;
     d60:	6173      	str	r3, [r6, #20]
     d62:	bd70      	pop	{r4, r5, r6, pc}
     d64:	000061e2 	.word	0x000061e2
     d68:	00028110 	.word	0x00028110
     d6c:	001fffc0 	.word	0x001fffc0
     d70:	001fff00 	.word	0x001fff00

00000d74 <USART_Reset>:
 *   Pointer to USART/UART peripheral register block.
 ******************************************************************************/
void USART_Reset(USART_TypeDef *usart)
{
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart) || UART_REF_VALID(usart));
     d74:	4b12      	ldr	r3, [pc, #72]	; (dc0 <USART_Reset+0x4c>)
 *
 * @param[in] usart
 *   Pointer to USART/UART peripheral register block.
 ******************************************************************************/
void USART_Reset(USART_TypeDef *usart)
{
     d76:	b510      	push	{r4, lr}
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart) || UART_REF_VALID(usart));
     d78:	4298      	cmp	r0, r3
 *
 * @param[in] usart
 *   Pointer to USART/UART peripheral register block.
 ******************************************************************************/
void USART_Reset(USART_TypeDef *usart)
{
     d7a:	4604      	mov	r4, r0
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart) || UART_REF_VALID(usart));
     d7c:	d00c      	beq.n	d98 <USART_Reset+0x24>
     d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     d82:	4298      	cmp	r0, r3
     d84:	d008      	beq.n	d98 <USART_Reset+0x24>
     d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     d8a:	4298      	cmp	r0, r3
     d8c:	d004      	beq.n	d98 <USART_Reset+0x24>
     d8e:	480d      	ldr	r0, [pc, #52]	; (dc4 <USART_Reset+0x50>)
     d90:	f240 312d 	movw	r1, #813	; 0x32d
     d94:	f7ff fa8c 	bl	2b0 <assertEFM>

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS |
     d98:	f640 63aa 	movw	r3, #3754	; 0xeaa
     d9c:	60e3      	str	r3, [r4, #12]
               USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX | USART_CMD_CLEARRX;
  usart->CTRL     = _USART_CTRL_RESETVALUE;
  usart->FRAME    = _USART_FRAME_RESETVALUE;
     d9e:	f241 0205 	movw	r2, #4101	; 0x1005
  EFM_ASSERT(USART_REF_VALID(usart) || UART_REF_VALID(usart));

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS |
               USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX | USART_CMD_CLEARRX;
  usart->CTRL     = _USART_CTRL_RESETVALUE;
     da2:	2300      	movs	r3, #0
     da4:	6023      	str	r3, [r4, #0]
  usart->FRAME    = _USART_FRAME_RESETVALUE;
     da6:	6062      	str	r2, [r4, #4]
  usart->TRIGCTRL = _USART_TRIGCTRL_RESETVALUE;
  usart->CLKDIV   = _USART_CLKDIV_RESETVALUE;
  usart->IEN      = _USART_IEN_RESETVALUE;
  usart->IFC      = _USART_IFC_MASK;
     da8:	f641 72f9 	movw	r2, #8185	; 0x1ff9
  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS |
               USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX | USART_CMD_CLEARRX;
  usart->CTRL     = _USART_CTRL_RESETVALUE;
  usart->FRAME    = _USART_FRAME_RESETVALUE;
  usart->TRIGCTRL = _USART_TRIGCTRL_RESETVALUE;
     dac:	60a3      	str	r3, [r4, #8]
  usart->CLKDIV   = _USART_CLKDIV_RESETVALUE;
     dae:	6163      	str	r3, [r4, #20]
  usart->IEN      = _USART_IEN_RESETVALUE;
     db0:	64e3      	str	r3, [r4, #76]	; 0x4c
  usart->IFC      = _USART_IFC_MASK;
     db2:	64a2      	str	r2, [r4, #72]	; 0x48
  usart->ROUTE    = _USART_ROUTE_RESETVALUE;

  if (USART_IRDA_VALID(usart))
     db4:	4a02      	ldr	r2, [pc, #8]	; (dc0 <USART_Reset+0x4c>)
  usart->FRAME    = _USART_FRAME_RESETVALUE;
  usart->TRIGCTRL = _USART_TRIGCTRL_RESETVALUE;
  usart->CLKDIV   = _USART_CLKDIV_RESETVALUE;
  usart->IEN      = _USART_IEN_RESETVALUE;
  usart->IFC      = _USART_IFC_MASK;
  usart->ROUTE    = _USART_ROUTE_RESETVALUE;
     db6:	6563      	str	r3, [r4, #84]	; 0x54

  if (USART_IRDA_VALID(usart))
     db8:	4294      	cmp	r4, r2
  {
    usart->IRCTRL = _USART_IRCTRL_RESETVALUE;
     dba:	bf08      	it	eq
     dbc:	6523      	streq	r3, [r4, #80]	; 0x50
     dbe:	bd10      	pop	{r4, pc}
     dc0:	4000c000 	.word	0x4000c000
     dc4:	000061e2 	.word	0x000061e2

00000dc8 <USART_InitSync>:
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
     dc8:	b538      	push	{r3, r4, r5, lr}
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart));
     dca:	4b19      	ldr	r3, [pc, #100]	; (e30 <USART_InitSync+0x68>)
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
     dcc:	4604      	mov	r4, r0
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart));
     dce:	4298      	cmp	r0, r3
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
     dd0:	460d      	mov	r5, r1
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(USART_REF_VALID(usart));
     dd2:	d00c      	beq.n	dee <USART_InitSync+0x26>
     dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     dd8:	4298      	cmp	r0, r3
     dda:	d008      	beq.n	dee <USART_InitSync+0x26>
     ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     de0:	4298      	cmp	r0, r3
     de2:	d004      	beq.n	dee <USART_InitSync+0x26>
     de4:	4813      	ldr	r0, [pc, #76]	; (e34 <USART_InitSync+0x6c>)
     de6:	f240 2161 	movw	r1, #609	; 0x261
     dea:	f7ff fa61 	bl	2b0 <assertEFM>

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);
     dee:	4620      	mov	r0, r4
     df0:	f7ff ffc0 	bl	d74 <USART_Reset>

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC) |
     df4:	8a2b      	ldrh	r3, [r5, #16]
                 ((uint32_t) init->clockMode) |
                 (init->msbf ? USART_CTRL_MSBF : 0);
     df6:	7baa      	ldrb	r2, [r5, #14]

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC) |
     df8:	6821      	ldr	r1, [r4, #0]
     dfa:	f043 0301 	orr.w	r3, r3, #1
                 ((uint32_t) init->clockMode) |
                 (init->msbf ? USART_CTRL_MSBF : 0);
     dfe:	2a00      	cmp	r2, #0

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC) |
     e00:	b29b      	uxth	r3, r3
                 ((uint32_t) init->clockMode) |
                 (init->msbf ? USART_CTRL_MSBF : 0);
     e02:	bf0c      	ite	eq
     e04:	2200      	moveq	r2, #0
     e06:	f44f 6280 	movne.w	r2, #1024	; 0x400
  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC) |
                 ((uint32_t) init->clockMode) |
     e0a:	430b      	orrs	r3, r1

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC) |
     e0c:	4313      	orrs	r3, r2
     e0e:	6023      	str	r3, [r4, #0]
  usart->CTRL |= (init->prsRxEnable ? USART_INPUT_RXPRS : 0) |
                 (init->autoTx      ? USART_CTRL_AUTOTX : 0);
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = ((uint32_t) (init->databits)) |
     e10:	7b2b      	ldrb	r3, [r5, #12]
                 (USART_FRAME_STOPBITS_DEFAULT) |
                 (USART_FRAME_PARITY_DEFAULT);

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);
     e12:	4620      	mov	r0, r4
                 (init->autoTx      ? USART_CTRL_AUTOTX : 0);
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = ((uint32_t) (init->databits)) |
                 (USART_FRAME_STOPBITS_DEFAULT) |
     e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  usart->CTRL |= (init->prsRxEnable ? USART_INPUT_RXPRS : 0) |
                 (init->autoTx      ? USART_CTRL_AUTOTX : 0);
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = ((uint32_t) (init->databits)) |
     e18:	6063      	str	r3, [r4, #4]
                 (USART_FRAME_STOPBITS_DEFAULT) |
                 (USART_FRAME_PARITY_DEFAULT);

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);
     e1a:	6869      	ldr	r1, [r5, #4]
     e1c:	68aa      	ldr	r2, [r5, #8]
     e1e:	f7ff ff7d 	bl	d1c <USART_BaudrateSyncSet>

  /* Finally enable (as specified) */
  if (init->master)
     e22:	7b6b      	ldrb	r3, [r5, #13]
     e24:	b10b      	cbz	r3, e2a <USART_InitSync+0x62>
  {
    usart->CMD = USART_CMD_MASTEREN;
     e26:	2310      	movs	r3, #16
     e28:	60e3      	str	r3, [r4, #12]
  }

  usart->CMD = (uint32_t) (init->enable);
     e2a:	782b      	ldrb	r3, [r5, #0]
     e2c:	60e3      	str	r3, [r4, #12]
     e2e:	bd38      	pop	{r3, r4, r5, pc}
     e30:	4000c000 	.word	0x4000c000
     e34:	000061e2 	.word	0x000061e2

00000e38 <USART_SpiTransfer>:
 * @return
 *   Data received.
 ******************************************************************************/
uint8_t USART_SpiTransfer(USART_TypeDef *usart, uint8_t data)
{
  while (!(usart->STATUS & USART_STATUS_TXBL))
     e38:	6903      	ldr	r3, [r0, #16]
     e3a:	065a      	lsls	r2, r3, #25
     e3c:	d5fc      	bpl.n	e38 <USART_SpiTransfer>
    ;
  usart->TXDATA = (uint32_t) data;
     e3e:	6341      	str	r1, [r0, #52]	; 0x34
  while (!(usart->STATUS & USART_STATUS_TXC))
     e40:	6903      	ldr	r3, [r0, #16]
     e42:	069b      	lsls	r3, r3, #26
     e44:	d5fc      	bpl.n	e40 <USART_SpiTransfer+0x8>
    ;
  return (uint8_t) (usart->RXDATA);
     e46:	69c0      	ldr	r0, [r0, #28]
}
     e48:	b2c0      	uxtb	r0, r0
     e4a:	4770      	bx	lr

00000e4c <RTC_Sync>:
 ******************************************************************************/
__STATIC_INLINE void RTC_Sync(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (RTC->FREEZE & RTC_FREEZE_REGFREEZE)
     e4c:	4b03      	ldr	r3, [pc, #12]	; (e5c <RTC_Sync+0x10>)
     e4e:	6a1a      	ldr	r2, [r3, #32]
     e50:	07d2      	lsls	r2, r2, #31
     e52:	d402      	bmi.n	e5a <RTC_Sync+0xe>
    return;

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain. This is only required for the Gecko Family */
  while (RTC->SYNCBUSY & mask)
     e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     e56:	4210      	tst	r0, r2
     e58:	d1fc      	bne.n	e54 <RTC_Sync+0x8>
     e5a:	4770      	bx	lr
     e5c:	40080000 	.word	0x40080000

00000e60 <RTC_CompareSet>:
  volatile uint32_t *compReg;
#if defined(_EFM32_GECKO_FAMILY)
  uint32_t          syncbusy;
#endif

  EFM_ASSERT(RTC_COMP_REG_VALID(comp) &&
     e60:	2801      	cmp	r0, #1
 *
 * @param[in] value
 *   Initialization value (<= 0x00ffffff)
 ******************************************************************************/
void RTC_CompareSet(unsigned int comp, uint32_t value)
{
     e62:	b538      	push	{r3, r4, r5, lr}
     e64:	4604      	mov	r4, r0
     e66:	460d      	mov	r5, r1
  volatile uint32_t *compReg;
#if defined(_EFM32_GECKO_FAMILY)
  uint32_t          syncbusy;
#endif

  EFM_ASSERT(RTC_COMP_REG_VALID(comp) &&
     e68:	d802      	bhi.n	e70 <RTC_CompareSet+0x10>
     e6a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
     e6e:	d003      	beq.n	e78 <RTC_CompareSet+0x18>
     e70:	4808      	ldr	r0, [pc, #32]	; (e94 <RTC_CompareSet+0x34>)
     e72:	21a6      	movs	r1, #166	; 0xa6
     e74:	f7ff fa1c 	bl	2b0 <assertEFM>
             ((value & ~(_RTC_COMP0_COMP0_MASK >> _RTC_COMP0_COMP0_SHIFT)) == 0));

  /* Initialize selected compare value */
  switch (comp)
     e78:	b114      	cbz	r4, e80 <RTC_CompareSet+0x20>
     e7a:	2c01      	cmp	r4, #1
     e7c:	d003      	beq.n	e86 <RTC_CompareSet+0x26>
     e7e:	bd38      	pop	{r3, r4, r5, pc}
  {
  case 0:
    compReg = &(RTC->COMP0);
#if defined(_EFM32_GECKO_FAMILY)
    syncbusy = RTC_SYNCBUSY_COMP0;
     e80:	2002      	movs	r0, #2

  /* Initialize selected compare value */
  switch (comp)
  {
  case 0:
    compReg = &(RTC->COMP0);
     e82:	4c05      	ldr	r4, [pc, #20]	; (e98 <RTC_CompareSet+0x38>)
     e84:	e001      	b.n	e8a <RTC_CompareSet+0x2a>
    syncbusy = RTC_SYNCBUSY_COMP0;
#endif
    break;

  case 1:
    compReg = &(RTC->COMP1);
     e86:	4c05      	ldr	r4, [pc, #20]	; (e9c <RTC_CompareSet+0x3c>)
#if defined(_EFM32_GECKO_FAMILY)
    syncbusy = RTC_SYNCBUSY_COMP1;
     e88:	2004      	movs	r0, #4
    /* Unknown compare register selected, abort */
    return;
  }
#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(syncbusy);
     e8a:	f7ff ffdf 	bl	e4c <RTC_Sync>
#endif

  *compReg = value;
     e8e:	6025      	str	r5, [r4, #0]
     e90:	bd38      	pop	{r3, r4, r5, pc}
     e92:	bf00      	nop
     e94:	000061fa 	.word	0x000061fa
     e98:	40080008 	.word	0x40080008
     e9c:	4008000c 	.word	0x4008000c

00000ea0 <RTC_Enable>:
 *
 * @param[in] enable
 *   true to enable counting, false to disable.
 ******************************************************************************/
void RTC_Enable(bool enable)
{
     ea0:	b510      	push	{r4, lr}
     ea2:	4604      	mov	r4, r0
#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(RTC_SYNCBUSY_CTRL);
     ea4:	2001      	movs	r0, #1
     ea6:	f7ff ffd1 	bl	e4c <RTC_Sync>
     eaa:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
     eae:	601c      	str	r4, [r3, #0]
     eb0:	bd10      	pop	{r4, pc}
	...

00000eb4 <RTC_Init>:
    tmp = 0;
  }

  /* Configure DEBUGRUN flag, sets whether or not counter should be
   * updated when debugger is active */
  if (init->debugRun)
     eb4:	7843      	ldrb	r3, [r0, #1]
 *
 * @param[in] init
 *   Pointer to RTC initialization structure.
 ******************************************************************************/
void RTC_Init(const RTC_Init_TypeDef *init)
{
     eb6:	b510      	push	{r4, lr}
  uint32_t tmp;

  if (init->enable)
  {
    tmp = RTC_CTRL_EN;
     eb8:	7804      	ldrb	r4, [r0, #0]
    tmp = 0;
  }

  /* Configure DEBUGRUN flag, sets whether or not counter should be
   * updated when debugger is active */
  if (init->debugRun)
     eba:	b10b      	cbz	r3, ec0 <RTC_Init+0xc>
  {
    tmp |= RTC_CTRL_DEBUGRUN;
     ebc:	f044 0402 	orr.w	r4, r4, #2
  }

  /* Configure COMP0TOP, this will use the COMP0 compare value as an
   * overflow value, instead of default 24-bit 0x00ffffff */
  if (init->comp0Top)
     ec0:	7883      	ldrb	r3, [r0, #2]
     ec2:	b10b      	cbz	r3, ec8 <RTC_Init+0x14>
  {
    tmp |= RTC_CTRL_COMP0TOP;
     ec4:	f044 0404 	orr.w	r4, r4, #4
  }

#if defined(_EFM32_GECKO_FAMILY)
  /* LF register about to be modified require sync. busy check */
  RTC_Sync(RTC_SYNCBUSY_CTRL);
     ec8:	2001      	movs	r0, #1
     eca:	f7ff ffbf 	bl	e4c <RTC_Sync>
#endif

  RTC->CTRL = tmp;
     ece:	4b01      	ldr	r3, [pc, #4]	; (ed4 <RTC_Init+0x20>)
     ed0:	601c      	str	r4, [r3, #0]
     ed2:	bd10      	pop	{r4, pc}
     ed4:	40080000 	.word	0x40080000

00000ed8 <MSC_Init>:
{
#if defined( _MSC_TIMEBASE_MASK )
  uint32_t freq, cycles;
#endif
  /* Unlock the MSC */
  MSC->LOCK = MSC_UNLOCK_CODE;
     ed8:	4b04      	ldr	r3, [pc, #16]	; (eec <MSC_Init+0x14>)
     eda:	f641 3271 	movw	r2, #7025	; 0x1b71
     ede:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Disable writing to the flash */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
     ee0:	689a      	ldr	r2, [r3, #8]
     ee2:	f022 0201 	bic.w	r2, r2, #1
     ee6:	609a      	str	r2, [r3, #8]
     ee8:	4770      	bx	lr
     eea:	bf00      	nop
     eec:	400c0000 	.word	0x400c0000

00000ef0 <MSC_Deinit>:
 *   Disables the flash controller for writing.
 ******************************************************************************/
void MSC_Deinit(void)
{
  /* Disable writing to the flash */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
     ef0:	4b03      	ldr	r3, [pc, #12]	; (f00 <MSC_Deinit+0x10>)
     ef2:	689a      	ldr	r2, [r3, #8]
     ef4:	f022 0201 	bic.w	r2, r2, #1
     ef8:	609a      	str	r2, [r3, #8]
  /* Lock the MSC */
  MSC->LOCK = 0;
     efa:	2200      	movs	r2, #0
     efc:	63da      	str	r2, [r3, #60]	; 0x3c
     efe:	4770      	bx	lr
     f00:	400c0000 	.word	0x400c0000

00000f04 <SYSTEM_ChipRevisionGet>:
 *
 * @param[out] rev
 *   Location to place chip revision info.
 ******************************************************************************/
void SYSTEM_ChipRevisionGet(SYSTEM_ChipRevision_TypeDef *rev)
{
     f04:	b510      	push	{r4, lr}
  uint8_t tmp;

  EFM_ASSERT(rev);
     f06:	4604      	mov	r4, r0
     f08:	b918      	cbnz	r0, f12 <SYSTEM_ChipRevisionGet+0xe>
     f0a:	4809      	ldr	r0, [pc, #36]	; (f30 <SYSTEM_ChipRevisionGet+0x2c>)
     f0c:	213e      	movs	r1, #62	; 0x3e
     f0e:	f7ff f9cf 	bl	2b0 <assertEFM>

  rev->major = (ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT;
     f12:	4b08      	ldr	r3, [pc, #32]	; (f34 <SYSTEM_ChipRevisionGet+0x30>)
     f14:	691a      	ldr	r2, [r3, #16]
     f16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     f1a:	7022      	strb	r2, [r4, #0]

  tmp        = (ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK);
     f1c:	699a      	ldr	r2, [r3, #24]
  tmp       |= ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
     f1e:	69db      	ldr	r3, [r3, #28]

  EFM_ASSERT(rev);

  rev->major = (ROMTABLE->PID0 & _ROMTABLE_PID0_REVMAJOR_MASK) >> _ROMTABLE_PID0_REVMAJOR_SHIFT;

  tmp        = (ROMTABLE->PID2 & _ROMTABLE_PID2_REVMINORMSB_MASK);
     f20:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
  tmp       |= ((ROMTABLE->PID3 & _ROMTABLE_PID3_REVMINORLSB_MASK) >> _ROMTABLE_PID3_REVMINORLSB_SHIFT);
     f24:	f3c3 1303 	ubfx	r3, r3, #4, #4
     f28:	4313      	orrs	r3, r2
  rev->minor = tmp;
     f2a:	7063      	strb	r3, [r4, #1]
     f2c:	bd10      	pop	{r4, pc}
     f2e:	bf00      	nop
     f30:	00006226 	.word	0x00006226
     f34:	e00fffd0 	.word	0xe00fffd0

00000f38 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv  /* Physical drive nmuber (0) */
)
{
     f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
     f3a:	2800      	cmp	r0, #0
     f3c:	f040 808f 	bne.w	105e <disk_initialize+0x126>
  if (stat & STA_NODISK) return stat;           /* No card in the socket */
     f40:	4e48      	ldr	r6, [pc, #288]	; (1064 <disk_initialize+0x12c>)
     f42:	7830      	ldrb	r0, [r6, #0]
     f44:	0783      	lsls	r3, r0, #30
     f46:	f100 808b 	bmi.w	1060 <disk_initialize+0x128>

  MICROSD_PowerOn();                            /* Force socket power on */
     f4a:	f002 fb3d 	bl	35c8 <MICROSD_PowerOn>
  MICROSD_SpiClkSlow();                         /* Start with low SPI clock. */
     f4e:	f002 fd1f 	bl	3990 <MICROSD_SpiClkSlow>
     f52:	250a      	movs	r5, #10
  for (n = 10; n; n--) MICROSD_XferSpi(0xff);   /* 80 dummy clocks */
     f54:	20ff      	movs	r0, #255	; 0xff
     f56:	3d01      	subs	r5, #1
     f58:	f002 fb00 	bl	355c <MICROSD_XferSpi>
     f5c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
     f60:	d1f8      	bne.n	f54 <disk_initialize+0x1c>

  ty = 0;
  if (MICROSD_SendCmd(CMD0, 0) == 1) {          /* Enter Idle state */
     f62:	4628      	mov	r0, r5
     f64:	4629      	mov	r1, r5
     f66:	f002 fcd5 	bl	3914 <MICROSD_SendCmd>
     f6a:	2801      	cmp	r0, #1
     f6c:	4604      	mov	r4, r0
     f6e:	d001      	beq.n	f74 <disk_initialize+0x3c>

  MICROSD_PowerOn();                            /* Force socket power on */
  MICROSD_SpiClkSlow();                         /* Start with low SPI clock. */
  for (n = 10; n; n--) MICROSD_XferSpi(0xff);   /* 80 dummy clocks */

  ty = 0;
     f70:	2400      	movs	r4, #0
     f72:	e060      	b.n	1036 <disk_initialize+0xfe>
  if (MICROSD_SendCmd(CMD0, 0) == 1) {          /* Enter Idle state */
    MICROSD_TimeOutSet(1000);                   /* Initialization timeout of 1000 msec */
     f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f78:	f002 fd2c 	bl	39d4 <MICROSD_TimeOutSet>
    if (MICROSD_SendCmd(CMD8, 0x1AA) == 1) {    /* SDv2? */
     f7c:	2008      	movs	r0, #8
     f7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
     f82:	f002 fcc7 	bl	3914 <MICROSD_SendCmd>
     f86:	2801      	cmp	r0, #1
     f88:	d135      	bne.n	ff6 <disk_initialize+0xbe>
      for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff); /* Get trailing return value of R7 resp */
     f8a:	20ff      	movs	r0, #255	; 0xff
     f8c:	f002 fae6 	bl	355c <MICROSD_XferSpi>
     f90:	af01      	add	r7, sp, #4
     f92:	5578      	strb	r0, [r7, r5]
     f94:	3501      	adds	r5, #1
     f96:	2d04      	cmp	r5, #4
     f98:	d1f7      	bne.n	f8a <disk_initialize+0x52>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {   /* The card can work at vdd range of 2.7-3.6V */
     f9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f9e:	2b01      	cmp	r3, #1
     fa0:	d1e6      	bne.n	f70 <disk_initialize+0x38>
     fa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fa6:	2baa      	cmp	r3, #170	; 0xaa
     fa8:	d1e2      	bne.n	f70 <disk_initialize+0x38>
        while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(ACMD41, 0x40000000)); /* Wait for leaving idle state (ACMD41 with HCS bit) */
     faa:	f002 fd1d 	bl	39e8 <MICROSD_TimeOutElapsed>
     fae:	b128      	cbz	r0, fbc <disk_initialize+0x84>
        if (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
     fb0:	f002 fd1a 	bl	39e8 <MICROSD_TimeOutElapsed>
     fb4:	4601      	mov	r1, r0
     fb6:	2800      	cmp	r0, #0
     fb8:	d1da      	bne.n	f70 <disk_initialize+0x38>
     fba:	e007      	b.n	fcc <disk_initialize+0x94>
  if (MICROSD_SendCmd(CMD0, 0) == 1) {          /* Enter Idle state */
    MICROSD_TimeOutSet(1000);                   /* Initialization timeout of 1000 msec */
    if (MICROSD_SendCmd(CMD8, 0x1AA) == 1) {    /* SDv2? */
      for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff); /* Get trailing return value of R7 resp */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {   /* The card can work at vdd range of 2.7-3.6V */
        while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(ACMD41, 0x40000000)); /* Wait for leaving idle state (ACMD41 with HCS bit) */
     fbc:	20a9      	movs	r0, #169	; 0xa9
     fbe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     fc2:	f002 fca7 	bl	3914 <MICROSD_SendCmd>
     fc6:	2800      	cmp	r0, #0
     fc8:	d1ef      	bne.n	faa <disk_initialize+0x72>
     fca:	e7f1      	b.n	fb0 <disk_initialize+0x78>
        if (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
     fcc:	203a      	movs	r0, #58	; 0x3a
     fce:	f002 fca1 	bl	3914 <MICROSD_SendCmd>
     fd2:	2800      	cmp	r0, #0
     fd4:	d1cc      	bne.n	f70 <disk_initialize+0x38>
     fd6:	4604      	mov	r4, r0
          for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff);
     fd8:	20ff      	movs	r0, #255	; 0xff
     fda:	f002 fabf 	bl	355c <MICROSD_XferSpi>
     fde:	5538      	strb	r0, [r7, r4]
     fe0:	3401      	adds	r4, #1
     fe2:	2c04      	cmp	r4, #4
     fe4:	d1f8      	bne.n	fd8 <disk_initialize+0xa0>
          ty = (ocr[0] & 0x40) ? CT_SD2|CT_BLOCK : CT_SD2; /* SDv2 */
     fe6:	f89d 3004 	ldrb.w	r3, [sp, #4]
     fea:	f013 0f40 	tst.w	r3, #64	; 0x40
     fee:	bf0c      	ite	eq
     ff0:	2404      	moveq	r4, #4
     ff2:	240c      	movne	r4, #12
     ff4:	e01f      	b.n	1036 <disk_initialize+0xfe>
        }
      }
    } else {                                    /* SDv1 or MMCv3 */
      if (MICROSD_SendCmd(ACMD41, 0) <= 1) {
     ff6:	4629      	mov	r1, r5
     ff8:	20a9      	movs	r0, #169	; 0xa9
     ffa:	f002 fc8b 	bl	3914 <MICROSD_SendCmd>
     ffe:	2801      	cmp	r0, #1
        ty = CT_SD1; cmd = ACMD41;              /* SDv1 */
    1000:	bf9a      	itte	ls
    1002:	2402      	movls	r4, #2
    1004:	25a9      	movls	r5, #169	; 0xa9
      } else {
        ty = CT_MMC; cmd = CMD1;                /* MMCv3 */
    1006:	4625      	movhi	r5, r4
      }
      while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(cmd, 0));     /* Wait for leaving idle state */
    1008:	f002 fcee 	bl	39e8 <MICROSD_TimeOutElapsed>
    100c:	4601      	mov	r1, r0
    100e:	b160      	cbz	r0, 102a <disk_initialize+0xf2>
      if (MICROSD_TimeOutElapsed() || MICROSD_SendCmd(CMD16, 512) != 0) /* Set read/write block length to 512 */
    1010:	f002 fcea 	bl	39e8 <MICROSD_TimeOutElapsed>
    1014:	2800      	cmp	r0, #0
    1016:	d1ab      	bne.n	f70 <disk_initialize+0x38>
    1018:	2010      	movs	r0, #16
    101a:	f44f 7100 	mov.w	r1, #512	; 0x200
    101e:	f002 fc79 	bl	3914 <MICROSD_SendCmd>
        ty = 0;
    1022:	2800      	cmp	r0, #0
    1024:	bf18      	it	ne
    1026:	2400      	movne	r4, #0
    1028:	e005      	b.n	1036 <disk_initialize+0xfe>
      if (MICROSD_SendCmd(ACMD41, 0) <= 1) {
        ty = CT_SD1; cmd = ACMD41;              /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;                /* MMCv3 */
      }
      while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(cmd, 0));     /* Wait for leaving idle state */
    102a:	4628      	mov	r0, r5
    102c:	f002 fc72 	bl	3914 <MICROSD_SendCmd>
    1030:	2800      	cmp	r0, #0
    1032:	d1e9      	bne.n	1008 <disk_initialize+0xd0>
    1034:	e7ec      	b.n	1010 <disk_initialize+0xd8>
      if (MICROSD_TimeOutElapsed() || MICROSD_SendCmd(CMD16, 512) != 0) /* Set read/write block length to 512 */
        ty = 0;
    }
  }
  CardType = ty;
    1036:	4b0c      	ldr	r3, [pc, #48]	; (1068 <disk_initialize+0x130>)
    1038:	801c      	strh	r4, [r3, #0]
  MICROSD_Deselect();
    103a:	f002 faad 	bl	3598 <MICROSD_Deselect>

  if (ty) {                                     /* Initialization succeded */
    103e:	b134      	cbz	r4, 104e <disk_initialize+0x116>
    stat &= ~STA_NOINIT;                        /* Clear STA_NOINIT */
    1040:	7833      	ldrb	r3, [r6, #0]
    1042:	f023 0301 	bic.w	r3, r3, #1
    1046:	7033      	strb	r3, [r6, #0]
    MICROSD_SpiClkFast();                       /* Speed up SPI clock. */
    1048:	f002 fcb2 	bl	39b0 <MICROSD_SpiClkFast>
    104c:	e005      	b.n	105a <disk_initialize+0x122>
  } else {                                      /* Initialization failed */
    MICROSD_PowerOff();
    104e:	f002 faef 	bl	3630 <MICROSD_PowerOff>
    stat |= STA_NOINIT;                         /* Set STA_NOINIT */
    1052:	7833      	ldrb	r3, [r6, #0]
    1054:	f043 0301 	orr.w	r3, r3, #1
    1058:	7033      	strb	r3, [r6, #0]
  }

  return stat;
    105a:	7830      	ldrb	r0, [r6, #0]
    105c:	e000      	b.n	1060 <disk_initialize+0x128>
  BYTE drv  /* Physical drive nmuber (0) */
)
{
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
    105e:	2001      	movs	r0, #1
    MICROSD_PowerOff();
    stat |= STA_NOINIT;                         /* Set STA_NOINIT */
  }

  return stat;
}
    1060:	b003      	add	sp, #12
    1062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1064:	20000008 	.word	0x20000008
    1068:	20000b24 	.word	0x20000b24

0000106c <disk_status>:

DSTATUS disk_status (
  BYTE drv                        /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;     /* Supports only single drive */
    106c:	b910      	cbnz	r0, 1074 <disk_status+0x8>
  return stat;
    106e:	4b02      	ldr	r3, [pc, #8]	; (1078 <disk_status+0xc>)
    1070:	7818      	ldrb	r0, [r3, #0]
    1072:	4770      	bx	lr

DSTATUS disk_status (
  BYTE drv                        /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;     /* Supports only single drive */
    1074:	2001      	movs	r0, #1
  return stat;
}
    1076:	4770      	bx	lr
    1078:	20000008 	.word	0x20000008

0000107c <disk_read>:
  BYTE drv,       /* Physical drive nmuber (0) */
  BYTE *buff,     /* Pointer to the data buffer to store read data */
  DWORD sector,   /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    107c:	b538      	push	{r3, r4, r5, lr}
    107e:	460d      	mov	r5, r1
    1080:	461c      	mov	r4, r3
    1082:	4611      	mov	r1, r2
  if (drv || !count) return RES_PARERR;
    1084:	2800      	cmp	r0, #0
    1086:	d133      	bne.n	10f0 <disk_read+0x74>
    1088:	b393      	cbz	r3, 10f0 <disk_read+0x74>
  if (stat & STA_NOINIT) return RES_NOTRDY;
    108a:	4b1b      	ldr	r3, [pc, #108]	; (10f8 <disk_read+0x7c>)
    108c:	781b      	ldrb	r3, [r3, #0]
    108e:	07da      	lsls	r2, r3, #31
    1090:	d430      	bmi.n	10f4 <disk_read+0x78>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    1092:	4b1a      	ldr	r3, [pc, #104]	; (10fc <disk_read+0x80>)
    1094:	881b      	ldrh	r3, [r3, #0]
    1096:	071b      	lsls	r3, r3, #28
    1098:	bf58      	it	pl
    109a:	0249      	lslpl	r1, r1, #9

  if (count == 1) {                           /* Single block read */
    109c:	2c01      	cmp	r4, #1
    109e:	d10d      	bne.n	10bc <disk_read+0x40>
    if ((MICROSD_SendCmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
    10a0:	2011      	movs	r0, #17
    10a2:	f002 fc37 	bl	3914 <MICROSD_SendCmd>
    10a6:	b9e8      	cbnz	r0, 10e4 <disk_read+0x68>
      && MICROSD_BlockRx(buff, 512))
    10a8:	4628      	mov	r0, r5
    10aa:	f44f 7100 	mov.w	r1, #512	; 0x200
    10ae:	f002 fb89 	bl	37c4 <MICROSD_BlockRx>
    10b2:	f1d0 0401 	rsbs	r4, r0, #1
    10b6:	bf38      	it	cc
    10b8:	2400      	movcc	r4, #0
    10ba:	e013      	b.n	10e4 <disk_read+0x68>
      count = 0;
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    10bc:	2012      	movs	r0, #18
    10be:	f002 fc29 	bl	3914 <MICROSD_SendCmd>
    10c2:	b978      	cbnz	r0, 10e4 <disk_read+0x68>
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
    10c4:	4628      	mov	r0, r5
    10c6:	f44f 7100 	mov.w	r1, #512	; 0x200
    10ca:	f002 fb7b 	bl	37c4 <MICROSD_BlockRx>
    10ce:	b128      	cbz	r0, 10dc <disk_read+0x60>
        buff += 512;
      } while (--count);
    10d0:	3c01      	subs	r4, #1
    10d2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
        buff += 512;
    10d6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
    10da:	d1f3      	bne.n	10c4 <disk_read+0x48>
      MICROSD_SendCmd(CMD12, 0);                /* STOP_TRANSMISSION */
    10dc:	200c      	movs	r0, #12
    10de:	2100      	movs	r1, #0
    10e0:	f002 fc18 	bl	3914 <MICROSD_SendCmd>
    }
  }
  MICROSD_Deselect();
    10e4:	f002 fa58 	bl	3598 <MICROSD_Deselect>

  return count ? RES_ERROR : RES_OK;
    10e8:	1c20      	adds	r0, r4, #0
    10ea:	bf18      	it	ne
    10ec:	2001      	movne	r0, #1
    10ee:	bd38      	pop	{r3, r4, r5, pc}
  BYTE *buff,     /* Pointer to the data buffer to store read data */
  DWORD sector,   /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
  if (drv || !count) return RES_PARERR;
    10f0:	2004      	movs	r0, #4
    10f2:	bd38      	pop	{r3, r4, r5, pc}
  if (stat & STA_NOINIT) return RES_NOTRDY;
    10f4:	2003      	movs	r0, #3
    }
  }
  MICROSD_Deselect();

  return count ? RES_ERROR : RES_OK;
}
    10f6:	bd38      	pop	{r3, r4, r5, pc}
    10f8:	20000008 	.word	0x20000008
    10fc:	20000b24 	.word	0x20000b24

00001100 <disk_write>:
  BYTE drv,           /* Physical drive nmuber (0) */
  const BYTE *buff,   /* Pointer to the data to be written */
  DWORD sector,       /* Start sector number (LBA) */
  BYTE count          /* Sector count (1..255) */
)
{
    1100:	b570      	push	{r4, r5, r6, lr}
    1102:	460d      	mov	r5, r1
    1104:	4616      	mov	r6, r2
    1106:	461c      	mov	r4, r3
  if (drv || !count) return RES_PARERR;
    1108:	2800      	cmp	r0, #0
    110a:	d140      	bne.n	118e <disk_write+0x8e>
    110c:	2b00      	cmp	r3, #0
    110e:	d03e      	beq.n	118e <disk_write+0x8e>
  if (stat & STA_NOINIT) return RES_NOTRDY;
    1110:	4b22      	ldr	r3, [pc, #136]	; (119c <disk_write+0x9c>)
    1112:	781b      	ldrb	r3, [r3, #0]
    1114:	07d8      	lsls	r0, r3, #31
    1116:	d43c      	bmi.n	1192 <disk_write+0x92>
  if (stat & STA_PROTECT) return RES_WRPRT;
    1118:	0759      	lsls	r1, r3, #29
    111a:	d43c      	bmi.n	1196 <disk_write+0x96>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    111c:	4b20      	ldr	r3, [pc, #128]	; (11a0 <disk_write+0xa0>)
    111e:	881b      	ldrh	r3, [r3, #0]
    1120:	071a      	lsls	r2, r3, #28
    1122:	bf58      	it	pl
    1124:	0276      	lslpl	r6, r6, #9

  if (count == 1) {                           /* Single block write */
    1126:	2c01      	cmp	r4, #1
    1128:	d10d      	bne.n	1146 <disk_write+0x46>
    if ((MICROSD_SendCmd(CMD24, sector) == 0) /* WRITE_BLOCK */
    112a:	2018      	movs	r0, #24
    112c:	4631      	mov	r1, r6
    112e:	f002 fbf1 	bl	3914 <MICROSD_SendCmd>
    1132:	bb30      	cbnz	r0, 1182 <disk_write+0x82>
      && MICROSD_BlockTx(buff, 0xFE))
    1134:	4628      	mov	r0, r5
    1136:	21fe      	movs	r1, #254	; 0xfe
    1138:	f002 fb96 	bl	3868 <MICROSD_BlockTx>
    113c:	f1d0 0401 	rsbs	r4, r0, #1
    1140:	bf38      	it	cc
    1142:	2400      	movcc	r4, #0
    1144:	e01d      	b.n	1182 <disk_write+0x82>
      count = 0;
  }
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    1146:	f013 0f06 	tst.w	r3, #6
    114a:	d003      	beq.n	1154 <disk_write+0x54>
    114c:	2097      	movs	r0, #151	; 0x97
    114e:	4621      	mov	r1, r4
    1150:	f002 fbe0 	bl	3914 <MICROSD_SendCmd>
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
    1154:	2019      	movs	r0, #25
    1156:	4631      	mov	r1, r6
    1158:	f002 fbdc 	bl	3914 <MICROSD_SendCmd>
    115c:	b988      	cbnz	r0, 1182 <disk_write+0x82>
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
    115e:	4628      	mov	r0, r5
    1160:	21fc      	movs	r1, #252	; 0xfc
    1162:	f002 fb81 	bl	3868 <MICROSD_BlockTx>
    1166:	b128      	cbz	r0, 1174 <disk_write+0x74>
        buff += 512;
      } while (--count);
    1168:	3c01      	subs	r4, #1
    116a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
        buff += 512;
    116e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
    1172:	d1f4      	bne.n	115e <disk_write+0x5e>
      if (!MICROSD_BlockTx(0, 0xFD))          /* STOP_TRAN token */
    1174:	2000      	movs	r0, #0
    1176:	21fd      	movs	r1, #253	; 0xfd
    1178:	f002 fb76 	bl	3868 <MICROSD_BlockTx>
        count = 1;
    117c:	2800      	cmp	r0, #0
    117e:	bf08      	it	eq
    1180:	2401      	moveq	r4, #1
    }
  }
  MICROSD_Deselect();
    1182:	f002 fa09 	bl	3598 <MICROSD_Deselect>

  return count ? RES_ERROR : RES_OK;
    1186:	1c20      	adds	r0, r4, #0
    1188:	bf18      	it	ne
    118a:	2001      	movne	r0, #1
    118c:	bd70      	pop	{r4, r5, r6, pc}
  const BYTE *buff,   /* Pointer to the data to be written */
  DWORD sector,       /* Start sector number (LBA) */
  BYTE count          /* Sector count (1..255) */
)
{
  if (drv || !count) return RES_PARERR;
    118e:	2004      	movs	r0, #4
    1190:	bd70      	pop	{r4, r5, r6, pc}
  if (stat & STA_NOINIT) return RES_NOTRDY;
    1192:	2003      	movs	r0, #3
    1194:	bd70      	pop	{r4, r5, r6, pc}
  if (stat & STA_PROTECT) return RES_WRPRT;
    1196:	2002      	movs	r0, #2
    }
  }
  MICROSD_Deselect();

  return count ? RES_ERROR : RES_OK;
}
    1198:	bd70      	pop	{r4, r5, r6, pc}
    119a:	bf00      	nop
    119c:	20000008 	.word	0x20000008
    11a0:	20000b24 	.word	0x20000b24

000011a4 <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,     /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive data block */
)
{
    11a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11a6:	4615      	mov	r5, r2
    11a8:	b085      	sub	sp, #20
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  DWORD csize;


  if (drv) return RES_PARERR;
    11aa:	2800      	cmp	r0, #0
    11ac:	f040 80e3 	bne.w	1376 <disk_ioctl+0x1d2>
  if (stat & STA_NOINIT) return RES_NOTRDY;
    11b0:	4b73      	ldr	r3, [pc, #460]	; (1380 <disk_ioctl+0x1dc>)
    11b2:	781a      	ldrb	r2, [r3, #0]
    11b4:	07d2      	lsls	r2, r2, #31
    11b6:	f100 80e0 	bmi.w	137a <disk_ioctl+0x1d6>

  res = RES_ERROR;
  switch (ctrl) {
    11ba:	290e      	cmp	r1, #14
    11bc:	f200 80d4 	bhi.w	1368 <disk_ioctl+0x1c4>
    11c0:	e8df f001 	tbb	[pc, r1]
    11c4:	4f4b1308 	.word	0x4f4b1308
    11c8:	d2d2d2d2 	.word	0xd2d2d2d2
    11cc:	a19dd210 	.word	0xa19dd210
    11d0:	afa3      	.short	0xafa3
    11d2:	bf          	.byte	0xbf
    11d3:	00          	.byte	0x00
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
    11d4:	f002 f9e8 	bl	35a8 <MICROSD_Select>
    11d8:	b908      	cbnz	r0, 11de <disk_ioctl+0x3a>


  if (drv) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;

  res = RES_ERROR;
    11da:	2401      	movs	r4, #1
    11dc:	e0c7      	b.n	136e <disk_ioctl+0x1ca>
  switch (ctrl) {
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
        MICROSD_Deselect();
    11de:	f002 f9db 	bl	3598 <MICROSD_Deselect>
    11e2:	e0c3      	b.n	136c <disk_ioctl+0x1c8>
        res = RES_OK;
      }
      break;

    case CTRL_INVALIDATE :          /* Used when unmounting */
      stat = STA_NOINIT;            /* Set disk status */
    11e4:	2201      	movs	r2, #1
    11e6:	701a      	strb	r2, [r3, #0]
    11e8:	e0c0      	b.n	136c <disk_ioctl+0x1c8>
      res = RES_OK;
      break;

    case GET_SECTOR_COUNT :         /* Get number of sectors on the disk (WORD) */
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
    11ea:	2009      	movs	r0, #9
    11ec:	2100      	movs	r1, #0
    11ee:	f002 fb91 	bl	3914 <MICROSD_SendCmd>
    11f2:	4604      	mov	r4, r0
    11f4:	2800      	cmp	r0, #0
    11f6:	d1f0      	bne.n	11da <disk_ioctl+0x36>
    11f8:	4668      	mov	r0, sp
    11fa:	2110      	movs	r1, #16
    11fc:	f002 fae2 	bl	37c4 <MICROSD_BlockRx>
    1200:	2800      	cmp	r0, #0
    1202:	d0ea      	beq.n	11da <disk_ioctl+0x36>
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
    1204:	f89d 3000 	ldrb.w	r3, [sp]
    1208:	f89d 2008 	ldrb.w	r2, [sp, #8]
    120c:	099b      	lsrs	r3, r3, #6
    120e:	2b01      	cmp	r3, #1
    1210:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1214:	d104      	bne.n	1220 <disk_ioctl+0x7c>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    1216:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    121a:	3301      	adds	r3, #1
          *(DWORD*)buff = (DWORD)csize << 10;
    121c:	029b      	lsls	r3, r3, #10
    121e:	e01a      	b.n	1256 <disk_ioctl+0xb2>
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1220:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1224:	f89d 000a 	ldrb.w	r0, [sp, #10]
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1228:	0089      	lsls	r1, r1, #2
    122a:	eb01 1292 	add.w	r2, r1, r2, lsr #6
    122e:	f89d 1006 	ldrb.w	r1, [sp, #6]
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1232:	f003 0303 	and.w	r3, r3, #3
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1236:	f001 0103 	and.w	r1, r1, #3
    123a:	eb02 2281 	add.w	r2, r2, r1, lsl #10
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    123e:	f89d 1005 	ldrb.w	r1, [sp, #5]
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    1242:	3201      	adds	r2, #1
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    1244:	f001 010f 	and.w	r1, r1, #15
    1248:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    124c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    1250:	3b07      	subs	r3, #7
    1252:	fa02 f303 	lsl.w	r3, r2, r3
    1256:	602b      	str	r3, [r5, #0]
    1258:	e089      	b.n	136e <disk_ioctl+0x1ca>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :          /* Get sectors on the disk (WORD) */
      *(WORD*)buff = 512;
    125a:	f44f 7300 	mov.w	r3, #512	; 0x200
    125e:	802b      	strh	r3, [r5, #0]
    1260:	e084      	b.n	136c <disk_ioctl+0x1c8>
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :           /* Get erase block size in unit of sectors (DWORD) */
      if (CardType & CT_SD2) {      /* SDv2? */
    1262:	4e48      	ldr	r6, [pc, #288]	; (1384 <disk_ioctl+0x1e0>)
    1264:	8831      	ldrh	r1, [r6, #0]
    1266:	f001 0104 	and.w	r1, r1, #4
    126a:	b289      	uxth	r1, r1
    126c:	b1d9      	cbz	r1, 12a6 <disk_ioctl+0x102>
        if (MICROSD_SendCmd(ACMD13, 0) == 0) {    /* Read SD status */
    126e:	208d      	movs	r0, #141	; 0x8d
    1270:	2100      	movs	r1, #0
    1272:	f002 fb4f 	bl	3914 <MICROSD_SendCmd>
    1276:	2800      	cmp	r0, #0
    1278:	d1af      	bne.n	11da <disk_ioctl+0x36>
          MICROSD_XferSpi(0xff);
    127a:	20ff      	movs	r0, #255	; 0xff
    127c:	f002 f96e 	bl	355c <MICROSD_XferSpi>
          if (MICROSD_BlockRx(csd, 16)) {         /* Read partial block */
    1280:	4668      	mov	r0, sp
    1282:	2110      	movs	r1, #16
    1284:	f002 fa9e 	bl	37c4 <MICROSD_BlockRx>
    1288:	2800      	cmp	r0, #0
    128a:	d0a6      	beq.n	11da <disk_ioctl+0x36>
    128c:	2430      	movs	r4, #48	; 0x30
            for (n = 64 - 16; n; n--) MICROSD_XferSpi(0xff); /* Purge trailing data */
    128e:	20ff      	movs	r0, #255	; 0xff
    1290:	3c01      	subs	r4, #1
    1292:	f002 f963 	bl	355c <MICROSD_XferSpi>
    1296:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    129a:	d1f8      	bne.n	128e <disk_ioctl+0xea>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    129c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    12a0:	2210      	movs	r2, #16
    12a2:	091b      	lsrs	r3, r3, #4
    12a4:	e7d5      	b.n	1252 <disk_ioctl+0xae>
            res = RES_OK;
          }
        }
      } else {                      /* SDv1 or MMCv3 */
        if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {  /* Read CSD */
    12a6:	2009      	movs	r0, #9
    12a8:	f002 fb34 	bl	3914 <MICROSD_SendCmd>
    12ac:	2800      	cmp	r0, #0
    12ae:	d194      	bne.n	11da <disk_ioctl+0x36>
    12b0:	4668      	mov	r0, sp
    12b2:	2110      	movs	r1, #16
    12b4:	f002 fa86 	bl	37c4 <MICROSD_BlockRx>
    12b8:	2800      	cmp	r0, #0
    12ba:	d08e      	beq.n	11da <disk_ioctl+0x36>
          if (CardType & CT_SD1) {	/* SDv1 */
    12bc:	8834      	ldrh	r4, [r6, #0]
    12be:	f89d 200a 	ldrb.w	r2, [sp, #10]
    12c2:	f004 0402 	and.w	r4, r4, #2
    12c6:	b2a4      	uxth	r4, r4
    12c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    12cc:	b164      	cbz	r4, 12e8 <disk_ioctl+0x144>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    12ce:	f89d 100d 	ldrb.w	r1, [sp, #13]
    12d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    12d6:	09db      	lsrs	r3, r3, #7
    12d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    12dc:	0989      	lsrs	r1, r1, #6
    12de:	3301      	adds	r3, #1
    12e0:	3901      	subs	r1, #1
    12e2:	408b      	lsls	r3, r1
    12e4:	602b      	str	r3, [r5, #0]
    12e6:	e041      	b.n	136c <disk_ioctl+0x1c8>
          } else {                  /* MMCv3 */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    12e8:	f003 0103 	and.w	r1, r3, #3
    12ec:	095b      	lsrs	r3, r3, #5
    12ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    12f2:	f3c2 0284 	ubfx	r2, r2, #2, #5
    12f6:	3301      	adds	r3, #1
    12f8:	fb02 3303 	mla	r3, r2, r3, r3
    12fc:	e7ab      	b.n	1256 <disk_ioctl+0xb2>
        }
      }
      break;

    case MMC_GET_TYPE :             /* Get card type flags (1 byte) */
      *ptr = CardType;
    12fe:	4b21      	ldr	r3, [pc, #132]	; (1384 <disk_ioctl+0x1e0>)
    1300:	881b      	ldrh	r3, [r3, #0]
    1302:	702b      	strb	r3, [r5, #0]
    1304:	e032      	b.n	136c <disk_ioctl+0x1c8>
      res = RES_OK;
      break;

    case MMC_GET_CSD :              /* Receive CSD as a data block (16 bytes) */
      if ((MICROSD_SendCmd(CMD9, 0) == 0)       /* READ_CSD */
    1306:	2009      	movs	r0, #9
    1308:	e000      	b.n	130c <disk_ioctl+0x168>
        && MICROSD_BlockRx(buff, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :              /* Receive CID as a data block (16 bytes) */
      if ((MICROSD_SendCmd(CMD10, 0) == 0)      /* READ_CID */
    130a:	200a      	movs	r0, #10
    130c:	2100      	movs	r1, #0
    130e:	f002 fb01 	bl	3914 <MICROSD_SendCmd>
    1312:	2800      	cmp	r0, #0
    1314:	f47f af61 	bne.w	11da <disk_ioctl+0x36>
        && MICROSD_BlockRx(buff, 16))
    1318:	4628      	mov	r0, r5
    131a:	2110      	movs	r1, #16
    131c:	f002 fa52 	bl	37c4 <MICROSD_BlockRx>
    1320:	e01d      	b.n	135e <disk_ioctl+0x1ba>
        res = RES_OK;
      break;

    case MMC_GET_OCR :              /* Receive OCR as an R3 resp (4 bytes) */
      if (MICROSD_SendCmd(CMD58, 0) == 0) {     /* READ_OCR */
    1322:	203a      	movs	r0, #58	; 0x3a
    1324:	2100      	movs	r1, #0
    1326:	f002 faf5 	bl	3914 <MICROSD_SendCmd>
    132a:	2800      	cmp	r0, #0
    132c:	f47f af55 	bne.w	11da <disk_ioctl+0x36>
    1330:	4604      	mov	r4, r0
        for (n = 0; n < 4; n++)
          *((BYTE*)buff+n) = MICROSD_XferSpi(0xff);
    1332:	20ff      	movs	r0, #255	; 0xff
    1334:	f002 f912 	bl	355c <MICROSD_XferSpi>
    1338:	5528      	strb	r0, [r5, r4]
    133a:	3401      	adds	r4, #1
        res = RES_OK;
      break;

    case MMC_GET_OCR :              /* Receive OCR as an R3 resp (4 bytes) */
      if (MICROSD_SendCmd(CMD58, 0) == 0) {     /* READ_OCR */
        for (n = 0; n < 4; n++)
    133c:	2c04      	cmp	r4, #4
    133e:	d1f8      	bne.n	1332 <disk_ioctl+0x18e>
    1340:	e014      	b.n	136c <disk_ioctl+0x1c8>
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :           /* Receive SD statsu as a data block (64 bytes) */
      if (MICROSD_SendCmd(ACMD13, 0) == 0) {    /* SD_STATUS */
    1342:	208d      	movs	r0, #141	; 0x8d
    1344:	2100      	movs	r1, #0
    1346:	f002 fae5 	bl	3914 <MICROSD_SendCmd>
    134a:	2800      	cmp	r0, #0
    134c:	f47f af45 	bne.w	11da <disk_ioctl+0x36>
        MICROSD_XferSpi(0xff);
    1350:	20ff      	movs	r0, #255	; 0xff
    1352:	f002 f903 	bl	355c <MICROSD_XferSpi>
        if (MICROSD_BlockTx(buff, 64))
    1356:	4628      	mov	r0, r5
    1358:	2140      	movs	r1, #64	; 0x40
    135a:	f002 fa85 	bl	3868 <MICROSD_BlockTx>
  res = RES_ERROR;
  switch (ctrl) {
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
        MICROSD_Deselect();
        res = RES_OK;
    135e:	f1d0 0401 	rsbs	r4, r0, #1
    1362:	bf38      	it	cc
    1364:	2400      	movcc	r4, #0
    1366:	e002      	b.n	136e <disk_ioctl+0x1ca>
          res = RES_OK;
      }
      break;

    default:
      res = RES_PARERR;
    1368:	2404      	movs	r4, #4
    136a:	e000      	b.n	136e <disk_ioctl+0x1ca>

    case MMC_GET_OCR :              /* Receive OCR as an R3 resp (4 bytes) */
      if (MICROSD_SendCmd(CMD58, 0) == 0) {     /* READ_OCR */
        for (n = 0; n < 4; n++)
          *((BYTE*)buff+n) = MICROSD_XferSpi(0xff);
        res = RES_OK;
    136c:	2400      	movs	r4, #0

    default:
      res = RES_PARERR;
  }

  MICROSD_Deselect();
    136e:	f002 f913 	bl	3598 <MICROSD_Deselect>

  return res;
    1372:	4620      	mov	r0, r4
    1374:	e002      	b.n	137c <disk_ioctl+0x1d8>
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  DWORD csize;


  if (drv) return RES_PARERR;
    1376:	2004      	movs	r0, #4
    1378:	e000      	b.n	137c <disk_ioctl+0x1d8>
  if (stat & STA_NOINIT) return RES_NOTRDY;
    137a:	2003      	movs	r0, #3
  }

  MICROSD_Deselect();

  return res;
}
    137c:	b005      	add	sp, #20
    137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1380:	20000008 	.word	0x20000008
    1384:	20000b24 	.word	0x20000b24

00001388 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    1388:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    138a:	2300      	movs	r3, #0
    138c:	b29c      	uxth	r4, r3
    138e:	42a2      	cmp	r2, r4
    1390:	d003      	beq.n	139a <mem_cpy+0x12>
		*d++ = *s++;
    1392:	5ccc      	ldrb	r4, [r1, r3]
    1394:	54c4      	strb	r4, [r0, r3]
    1396:	3301      	adds	r3, #1
    1398:	e7f8      	b.n	138c <mem_cpy+0x4>
}
    139a:	bd10      	pop	{r4, pc}

0000139c <get_fileinfo>:
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
    139c:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    139e:	b530      	push	{r4, r5, lr}
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    13a0:	f101 0209 	add.w	r2, r1, #9
	if (dj->sect) {
    13a4:	2b00      	cmp	r3, #0
    13a6:	d035      	beq.n	1414 <get_fileinfo+0x78>
		dir = dj->dir;
    13a8:	6943      	ldr	r3, [r0, #20]
    13aa:	2400      	movs	r4, #0
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    13ac:	5d18      	ldrb	r0, [r3, r4]
			if (c == ' ') break;
    13ae:	2820      	cmp	r0, #32
    13b0:	d008      	beq.n	13c4 <get_fileinfo+0x28>
			if (c == NDDE) c = (TCHAR)DDE;
    13b2:	2805      	cmp	r0, #5
    13b4:	f104 0401 	add.w	r4, r4, #1
    13b8:	bf08      	it	eq
    13ba:	20e5      	moveq	r0, #229	; 0xe5

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    13bc:	2c08      	cmp	r4, #8
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    13be:	f802 0b01 	strb.w	r0, [r2], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    13c2:	d1f3      	bne.n	13ac <get_fileinfo+0x10>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    13c4:	7a18      	ldrb	r0, [r3, #8]
    13c6:	2820      	cmp	r0, #32
    13c8:	d00d      	beq.n	13e6 <get_fileinfo+0x4a>
			*p++ = '.';
    13ca:	4610      	mov	r0, r2
    13cc:	242e      	movs	r4, #46	; 0x2e
    13ce:	f800 4b04 	strb.w	r4, [r0], #4
    13d2:	1ddd      	adds	r5, r3, #7
    13d4:	3201      	adds	r2, #1
			for (i = 8; i < 11; i++) {
				c = dir[i];
    13d6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
				if (c == ' ') break;
    13da:	2c20      	cmp	r4, #32
    13dc:	d003      	beq.n	13e6 <get_fileinfo+0x4a>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    13de:	f802 4b01 	strb.w	r4, [r2], #1
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    13e2:	4282      	cmp	r2, r0
    13e4:	d1f7      	bne.n	13d6 <get_fileinfo+0x3a>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    13e6:	7ad8      	ldrb	r0, [r3, #11]
    13e8:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    13ea:	7f98      	ldrb	r0, [r3, #30]
    13ec:	7fdc      	ldrb	r4, [r3, #31]
    13ee:	0400      	lsls	r0, r0, #16
    13f0:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
    13f4:	7f1c      	ldrb	r4, [r3, #28]
    13f6:	4320      	orrs	r0, r4
    13f8:	7f5c      	ldrb	r4, [r3, #29]
    13fa:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    13fe:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1400:	7e5c      	ldrb	r4, [r3, #25]
    1402:	7e18      	ldrb	r0, [r3, #24]
    1404:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1408:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    140a:	7dd8      	ldrb	r0, [r3, #23]
    140c:	7d9b      	ldrb	r3, [r3, #22]
    140e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1412:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    1414:	2300      	movs	r3, #0
    1416:	7013      	strb	r3, [r2, #0]
    1418:	bd30      	pop	{r4, r5, pc}

0000141a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    141a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
    141e:	6b05      	ldr	r5, [r0, #48]	; 0x30
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1420:	4604      	mov	r4, r0
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    1422:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1424:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    1426:	d102      	bne.n	142e <move_window+0x14>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1428:	2000      	movs	r0, #0
    142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    142e:	7903      	ldrb	r3, [r0, #4]
    1430:	b913      	cbnz	r3, 1438 <move_window+0x1e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    1432:	2e00      	cmp	r6, #0
    1434:	d0f8      	beq.n	1428 <move_window+0xe>
    1436:	e01f      	b.n	1478 <move_window+0x5e>

	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1438:	f100 0834 	add.w	r8, r0, #52	; 0x34
    143c:	4641      	mov	r1, r8
    143e:	7840      	ldrb	r0, [r0, #1]
    1440:	462a      	mov	r2, r5
    1442:	2301      	movs	r3, #1
    1444:	f7ff fe5c 	bl	1100 <disk_write>
    1448:	b110      	cbz	r0, 1450 <move_window+0x36>
				return FR_DISK_ERR;
    144a:	2001      	movs	r0, #1
    144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1450:	6a22      	ldr	r2, [r4, #32]
    1452:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
    1454:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1456:	4413      	add	r3, r2
    1458:	429d      	cmp	r5, r3
    145a:	d2ea      	bcs.n	1432 <move_window+0x18>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    145c:	78e7      	ldrb	r7, [r4, #3]
    145e:	2f01      	cmp	r7, #1
    1460:	d9e7      	bls.n	1432 <move_window+0x18>
					wsect += fs->fsize;
    1462:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
    1464:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
    1466:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
    1468:	4641      	mov	r1, r8
    146a:	462a      	mov	r2, r5
    146c:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    146e:	3f01      	subs	r7, #1
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
    1470:	f7ff fe46 	bl	1100 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    1474:	b2ff      	uxtb	r7, r7
    1476:	e7f2      	b.n	145e <move_window+0x44>
				}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    1478:	7860      	ldrb	r0, [r4, #1]
    147a:	f104 0134 	add.w	r1, r4, #52	; 0x34
    147e:	4632      	mov	r2, r6
    1480:	2301      	movs	r3, #1
    1482:	f7ff fdfb 	bl	107c <disk_read>
    1486:	2800      	cmp	r0, #0
    1488:	d1df      	bne.n	144a <move_window+0x30>
				return FR_DISK_ERR;
			fs->winsect = sector;
    148a:	6326      	str	r6, [r4, #48]	; 0x30
		}
	}

	return FR_OK;
}
    148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001490 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1490:	b510      	push	{r4, lr}
    1492:	4604      	mov	r4, r0
    1494:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1496:	7840      	ldrb	r0, [r0, #1]
    1498:	f104 0134 	add.w	r1, r4, #52	; 0x34
    149c:	2301      	movs	r3, #1
    149e:	f7ff fded 	bl	107c <disk_read>
    14a2:	bb80      	cbnz	r0, 1506 <check_fs+0x76>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    14a4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    14a8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    14ac:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    14b0:	4b17      	ldr	r3, [pc, #92]	; (1510 <check_fs+0x80>)
    14b2:	b212      	sxth	r2, r2
    14b4:	429a      	cmp	r2, r3
    14b6:	d128      	bne.n	150a <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    14b8:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
    14bc:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
    14c0:	0412      	lsls	r2, r2, #16
    14c2:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    14c6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    14ca:	431a      	orrs	r2, r3
    14cc:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    14d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    14d4:	4b0f      	ldr	r3, [pc, #60]	; (1514 <check_fs+0x84>)
    14d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    14da:	429a      	cmp	r2, r3
    14dc:	d016      	beq.n	150c <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    14de:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
    14e2:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
    14e6:	0400      	lsls	r0, r0, #16
    14e8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
    14ec:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
    14f0:	4310      	orrs	r0, r2
    14f2:	f894 2087 	ldrb.w	r2, [r4, #135]	; 0x87
    14f6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    14fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 0;
    14fe:	1ac0      	subs	r0, r0, r3
    1500:	bf18      	it	ne
    1502:	2001      	movne	r0, #1
    1504:	bd10      	pop	{r4, pc}
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    1506:	2003      	movs	r0, #3
    1508:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    150a:	2002      	movs	r0, #2
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    150c:	bd10      	pop	{r4, pc}
    150e:	bf00      	nop
    1510:	ffffaa55 	.word	0xffffaa55
    1514:	00544146 	.word	0x00544146

00001518 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    1518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    151c:	4615      	mov	r5, r2
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    151e:	6802      	ldr	r2, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    1520:	7813      	ldrb	r3, [r2, #0]
    1522:	3b30      	subs	r3, #48	; 0x30
    1524:	b29b      	uxth	r3, r3
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    1526:	2b09      	cmp	r3, #9
    1528:	d805      	bhi.n	1536 <chk_mounted+0x1e>
    152a:	7854      	ldrb	r4, [r2, #1]
    152c:	2c3a      	cmp	r4, #58	; 0x3a
    152e:	d102      	bne.n	1536 <chk_mounted+0x1e>
		p += 2; *path = p;				/* Return pointer to the path name */
    1530:	3202      	adds	r2, #2
    1532:	6002      	str	r2, [r0, #0]
    1534:	e001      	b.n	153a <chk_mounted+0x22>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    1536:	4bb6      	ldr	r3, [pc, #728]	; (1810 <chk_mounted+0x2f8>)
    1538:	781b      	ldrb	r3, [r3, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    153a:	2b00      	cmp	r3, #0
    153c:	f040 8156 	bne.w	17ec <chk_mounted+0x2d4>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    1540:	4bb4      	ldr	r3, [pc, #720]	; (1814 <chk_mounted+0x2fc>)
    1542:	681c      	ldr	r4, [r3, #0]
    1544:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1546:	2c00      	cmp	r4, #0
    1548:	f000 8153 	beq.w	17f2 <chk_mounted+0x2da>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    154c:	7823      	ldrb	r3, [r4, #0]
    154e:	b173      	cbz	r3, 156e <chk_mounted+0x56>
		stat = disk_status(fs->drv);
    1550:	7860      	ldrb	r0, [r4, #1]
    1552:	f7ff fd8b 	bl	106c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    1556:	07c6      	lsls	r6, r0, #31
    1558:	d409      	bmi.n	156e <chk_mounted+0x56>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    155a:	2d00      	cmp	r5, #0
    155c:	f000 814c 	beq.w	17f8 <chk_mounted+0x2e0>
				return FR_WRITE_PROTECTED;
    1560:	f010 0f04 	tst.w	r0, #4
    1564:	bf0c      	ite	eq
    1566:	2000      	moveq	r0, #0
    1568:	200a      	movne	r0, #10
    156a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    156e:	2000      	movs	r0, #0
    1570:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1572:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    1574:	f7ff fce0 	bl	f38 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    1578:	07c1      	lsls	r1, r0, #31
    157a:	f100 8140 	bmi.w	17fe <chk_mounted+0x2e6>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    157e:	b115      	cbz	r5, 1586 <chk_mounted+0x6e>
    1580:	0742      	lsls	r2, r0, #29
    1582:	f100 813f 	bmi.w	1804 <chk_mounted+0x2ec>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    1586:	4620      	mov	r0, r4
    1588:	2100      	movs	r1, #0
    158a:	f7ff ff81 	bl	1490 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    158e:	2801      	cmp	r0, #1
    1590:	d118      	bne.n	15c4 <chk_mounted+0xac>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    1592:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
    1596:	b913      	cbnz	r3, 159e <chk_mounted+0x86>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1598:	200d      	movs	r0, #13
    159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    159e:	f894 61fc 	ldrb.w	r6, [r4, #508]	; 0x1fc
    15a2:	f894 31fd 	ldrb.w	r3, [r4, #509]	; 0x1fd
    15a6:	0436      	lsls	r6, r6, #16
    15a8:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
    15ac:	f894 31fa 	ldrb.w	r3, [r4, #506]	; 0x1fa
			fmt = check_fs(fs, bsect);		/* Check the partition */
    15b0:	4620      	mov	r0, r4
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    15b2:	431e      	orrs	r6, r3
    15b4:	f894 31fb 	ldrb.w	r3, [r4, #507]	; 0x1fb
    15b8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
    15bc:	4631      	mov	r1, r6
    15be:	f7ff ff67 	bl	1490 <check_fs>
    15c2:	e000      	b.n	15c6 <chk_mounted+0xae>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    15c4:	2600      	movs	r6, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    15c6:	2803      	cmp	r0, #3
    15c8:	f000 811f 	beq.w	180a <chk_mounted+0x2f2>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    15cc:	2800      	cmp	r0, #0
    15ce:	d1e3      	bne.n	1598 <chk_mounted+0x80>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    15d0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    15d4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    15d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    15dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    15e0:	d1da      	bne.n	1598 <chk_mounted+0x80>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    15e2:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
    15e6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    15ea:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
    15ee:	d10d      	bne.n	160c <chk_mounted+0xf4>
    15f0:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    15f4:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    15f8:	0400      	lsls	r0, r0, #16
    15fa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
    15fe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    1602:	4318      	orrs	r0, r3
    1604:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    1608:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    160c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;
    1610:	6220      	str	r0, [r4, #32]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1612:	1e6b      	subs	r3, r5, #1
    1614:	2b01      	cmp	r3, #1

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    1616:	70e5      	strb	r5, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1618:	d8be      	bhi.n	1598 <chk_mounted+0x80>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    161a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
    161e:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1620:	2900      	cmp	r1, #0
    1622:	d0b9      	beq.n	1598 <chk_mounted+0x80>
    1624:	1e4b      	subs	r3, r1, #1
    1626:	420b      	tst	r3, r1
    1628:	d1b6      	bne.n	1598 <chk_mounted+0x80>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    162a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    162e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
    1632:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1636:	0713      	lsls	r3, r2, #28
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    1638:	8122      	strh	r2, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    163a:	d1ad      	bne.n	1598 <chk_mounted+0x80>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    163c:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
    1640:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1644:	ea53 2307 	orrs.w	r3, r3, r7, lsl #8
    1648:	d10d      	bne.n	1666 <chk_mounted+0x14e>
    164a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
    164e:	f894 7057 	ldrb.w	r7, [r4, #87]	; 0x57
    1652:	041b      	lsls	r3, r3, #16
    1654:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
    1658:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
    165c:	433b      	orrs	r3, r7
    165e:	f894 7055 	ldrb.w	r7, [r4, #85]	; 0x55
    1662:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    1666:	f894 8043 	ldrb.w	r8, [r4, #67]	; 0x43
    166a:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    166e:	ea57 2808 	orrs.w	r8, r7, r8, lsl #8
    1672:	d091      	beq.n	1598 <chk_mounted+0x80>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    1674:	fb05 fc00 	mul.w	ip, r5, r0

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    1678:	eb08 1712 	add.w	r7, r8, r2, lsr #4
    167c:	4467      	add	r7, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    167e:	42bb      	cmp	r3, r7
    1680:	d38a      	bcc.n	1598 <chk_mounted+0x80>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1682:	1bdb      	subs	r3, r3, r7
    1684:	fbb3 f3f1 	udiv	r3, r3, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1688:	2b00      	cmp	r3, #0
    168a:	d085      	beq.n	1598 <chk_mounted+0x80>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    168c:	f640 71f5 	movw	r1, #4085	; 0xff5
    1690:	428b      	cmp	r3, r1
    1692:	d906      	bls.n	16a2 <chk_mounted+0x18a>
    1694:	f64f 75f5 	movw	r5, #65525	; 0xfff5
    1698:	42ab      	cmp	r3, r5
    169a:	bf8c      	ite	hi
    169c:	2503      	movhi	r5, #3
    169e:	2502      	movls	r5, #2
    16a0:	e000      	b.n	16a4 <chk_mounted+0x18c>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    16a2:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    16a4:	3302      	adds	r3, #2
	fs->database = bsect + sysect;						/* Data start sector */
    16a6:	4437      	add	r7, r6
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    16a8:	eb06 0108 	add.w	r1, r6, r8
	if (fmt == FS_FAT32) {
    16ac:	2d03      	cmp	r5, #3
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    16ae:	61e3      	str	r3, [r4, #28]
	fs->database = bsect + sysect;						/* Data start sector */
    16b0:	62e7      	str	r7, [r4, #44]	; 0x2c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    16b2:	6261      	str	r1, [r4, #36]	; 0x24
	if (fmt == FS_FAT32) {
    16b4:	d113      	bne.n	16de <chk_mounted+0x1c6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    16b6:	2a00      	cmp	r2, #0
    16b8:	f47f af6e 	bne.w	1598 <chk_mounted+0x80>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    16bc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
    16c0:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    16c4:	0412      	lsls	r2, r2, #16
    16c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    16ca:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    16ce:	009b      	lsls	r3, r3, #2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    16d0:	430a      	orrs	r2, r1
    16d2:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
    16d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    16da:	62a2      	str	r2, [r4, #40]	; 0x28
    16dc:	e010      	b.n	1700 <chk_mounted+0x1e8>
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    16de:	2a00      	cmp	r2, #0
    16e0:	f43f af5a 	beq.w	1598 <chk_mounted+0x80>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    16e4:	2d02      	cmp	r5, #2
    16e6:	ea4f 0243 	mov.w	r2, r3, lsl #1
    16ea:	bf18      	it	ne
    16ec:	18d2      	addne	r2, r2, r3
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    16ee:	4461      	add	r1, ip
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    16f0:	bf18      	it	ne
    16f2:	f003 0301 	andne.w	r3, r3, #1
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    16f6:	62a1      	str	r1, [r4, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    16f8:	bf0c      	ite	eq
    16fa:	4613      	moveq	r3, r2
    16fc:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1700:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
    1704:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
    1708:	f4ff af46 	bcc.w	1598 <chk_mounted+0x80>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    170c:	f04f 33ff 	mov.w	r3, #4294967295
    1710:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    1712:	2d03      	cmp	r5, #3
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->last_clust = 0;
    1714:	f04f 0300 	mov.w	r3, #0
    1718:	60e3      	str	r3, [r4, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    171a:	d15a      	bne.n	17d2 <chk_mounted+0x2ba>
	 	fs->fsi_flag = 0;
    171c:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    171e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    1722:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1726:	7860      	ldrb	r0, [r4, #1]
	fs->last_clust = 0;

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1728:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    172c:	4432      	add	r2, r6
    172e:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1730:	f104 0134 	add.w	r1, r4, #52	; 0x34
    1734:	2301      	movs	r3, #1
    1736:	f7ff fca1 	bl	107c <disk_read>
    173a:	2800      	cmp	r0, #0
    173c:	d149      	bne.n	17d2 <chk_mounted+0x2ba>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    173e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    1742:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
    1746:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    174a:	4b33      	ldr	r3, [pc, #204]	; (1818 <chk_mounted+0x300>)
    174c:	b212      	sxth	r2, r2
    174e:	429a      	cmp	r2, r3
    1750:	d13f      	bne.n	17d2 <chk_mounted+0x2ba>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1752:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    1756:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
    175a:	0412      	lsls	r2, r2, #16
    175c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    1760:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    1764:	431a      	orrs	r2, r3
    1766:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    176a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    176e:	4b2b      	ldr	r3, [pc, #172]	; (181c <chk_mounted+0x304>)
    1770:	429a      	cmp	r2, r3
    1772:	d12e      	bne.n	17d2 <chk_mounted+0x2ba>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    1774:	f894 221a 	ldrb.w	r2, [r4, #538]	; 0x21a
    1778:	f894 321b 	ldrb.w	r3, [r4, #539]	; 0x21b
    177c:	0412      	lsls	r2, r2, #16
    177e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    1782:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
    1786:	431a      	orrs	r2, r3
    1788:	f894 3219 	ldrb.w	r3, [r4, #537]	; 0x219
    178c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1790:	4b23      	ldr	r3, [pc, #140]	; (1820 <chk_mounted+0x308>)
    1792:	429a      	cmp	r2, r3
    1794:	d11d      	bne.n	17d2 <chk_mounted+0x2ba>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1796:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
    179a:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
    179e:	041b      	lsls	r3, r3, #16
    17a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    17a4:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    17a8:	4313      	orrs	r3, r2
    17aa:	f894 2221 	ldrb.w	r2, [r4, #545]	; 0x221
    17ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    17b2:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    17b4:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
    17b8:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
    17bc:	041b      	lsls	r3, r3, #16
    17be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    17c2:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
    17c6:	4313      	orrs	r3, r2
    17c8:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
    17cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    17d0:	6123      	str	r3, [r4, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
    17d2:	4a14      	ldr	r2, [pc, #80]	; (1824 <chk_mounted+0x30c>)
	fs->winsect = 0;		/* Invalidate sector cache */
    17d4:	2000      	movs	r0, #0
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
    17d6:	8813      	ldrh	r3, [r2, #0]
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    17d8:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    17da:	3301      	adds	r3, #1
    17dc:	b29b      	uxth	r3, r3
	fs->winsect = 0;		/* Invalidate sector cache */
	fs->wflag = 0;
    17de:	7120      	strb	r0, [r4, #4]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->id = ++Fsid;		/* File system mount ID */
    17e0:	8013      	strh	r3, [r2, #0]
    17e2:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    17e4:	6320      	str	r0, [r4, #48]	; 0x30
	fs->wflag = 0;
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    17e6:	61a0      	str	r0, [r4, #24]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    17e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    17ec:	200b      	movs	r0, #11
    17ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    17f2:	200c      	movs	r0, #12
    17f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    17f8:	4628      	mov	r0, r5
    17fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    17fe:	2003      	movs	r0, #3
    1800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1804:	200a      	movs	r0, #10
    1806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    180a:	2001      	movs	r0, #1
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1810:	20000b26 	.word	0x20000b26
    1814:	20000b2c 	.word	0x20000b2c
    1818:	ffffaa55 	.word	0xffffaa55
    181c:	41615252 	.word	0x41615252
    1820:	61417272 	.word	0x61417272
    1824:	20000b28 	.word	0x20000b28

00001828 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    1828:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    182a:	b168      	cbz	r0, 1848 <validate+0x20>
    182c:	7803      	ldrb	r3, [r0, #0]
    182e:	b15b      	cbz	r3, 1848 <validate+0x20>
    1830:	88c3      	ldrh	r3, [r0, #6]
    1832:	428b      	cmp	r3, r1
    1834:	d108      	bne.n	1848 <validate+0x20>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    1836:	7840      	ldrb	r0, [r0, #1]
    1838:	f7ff fc18 	bl	106c <disk_status>
    183c:	f010 0f01 	tst.w	r0, #1
		return FR_NOT_READY;
    1840:	bf0c      	ite	eq
    1842:	2000      	moveq	r0, #0
    1844:	2003      	movne	r0, #3
    1846:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
    1848:	2009      	movs	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    184a:	bd08      	pop	{r3, pc}

0000184c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    184c:	b538      	push	{r3, r4, r5, lr}
	FRESULT res;


	res = move_window(fs, 0);
    184e:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1850:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
    1852:	f7ff fde2 	bl	141a <move_window>
    1856:	4603      	mov	r3, r0
	if (res == FR_OK) {
    1858:	2b00      	cmp	r3, #0
    185a:	d150      	bne.n	18fe <sync+0xb2>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    185c:	7822      	ldrb	r2, [r4, #0]
    185e:	2a03      	cmp	r2, #3
    1860:	d145      	bne.n	18ee <sync+0xa2>
    1862:	7962      	ldrb	r2, [r4, #5]
    1864:	2a00      	cmp	r2, #0
    1866:	d042      	beq.n	18ee <sync+0xa2>
			fs->winsect = 0;
    1868:	6323      	str	r3, [r4, #48]	; 0x30
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    186a:	f104 0134 	add.w	r1, r4, #52	; 0x34
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    186e:	2500      	movs	r5, #0
    1870:	54cd      	strb	r5, [r1, r3]
    1872:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1878:	d1f9      	bne.n	186e <sync+0x22>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    187a:	2355      	movs	r3, #85	; 0x55
    187c:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    1880:	23aa      	movs	r3, #170	; 0xaa
    1882:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1886:	2352      	movs	r3, #82	; 0x52
    1888:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    188c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    1890:	2361      	movs	r3, #97	; 0x61
    1892:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1896:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    189a:	6923      	ldr	r3, [r4, #16]
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    189c:	2241      	movs	r2, #65	; 0x41
    189e:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    18a2:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    18a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
    18aa:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    18ae:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
    18b2:	0c1a      	lsrs	r2, r3, #16
    18b4:	0e1b      	lsrs	r3, r3, #24
    18b6:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    18ba:	68e3      	ldr	r3, [r4, #12]
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    18bc:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    18c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    18c4:	2072      	movs	r0, #114	; 0x72
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    18c6:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
    18ca:	f884 2221 	strb.w	r2, [r4, #545]	; 0x221
    18ce:	0c1a      	lsrs	r2, r3, #16
    18d0:	0e1b      	lsrs	r3, r3, #24
			fs->winsect = 0;
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    18d2:	f884 0218 	strb.w	r0, [r4, #536]	; 0x218
    18d6:	f884 0219 	strb.w	r0, [r4, #537]	; 0x219
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    18da:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
    18de:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    18e2:	7860      	ldrb	r0, [r4, #1]
    18e4:	6962      	ldr	r2, [r4, #20]
    18e6:	2301      	movs	r3, #1
    18e8:	f7ff fc0a 	bl	1100 <disk_write>
			fs->fsi_flag = 0;
    18ec:	7165      	strb	r5, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    18ee:	2100      	movs	r1, #0
    18f0:	7860      	ldrb	r0, [r4, #1]
    18f2:	460a      	mov	r2, r1
    18f4:	f7ff fc56 	bl	11a4 <disk_ioctl>
    18f8:	3000      	adds	r0, #0
    18fa:	bf18      	it	ne
    18fc:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
    18fe:	bd38      	pop	{r3, r4, r5, pc}

00001900 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1900:	69c3      	ldr	r3, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1902:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1904:	3b02      	subs	r3, #2
    1906:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
    1908:	bf3d      	ittte	cc
    190a:	7882      	ldrbcc	r2, [r0, #2]
    190c:	6ac3      	ldrcc	r3, [r0, #44]	; 0x2c
    190e:	fb02 3001 	mlacc	r0, r2, r1, r3
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1912:	2000      	movcs	r0, #0
	return clst * fs->csize + fs->database;
}
    1914:	4770      	bx	lr

00001916 <get_fat>:
{
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    1916:	2901      	cmp	r1, #1

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191a:	4604      	mov	r4, r0
    191c:	460d      	mov	r5, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    191e:	d961      	bls.n	19e4 <get_fat+0xce>
    1920:	69c3      	ldr	r3, [r0, #28]
    1922:	4299      	cmp	r1, r3
    1924:	d25e      	bcs.n	19e4 <get_fat+0xce>
		return 1;

	switch (fs->fs_type) {
    1926:	7803      	ldrb	r3, [r0, #0]
    1928:	2b02      	cmp	r3, #2
    192a:	d02a      	beq.n	1982 <get_fat+0x6c>
    192c:	2b03      	cmp	r3, #3
    192e:	d03a      	beq.n	19a6 <get_fat+0x90>
    1930:	2b01      	cmp	r3, #1
    1932:	d154      	bne.n	19de <get_fat+0xc8>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1934:	b28e      	uxth	r6, r1
    1936:	eb06 0656 	add.w	r6, r6, r6, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    193a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    193c:	b2b6      	uxth	r6, r6
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    193e:	eb01 2156 	add.w	r1, r1, r6, lsr #9
    1942:	f7ff fd6a 	bl	141a <move_window>
    1946:	2800      	cmp	r0, #0
    1948:	d149      	bne.n	19de <get_fat+0xc8>
		wc = fs->win[bc % SS(fs)]; bc++;
    194a:	f3c6 0308 	ubfx	r3, r6, #0, #9
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    194e:	6a61      	ldr	r1, [r4, #36]	; 0x24

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1950:	3601      	adds	r6, #1
    1952:	b2b6      	uxth	r6, r6
    1954:	4423      	add	r3, r4
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1956:	4620      	mov	r0, r4
    1958:	eb01 2156 	add.w	r1, r1, r6, lsr #9

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    195c:	f893 7034 	ldrb.w	r7, [r3, #52]	; 0x34
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1960:	f7ff fd5b 	bl	141a <move_window>
    1964:	2800      	cmp	r0, #0
    1966:	d13a      	bne.n	19de <get_fat+0xc8>
		wc |= fs->win[bc % SS(fs)] << 8;
    1968:	f3c6 0608 	ubfx	r6, r6, #0, #9
    196c:	4434      	add	r4, r6
    196e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1972:	07eb      	lsls	r3, r5, #31
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1974:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1978:	bf4c      	ite	mi
    197a:	0900      	lsrmi	r0, r0, #4
    197c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
    1980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    1982:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1984:	eb01 2115 	add.w	r1, r1, r5, lsr #8
    1988:	f7ff fd47 	bl	141a <move_window>
    198c:	bb38      	cbnz	r0, 19de <get_fat+0xc8>
		p = &fs->win[clst * 2 % SS(fs)];
    198e:	006d      	lsls	r5, r5, #1
    1990:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
		return LD_WORD(p);
    1994:	1963      	adds	r3, r4, r5
    1996:	442c      	add	r4, r5
    1998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    199c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
    19a0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    19a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    19a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    19a8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    19ac:	f7ff fd35 	bl	141a <move_window>
    19b0:	b9a8      	cbnz	r0, 19de <get_fat+0xc8>
		p = &fs->win[clst * 4 % SS(fs)];
    19b2:	00ad      	lsls	r5, r5, #2
    19b4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
    19b8:	1963      	adds	r3, r4, r5
		return LD_DWORD(p) & 0x0FFFFFFF;
    19ba:	f893 0037 	ldrb.w	r0, [r3, #55]	; 0x37
    19be:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
    19c2:	3334      	adds	r3, #52	; 0x34
		return LD_DWORD(p) & 0x0FFFFFFF;
    19c4:	785b      	ldrb	r3, [r3, #1]
    19c6:	0600      	lsls	r0, r0, #24
    19c8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    19cc:	442c      	add	r4, r5
    19ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    19d2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    19d6:	4318      	orrs	r0, r3
    19d8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
    19dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    19de:	f04f 30ff 	mov.w	r0, #4294967295
    19e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    19e4:	2001      	movs	r0, #1
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    19e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000019e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    19e8:	b570      	push	{r4, r5, r6, lr}
    19ea:	4604      	mov	r4, r0
    19ec:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
    19ee:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    19f0:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    19f2:	2901      	cmp	r1, #1
    19f4:	d101      	bne.n	19fa <dir_sdi+0x12>
		return FR_INT_ERR;
    19f6:	2002      	movs	r0, #2
    19f8:	bd70      	pop	{r4, r5, r6, pc}
	WORD ic;


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    19fa:	6803      	ldr	r3, [r0, #0]
    19fc:	69da      	ldr	r2, [r3, #28]
    19fe:	4291      	cmp	r1, r2
    1a00:	d2f9      	bcs.n	19f6 <dir_sdi+0xe>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1a02:	b971      	cbnz	r1, 1a22 <dir_sdi+0x3a>
    1a04:	781a      	ldrb	r2, [r3, #0]
    1a06:	2a03      	cmp	r2, #3
    1a08:	d101      	bne.n	1a0e <dir_sdi+0x26>
		clst = dj->fs->dirbase;
    1a0a:	6a99      	ldr	r1, [r3, #40]	; 0x28

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1a0c:	b949      	cbnz	r1, 1a22 <dir_sdi+0x3a>
		dj->clust = clst;
    1a0e:	2200      	movs	r2, #0
    1a10:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1a12:	891a      	ldrh	r2, [r3, #8]
    1a14:	42aa      	cmp	r2, r5
    1a16:	d9ee      	bls.n	19f6 <dir_sdi+0xe>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a1a:	eb03 1315 	add.w	r3, r3, r5, lsr #4
    1a1e:	6123      	str	r3, [r4, #16]
    1a20:	e019      	b.n	1a56 <dir_sdi+0x6e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1a22:	789e      	ldrb	r6, [r3, #2]
    1a24:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1a26:	42b5      	cmp	r5, r6
    1a28:	d30e      	bcc.n	1a48 <dir_sdi+0x60>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1a2a:	6820      	ldr	r0, [r4, #0]
    1a2c:	f7ff ff73 	bl	1916 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a30:	1c43      	adds	r3, r0, #1
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1a32:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a34:	d018      	beq.n	1a68 <dir_sdi+0x80>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1a36:	2801      	cmp	r0, #1
    1a38:	d9dd      	bls.n	19f6 <dir_sdi+0xe>
    1a3a:	6823      	ldr	r3, [r4, #0]
    1a3c:	69db      	ldr	r3, [r3, #28]
    1a3e:	4298      	cmp	r0, r3
    1a40:	d2d9      	bcs.n	19f6 <dir_sdi+0xe>
				return FR_INT_ERR;
			idx -= ic;
    1a42:	1bad      	subs	r5, r5, r6
    1a44:	b2ad      	uxth	r5, r5
    1a46:	e7ee      	b.n	1a26 <dir_sdi+0x3e>
		}
		dj->clust = clst;
    1a48:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1a4a:	6820      	ldr	r0, [r4, #0]
    1a4c:	f7ff ff58 	bl	1900 <clust2sect>
    1a50:	eb00 1015 	add.w	r0, r0, r5, lsr #4
    1a54:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1a56:	6823      	ldr	r3, [r4, #0]
    1a58:	f005 050f 	and.w	r5, r5, #15
    1a5c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1a60:	3334      	adds	r3, #52	; 0x34
    1a62:	6163      	str	r3, [r4, #20]

	return FR_OK;	/* Seek succeeded */
    1a64:	2000      	movs	r0, #0
    1a66:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a68:	2001      	movs	r0, #1
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1a6a:	bd70      	pop	{r4, r5, r6, pc}

00001a6c <put_fat>:
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1a6c:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a70:	4604      	mov	r4, r0
    1a72:	460d      	mov	r5, r1
    1a74:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1a76:	d973      	bls.n	1b60 <put_fat+0xf4>
    1a78:	69c3      	ldr	r3, [r0, #28]
    1a7a:	4299      	cmp	r1, r3
    1a7c:	d270      	bcs.n	1b60 <put_fat+0xf4>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1a7e:	7803      	ldrb	r3, [r0, #0]
    1a80:	2b02      	cmp	r3, #2
    1a82:	d03b      	beq.n	1afc <put_fat+0x90>
    1a84:	2b03      	cmp	r3, #3
    1a86:	d04a      	beq.n	1b1e <put_fat+0xb2>
    1a88:	2b01      	cmp	r3, #1
    1a8a:	d165      	bne.n	1b58 <put_fat+0xec>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1a8c:	b28f      	uxth	r7, r1
    1a8e:	eb07 0757 	add.w	r7, r7, r7, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1a92:	6a41      	ldr	r1, [r0, #36]	; 0x24
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    1a94:	b2bf      	uxth	r7, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1a96:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    1a9a:	f7ff fcbe 	bl	141a <move_window>
			if (res != FR_OK) break;
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d15b      	bne.n	1b5a <put_fat+0xee>
			p = &fs->win[bc % SS(fs)];
    1aa2:	f3c7 0308 	ubfx	r3, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1aa6:	f015 0501 	ands.w	r5, r5, #1
    1aaa:	4423      	add	r3, r4
    1aac:	b2f2      	uxtb	r2, r6
    1aae:	d006      	beq.n	1abe <put_fat+0x52>
    1ab0:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
    1ab4:	f001 010f 	and.w	r1, r1, #15
    1ab8:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    1abc:	b2d2      	uxtb	r2, r2
			bc++;
    1abe:	3701      	adds	r7, #1
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1ac0:	6a61      	ldr	r1, [r4, #36]	; 0x24
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			bc++;
    1ac6:	b2bf      	uxth	r7, r7
			fs->wflag = 1;
    1ac8:	2301      	movs	r3, #1
    1aca:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1acc:	4620      	mov	r0, r4
    1ace:	eb01 2157 	add.w	r1, r1, r7, lsr #9
    1ad2:	f7ff fca2 	bl	141a <move_window>
			if (res != FR_OK) break;
    1ad6:	2800      	cmp	r0, #0
    1ad8:	d13f      	bne.n	1b5a <put_fat+0xee>
			p = &fs->win[bc % SS(fs)];
    1ada:	f3c7 0708 	ubfx	r7, r7, #0, #9
    1ade:	4427      	add	r7, r4
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1ae0:	b115      	cbz	r5, 1ae8 <put_fat+0x7c>
    1ae2:	f3c6 1607 	ubfx	r6, r6, #4, #8
    1ae6:	e006      	b.n	1af6 <put_fat+0x8a>
    1ae8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    1aec:	f3c6 2603 	ubfx	r6, r6, #8, #4
    1af0:	f023 030f 	bic.w	r3, r3, #15
    1af4:	431e      	orrs	r6, r3
    1af6:	f887 6034 	strb.w	r6, [r7, #52]	; 0x34
    1afa:	e02e      	b.n	1b5a <put_fat+0xee>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1afc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1afe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
    1b02:	f7ff fc8a 	bl	141a <move_window>
			if (res != FR_OK) break;
    1b06:	bb40      	cbnz	r0, 1b5a <put_fat+0xee>
			p = &fs->win[clst * 2 % SS(fs)];
    1b08:	006d      	lsls	r5, r5, #1
    1b0a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
    1b0e:	1963      	adds	r3, r4, r5
    1b10:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    1b14:	f3c6 2607 	ubfx	r6, r6, #8, #8
    1b18:	f883 6035 	strb.w	r6, [r3, #53]	; 0x35
    1b1c:	e01d      	b.n	1b5a <put_fat+0xee>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1b1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1b20:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    1b24:	f7ff fc79 	bl	141a <move_window>
			if (res != FR_OK) break;
    1b28:	b9b8      	cbnz	r0, 1b5a <put_fat+0xee>
			p = &fs->win[clst * 4 % SS(fs)];
    1b2a:	00ad      	lsls	r5, r5, #2
    1b2c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
    1b30:	1963      	adds	r3, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
    1b32:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
    1b36:	0612      	lsls	r2, r2, #24
    1b38:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    1b3c:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
    1b3e:	f3c6 2207 	ubfx	r2, r6, #8, #8
    1b42:	f883 6034 	strb.w	r6, [r3, #52]	; 0x34
    1b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    1b4a:	0c32      	lsrs	r2, r6, #16
    1b4c:	0e36      	lsrs	r6, r6, #24
    1b4e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    1b52:	f883 6037 	strb.w	r6, [r3, #55]	; 0x37
    1b56:	e000      	b.n	1b5a <put_fat+0xee>
			break;

		default :
			res = FR_INT_ERR;
    1b58:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
    1b5a:	2301      	movs	r3, #1
    1b5c:	7123      	strb	r3, [r4, #4]
    1b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1b60:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
    1b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001b64 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b66:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1b68:	460f      	mov	r7, r1
    1b6a:	b931      	cbnz	r1, 1b7a <create_chain+0x16>
		scl = fs->last_clust;			/* Get suggested start point */
    1b6c:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1b6e:	b16e      	cbz	r6, 1b8c <create_chain+0x28>
    1b70:	69c3      	ldr	r3, [r0, #28]
    1b72:	429e      	cmp	r6, r3
    1b74:	bf28      	it	cs
    1b76:	2601      	movcs	r6, #1
    1b78:	e009      	b.n	1b8e <create_chain+0x2a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1b7a:	f7ff fecc 	bl	1916 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1b7e:	2801      	cmp	r0, #1
    1b80:	d93b      	bls.n	1bfa <create_chain+0x96>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1b82:	69eb      	ldr	r3, [r5, #28]
    1b84:	4298      	cmp	r0, r3
    1b86:	d339      	bcc.n	1bfc <create_chain+0x98>
    1b88:	463e      	mov	r6, r7
    1b8a:	e000      	b.n	1b8e <create_chain+0x2a>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1b8c:	2601      	movs	r6, #1
    1b8e:	4634      	mov	r4, r6
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1b90:	69eb      	ldr	r3, [r5, #28]
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1b92:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1b94:	429c      	cmp	r4, r3
    1b96:	d304      	bcc.n	1ba2 <create_chain+0x3e>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1b98:	2e01      	cmp	r6, #1
    1b9a:	d801      	bhi.n	1ba0 <create_chain+0x3c>
    1b9c:	2000      	movs	r0, #0
    1b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1ba0:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1ba2:	4628      	mov	r0, r5
    1ba4:	4621      	mov	r1, r4
    1ba6:	f7ff feb6 	bl	1916 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    1baa:	b148      	cbz	r0, 1bc0 <create_chain+0x5c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1bac:	1c41      	adds	r1, r0, #1
    1bae:	d102      	bne.n	1bb6 <create_chain+0x52>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1bb0:	f04f 30ff 	mov.w	r0, #4294967295
    1bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1bb6:	2801      	cmp	r0, #1
    1bb8:	d01f      	beq.n	1bfa <create_chain+0x96>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1bba:	42b4      	cmp	r4, r6
    1bbc:	d1e8      	bne.n	1b90 <create_chain+0x2c>
    1bbe:	e7ed      	b.n	1b9c <create_chain+0x38>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1bc0:	4628      	mov	r0, r5
    1bc2:	4621      	mov	r1, r4
    1bc4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    1bc8:	f7ff ff50 	bl	1a6c <put_fat>
	if (res == FR_OK && clst != 0) {
    1bcc:	b998      	cbnz	r0, 1bf6 <create_chain+0x92>
    1bce:	b947      	cbnz	r7, 1be2 <create_chain+0x7e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1bd0:	692b      	ldr	r3, [r5, #16]
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
    1bd2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    1bd4:	1c5a      	adds	r2, r3, #1
    1bd6:	d00c      	beq.n	1bf2 <create_chain+0x8e>
			fs->free_clust--;
    1bd8:	3b01      	subs	r3, #1
    1bda:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    1bdc:	2301      	movs	r3, #1
    1bde:	716b      	strb	r3, [r5, #5]
    1be0:	e007      	b.n	1bf2 <create_chain+0x8e>
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1be2:	4628      	mov	r0, r5
    1be4:	4639      	mov	r1, r7
    1be6:	4622      	mov	r2, r4
    1be8:	f7ff ff40 	bl	1a6c <put_fat>
	}
	if (res == FR_OK) {
    1bec:	2800      	cmp	r0, #0
    1bee:	d0ef      	beq.n	1bd0 <create_chain+0x6c>
    1bf0:	e001      	b.n	1bf6 <create_chain+0x92>
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag = 1;
    1bf2:	4620      	mov	r0, r4
    1bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1bf6:	2801      	cmp	r0, #1
    1bf8:	d0da      	beq.n	1bb0 <create_chain+0x4c>
    1bfa:	2001      	movs	r0, #1
	}

	return ncl;		/* Return new cluster number or error code */
}
    1bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1bfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1c02:	88c6      	ldrh	r6, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1c04:	4604      	mov	r4, r0
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    1c06:	3601      	adds	r6, #1
    1c08:	b2b6      	uxth	r6, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1c0a:	460f      	mov	r7, r1
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1c0c:	b916      	cbnz	r6, 1c14 <dir_next+0x16>
		return FR_NO_FILE;
    1c0e:	2004      	movs	r0, #4
    1c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1c14:	6903      	ldr	r3, [r0, #16]
    1c16:	2b00      	cmp	r3, #0
    1c18:	d0f9      	beq.n	1c0e <dir_next+0x10>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    1c1a:	f016 080f 	ands.w	r8, r6, #15
    1c1e:	d15c      	bne.n	1cda <dir_next+0xdc>
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
    1c20:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
    1c22:	3301      	adds	r3, #1
    1c24:	6103      	str	r3, [r0, #16]
    1c26:	6800      	ldr	r0, [r0, #0]

		if (dj->clust == 0) {	/* Static table */
    1c28:	b919      	cbnz	r1, 1c32 <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1c2a:	8903      	ldrh	r3, [r0, #8]
    1c2c:	42b3      	cmp	r3, r6
    1c2e:	d9ee      	bls.n	1c0e <dir_next+0x10>
    1c30:	e053      	b.n	1cda <dir_next+0xdc>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1c32:	7882      	ldrb	r2, [r0, #2]
    1c34:	3a01      	subs	r2, #1
    1c36:	ea12 1216 	ands.w	r2, r2, r6, lsr #4
    1c3a:	d14e      	bne.n	1cda <dir_next+0xdc>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1c3c:	f7ff fe6b 	bl	1916 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
    1c40:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    1c42:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
    1c44:	d802      	bhi.n	1c4c <dir_next+0x4e>
    1c46:	2002      	movs	r0, #2
    1c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1c4c:	1c42      	adds	r2, r0, #1
    1c4e:	d102      	bne.n	1c56 <dir_next+0x58>
    1c50:	2001      	movs	r0, #1
    1c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1c56:	6820      	ldr	r0, [r4, #0]
    1c58:	69c3      	ldr	r3, [r0, #28]
    1c5a:	429d      	cmp	r5, r3
    1c5c:	d337      	bcc.n	1cce <dir_next+0xd0>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    1c5e:	2f00      	cmp	r7, #0
    1c60:	d0d5      	beq.n	1c0e <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    1c62:	68e1      	ldr	r1, [r4, #12]
    1c64:	f7ff ff7e 	bl	1b64 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1c68:	4605      	mov	r5, r0
    1c6a:	2800      	cmp	r0, #0
    1c6c:	d03e      	beq.n	1cec <dir_next+0xee>
					if (clst == 1) return FR_INT_ERR;
    1c6e:	2801      	cmp	r0, #1
    1c70:	d0e9      	beq.n	1c46 <dir_next+0x48>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1c72:	1c43      	adds	r3, r0, #1
    1c74:	d0ec      	beq.n	1c50 <dir_next+0x52>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1c76:	6820      	ldr	r0, [r4, #0]
    1c78:	2100      	movs	r1, #0
    1c7a:	f7ff fbce 	bl	141a <move_window>
    1c7e:	2800      	cmp	r0, #0
    1c80:	d1e6      	bne.n	1c50 <dir_next+0x52>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    1c82:	6823      	ldr	r3, [r4, #0]
    1c84:	3334      	adds	r3, #52	; 0x34
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    1c86:	2700      	movs	r7, #0
    1c88:	541f      	strb	r7, [r3, r0]
    1c8a:	3001      	adds	r0, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1c8c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1c90:	d1f9      	bne.n	1c86 <dir_next+0x88>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1c92:	f8d4 9000 	ldr.w	r9, [r4]
    1c96:	4629      	mov	r1, r5
    1c98:	4648      	mov	r0, r9
    1c9a:	f7ff fe31 	bl	1900 <clust2sect>
    1c9e:	f8c9 0030 	str.w	r0, [r9, #48]	; 0x30
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1ca2:	6823      	ldr	r3, [r4, #0]
    1ca4:	b2fa      	uxtb	r2, r7
    1ca6:	7899      	ldrb	r1, [r3, #2]
    1ca8:	4291      	cmp	r1, r2
    1caa:	d90d      	bls.n	1cc8 <dir_next+0xca>
						dj->fs->wflag = 1;
    1cac:	2201      	movs	r2, #1
    1cae:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1cb0:	6820      	ldr	r0, [r4, #0]
    1cb2:	2100      	movs	r1, #0
    1cb4:	f7ff fbb1 	bl	141a <move_window>
    1cb8:	3701      	adds	r7, #1
    1cba:	2800      	cmp	r0, #0
    1cbc:	d1c8      	bne.n	1c50 <dir_next+0x52>
						dj->fs->winsect++;
    1cbe:	6823      	ldr	r3, [r4, #0]
    1cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1cc2:	3201      	adds	r2, #1
    1cc4:	631a      	str	r2, [r3, #48]	; 0x30
    1cc6:	e7ec      	b.n	1ca2 <dir_next+0xa4>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1cc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1cca:	1a8a      	subs	r2, r1, r2
    1ccc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    1cce:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
    1cd0:	6820      	ldr	r0, [r4, #0]
    1cd2:	4629      	mov	r1, r5
    1cd4:	f7ff fe14 	bl	1900 <clust2sect>
    1cd8:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    1cda:	6823      	ldr	r3, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
    1cdc:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    1cde:	eb03 1348 	add.w	r3, r3, r8, lsl #5
    1ce2:	3334      	adds	r3, #52	; 0x34
    1ce4:	6163      	str	r3, [r4, #20]

	return FR_OK;
    1ce6:	2000      	movs	r0, #0
    1ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1cec:	2007      	movs	r0, #7

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    1cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00001cf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    1cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    1cf8:	780b      	ldrb	r3, [r1, #0]
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    1cfa:	4604      	mov	r4, r0
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    1cfc:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    1cfe:	460d      	mov	r5, r1
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    1d00:	d001      	beq.n	1d06 <follow_path+0x12>
    1d02:	2b5c      	cmp	r3, #92	; 0x5c
    1d04:	d102      	bne.n	1d0c <follow_path+0x18>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    1d06:	3501      	adds	r5, #1
    1d08:	2300      	movs	r3, #0
    1d0a:	e001      	b.n	1d10 <follow_path+0x1c>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    1d0c:	6803      	ldr	r3, [r0, #0]
    1d0e:	699b      	ldr	r3, [r3, #24]
    1d10:	60a3      	str	r3, [r4, #8]
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    1d12:	782b      	ldrb	r3, [r5, #0]
    1d14:	2b1f      	cmp	r3, #31
    1d16:	d835      	bhi.n	1d84 <follow_path+0x90>
		res = dir_sdi(dj, 0);
    1d18:	4620      	mov	r0, r4
    1d1a:	2100      	movs	r1, #0
    1d1c:	f7ff fe64 	bl	19e8 <dir_sdi>
		dj->dir = 0;
    1d20:	2300      	movs	r3, #0
    1d22:	6163      	str	r3, [r4, #20]
    1d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1d28:	2200      	movs	r2, #0
		for (;;) {
			c = (BYTE)p[si++];
    1d2a:	5c8b      	ldrb	r3, [r1, r2]
    1d2c:	1c50      	adds	r0, r2, #1
			if (c != '.' || si >= 3) break;
    1d2e:	2b2e      	cmp	r3, #46	; 0x2e
    1d30:	b285      	uxth	r5, r0
    1d32:	d03e      	beq.n	1db2 <follow_path+0xbe>
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1d34:	2b2f      	cmp	r3, #47	; 0x2f
    1d36:	d141      	bne.n	1dbc <follow_path+0xc8>
		*path = &p[si];									/* Return pointer to the next segment */
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1d38:	2b20      	cmp	r3, #32
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    1d3a:	440d      	add	r5, r1
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1d3c:	bf8c      	ite	hi
    1d3e:	2320      	movhi	r3, #32
    1d40:	2324      	movls	r3, #36	; 0x24

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1d42:	72f3      	strb	r3, [r6, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    1d44:	4620      	mov	r0, r4
    1d46:	2100      	movs	r1, #0
    1d48:	f7ff fe4e 	bl	19e8 <dir_sdi>
	if (res != FR_OK) return res;
    1d4c:	b930      	cbnz	r0, 1d5c <follow_path+0x68>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1d4e:	6820      	ldr	r0, [r4, #0]
    1d50:	6921      	ldr	r1, [r4, #16]
    1d52:	f7ff fb62 	bl	141a <move_window>
		if (res != FR_OK) break;
    1d56:	2800      	cmp	r0, #0
    1d58:	f000 8093 	beq.w	1e82 <follow_path+0x18e>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    1d5c:	69a3      	ldr	r3, [r4, #24]
    1d5e:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    1d60:	2800      	cmp	r0, #0
    1d62:	f000 80a7 	beq.w	1eb4 <follow_path+0x1c0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    1d66:	2804      	cmp	r0, #4
    1d68:	f040 80c2 	bne.w	1ef0 <follow_path+0x1fc>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    1d6c:	f013 0f20 	tst.w	r3, #32
    1d70:	f003 0304 	and.w	r3, r3, #4
    1d74:	f000 80a3 	beq.w	1ebe <follow_path+0x1ca>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    1d78:	2200      	movs	r2, #0
    1d7a:	60a2      	str	r2, [r4, #8]
    1d7c:	6162      	str	r2, [r4, #20]
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    1d7e:	2b00      	cmp	r3, #0
    1d80:	f040 809a 	bne.w	1eb8 <follow_path+0x1c4>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    1d84:	782b      	ldrb	r3, [r5, #0]
    1d86:	4629      	mov	r1, r5
    1d88:	2b2f      	cmp	r3, #47	; 0x2f
    1d8a:	f105 0501 	add.w	r5, r5, #1
    1d8e:	d0f9      	beq.n	1d84 <follow_path+0x90>
    1d90:	2b5c      	cmp	r3, #92	; 0x5c
    1d92:	d0f7      	beq.n	1d84 <follow_path+0x90>
	sfn = dj->fn;
    1d94:	69a6      	ldr	r6, [r4, #24]
    1d96:	2300      	movs	r3, #0
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    1d98:	2220      	movs	r2, #32
    1d9a:	54f2      	strb	r2, [r6, r3]
    1d9c:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1d9e:	2b0b      	cmp	r3, #11
    1da0:	d1fa      	bne.n	1d98 <follow_path+0xa4>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1da2:	780b      	ldrb	r3, [r1, #0]
    1da4:	2b2e      	cmp	r3, #46	; 0x2e
    1da6:	d0bf      	beq.n	1d28 <follow_path+0x34>
    1da8:	2000      	movs	r0, #0
    1daa:	4603      	mov	r3, r0
    1dac:	2708      	movs	r7, #8
    1dae:	4602      	mov	r2, r0
    1db0:	e016      	b.n	1de0 <follow_path+0xec>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
    1db2:	2a02      	cmp	r2, #2
    1db4:	d062      	beq.n	1e7c <follow_path+0x188>
			sfn[i++] = c;
    1db6:	54b3      	strb	r3, [r6, r2]
    1db8:	4602      	mov	r2, r0
    1dba:	e7b6      	b.n	1d2a <follow_path+0x36>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1dbc:	2b5c      	cmp	r3, #92	; 0x5c
    1dbe:	d0bb      	beq.n	1d38 <follow_path+0x44>
    1dc0:	2b20      	cmp	r3, #32
    1dc2:	d85b      	bhi.n	1e7c <follow_path+0x188>
    1dc4:	e7b8      	b.n	1d38 <follow_path+0x44>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1dc6:	2b2f      	cmp	r3, #47	; 0x2f
    1dc8:	d028      	beq.n	1e1c <follow_path+0x128>
    1dca:	2b5c      	cmp	r3, #92	; 0x5c
    1dcc:	d026      	beq.n	1e1c <follow_path+0x128>
		if (c == '.' || i >= ni) {
    1dce:	2b2e      	cmp	r3, #46	; 0x2e
    1dd0:	d10c      	bne.n	1dec <follow_path+0xf8>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1dd2:	2f08      	cmp	r7, #8
    1dd4:	d152      	bne.n	1e7c <follow_path+0x188>
			i = 8; ni = 11;
			b <<= 2; continue;
    1dd6:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1dd8:	4638      	mov	r0, r7
			b <<= 2; continue;
    1dda:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1ddc:	270b      	movs	r7, #11
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1dde:	462b      	mov	r3, r5
    1de0:	1c5d      	adds	r5, r3, #1
    1de2:	5ccb      	ldrb	r3, [r1, r3]
    1de4:	b2ad      	uxth	r5, r5
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1de6:	2b20      	cmp	r3, #32
    1de8:	d8ed      	bhi.n	1dc6 <follow_path+0xd2>
    1dea:	e015      	b.n	1e18 <follow_path+0x124>
		if (c == '.' || i >= ni) {
    1dec:	42b8      	cmp	r0, r7
    1dee:	d245      	bcs.n	1e7c <follow_path+0x188>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    1df0:	f013 0f80 	tst.w	r3, #128	; 0x80
    1df4:	d006      	beq.n	1e04 <follow_path+0x110>
			b |= 3;						/* Eliminate NT flag */
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
    1df6:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 1ef4 <follow_path+0x200>
    1dfa:	3b80      	subs	r3, #128	; 0x80
    1dfc:	f81c 3003 	ldrb.w	r3, [ip, r3]
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
			b |= 3;						/* Eliminate NT flag */
    1e00:	f042 0203 	orr.w	r2, r2, #3
    1e04:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 1ef8 <follow_path+0x204>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1e08:	f818 cf01 	ldrb.w	ip, [r8, #1]!
    1e0c:	f1bc 0f00 	cmp.w	ip, #0
    1e10:	d01d      	beq.n	1e4e <follow_path+0x15a>
    1e12:	459c      	cmp	ip, r3
    1e14:	d1f8      	bne.n	1e08 <follow_path+0x114>
    1e16:	e031      	b.n	1e7c <follow_path+0x188>
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1e18:	2304      	movs	r3, #4
    1e1a:	e000      	b.n	1e1e <follow_path+0x12a>
    1e1c:	2300      	movs	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1e1e:	b368      	cbz	r0, 1e7c <follow_path+0x188>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    1e20:	7830      	ldrb	r0, [r6, #0]
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1e22:	440d      	add	r5, r1
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    1e24:	28e5      	cmp	r0, #229	; 0xe5
    1e26:	bf04      	itt	eq
    1e28:	2005      	moveq	r0, #5
    1e2a:	7030      	strbeq	r0, [r6, #0]

	if (ni == 8) b <<= 2;
    1e2c:	2f08      	cmp	r7, #8
    1e2e:	bf04      	itt	eq
    1e30:	0092      	lsleq	r2, r2, #2
    1e32:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1e34:	f002 0003 	and.w	r0, r2, #3
    1e38:	2801      	cmp	r0, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1e3a:	f002 020c 	and.w	r2, r2, #12

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1e3e:	bf08      	it	eq
    1e40:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1e44:	2a04      	cmp	r2, #4
    1e46:	bf08      	it	eq
    1e48:	f043 0308 	orreq.w	r3, r3, #8
    1e4c:	e779      	b.n	1d42 <follow_path+0x4e>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1e4e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    1e52:	f1bc 0f19 	cmp.w	ip, #25
    1e56:	d802      	bhi.n	1e5e <follow_path+0x16a>
				b |= 2;
    1e58:	f042 0202 	orr.w	r2, r2, #2
    1e5c:	e008      	b.n	1e70 <follow_path+0x17c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1e5e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
    1e62:	f1bc 0f19 	cmp.w	ip, #25
    1e66:	d803      	bhi.n	1e70 <follow_path+0x17c>
					b |= 1; c -= 0x20;
    1e68:	3b20      	subs	r3, #32
    1e6a:	f042 0201 	orr.w	r2, r2, #1
    1e6e:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
    1e70:	f100 0c01 	add.w	ip, r0, #1
    1e74:	5433      	strb	r3, [r6, r0]
    1e76:	fa1f f08c 	uxth.w	r0, ip
    1e7a:	e7b0      	b.n	1dde <follow_path+0xea>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1e7c:	2006      	movs	r0, #6
    1e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1e82:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1e84:	7813      	ldrb	r3, [r2, #0]
    1e86:	b19b      	cbz	r3, 1eb0 <follow_path+0x1bc>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1e88:	7ad3      	ldrb	r3, [r2, #11]
    1e8a:	071e      	lsls	r6, r3, #28
    1e8c:	d40b      	bmi.n	1ea6 <follow_path+0x1b2>
    1e8e:	69a7      	ldr	r7, [r4, #24]
    1e90:	4603      	mov	r3, r0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1e92:	5cd1      	ldrb	r1, [r2, r3]
    1e94:	3301      	adds	r3, #1
    1e96:	18fe      	adds	r6, r7, r3
    1e98:	f816 6c01 	ldrb.w	r6, [r6, #-1]
    1e9c:	428e      	cmp	r6, r1
    1e9e:	d102      	bne.n	1ea6 <follow_path+0x1b2>
    1ea0:	2b0b      	cmp	r3, #11
    1ea2:	d1f6      	bne.n	1e92 <follow_path+0x19e>
    1ea4:	e75a      	b.n	1d5c <follow_path+0x68>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    1ea6:	4620      	mov	r0, r4
    1ea8:	2100      	movs	r1, #0
    1eaa:	f7ff fea8 	bl	1bfe <dir_next>
    1eae:	e74d      	b.n	1d4c <follow_path+0x58>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1eb0:	2004      	movs	r0, #4
    1eb2:	e753      	b.n	1d5c <follow_path+0x68>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    1eb4:	0759      	lsls	r1, r3, #29
    1eb6:	d508      	bpl.n	1eca <follow_path+0x1d6>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    1eb8:	2000      	movs	r0, #0
    1eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    1ebe:	2b00      	cmp	r3, #0
    1ec0:	bf14      	ite	ne
    1ec2:	2004      	movne	r0, #4
    1ec4:	2005      	moveq	r0, #5
    1ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    1eca:	6963      	ldr	r3, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    1ecc:	7ada      	ldrb	r2, [r3, #11]
    1ece:	06d2      	lsls	r2, r2, #27
    1ed0:	d50b      	bpl.n	1eea <follow_path+0x1f6>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1ed2:	7d59      	ldrb	r1, [r3, #21]
    1ed4:	7d1a      	ldrb	r2, [r3, #20]
    1ed6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1eda:	7ed9      	ldrb	r1, [r3, #27]
    1edc:	7e9b      	ldrb	r3, [r3, #26]
    1ede:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    1ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1ee6:	60a3      	str	r3, [r4, #8]
    1ee8:	e74c      	b.n	1d84 <follow_path+0x90>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1eea:	2005      	movs	r0, #5
    1eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    1ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1ef4:	0000624e 	.word	0x0000624e
    1ef8:	0000623e 	.word	0x0000623e

00001efc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    1efc:	b538      	push	{r3, r4, r5, lr}
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    1efe:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    1f00:	4604      	mov	r4, r0
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    1f02:	f7ff fd71 	bl	19e8 <dir_sdi>
	if (res == FR_OK) {
    1f06:	4605      	mov	r5, r0
    1f08:	bb18      	cbnz	r0, 1f52 <dir_register+0x56>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1f0a:	6820      	ldr	r0, [r4, #0]
    1f0c:	6921      	ldr	r1, [r4, #16]
    1f0e:	f7ff fa84 	bl	141a <move_window>
			if (res != FR_OK) break;
    1f12:	4605      	mov	r5, r0
    1f14:	b9e8      	cbnz	r0, 1f52 <dir_register+0x56>
			c = *dj->dir;
    1f16:	6963      	ldr	r3, [r4, #20]
    1f18:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    1f1a:	2be5      	cmp	r3, #229	; 0xe5
    1f1c:	d005      	beq.n	1f2a <dir_register+0x2e>
    1f1e:	b123      	cbz	r3, 1f2a <dir_register+0x2e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    1f20:	4620      	mov	r0, r4
    1f22:	2101      	movs	r1, #1
    1f24:	f7ff fe6b 	bl	1bfe <dir_next>
    1f28:	e7ed      	b.n	1f06 <dir_register+0xa>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1f2a:	6820      	ldr	r0, [r4, #0]
    1f2c:	6921      	ldr	r1, [r4, #16]
    1f2e:	f7ff fa74 	bl	141a <move_window>
		if (res == FR_OK) {
    1f32:	4605      	mov	r5, r0
    1f34:	b968      	cbnz	r0, 1f52 <dir_register+0x56>
			dir = dj->dir;
    1f36:	6960      	ldr	r0, [r4, #20]
    1f38:	462b      	mov	r3, r5
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    1f3a:	2200      	movs	r2, #0
    1f3c:	54c2      	strb	r2, [r0, r3]
    1f3e:	3301      	adds	r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    1f40:	2b20      	cmp	r3, #32
    1f42:	d1fa      	bne.n	1f3a <dir_register+0x3e>
	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1f44:	220b      	movs	r2, #11
    1f46:	69a1      	ldr	r1, [r4, #24]
    1f48:	f7ff fa1e 	bl	1388 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    1f4c:	6823      	ldr	r3, [r4, #0]
    1f4e:	2201      	movs	r2, #1
    1f50:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
}
    1f52:	4628      	mov	r0, r5
    1f54:	bd38      	pop	{r3, r4, r5, pc}

00001f56 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1f56:	b510      	push	{r4, lr}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    1f58:	2304      	movs	r3, #4
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1f5a:	4604      	mov	r4, r0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1f5c:	6921      	ldr	r1, [r4, #16]
    1f5e:	b191      	cbz	r1, 1f86 <dir_read+0x30>
		res = move_window(dj->fs, dj->sect);
    1f60:	6820      	ldr	r0, [r4, #0]
    1f62:	f7ff fa5a 	bl	141a <move_window>
		if (res != FR_OK) break;
    1f66:	b9a8      	cbnz	r0, 1f94 <dir_read+0x3e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1f68:	6963      	ldr	r3, [r4, #20]
		c = dir[DIR_Name];
    1f6a:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1f6c:	b18a      	cbz	r2, 1f92 <dir_read+0x3c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1f6e:	2ae5      	cmp	r2, #229	; 0xe5
    1f70:	d002      	beq.n	1f78 <dir_read+0x22>
    1f72:	7adb      	ldrb	r3, [r3, #11]
    1f74:	071b      	lsls	r3, r3, #28
    1f76:	d50f      	bpl.n	1f98 <dir_read+0x42>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    1f78:	4620      	mov	r0, r4
    1f7a:	2100      	movs	r1, #0
    1f7c:	f7ff fe3f 	bl	1bfe <dir_next>
		if (res != FR_OK) break;
    1f80:	b940      	cbnz	r0, 1f94 <dir_read+0x3e>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    1f82:	4603      	mov	r3, r0
    1f84:	e7ea      	b.n	1f5c <dir_read+0x6>
    1f86:	4618      	mov	r0, r3
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1f88:	b133      	cbz	r3, 1f98 <dir_read+0x42>
    1f8a:	2200      	movs	r2, #0
    1f8c:	6122      	str	r2, [r4, #16]
    1f8e:	4618      	mov	r0, r3
    1f90:	bd10      	pop	{r4, pc}
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1f92:	2004      	movs	r0, #4
    1f94:	4603      	mov	r3, r0
    1f96:	e7f8      	b.n	1f8a <dir_read+0x34>
	}

	if (res != FR_OK) dj->sect = 0;

	return res;
}
    1f98:	bd10      	pop	{r4, pc}

00001f9a <remove_chain>:
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1f9a:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
    1f9e:	4604      	mov	r4, r0
    1fa0:	460d      	mov	r5, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1fa2:	d922      	bls.n	1fea <remove_chain+0x50>
    1fa4:	69c3      	ldr	r3, [r0, #28]
    1fa6:	4299      	cmp	r1, r3
    1fa8:	d21f      	bcs.n	1fea <remove_chain+0x50>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1faa:	69e3      	ldr	r3, [r4, #28]
    1fac:	429d      	cmp	r5, r3
    1fae:	d205      	bcs.n	1fbc <remove_chain+0x22>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1fb0:	4620      	mov	r0, r4
    1fb2:	4629      	mov	r1, r5
    1fb4:	f7ff fcaf 	bl	1916 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
    1fb8:	4606      	mov	r6, r0
    1fba:	b908      	cbnz	r0, 1fc0 <remove_chain+0x26>
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1fbc:	2000      	movs	r0, #0
    1fbe:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1fc0:	2801      	cmp	r0, #1
    1fc2:	d012      	beq.n	1fea <remove_chain+0x50>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1fc4:	1c41      	adds	r1, r0, #1
    1fc6:	d00e      	beq.n	1fe6 <remove_chain+0x4c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1fc8:	4620      	mov	r0, r4
    1fca:	4629      	mov	r1, r5
    1fcc:	2200      	movs	r2, #0
    1fce:	f7ff fd4d 	bl	1a6c <put_fat>
			if (res != FR_OK) break;
    1fd2:	b958      	cbnz	r0, 1fec <remove_chain+0x52>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1fd4:	6923      	ldr	r3, [r4, #16]
    1fd6:	1c5a      	adds	r2, r3, #1
    1fd8:	d003      	beq.n	1fe2 <remove_chain+0x48>
				fs->free_clust++;
    1fda:	3301      	adds	r3, #1
    1fdc:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    1fde:	2301      	movs	r3, #1
    1fe0:	7163      	strb	r3, [r4, #5]
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1fe2:	4635      	mov	r5, r6
    1fe4:	e7e1      	b.n	1faa <remove_chain+0x10>
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1fe6:	2001      	movs	r0, #1
    1fe8:	bd70      	pop	{r4, r5, r6, pc}
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1fea:	2002      	movs	r0, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1fec:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ff0 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    1ff0:	b538      	push	{r3, r4, r5, lr}
    1ff2:	460c      	mov	r4, r1
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    1ff4:	b980      	cbnz	r0, 2018 <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    1ff6:	4a09      	ldr	r2, [pc, #36]	; (201c <f_mount+0x2c>)
    1ff8:	6813      	ldr	r3, [r2, #0]
    1ffa:	4615      	mov	r5, r2

	if (rfs) {
    1ffc:	b103      	cbz	r3, 2000 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    1ffe:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
    2000:	b114      	cbz	r4, 2008 <f_mount+0x18>
		fs->fs_type = 0;		/* Clear new fs object */
    2002:	2300      	movs	r3, #0
    2004:	7023      	strb	r3, [r4, #0]
    2006:	e004      	b.n	2012 <f_mount+0x22>
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	else /* Unmount, Added by Energy Micro AS. */
	{
	  disk_ioctl(fs->drv, CTRL_INVALIDATE, (void*)0);
    2008:	7860      	ldrb	r0, [r4, #1]
    200a:	2108      	movs	r1, #8
    200c:	4622      	mov	r2, r4
    200e:	f7ff f8c9 	bl	11a4 <disk_ioctl>
	}
	FatFs[vol] = fs;			/* Register new fs object */
    2012:	602c      	str	r4, [r5, #0]

	return FR_OK;
    2014:	2000      	movs	r0, #0
    2016:	bd38      	pop	{r3, r4, r5, pc}
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    2018:	200b      	movs	r0, #11
	  disk_ioctl(fs->drv, CTRL_INVALIDATE, (void*)0);
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    201a:	bd38      	pop	{r3, r4, r5, pc}
    201c:	20000b2c 	.word	0x20000b2c

00002020 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2024:	b08c      	sub	sp, #48	; 0x30
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2026:	2300      	movs	r3, #0
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2028:	4605      	mov	r5, r0
    202a:	a80c      	add	r0, sp, #48	; 0x30
    202c:	f840 1d2c 	str.w	r1, [r0, #-44]!
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    2030:	602b      	str	r3, [r5, #0]
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2032:	4617      	mov	r7, r2


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    2034:	f002 061f 	and.w	r6, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2038:	a905      	add	r1, sp, #20
    203a:	f002 021e 	and.w	r2, r2, #30
    203e:	f7ff fa6b 	bl	1518 <chk_mounted>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    2042:	ab02      	add	r3, sp, #8
    2044:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK)
    2046:	b918      	cbnz	r0, 2050 <f_open+0x30>
		res = follow_path(&dj, path);	/* Follow the file path */
    2048:	a805      	add	r0, sp, #20
    204a:	9901      	ldr	r1, [sp, #4]
    204c:	f7ff fe52 	bl	1cf4 <follow_path>
	dir = dj.dir;
    2050:	9c0a      	ldr	r4, [sp, #40]	; 0x28

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    2052:	b910      	cbnz	r0, 205a <f_open+0x3a>
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
    2054:	2c00      	cmp	r4, #0
    2056:	bf08      	it	eq
    2058:	2006      	moveq	r0, #6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    205a:	f017 0f1c 	tst.w	r7, #28
    205e:	d044      	beq.n	20ea <f_open+0xca>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    2060:	b148      	cbz	r0, 2076 <f_open+0x56>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2062:	2804      	cmp	r0, #4
    2064:	d102      	bne.n	206c <f_open+0x4c>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    2066:	a805      	add	r0, sp, #20
    2068:	f7ff ff48 	bl	1efc <dir_register>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    206c:	f046 0608 	orr.w	r6, r6, #8
			dir = dj.dir;					/* New entry */
    2070:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2072:	b130      	cbz	r0, 2082 <f_open+0x62>
    2074:	e06d      	b.n	2152 <f_open+0x132>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2076:	7ae3      	ldrb	r3, [r4, #11]
    2078:	f013 0f11 	tst.w	r3, #17
    207c:	d168      	bne.n	2150 <f_open+0x130>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    207e:	077b      	lsls	r3, r7, #29
    2080:	d462      	bmi.n	2148 <f_open+0x128>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2082:	0737      	lsls	r7, r6, #28
    2084:	d53a      	bpl.n	20fc <f_open+0xdc>
			dw = get_fattime();					/* Created time */
    2086:	f001 fcb9 	bl	39fc <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
    208a:	7d22      	ldrb	r2, [r4, #20]
    208c:	7d67      	ldrb	r7, [r4, #21]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
    208e:	f3c0 2307 	ubfx	r3, r0, #8, #8
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
    2092:	7ee1      	ldrb	r1, [r4, #27]
    2094:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
    2098:	7ea2      	ldrb	r2, [r4, #26]
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
    209a:	73a0      	strb	r0, [r4, #14]
    209c:	73e3      	strb	r3, [r4, #15]
    209e:	0c03      	lsrs	r3, r0, #16
    20a0:	0e00      	lsrs	r0, r0, #24
    20a2:	7423      	strb	r3, [r4, #16]
    20a4:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    20a6:	2300      	movs	r3, #0
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
    20a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
    20ac:	9805      	ldr	r0, [sp, #20]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
			dw = get_fattime();					/* Created time */
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
    20ae:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    20b0:	7723      	strb	r3, [r4, #28]
    20b2:	7763      	strb	r3, [r4, #29]
    20b4:	77a3      	strb	r3, [r4, #30]
    20b6:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
    20b8:	76a3      	strb	r3, [r4, #26]
    20ba:	76e3      	strb	r3, [r4, #27]
    20bc:	7523      	strb	r3, [r4, #20]
    20be:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
    20c0:	ea52 4707 	orrs.w	r7, r2, r7, lsl #16
			ST_DWORD(dir+DIR_CrtTime, dw);
			dir[DIR_Attr] = 0;					/* Reset attribute */
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
    20c4:	f04f 0301 	mov.w	r3, #1
    20c8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    20ca:	d017      	beq.n	20fc <f_open+0xdc>
				dw = dj.fs->winsect;
				res = remove_chain(dj.fs, cl);
    20cc:	4639      	mov	r1, r7
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
			cl = LD_CLUST(dir);					/* Get start cluster */
			ST_CLUST(dir, 0);					/* cluster = 0 */
			dj.fs->wflag = 1;
			if (cl) {							/* Remove the cluster chain if exist */
				dw = dj.fs->winsect;
    20ce:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
				res = remove_chain(dj.fs, cl);
    20d2:	f7ff ff62 	bl	1f9a <remove_chain>
				if (res == FR_OK) {
    20d6:	2800      	cmp	r0, #0
    20d8:	d13b      	bne.n	2152 <f_open+0x132>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    20da:	9805      	ldr	r0, [sp, #20]
    20dc:	3f01      	subs	r7, #1
    20de:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    20e0:	4641      	mov	r1, r8
    20e2:	f7ff f99a 	bl	141a <move_window>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    20e6:	b148      	cbz	r0, 20fc <f_open+0xdc>
    20e8:	e033      	b.n	2152 <f_open+0x132>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    20ea:	2800      	cmp	r0, #0
    20ec:	d131      	bne.n	2152 <f_open+0x132>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    20ee:	7ae3      	ldrb	r3, [r4, #11]
    20f0:	06d8      	lsls	r0, r3, #27
    20f2:	d42b      	bmi.n	214c <f_open+0x12c>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    20f4:	07b9      	lsls	r1, r7, #30
    20f6:	d501      	bpl.n	20fc <f_open+0xdc>
    20f8:	07da      	lsls	r2, r3, #31
    20fa:	d429      	bmi.n	2150 <f_open+0x130>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    20fc:	0733      	lsls	r3, r6, #28
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    20fe:	9b05      	ldr	r3, [sp, #20]
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
    2100:	bf48      	it	mi
    2102:	f046 0620 	orrmi.w	r6, r6, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    2108:	71ae      	strb	r6, [r5, #6]
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
			mode |= FA__WRITTEN;
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    210a:	61ea      	str	r2, [r5, #28]
		fp->dir_ptr = dir;
    210c:	622c      	str	r4, [r5, #32]
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    210e:	7d22      	ldrb	r2, [r4, #20]
    2110:	7d61      	ldrb	r1, [r4, #21]
    2112:	7ee0      	ldrb	r0, [r4, #27]
    2114:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    2118:	7ea2      	ldrb	r2, [r4, #26]
    211a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    211e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    2122:	612a      	str	r2, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2124:	7fa2      	ldrb	r2, [r4, #30]
    2126:	7fe1      	ldrb	r1, [r4, #31]
    2128:	0412      	lsls	r2, r2, #16
    212a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    212e:	7f21      	ldrb	r1, [r4, #28]
		fp->fptr = 0;						/* File pointer */
    2130:	2000      	movs	r0, #0
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2132:	430a      	orrs	r2, r1
    2134:	7f61      	ldrb	r1, [r4, #29]
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2136:	602b      	str	r3, [r5, #0]
    2138:	88db      	ldrh	r3, [r3, #6]
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    213a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    213e:	60ea      	str	r2, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    2140:	60a8      	str	r0, [r5, #8]
		fp->dsect = 0;
    2142:	61a8      	str	r0, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2144:	80ab      	strh	r3, [r5, #4]
    2146:	e004      	b.n	2152 <f_open+0x132>
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
    2148:	2008      	movs	r0, #8
    214a:	e002      	b.n	2152 <f_open+0x132>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
    214c:	2004      	movs	r0, #4
    214e:	e000      	b.n	2152 <f_open+0x132>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
    2150:	2007      	movs	r0, #7
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
    2152:	b00c      	add	sp, #48	; 0x30
    2154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002158 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    215c:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    215e:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2160:	4604      	mov	r4, r0
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    2162:	f8aa 3000 	strh.w	r3, [sl]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2166:	460f      	mov	r7, r1
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
    2168:	6800      	ldr	r0, [r0, #0]
    216a:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    216c:	4615      	mov	r5, r2
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
    216e:	f7ff fb5b 	bl	1828 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2172:	2800      	cmp	r0, #0
    2174:	f040 80ac 	bne.w	22d0 <f_read+0x178>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    2178:	79a3      	ldrb	r3, [r4, #6]
    217a:	0618      	lsls	r0, r3, #24
    217c:	f100 80a4 	bmi.w	22c8 <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    2180:	07d9      	lsls	r1, r3, #31
    2182:	f140 80a4 	bpl.w	22ce <f_read+0x176>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2186:	68e2      	ldr	r2, [r4, #12]
    2188:	68a3      	ldr	r3, [r4, #8]
    218a:	1ad3      	subs	r3, r2, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    218c:	429d      	cmp	r5, r3
    218e:	d943      	bls.n	2218 <f_read+0xc0>
    2190:	b29d      	uxth	r5, r3
    2192:	e041      	b.n	2218 <f_read+0xc0>

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2194:	68a3      	ldr	r3, [r4, #8]
    2196:	f3c3 0208 	ubfx	r2, r3, #0, #9
    219a:	2a00      	cmp	r2, #0
    219c:	f040 8081 	bne.w	22a2 <f_read+0x14a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    21a0:	6820      	ldr	r0, [r4, #0]
    21a2:	f890 b002 	ldrb.w	fp, [r0, #2]
    21a6:	f10b 3bff 	add.w	fp, fp, #4294967295
    21aa:	ea0b 2b53 	and.w	fp, fp, r3, lsr #9
			if (!csect) {						/* On the cluster boundary? */
    21ae:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
    21b2:	d034      	beq.n	221e <f_read+0xc6>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    21b4:	f8d4 9000 	ldr.w	r9, [r4]
    21b8:	6961      	ldr	r1, [r4, #20]
    21ba:	4648      	mov	r0, r9
    21bc:	f7ff fba0 	bl	1900 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    21c0:	2800      	cmp	r0, #0
    21c2:	d038      	beq.n	2236 <f_read+0xde>
			sect += csect;
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
    21c4:	ea5f 2855 	movs.w	r8, r5, lsr #9
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
    21c8:	eb00 060b 	add.w	r6, r0, fp
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
    21cc:	d045      	beq.n	225a <f_read+0x102>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    21ce:	f899 3002 	ldrb.w	r3, [r9, #2]
    21d2:	eb0b 0208 	add.w	r2, fp, r8
    21d6:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    21d8:	bfc4      	itt	gt
    21da:	ebcb 0803 	rsbgt	r8, fp, r3
    21de:	fa1f f888 	uxthgt.w	r8, r8
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    21e2:	fa5f f388 	uxtb.w	r3, r8
    21e6:	f899 0001 	ldrb.w	r0, [r9, #1]
    21ea:	4639      	mov	r1, r7
    21ec:	4632      	mov	r2, r6
    21ee:	f7fe ff45 	bl	107c <disk_read>
    21f2:	79a3      	ldrb	r3, [r4, #6]
    21f4:	2800      	cmp	r0, #0
    21f6:	d14d      	bne.n	2294 <f_read+0x13c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    21f8:	065b      	lsls	r3, r3, #25
    21fa:	d421      	bmi.n	2240 <f_read+0xe8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    21fc:	ea4f 2648 	mov.w	r6, r8, lsl #9
    2200:	b2b6      	uxth	r6, r6
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2202:	68a3      	ldr	r3, [r4, #8]
    2204:	1bad      	subs	r5, r5, r6
    2206:	4433      	add	r3, r6
    2208:	60a3      	str	r3, [r4, #8]
    220a:	f8ba 3000 	ldrh.w	r3, [sl]
    220e:	4437      	add	r7, r6
    2210:	4433      	add	r3, r6
    2212:	f8aa 3000 	strh.w	r3, [sl]
    2216:	b2ad      	uxth	r5, r5
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2218:	2d00      	cmp	r5, #0
    221a:	d1bb      	bne.n	2194 <f_read+0x3c>
    221c:	e051      	b.n	22c2 <f_read+0x16a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
			if (!csect) {						/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    221e:	b90b      	cbnz	r3, 2224 <f_read+0xcc>
					clst = fp->sclust;			/* Follow from the origin */
    2220:	6920      	ldr	r0, [r4, #16]
    2222:	e002      	b.n	222a <f_read+0xd2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2224:	6961      	ldr	r1, [r4, #20]
    2226:	f7ff fb76 	bl	1916 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    222a:	2801      	cmp	r0, #1
    222c:	d903      	bls.n	2236 <f_read+0xde>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    222e:	1c42      	adds	r2, r0, #1
    2230:	d02f      	beq.n	2292 <f_read+0x13a>
				fp->clust = clst;				/* Update current cluster */
    2232:	6160      	str	r0, [r4, #20]
    2234:	e7be      	b.n	21b4 <f_read+0x5c>
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2236:	79a3      	ldrb	r3, [r4, #6]
    2238:	f063 037f 	orn	r3, r3, #127	; 0x7f
    223c:	71a3      	strb	r3, [r4, #6]
    223e:	e043      	b.n	22c8 <f_read+0x170>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    2240:	69a3      	ldr	r3, [r4, #24]
    2242:	1b98      	subs	r0, r3, r6
    2244:	4540      	cmp	r0, r8
    2246:	d2d9      	bcs.n	21fc <f_read+0xa4>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    2248:	eb07 2040 	add.w	r0, r7, r0, lsl #9
    224c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2250:	f44f 7200 	mov.w	r2, #512	; 0x200
    2254:	f7ff f898 	bl	1388 <mem_cpy>
    2258:	e7d0      	b.n	21fc <f_read+0xa4>
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    225a:	69a2      	ldr	r2, [r4, #24]
    225c:	42b2      	cmp	r2, r6
    225e:	d01f      	beq.n	22a0 <f_read+0x148>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    2260:	79a3      	ldrb	r3, [r4, #6]
    2262:	f104 0824 	add.w	r8, r4, #36	; 0x24
    2266:	f013 0f40 	tst.w	r3, #64	; 0x40
    226a:	d00a      	beq.n	2282 <f_read+0x12a>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    226c:	2301      	movs	r3, #1
    226e:	f899 0001 	ldrb.w	r0, [r9, #1]
    2272:	4641      	mov	r1, r8
    2274:	f7fe ff44 	bl	1100 <disk_write>
    2278:	79a3      	ldrb	r3, [r4, #6]
    227a:	b958      	cbnz	r0, 2294 <f_read+0x13c>
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
    227c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2280:	71a3      	strb	r3, [r4, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	4641      	mov	r1, r8
    2286:	7858      	ldrb	r0, [r3, #1]
    2288:	4632      	mov	r2, r6
    228a:	2301      	movs	r3, #1
    228c:	f7fe fef6 	bl	107c <disk_read>
    2290:	b130      	cbz	r0, 22a0 <f_read+0x148>
					ABORT(fp->fs, FR_DISK_ERR);
    2292:	79a3      	ldrb	r3, [r4, #6]
    2294:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2298:	71a3      	strb	r3, [r4, #6]
    229a:	2001      	movs	r0, #1
    229c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#endif
			fp->dsect = sect;
    22a0:	61a6      	str	r6, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    22a2:	68a1      	ldr	r1, [r4, #8]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    22a4:	4638      	mov	r0, r7
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    22a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
    22aa:	f5c1 7600 	rsb	r6, r1, #512	; 0x200
    22ae:	b2b6      	uxth	r6, r6
    22b0:	42b5      	cmp	r5, r6
    22b2:	bf38      	it	cc
    22b4:	462e      	movcc	r6, r5
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    22b6:	4421      	add	r1, r4
    22b8:	3124      	adds	r1, #36	; 0x24
    22ba:	4632      	mov	r2, r6
    22bc:	f7ff f864 	bl	1388 <mem_cpy>
    22c0:	e79f      	b.n	2202 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    22c2:	4628      	mov	r0, r5
    22c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    22c8:	2002      	movs	r0, #2
    22ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    22ce:	2007      	movs	r0, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    22d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000022d4 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    22d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22d8:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    22da:	2300      	movs	r3, #0
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    22dc:	4604      	mov	r4, r0
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    22de:	f8a9 3000 	strh.w	r3, [r9]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    22e2:	460f      	mov	r7, r1
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
    22e4:	6800      	ldr	r0, [r0, #0]
    22e6:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    22e8:	4615      	mov	r5, r2
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
    22ea:	f7ff fa9d 	bl	1828 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    22ee:	2800      	cmp	r0, #0
    22f0:	f040 80bf 	bne.w	2472 <f_write+0x19e>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    22f4:	79a3      	ldrb	r3, [r4, #6]
    22f6:	0618      	lsls	r0, r3, #24
    22f8:	d45c      	bmi.n	23b4 <f_write+0xe0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    22fa:	0799      	lsls	r1, r3, #30
    22fc:	f140 80b8 	bpl.w	2470 <f_write+0x19c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2300:	68e3      	ldr	r3, [r4, #12]
    2302:	42dd      	cmn	r5, r3
    2304:	bf28      	it	cs
    2306:	2500      	movcs	r5, #0
    2308:	e036      	b.n	2378 <f_write+0xa4>
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
    230a:	ea5f 2855 	movs.w	r8, r5, lsr #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += csect;
    230e:	eb00 060a 	add.w	r6, r0, sl
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
    2312:	d07a      	beq.n	240a <f_write+0x136>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2314:	f89b 3002 	ldrb.w	r3, [fp, #2]
    2318:	eb0a 0208 	add.w	r2, sl, r8
    231c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
    231e:	bfc4      	itt	gt
    2320:	ebca 0803 	rsbgt	r8, sl, r3
    2324:	fa1f f888 	uxthgt.w	r8, r8
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2328:	f89b 0001 	ldrb.w	r0, [fp, #1]
    232c:	4639      	mov	r1, r7
    232e:	4632      	mov	r2, r6
    2330:	fa5f f388 	uxtb.w	r3, r8
    2334:	f7fe fee4 	bl	1100 <disk_write>
    2338:	2800      	cmp	r0, #0
    233a:	d176      	bne.n	242a <f_write+0x156>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    233c:	69a3      	ldr	r3, [r4, #24]
    233e:	1b99      	subs	r1, r3, r6
    2340:	4541      	cmp	r1, r8
    2342:	d20b      	bcs.n	235c <f_write+0x88>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    2344:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2348:	eb07 2141 	add.w	r1, r7, r1, lsl #9
    234c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2350:	f7ff f81a 	bl	1388 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    2354:	79a3      	ldrb	r3, [r4, #6]
    2356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    235a:	71a3      	strb	r3, [r4, #6]
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    235c:	ea4f 2648 	mov.w	r6, r8, lsl #9
    2360:	b2b6      	uxth	r6, r6
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    2362:	68a3      	ldr	r3, [r4, #8]
    2364:	1bad      	subs	r5, r5, r6
    2366:	4433      	add	r3, r6
    2368:	60a3      	str	r3, [r4, #8]
    236a:	f8b9 3000 	ldrh.w	r3, [r9]
    236e:	4437      	add	r7, r6
    2370:	4433      	add	r3, r6
    2372:	f8a9 3000 	strh.w	r3, [r9]
    2376:	b2ad      	uxth	r5, r5
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2378:	b325      	cbz	r5, 23c4 <f_write+0xf0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    237a:	68a3      	ldr	r3, [r4, #8]
    237c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2380:	2a00      	cmp	r2, #0
    2382:	d15a      	bne.n	243a <f_write+0x166>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2384:	6820      	ldr	r0, [r4, #0]
    2386:	f890 a002 	ldrb.w	sl, [r0, #2]
    238a:	f10a 3aff 	add.w	sl, sl, #4294967295
    238e:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
			if (!csect) {					/* On the cluster boundary? */
    2392:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
    2396:	d11e      	bne.n	23d6 <f_write+0x102>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2398:	b97b      	cbnz	r3, 23ba <f_write+0xe6>
					clst = fp->sclust;		/* Follow from the origin */
    239a:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    239c:	b921      	cbnz	r1, 23a8 <f_write+0xd4>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    239e:	f7ff fbe1 	bl	1b64 <create_chain>
    23a2:	4601      	mov	r1, r0
    23a4:	6120      	str	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    23a6:	b169      	cbz	r1, 23c4 <f_write+0xf0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    23a8:	2901      	cmp	r1, #1
    23aa:	79a3      	ldrb	r3, [r4, #6]
    23ac:	d110      	bne.n	23d0 <f_write+0xfc>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    23ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    23b2:	71a3      	strb	r3, [r4, #6]
    23b4:	2002      	movs	r0, #2
    23b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    23ba:	6961      	ldr	r1, [r4, #20]
    23bc:	f7ff fbd2 	bl	1b64 <create_chain>
    23c0:	4601      	mov	r1, r0
    23c2:	e7f0      	b.n	23a6 <f_write+0xd2>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    23c4:	68a3      	ldr	r3, [r4, #8]
    23c6:	68e2      	ldr	r2, [r4, #12]
    23c8:	4293      	cmp	r3, r2
    23ca:	d94a      	bls.n	2462 <f_write+0x18e>
    23cc:	60e3      	str	r3, [r4, #12]
    23ce:	e048      	b.n	2462 <f_write+0x18e>
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    23d0:	1c4a      	adds	r2, r1, #1
    23d2:	d02b      	beq.n	242c <f_write+0x158>
				fp->clust = clst;			/* Update current cluster */
    23d4:	6161      	str	r1, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    23d6:	79a3      	ldrb	r3, [r4, #6]
    23d8:	065b      	lsls	r3, r3, #25
    23da:	d50c      	bpl.n	23f6 <f_write+0x122>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    23dc:	4621      	mov	r1, r4
    23de:	f851 3b24 	ldr.w	r3, [r1], #36
    23e2:	69a2      	ldr	r2, [r4, #24]
    23e4:	7858      	ldrb	r0, [r3, #1]
    23e6:	2301      	movs	r3, #1
    23e8:	f7fe fe8a 	bl	1100 <disk_write>
    23ec:	79a3      	ldrb	r3, [r4, #6]
    23ee:	b9e8      	cbnz	r0, 242c <f_write+0x158>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    23f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    23f4:	71a3      	strb	r3, [r4, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    23f6:	f8d4 b000 	ldr.w	fp, [r4]
    23fa:	6961      	ldr	r1, [r4, #20]
    23fc:	4658      	mov	r0, fp
    23fe:	f7ff fa7f 	bl	1900 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2402:	2800      	cmp	r0, #0
    2404:	d181      	bne.n	230a <f_write+0x36>
    2406:	79a3      	ldrb	r3, [r4, #6]
    2408:	e7d1      	b.n	23ae <f_write+0xda>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    240a:	69a3      	ldr	r3, [r4, #24]
    240c:	42b3      	cmp	r3, r6
    240e:	d013      	beq.n	2438 <f_write+0x164>
				if (fp->fptr < fp->fsize &&
    2410:	68a2      	ldr	r2, [r4, #8]
    2412:	68e3      	ldr	r3, [r4, #12]
    2414:	429a      	cmp	r2, r3
    2416:	d20f      	bcs.n	2438 <f_write+0x164>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    2418:	f89b 0001 	ldrb.w	r0, [fp, #1]
    241c:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2420:	4632      	mov	r2, r6
    2422:	2301      	movs	r3, #1
    2424:	f7fe fe2a 	bl	107c <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    2428:	b130      	cbz	r0, 2438 <f_write+0x164>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    242a:	79a3      	ldrb	r3, [r4, #6]
    242c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2430:	71a3      	strb	r3, [r4, #6]
    2432:	2001      	movs	r0, #1
    2434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#endif
			fp->dsect = sect;
    2438:	61a6      	str	r6, [r4, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    243a:	68a0      	ldr	r0, [r4, #8]
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    243c:	4639      	mov	r1, r7
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    243e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    2442:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
    2446:	b2b6      	uxth	r6, r6
    2448:	42b5      	cmp	r5, r6
    244a:	bf38      	it	cc
    244c:	462e      	movcc	r6, r5
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    244e:	4420      	add	r0, r4
    2450:	3024      	adds	r0, #36	; 0x24
    2452:	4632      	mov	r2, r6
    2454:	f7fe ff98 	bl	1388 <mem_cpy>
		fp->flag |= FA__DIRTY;
    2458:	79a3      	ldrb	r3, [r4, #6]
    245a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    245e:	71a3      	strb	r3, [r4, #6]
    2460:	e77f      	b.n	2362 <f_write+0x8e>
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2462:	79a3      	ldrb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    2464:	2000      	movs	r0, #0
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2466:	f043 0320 	orr.w	r3, r3, #32
    246a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    246c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2470:	2007      	movs	r0, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002476 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2476:	b538      	push	{r3, r4, r5, lr}
    2478:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    247a:	88a1      	ldrh	r1, [r4, #4]
    247c:	6800      	ldr	r0, [r0, #0]
    247e:	f7ff f9d3 	bl	1828 <validate>
	if (res == FR_OK) {
    2482:	2800      	cmp	r0, #0
    2484:	d14a      	bne.n	251c <f_sync+0xa6>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2486:	79a3      	ldrb	r3, [r4, #6]
    2488:	f003 0220 	and.w	r2, r3, #32
    248c:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    2490:	2a00      	cmp	r2, #0
    2492:	d043      	beq.n	251c <f_sync+0xa6>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    2494:	065b      	lsls	r3, r3, #25
    2496:	d50d      	bpl.n	24b4 <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2498:	4621      	mov	r1, r4
    249a:	f851 3b24 	ldr.w	r3, [r1], #36
    249e:	69a2      	ldr	r2, [r4, #24]
    24a0:	7858      	ldrb	r0, [r3, #1]
    24a2:	2301      	movs	r3, #1
    24a4:	f7fe fe2c 	bl	1100 <disk_write>
    24a8:	2800      	cmp	r0, #0
    24aa:	d136      	bne.n	251a <f_sync+0xa4>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    24ac:	79a3      	ldrb	r3, [r4, #6]
    24ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    24b2:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    24b4:	6820      	ldr	r0, [r4, #0]
    24b6:	69e1      	ldr	r1, [r4, #28]
    24b8:	f7fe ffaf 	bl	141a <move_window>
			if (res == FR_OK) {
    24bc:	bb70      	cbnz	r0, 251c <f_sync+0xa6>
				dir = fp->dir_ptr;
    24be:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    24c0:	7aeb      	ldrb	r3, [r5, #11]
    24c2:	f043 0320 	orr.w	r3, r3, #32
    24c6:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    24c8:	68e3      	ldr	r3, [r4, #12]
    24ca:	772b      	strb	r3, [r5, #28]
    24cc:	89a3      	ldrh	r3, [r4, #12]
    24ce:	0a1b      	lsrs	r3, r3, #8
    24d0:	776b      	strb	r3, [r5, #29]
    24d2:	89e3      	ldrh	r3, [r4, #14]
    24d4:	77ab      	strb	r3, [r5, #30]
    24d6:	7be3      	ldrb	r3, [r4, #15]
    24d8:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    24da:	6923      	ldr	r3, [r4, #16]
    24dc:	76ab      	strb	r3, [r5, #26]
    24de:	8a23      	ldrh	r3, [r4, #16]
    24e0:	0a1b      	lsrs	r3, r3, #8
    24e2:	76eb      	strb	r3, [r5, #27]
    24e4:	8a63      	ldrh	r3, [r4, #18]
    24e6:	752b      	strb	r3, [r5, #20]
    24e8:	8a63      	ldrh	r3, [r4, #18]
    24ea:	0a1b      	lsrs	r3, r3, #8
    24ec:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    24ee:	f001 fa85 	bl	39fc <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    24f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
    24f6:	75a8      	strb	r0, [r5, #22]
    24f8:	75eb      	strb	r3, [r5, #23]
    24fa:	0c03      	lsrs	r3, r0, #16
    24fc:	0e00      	lsrs	r0, r0, #24
    24fe:	762b      	strb	r3, [r5, #24]
    2500:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    2502:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
    2504:	2201      	movs	r2, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
    2506:	f023 0320 	bic.w	r3, r3, #32
    250a:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    250c:	6823      	ldr	r3, [r4, #0]
    250e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    2510:	6820      	ldr	r0, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
				tim = get_fattime();						/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync(fp->fs);
    2516:	f7ff b999 	b.w	184c <sync>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    251a:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    251c:	bd38      	pop	{r3, r4, r5, pc}

0000251e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    251e:	b510      	push	{r4, lr}
    2520:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2522:	f7ff ffa8 	bl	2476 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2526:	b900      	cbnz	r0, 252a <f_close+0xc>
    2528:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
    252a:	bd10      	pop	{r4, pc}

0000252c <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    252c:	b570      	push	{r4, r5, r6, lr}
    252e:	4604      	mov	r4, r0
    2530:	460d      	mov	r5, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2532:	6800      	ldr	r0, [r0, #0]
    2534:	88a1      	ldrh	r1, [r4, #4]
    2536:	f7ff f977 	bl	1828 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    253a:	2800      	cmp	r0, #0
    253c:	f040 8093 	bne.w	2666 <f_lseek+0x13a>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2540:	79a2      	ldrb	r2, [r4, #6]
    2542:	0616      	lsls	r6, r2, #24
    2544:	f100 808c 	bmi.w	2660 <f_lseek+0x134>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2548:	68e3      	ldr	r3, [r4, #12]
    254a:	429d      	cmp	r5, r3
    254c:	d903      	bls.n	2556 <f_lseek+0x2a>
    254e:	f012 0f02 	tst.w	r2, #2
    2552:	bf08      	it	eq
    2554:	461d      	moveq	r5, r3
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2556:	2200      	movs	r2, #0
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2558:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
    255a:	60a2      	str	r2, [r4, #8]
		if (ofs) {
    255c:	b90d      	cbnz	r5, 2562 <f_lseek+0x36>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    255e:	2500      	movs	r5, #0
    2560:	e04d      	b.n	25fe <f_lseek+0xd2>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2562:	6820      	ldr	r0, [r4, #0]
    2564:	7886      	ldrb	r6, [r0, #2]
    2566:	0276      	lsls	r6, r6, #9
			if (ifptr > 0 &&
    2568:	b16b      	cbz	r3, 2586 <f_lseek+0x5a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    256a:	3b01      	subs	r3, #1
    256c:	1e69      	subs	r1, r5, #1
    256e:	fbb1 f1f6 	udiv	r1, r1, r6
    2572:	fbb3 f2f6 	udiv	r2, r3, r6

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2576:	4291      	cmp	r1, r2
    2578:	d305      	bcc.n	2586 <f_lseek+0x5a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    257a:	4272      	negs	r2, r6
    257c:	4013      	ands	r3, r2
    257e:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    2580:	1aed      	subs	r5, r5, r3
				clst = fp->clust;
    2582:	6961      	ldr	r1, [r4, #20]
    2584:	e00a      	b.n	259c <f_lseek+0x70>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2586:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2588:	b939      	cbnz	r1, 259a <f_lseek+0x6e>
					clst = create_chain(fp->fs, 0);
    258a:	f7ff faeb 	bl	1b64 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    258e:	2801      	cmp	r0, #1
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(fp->fs, 0);
    2590:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2592:	d02d      	beq.n	25f0 <f_lseek+0xc4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2594:	3001      	adds	r0, #1
    2596:	d052      	beq.n	263e <f_lseek+0x112>
					fp->sclust = clst;
    2598:	6121      	str	r1, [r4, #16]
				}
#endif
				fp->clust = clst;
    259a:	6161      	str	r1, [r4, #20]
			}
			if (clst != 0) {
    259c:	2900      	cmp	r1, #0
    259e:	d0de      	beq.n	255e <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
    25a0:	42b5      	cmp	r5, r6
    25a2:	d91a      	bls.n	25da <f_lseek+0xae>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    25a4:	79a3      	ldrb	r3, [r4, #6]
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    25a6:	6820      	ldr	r0, [r4, #0]
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    25a8:	079a      	lsls	r2, r3, #30
    25aa:	d504      	bpl.n	25b6 <f_lseek+0x8a>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    25ac:	f7ff fada 	bl	1b64 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
    25b0:	4601      	mov	r1, r0
    25b2:	b918      	cbnz	r0, 25bc <f_lseek+0x90>
    25b4:	e010      	b.n	25d8 <f_lseek+0xac>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    25b6:	f7ff f9ae 	bl	1916 <get_fat>
    25ba:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    25bc:	1c4b      	adds	r3, r1, #1
    25be:	d03e      	beq.n	263e <f_lseek+0x112>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    25c0:	2901      	cmp	r1, #1
    25c2:	d915      	bls.n	25f0 <f_lseek+0xc4>
    25c4:	6823      	ldr	r3, [r4, #0]
    25c6:	69db      	ldr	r3, [r3, #28]
    25c8:	4299      	cmp	r1, r3
    25ca:	d211      	bcs.n	25f0 <f_lseek+0xc4>
					fp->clust = clst;
					fp->fptr += bcs;
    25cc:	68a3      	ldr	r3, [r4, #8]
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
    25ce:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
    25d0:	4433      	add	r3, r6
    25d2:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    25d4:	1bad      	subs	r5, r5, r6
    25d6:	e7e3      	b.n	25a0 <f_lseek+0x74>
    25d8:	4635      	mov	r5, r6
				}
				fp->fptr += ofs;
    25da:	68a3      	ldr	r3, [r4, #8]
    25dc:	442b      	add	r3, r5
    25de:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    25e0:	f3c5 0308 	ubfx	r3, r5, #0, #9
    25e4:	2b00      	cmp	r3, #0
    25e6:	d0ba      	beq.n	255e <f_lseek+0x32>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    25e8:	6820      	ldr	r0, [r4, #0]
    25ea:	f7ff f989 	bl	1900 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    25ee:	b920      	cbnz	r0, 25fa <f_lseek+0xce>
    25f0:	79a3      	ldrb	r3, [r4, #6]
    25f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    25f6:	71a3      	strb	r3, [r4, #6]
    25f8:	e032      	b.n	2660 <f_lseek+0x134>
					nsect += ofs / SS(fp->fs);
    25fa:	eb00 2555 	add.w	r5, r0, r5, lsr #9
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    25fe:	68a3      	ldr	r3, [r4, #8]
    2600:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2604:	b313      	cbz	r3, 264c <f_lseek+0x120>
    2606:	69a2      	ldr	r2, [r4, #24]
    2608:	4295      	cmp	r5, r2
    260a:	d01f      	beq.n	264c <f_lseek+0x120>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    260c:	79a3      	ldrb	r3, [r4, #6]
    260e:	f104 0624 	add.w	r6, r4, #36	; 0x24
    2612:	f013 0f40 	tst.w	r3, #64	; 0x40
    2616:	d00a      	beq.n	262e <f_lseek+0x102>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2618:	6823      	ldr	r3, [r4, #0]
    261a:	4631      	mov	r1, r6
    261c:	7858      	ldrb	r0, [r3, #1]
    261e:	2301      	movs	r3, #1
    2620:	f7fe fd6e 	bl	1100 <disk_write>
    2624:	79a3      	ldrb	r3, [r4, #6]
    2626:	b958      	cbnz	r0, 2640 <f_lseek+0x114>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    2628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    262c:	71a3      	strb	r3, [r4, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    262e:	6823      	ldr	r3, [r4, #0]
    2630:	4631      	mov	r1, r6
    2632:	7858      	ldrb	r0, [r3, #1]
    2634:	462a      	mov	r2, r5
    2636:	2301      	movs	r3, #1
    2638:	f7fe fd20 	bl	107c <disk_read>
    263c:	b128      	cbz	r0, 264a <f_lseek+0x11e>
				ABORT(fp->fs, FR_DISK_ERR);
    263e:	79a3      	ldrb	r3, [r4, #6]
    2640:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2644:	71a3      	strb	r3, [r4, #6]
    2646:	2001      	movs	r0, #1
    2648:	bd70      	pop	{r4, r5, r6, pc}
#endif
			fp->dsect = nsect;
    264a:	61a5      	str	r5, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    264c:	68a3      	ldr	r3, [r4, #8]
    264e:	68e2      	ldr	r2, [r4, #12]
    2650:	4293      	cmp	r3, r2
    2652:	d907      	bls.n	2664 <f_lseek+0x138>
			fp->fsize = fp->fptr;
    2654:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    2656:	79a3      	ldrb	r3, [r4, #6]
    2658:	f043 0320 	orr.w	r3, r3, #32
    265c:	71a3      	strb	r3, [r4, #6]
    265e:	e001      	b.n	2664 <f_lseek+0x138>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2660:	2002      	movs	r0, #2
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	2000      	movs	r0, #0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2666:	bd70      	pop	{r4, r5, r6, pc}

00002668 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2668:	b510      	push	{r4, lr}
    266a:	b086      	sub	sp, #24
    266c:	4604      	mov	r4, r0
    266e:	a806      	add	r0, sp, #24
    2670:	f840 1d14 	str.w	r1, [r0, #-20]!
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2674:	2200      	movs	r2, #0
    2676:	4621      	mov	r1, r4
    2678:	f7fe ff4e 	bl	1518 <chk_mounted>
	if (res == FR_OK) {
    267c:	bb10      	cbnz	r0, 26c4 <f_opendir+0x5c>
		INIT_BUF(*dj);
    267e:	ab03      	add	r3, sp, #12
    2680:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2682:	4620      	mov	r0, r4
    2684:	9901      	ldr	r1, [sp, #4]
    2686:	f7ff fb35 	bl	1cf4 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    268a:	b9b0      	cbnz	r0, 26ba <f_opendir+0x52>
			if (dj->dir) {						/* It is not the root dir */
    268c:	6963      	ldr	r3, [r4, #20]
    268e:	b16b      	cbz	r3, 26ac <f_opendir+0x44>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2690:	7ada      	ldrb	r2, [r3, #11]
    2692:	06d2      	lsls	r2, r2, #27
    2694:	d515      	bpl.n	26c2 <f_opendir+0x5a>
					dj->sclust = LD_CLUST(dj->dir);
    2696:	7d59      	ldrb	r1, [r3, #21]
    2698:	7d1a      	ldrb	r2, [r3, #20]
    269a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    269e:	7ed9      	ldrb	r1, [r3, #27]
    26a0:	7e9b      	ldrb	r3, [r3, #26]
    26a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    26a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    26aa:	60a3      	str	r3, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    26ac:	6823      	ldr	r3, [r4, #0]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    26ae:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    26b0:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    26b2:	2100      	movs	r1, #0
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    26b4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dj, 0);			/* Rewind dir */
    26b6:	f7ff f997 	bl	19e8 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    26ba:	2804      	cmp	r0, #4
    26bc:	bf08      	it	eq
    26be:	2005      	moveq	r0, #5
    26c0:	e000      	b.n	26c4 <f_opendir+0x5c>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    26c2:	2005      	movs	r0, #5
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
    26c4:	b006      	add	sp, #24
    26c6:	bd10      	pop	{r4, pc}

000026c8 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    26c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    26ca:	4604      	mov	r4, r0
    26cc:	460e      	mov	r6, r1
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    26ce:	6800      	ldr	r0, [r0, #0]
    26d0:	88a1      	ldrh	r1, [r4, #4]
    26d2:	f7ff f8a9 	bl	1828 <validate>
	if (res == FR_OK) {
    26d6:	4605      	mov	r5, r0
    26d8:	b9e8      	cbnz	r0, 2716 <f_readdir+0x4e>
		if (!fno) {
    26da:	b926      	cbnz	r6, 26e6 <f_readdir+0x1e>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    26dc:	4620      	mov	r0, r4
    26de:	4629      	mov	r1, r5
    26e0:	f7ff f982 	bl	19e8 <dir_sdi>
    26e4:	e016      	b.n	2714 <f_readdir+0x4c>
		} else {
			INIT_BUF(*dj);
    26e6:	ab01      	add	r3, sp, #4
    26e8:	61a3      	str	r3, [r4, #24]
			res = dir_read(dj);				/* Read an directory item */
    26ea:	4620      	mov	r0, r4
    26ec:	f7ff fc33 	bl	1f56 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    26f0:	2804      	cmp	r0, #4
    26f2:	d101      	bne.n	26f8 <f_readdir+0x30>
				dj->sect = 0;
    26f4:	6125      	str	r5, [r4, #16]
    26f6:	e000      	b.n	26fa <f_readdir+0x32>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    26f8:	b960      	cbnz	r0, 2714 <f_readdir+0x4c>
				get_fileinfo(dj, fno);		/* Get the object information */
    26fa:	4620      	mov	r0, r4
    26fc:	4631      	mov	r1, r6
    26fe:	f7fe fe4d 	bl	139c <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2702:	4620      	mov	r0, r4
    2704:	2100      	movs	r1, #0
    2706:	f7ff fa7a 	bl	1bfe <dir_next>
				if (res == FR_NO_FILE) {
    270a:	2804      	cmp	r0, #4
    270c:	d102      	bne.n	2714 <f_readdir+0x4c>
					dj->sect = 0;
    270e:	2300      	movs	r3, #0
    2710:	6123      	str	r3, [r4, #16]
    2712:	e000      	b.n	2716 <f_readdir+0x4e>
    2714:	4605      	mov	r5, r0
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2716:	4628      	mov	r0, r5
    2718:	b004      	add	sp, #16
    271a:	bd70      	pop	{r4, r5, r6, pc}

0000271c <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    271c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2720:	ab02      	add	r3, sp, #8
    2722:	f843 0d04 	str.w	r0, [r3, #-4]!
    2726:	4688      	mov	r8, r1
    2728:	4616      	mov	r6, r2
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    272a:	4611      	mov	r1, r2
    272c:	4618      	mov	r0, r3
    272e:	2200      	movs	r2, #0
    2730:	f7fe fef2 	bl	1518 <chk_mounted>
	if (res == FR_OK) {
    2734:	4604      	mov	r4, r0
    2736:	2800      	cmp	r0, #0
    2738:	d161      	bne.n	27fe <f_getfree+0xe2>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    273a:	6833      	ldr	r3, [r6, #0]
    273c:	69df      	ldr	r7, [r3, #28]
    273e:	691a      	ldr	r2, [r3, #16]
    2740:	1eb9      	subs	r1, r7, #2
    2742:	428a      	cmp	r2, r1
    2744:	d802      	bhi.n	274c <f_getfree+0x30>
			*nclst = (*fatfs)->free_clust;
    2746:	f8c8 2000 	str.w	r2, [r8]
    274a:	e058      	b.n	27fe <f_getfree+0xe2>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    274c:	f893 9000 	ldrb.w	r9, [r3]
			n = 0;
			if (fat == FS_FAT12) {
    2750:	f1b9 0f01 	cmp.w	r9, #1
    2754:	d111      	bne.n	277a <f_getfree+0x5e>
    2756:	2702      	movs	r7, #2
    2758:	4605      	mov	r5, r0
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    275a:	6830      	ldr	r0, [r6, #0]
    275c:	4639      	mov	r1, r7
    275e:	f7ff f8da 	bl	1916 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2762:	1c43      	adds	r3, r0, #1
    2764:	d03c      	beq.n	27e0 <f_getfree+0xc4>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2766:	2801      	cmp	r0, #1
    2768:	d03c      	beq.n	27e4 <f_getfree+0xc8>
					if (stat == 0) n++;
    276a:	b900      	cbnz	r0, 276e <f_getfree+0x52>
    276c:	3501      	adds	r5, #1
				} while (++clst < (*fatfs)->n_fatent);
    276e:	6833      	ldr	r3, [r6, #0]
    2770:	3701      	adds	r7, #1
    2772:	69db      	ldr	r3, [r3, #28]
    2774:	429f      	cmp	r7, r3
    2776:	d3f0      	bcc.n	275a <f_getfree+0x3e>
    2778:	e037      	b.n	27ea <f_getfree+0xce>
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    277a:	6a59      	ldr	r1, [r3, #36]	; 0x24
				i = 0; p = 0;
    277c:	4602      	mov	r2, r0
    277e:	4603      	mov	r3, r0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
    2780:	4605      	mov	r5, r0
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    2782:	b952      	cbnz	r2, 279a <f_getfree+0x7e>
						res = move_window(*fatfs, sect++);
    2784:	6830      	ldr	r0, [r6, #0]
    2786:	f101 0a01 	add.w	sl, r1, #1
    278a:	f7fe fe46 	bl	141a <move_window>
						if (res != FR_OK) break;
    278e:	bb58      	cbnz	r0, 27e8 <f_getfree+0xcc>
						p = (*fatfs)->win;
    2790:	6833      	ldr	r3, [r6, #0]
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    2792:	4651      	mov	r1, sl
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    2794:	3334      	adds	r3, #52	; 0x34
						i = SS(*fatfs);
    2796:	f44f 7200 	mov.w	r2, #512	; 0x200
					}
					if (fat == FS_FAT16) {
    279a:	f1b9 0f02 	cmp.w	r9, #2
    279e:	7858      	ldrb	r0, [r3, #1]
    27a0:	f893 c000 	ldrb.w	ip, [r3]
    27a4:	d106      	bne.n	27b4 <f_getfree+0x98>
						if (LD_WORD(p) == 0) n++;
    27a6:	ea5c 2c00 	orrs.w	ip, ip, r0, lsl #8
    27aa:	bf08      	it	eq
    27ac:	3501      	addeq	r5, #1
						p += 2; i -= 2;
    27ae:	3302      	adds	r3, #2
    27b0:	3a02      	subs	r2, #2
    27b2:	e011      	b.n	27d8 <f_getfree+0xbc>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    27b4:	f893 a002 	ldrb.w	sl, [r3, #2]
    27b8:	f893 b003 	ldrb.w	fp, [r3, #3]
    27bc:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
    27c0:	ea4a 6a0b 	orr.w	sl, sl, fp, lsl #24
    27c4:	ea4a 0c0c 	orr.w	ip, sl, ip
    27c8:	ea4c 2000 	orr.w	r0, ip, r0, lsl #8
    27cc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
    27d0:	b900      	cbnz	r0, 27d4 <f_getfree+0xb8>
    27d2:	3501      	adds	r5, #1
						p += 4; i -= 4;
    27d4:	3304      	adds	r3, #4
    27d6:	3a04      	subs	r2, #4
					}
				} while (--clst);
    27d8:	3f01      	subs	r7, #1
					if (fat == FS_FAT16) {
						if (LD_WORD(p) == 0) n++;
						p += 2; i -= 2;
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
    27da:	b292      	uxth	r2, r2
					}
				} while (--clst);
    27dc:	d1d1      	bne.n	2782 <f_getfree+0x66>
    27de:	e004      	b.n	27ea <f_getfree+0xce>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    27e0:	2401      	movs	r4, #1
    27e2:	e002      	b.n	27ea <f_getfree+0xce>
					if (stat == 1) { res = FR_INT_ERR; break; }
    27e4:	2402      	movs	r4, #2
    27e6:	e000      	b.n	27ea <f_getfree+0xce>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    27e8:	4604      	mov	r4, r0
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    27ea:	6833      	ldr	r3, [r6, #0]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    27ec:	f1b9 0f03 	cmp.w	r9, #3
    27f0:	bf08      	it	eq
    27f2:	2201      	moveq	r2, #1
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    27f4:	611d      	str	r5, [r3, #16]
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    27f6:	bf08      	it	eq
    27f8:	715a      	strbeq	r2, [r3, #5]
			*nclst = n;
    27fa:	f8c8 5000 	str.w	r5, [r8]
		}
	}
	LEAVE_FF(*fatfs, res);
}
    27fe:	4620      	mov	r0, r4
    2800:	b003      	add	sp, #12
    2802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00002808 <RTC_IRQHandler>:
 * This is the handler for the Real Time Counter (RTC) interrupt. It checks if
 * the <b>COMP0</b> which is used for the 1/2s base clock triggered.
 *
 ******************************************************************************/
void	RTC_IRQHandler (void)
{
    2808:	b510      	push	{r4, lr}
uint32_t	status;			// interrupt status flags

    /* get interrupt status and mask out disabled IRQs */
    status  = RTC->IF;
    280a:	4c08      	ldr	r4, [pc, #32]	; (282c <RTC_IRQHandler+0x24>)
    280c:	6922      	ldr	r2, [r4, #16]
    status &= RTC->IEN;
    280e:	69e3      	ldr	r3, [r4, #28]
    2810:	4013      	ands	r3, r2

    /* Check for COMP0 interrupt which occurs every second */
    if (status & RTC_IF_COMP0)
    2812:	079b      	lsls	r3, r3, #30
    2814:	d509      	bpl.n	282a <RTC_IRQHandler+0x22>
    {
	/* Generate next COMP0 interrupt after another second */
	RTC_CompareSet (0, (RTC->COMP0 + RTC_COUNTS_PER_SEC/2) & 0xFFFFFF);
    2816:	68a1      	ldr	r1, [r4, #8]
    2818:	2000      	movs	r0, #0
    281a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    281e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2822:	f7fe fb1d 	bl	e60 <RTC_CompareSet>
	RTC->IFC = RTC_IFC_COMP0;
    2826:	2302      	movs	r3, #2
    2828:	61a3      	str	r3, [r4, #24]
    282a:	bd10      	pop	{r4, pc}
    282c:	40080000 	.word	0x40080000

00002830 <msDelay>:
void	msDelay (uint32_t ms)
{
uint32_t baseCnt, duration;

    /* Parameter check */
    EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);
    2830:	4b0c      	ldr	r3, [pc, #48]	; (2864 <msDelay+0x34>)
    2832:	1e42      	subs	r2, r0, #1
    2834:	429a      	cmp	r2, r3
 * @param[in] ms
 *	Duration in milliseconds to wait before returning to the caller.
 *
 ******************************************************************************/
void	msDelay (uint32_t ms)
{
    2836:	b510      	push	{r4, lr}
    2838:	4604      	mov	r4, r0
uint32_t baseCnt, duration;

    /* Parameter check */
    EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);
    283a:	d904      	bls.n	2846 <msDelay+0x16>
    283c:	480a      	ldr	r0, [pc, #40]	; (2868 <msDelay+0x38>)
    283e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    2842:	f7fd fd35 	bl	2b0 <assertEFM>

    /* Get current time counter value */
    baseCnt = RTC->CNT;
    2846:	4b09      	ldr	r3, [pc, #36]	; (286c <msDelay+0x3c>)

    /* Convert the [ms] value in number of ticks */
    duration = ((ms * RTC_COUNTS_PER_SEC) / 1000) & 0x00FFFFFF;
    2848:	03e4      	lsls	r4, r4, #15
    284a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

    /* Parameter check */
    EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);

    /* Get current time counter value */
    baseCnt = RTC->CNT;
    284e:	6859      	ldr	r1, [r3, #4]

    /* Convert the [ms] value in number of ticks */
    duration = ((ms * RTC_COUNTS_PER_SEC) / 1000) & 0x00FFFFFF;
    2850:	fbb4 f4f2 	udiv	r4, r4, r2

    /* See how much ticks have been elapsed */
    while (((RTC->CNT - baseCnt) & 0x00FFFFFF) < duration)
    2854:	685a      	ldr	r2, [r3, #4]
    2856:	1a52      	subs	r2, r2, r1
    2858:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    285c:	42a2      	cmp	r2, r4
    285e:	d3f9      	bcc.n	2854 <msDelay+0x24>
	;
}
    2860:	bd10      	pop	{r4, pc}
    2862:	bf00      	nop
    2864:	0001fffe 	.word	0x0001fffe
    2868:	000062de 	.word	0x000062de
    286c:	40080000 	.word	0x40080000

00002870 <main>:

/******************************************************************************
 * @brief  Main function
 *****************************************************************************/
int main( void )
{
    2870:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(_EFM32_GECKO_FAMILY)
  uint32_t                    rev;
  SYSTEM_ChipRevision_TypeDef chipRev;
  volatile uint32_t           *reg;

  rev = *(volatile uint32_t *)(0x0FE081FC);
    2872:	4ba8      	ldr	r3, [pc, #672]	; (2b14 <main+0x2a4>)
    2874:	b095      	sub	sp, #84	; 0x54
    2876:	681b      	ldr	r3, [r3, #0]
  /* Engineering Sample calibration setup */
  if ((rev >> 24) == 0)
    2878:	0e1b      	lsrs	r3, r3, #24
    287a:	d110      	bne.n	289e <main+0x2e>
  {
    reg   = (volatile uint32_t *)0x400CA00C;
    *reg &= ~(0x70UL);
    287c:	4ba6      	ldr	r3, [pc, #664]	; (2b18 <main+0x2a8>)
    287e:	681a      	ldr	r2, [r3, #0]
    2880:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    2884:	601a      	str	r2, [r3, #0]
    /* DREG */
    reg   = (volatile uint32_t *)0x400C6020;
    *reg &= ~(0xE0000000UL);
    2886:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
    288a:	3b2c      	subs	r3, #44	; 0x2c
    288c:	681a      	ldr	r2, [r3, #0]
    288e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2892:	601a      	str	r2, [r3, #0]
    *reg |= ~(7UL << 25);
    2894:	681a      	ldr	r2, [r3, #0]
    2896:	f062 6260 	orn	r2, r2, #234881024	; 0xe000000
    289a:	601a      	str	r2, [r3, #0]
    289c:	e001      	b.n	28a2 <main+0x32>
  }
  if ((rev >> 24) <= 3)
    289e:	2b03      	cmp	r3, #3
    28a0:	d80b      	bhi.n	28ba <main+0x4a>
  {
    /* DREG */
    reg   = (volatile uint32_t *)0x400C6020;
    *reg &= ~(0x00001F80UL);
    28a2:	4b9e      	ldr	r3, [pc, #632]	; (2b1c <main+0x2ac>)
    28a4:	681a      	ldr	r2, [r3, #0]
    28a6:	f422 52fc 	bic.w	r2, r2, #8064	; 0x1f80
    28aa:	601a      	str	r2, [r3, #0]
    /* Update CMU reset values */
    reg  = (volatile uint32_t *)0x400C8040;
    *reg = 0;
    28ac:	4a9c      	ldr	r2, [pc, #624]	; (2b20 <main+0x2b0>)
    28ae:	2300      	movs	r3, #0
    28b0:	6013      	str	r3, [r2, #0]
    reg  = (volatile uint32_t *)0x400C8044;
    *reg = 0;
    28b2:	6053      	str	r3, [r2, #4]
    reg  = (volatile uint32_t *)0x400C8058;
    *reg = 0;
    28b4:	6193      	str	r3, [r2, #24]
    reg  = (volatile uint32_t *)0x400C8060;
    *reg = 0;
    28b6:	6213      	str	r3, [r2, #32]
    reg  = (volatile uint32_t *)0x400C8078;
    *reg = 0;
    28b8:	6393      	str	r3, [r2, #56]	; 0x38
  }

  SYSTEM_ChipRevisionGet(&chipRev);
    28ba:	a80a      	add	r0, sp, #40	; 0x28
    28bc:	f7fe fb22 	bl	f04 <SYSTEM_ChipRevisionGet>
  if (chipRev.major == 0x01)
    28c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    28c4:	2b01      	cmp	r3, #1
    28c6:	d10f      	bne.n	28e8 <main+0x78>
  {
    /* Rev A errata handling for EM2/3. Must enable DMA clock in order for EM2/3 */
    /* to work. This will be fixed in later chip revisions, so only do for rev A. */
    if (chipRev.minor == 00)
    28c8:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    28cc:	b92b      	cbnz	r3, 28da <main+0x6a>
    {
      reg   = (volatile uint32_t *)0x400C8040;
      *reg |= 0x2;
    28ce:	4b94      	ldr	r3, [pc, #592]	; (2b20 <main+0x2b0>)
    28d0:	681a      	ldr	r2, [r3, #0]
    28d2:	f042 0202 	orr.w	r2, r2, #2
    28d6:	601a      	str	r2, [r3, #0]
    28d8:	e001      	b.n	28de <main+0x6e>
    }

    /* Rev A+B errata handling for I2C when using EM2/3. USART0 clock must be enabled */
    /* after waking up from EM2/EM3 in order for I2C to work. This will be fixed in */
    /* later chip revisions, so only do for rev A+B. */
    if (chipRev.minor <= 0x01)
    28da:	2b01      	cmp	r3, #1
    28dc:	d804      	bhi.n	28e8 <main+0x78>
    {
      reg   = (volatile uint32_t *)0x400C8044;
      *reg |= 0x1;
    28de:	4b91      	ldr	r3, [pc, #580]	; (2b24 <main+0x2b4>)
    28e0:	681a      	ldr	r2, [r3, #0]
    28e2:	f042 0201 	orr.w	r2, r2, #1
    28e6:	601a      	str	r2, [r3, #0]
    }
  }
  /* Ensure correct ADC/DAC calibration value */
  rev = *(volatile uint32_t *)0x0FE081F0;
    28e8:	4b8f      	ldr	r3, [pc, #572]	; (2b28 <main+0x2b8>)
    28ea:	681a      	ldr	r2, [r3, #0]
  if (rev < 0x4C8ABA00)
    28ec:	4b8f      	ldr	r3, [pc, #572]	; (2b2c <main+0x2bc>)
    28ee:	429a      	cmp	r2, r3
    28f0:	d820      	bhi.n	2934 <main+0xc4>
  {
    uint32_t cal;

    /* Enable ADC/DAC clocks */
    reg   = (volatile uint32_t *)0x400C8044UL;
    *reg |= (1 << 14 | 1 << 11);
    28f2:	4b8c      	ldr	r3, [pc, #560]	; (2b24 <main+0x2b4>)
    28f4:	681a      	ldr	r2, [r3, #0]
    28f6:	f442 4290 	orr.w	r2, r2, #18432	; 0x4800
    28fa:	601a      	str	r2, [r3, #0]

    /* Retrive calibration values */
    cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    28fc:	4a8c      	ldr	r2, [pc, #560]	; (2b30 <main+0x2c0>)
    28fe:	6810      	ldr	r0, [r2, #0]
           8) << 24;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    2900:	6811      	ldr	r1, [r2, #0]
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2902:	6815      	ldr	r5, [r2, #0]
            8) << 8;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    2904:	6814      	ldr	r4, [r2, #0]

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
            8) << 8;
    2906:	f405 42fe 	and.w	r2, r5, #32512	; 0x7f00

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
            0) << 0;
    290a:	f004 047f 	and.w	r4, r4, #127	; 0x7f

    /* Retrive calibration values */
    cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
           8) << 24;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    290e:	4322      	orrs	r2, r4
    2910:	f001 017f 	and.w	r1, r1, #127	; 0x7f
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2914:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    /* Enable ADC/DAC clocks */
    reg   = (volatile uint32_t *)0x400C8044UL;
    *reg |= (1 << 14 | 1 << 11);

    /* Retrive calibration values */
    cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
    2918:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
            0) << 0;

    /* ADC0->CAL = 1.25 reference */
    reg  = (volatile uint32_t *)0x40002034UL;
    *reg = cal;
    291c:	4a85      	ldr	r2, [pc, #532]	; (2b34 <main+0x2c4>)
            0) << 16;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
            8) << 8;

    cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
    291e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
            0) << 0;

    /* ADC0->CAL = 1.25 reference */
    reg  = (volatile uint32_t *)0x40002034UL;
    *reg = cal;
    2922:	6011      	str	r1, [r2, #0]

    /* DAC0->CAL = 1.25 reference */
    reg  = (volatile uint32_t *)(0x4000402CUL);
    cal  = *(volatile uint32_t *)0x0FE081C8UL;
    2924:	4a84      	ldr	r2, [pc, #528]	; (2b38 <main+0x2c8>)
    2926:	6811      	ldr	r1, [r2, #0]
    *reg = cal;
    2928:	4a84      	ldr	r2, [pc, #528]	; (2b3c <main+0x2cc>)
    292a:	6011      	str	r1, [r2, #0]

    /* Turn off ADC/DAC clocks */
    reg   = (volatile uint32_t *)0x400C8044UL;
    *reg &= ~(1 << 14 | 1 << 11);
    292c:	681a      	ldr	r2, [r3, #0]
    292e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    2932:	601a      	str	r2, [r3, #0]
 *
 *****************************************************************************/
static void cmuSetup(void)
{
    /* Start LFXO and wait until it is stable */
    CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
    2934:	2101      	movs	r1, #1
    2936:	460a      	mov	r2, r1
    2938:	2000      	movs	r0, #0
    293a:	f7fd fef1 	bl	720 <CMU_OscillatorEnable>
    /* Disable HFRCO */
    CMU_OscillatorEnable(cmuOsc_HFRCO, false, false);
#endif

    /* Route the LFXO clock to the RTC and set the prescaler */
    CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);	// RTC, LETIMER
    293e:	4880      	ldr	r0, [pc, #512]	; (2b40 <main+0x2d0>)
    2940:	2102      	movs	r1, #2
    2942:	f7fd ff1d 	bl	780 <CMU_ClockSelectSet>
    CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFXO);	// LEUART0/1
    2946:	487f      	ldr	r0, [pc, #508]	; (2b44 <main+0x2d4>)
    2948:	2102      	movs	r1, #2
    294a:	f7fd ff19 	bl	780 <CMU_ClockSelectSet>
    CMU_ClockEnable(cmuClock_RTC, true);
    294e:	487e      	ldr	r0, [pc, #504]	; (2b48 <main+0x2d8>)
    2950:	2101      	movs	r1, #1
    2952:	f7fd fde7 	bl	524 <CMU_ClockEnable>

    /* Prescaler of 1 = 30 us of resolution and overflow each 8 min */
    CMU_ClockDivSet(cmuClock_RTC, cmuClkDiv_1);
    2956:	487c      	ldr	r0, [pc, #496]	; (2b48 <main+0x2d8>)
    2958:	2101      	movs	r1, #1
    295a:	f7fd fd31 	bl	3c0 <CMU_ClockDivSet>

    /* Enable clock to low energy modules */
    CMU_ClockEnable(cmuClock_CORELE, true);
    295e:	487b      	ldr	r0, [pc, #492]	; (2b4c <main+0x2dc>)
    2960:	2101      	movs	r1, #1
    2962:	f7fd fddf 	bl	524 <CMU_ClockEnable>

    /* Enable clock for HF peripherals (ADC, DAC, I2C, TIMER, and USART) */
    CMU_ClockEnable(cmuClock_HFPER, true);
    2966:	487a      	ldr	r0, [pc, #488]	; (2b50 <main+0x2e0>)
    2968:	2101      	movs	r1, #1
    296a:	f7fd fddb 	bl	524 <CMU_ClockEnable>

    /* Enable clock to GPIO */
    CMU_ClockEnable(cmuClock_GPIO, true);
    296e:	4879      	ldr	r0, [pc, #484]	; (2b54 <main+0x2e4>)
    2970:	2101      	movs	r1, #1
    2972:	f7fd fdd7 	bl	524 <CMU_ClockEnable>

    /* Set up clocks */
    cmuSetup();

    /* Enable clock to GPIO */
    CMU_ClockEnable (cmuClock_GPIO, true);
    2976:	4877      	ldr	r0, [pc, #476]	; (2b54 <main+0x2e4>)
    2978:	2101      	movs	r1, #1
    297a:	f7fd fdd3 	bl	524 <CMU_ClockEnable>

    /* Configure PA2 to drive the red Power-On LED (LED1) - show we are alive */
    GPIO_PinModeSet (POWER_LED_PORT, POWER_LED_PIN, gpioModePushPull, 1);
    297e:	2000      	movs	r0, #0
    2980:	2102      	movs	r1, #2
    2982:	2204      	movs	r2, #4
    2984:	2301      	movs	r3, #1
    2986:	f7fe f8d9 	bl	b3c <GPIO_PinModeSet>

    /* Configure PA3 and PC15 as input to determine platform (board type) */
    GPIO_PinModeSet (gpioPortA, 3, gpioModeInput, 0);
    298a:	2000      	movs	r0, #0
    298c:	4603      	mov	r3, r0
    298e:	2103      	movs	r1, #3
    2990:	2201      	movs	r2, #1
    2992:	f7fe f8d3 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet (gpioPortC,15, gpioModeInput, 0);
    2996:	210f      	movs	r1, #15
    2998:	2201      	movs	r2, #1
    299a:	2002      	movs	r0, #2
    299c:	2300      	movs	r3, #0
    299e:	f7fe f8cd 	bl	b3c <GPIO_PinModeSet>

    /* Configure the RTC */
    RTC_Init_TypeDef rtcInit;
    rtcInit.debugRun = false;
    29a2:	2300      	movs	r3, #0
    rtcInit.comp0Top = false;
    rtcInit.enable = false;
    29a4:	a814      	add	r0, sp, #80	; 0x50
    29a6:	f800 3d4c 	strb.w	r3, [r0, #-76]!
    GPIO_PinModeSet (gpioPortA, 3, gpioModeInput, 0);
    GPIO_PinModeSet (gpioPortC,15, gpioModeInput, 0);

    /* Configure the RTC */
    RTC_Init_TypeDef rtcInit;
    rtcInit.debugRun = false;
    29aa:	f88d 3005 	strb.w	r3, [sp, #5]
    rtcInit.comp0Top = false;
    29ae:	f88d 3006 	strb.w	r3, [sp, #6]
    rtcInit.enable = false;

    /* Initialize the RTC */
    RTC_Init (&rtcInit);
    29b2:	f7fe fa7f 	bl	eb4 <RTC_Init>
 *   together to set multiple interrupt sources for the RTC module
 *   (RTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void RTC_IntEnable(uint32_t flags)
{
  RTC->IEN |= flags;
    29b6:	4b68      	ldr	r3, [pc, #416]	; (2b58 <main+0x2e8>)
     *   COMP1    - not used
     */
    RTC_IntEnable (RTC_IEN_COMP0);

    /* Enable RTC */
    RTC_Enable (true);
    29b8:	2001      	movs	r0, #1
    29ba:	69da      	ldr	r2, [r3, #28]
    29bc:	f042 0202 	orr.w	r2, r2, #2
    29c0:	61da      	str	r2, [r3, #28]
    29c2:	f7fe fa6d 	bl	ea0 <RTC_Enable>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    29c6:	4b65      	ldr	r3, [pc, #404]	; (2b5c <main+0x2ec>)
    29c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    29cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    /* Enable RTC interrupts */
    NVIC_ClearPendingIRQ(RTC_IRQn);
    NVIC_EnableIRQ(RTC_IRQn);

    /* Init Low Energy UART with 9600bd (this is the maximum) */
    drvLEUART_Init (9600);
    29d0:	f44f 5016 	mov.w	r0, #9600	; 0x2580

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    29d4:	601a      	str	r2, [r3, #0]
    29d6:	f000 fab5 	bl	2f44 <drvLEUART_Init>

#ifdef DEBUG
    dbgInit();
    29da:	f000 f987 	bl	2cec <dbgInit>

    /* Output version string to LEUART */
#ifdef PLATFORM
    drvLEUART_puts("\n***** " PLATFORM "_Boot V");
#else
    drvLEUART_puts("\n***** EFM32_Boot V");
    29de:	4860      	ldr	r0, [pc, #384]	; (2b60 <main+0x2f0>)
    29e0:	f000 fb34 	bl	304c <drvLEUART_puts>
#endif
    drvLEUART_puts(prj.Version);
    29e4:	485f      	ldr	r0, [pc, #380]	; (2b64 <main+0x2f4>)
    29e6:	f000 fb31 	bl	304c <drvLEUART_puts>
    drvLEUART_puts(" *****\n\n");
    29ea:	485f      	ldr	r0, [pc, #380]	; (2b68 <main+0x2f8>)
    29ec:	f000 fb2e 	bl	304c <drvLEUART_puts>

    /* Initialize Logging (do this early) */
    LogInit();
    29f0:	f000 fbee 	bl	31d0 <LogInit>

    /* Log Firmware Revision */
    Log ("======================================");
    29f4:	485d      	ldr	r0, [pc, #372]	; (2b6c <main+0x2fc>)
    29f6:	f000 fbf5 	bl	31e4 <Log>
    Log ("EFM32_Boot V%s (%s %s)", prj.Version, prj.Date, prj.Time);
    29fa:	495a      	ldr	r1, [pc, #360]	; (2b64 <main+0x2f4>)
    29fc:	485c      	ldr	r0, [pc, #368]	; (2b70 <main+0x300>)
    29fe:	f1a1 021a 	sub.w	r2, r1, #26
    2a02:	f1a1 030a 	sub.w	r3, r1, #10
    2a06:	f000 fbed 	bl	31e4 <Log>
     * (SNB_Heaven).
     */
#ifdef PLATFORM
    pPlatform = PLATFORM;
#else
    if (GPIO->P[gpioPortA].DIN & (1 << 3))
    2a0a:	4b5a      	ldr	r3, [pc, #360]	; (2b74 <main+0x304>)
    2a0c:	69da      	ldr	r2, [r3, #28]
    2a0e:	0717      	lsls	r7, r2, #28
    2a10:	d40a      	bmi.n	2a28 <main+0x1b8>
	 * To distinguish between MAPRDL and TAMDL, pin PC15 will be probed.
	 * On platform MAPRDL, this is signal PC15_LA_MOSFET which is connected
	 * to pull-down resistor R66.  TAMDL has a pull-up resistor connected
	 * to PC15.
	 */
	if (GPIO->P[gpioPortC].DIN & (1 << 15))
    2a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    2a14:	041e      	lsls	r6, r3, #16
    2a16:	d509      	bpl.n	2a2c <main+0x1bc>
	{
	    /* PC15 is 1 - must be TAMDL, overwrite settings */
	    pPlatform = "TAMDL";	// is TAMDL
	    g_MicroSD_PwrPort = TAMDL_MICROSD_PWR_GPIO_PORT;
    2a18:	4b57      	ldr	r3, [pc, #348]	; (2b78 <main+0x308>)
    2a1a:	2202      	movs	r2, #2
    2a1c:	701a      	strb	r2, [r3, #0]
	    g_MicroSD_PwrPin  = TAMDL_MICROSD_PWR_PIN;
    2a1e:	4b57      	ldr	r3, [pc, #348]	; (2b7c <main+0x30c>)
    2a20:	220a      	movs	r2, #10
    2a22:	601a      	str	r2, [r3, #0]
	 * to PC15.
	 */
	if (GPIO->P[gpioPortC].DIN & (1 << 15))
	{
	    /* PC15 is 1 - must be TAMDL, overwrite settings */
	    pPlatform = "TAMDL";	// is TAMDL
    2a24:	4c56      	ldr	r4, [pc, #344]	; (2b80 <main+0x310>)
    2a26:	e002      	b.n	2a2e <main+0x1be>
#ifdef PLATFORM
    pPlatform = PLATFORM;
#else
    if (GPIO->P[gpioPortA].DIN & (1 << 3))
    {
	pPlatform = "APRDL";
    2a28:	4c56      	ldr	r4, [pc, #344]	; (2b84 <main+0x314>)
    2a2a:	e000      	b.n	2a2e <main+0x1be>
    }
    else
    {
	pPlatform = "MAPRDL";		// assume MAPRDL (SERENITY)
    2a2c:	4c56      	ldr	r4, [pc, #344]	; (2b88 <main+0x318>)
	    g_MicroSD_PwrPort = TAMDL_MICROSD_PWR_GPIO_PORT;
	    g_MicroSD_PwrPin  = TAMDL_MICROSD_PWR_PIN;
	}
    }
#endif
    Log ("Platform: %s", pPlatform);
    2a2e:	4621      	mov	r1, r4
    2a30:	4856      	ldr	r0, [pc, #344]	; (2b8c <main+0x31c>)
    2a32:	f000 fbd7 	bl	31e4 <Log>
    sprintf (FirmwareFilename, "%s.UPD", pPlatform);
    2a36:	4622      	mov	r2, r4
    2a38:	4955      	ldr	r1, [pc, #340]	; (2b90 <main+0x320>)
    2a3a:	a80a      	add	r0, sp, #40	; 0x28
    2a3c:	f001 f8a4 	bl	3b88 <siprintf>

    /* Log information about the MCU Type and S/N */
    uint32_t uniquHi = DEVINFO->UNIQUEH;
    2a40:	4b54      	ldr	r3, [pc, #336]	; (2b94 <main+0x324>)

    /* Initialize SD-Card Interface */
    DiskInit();

    /* Switch Power-LED OFF */
    POWER_LED = 0;
    2a42:	4c55      	ldr	r4, [pc, #340]	; (2b98 <main+0x328>)
#endif
    Log ("Platform: %s", pPlatform);
    sprintf (FirmwareFilename, "%s.UPD", pPlatform);

    /* Log information about the MCU Type and S/N */
    uint32_t uniquHi = DEVINFO->UNIQUEH;
    2a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    Log ("MCU: %s HW-ID: 0x%08lX%08lX",
    2a46:	4855      	ldr	r0, [pc, #340]	; (2b9c <main+0x32c>)
    2a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2a4a:	4955      	ldr	r1, [pc, #340]	; (2ba0 <main+0x330>)

    /* Initialize SD-Card Interface */
    DiskInit();

    /* Switch Power-LED OFF */
    POWER_LED = 0;
    2a4c:	2600      	movs	r6, #0
    Log ("Platform: %s", pPlatform);
    sprintf (FirmwareFilename, "%s.UPD", pPlatform);

    /* Log information about the MCU Type and S/N */
    uint32_t uniquHi = DEVINFO->UNIQUEH;
    Log ("MCU: %s HW-ID: 0x%08lX%08lX",
    2a4e:	f000 fbc9 	bl	31e4 <Log>
	 PART_NUMBER, uniquHi, DEVINFO->UNIQUEL);

    /* Initialize SD-Card Interface */
    DiskInit();
    2a52:	f000 fd81 	bl	3558 <DiskInit>

    /* Switch Power-LED OFF */
    POWER_LED = 0;
    2a56:	6026      	str	r6, [r4, #0]

    /* Check if an SD-Card is present */
    if (DiskCheck())
    2a58:	f000 fe2e 	bl	36b8 <DiskCheck>
    2a5c:	2800      	cmp	r0, #0
    2a5e:	f000 80eb 	beq.w	2c38 <main+0x3c8>
    {
	/* Yes - see if any "*.UPD" files exist */
	if (FindFile ("/", "*.UPD") != NULL)
    2a62:	4850      	ldr	r0, [pc, #320]	; (2ba4 <main+0x334>)
    2a64:	4950      	ldr	r1, [pc, #320]	; (2ba8 <main+0x338>)
    2a66:	f000 fc9d 	bl	33a4 <FindFile>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	f000 80e1 	beq.w	2c32 <main+0x3c2>
	     * Found update image(s), so the booter will NOT start the
	     * application in FLASH until this SD-Card has been removed.
	     * Next find out, if there exists an firmware update file for
	     * this board.
	     */
	    if (FindFile ("/", FirmwareFilename) != NULL)
    2a70:	484c      	ldr	r0, [pc, #304]	; (2ba4 <main+0x334>)
    2a72:	a90a      	add	r1, sp, #40	; 0x28
    2a74:	f000 fc96 	bl	33a4 <FindFile>
    2a78:	2800      	cmp	r0, #0
    2a7a:	f000 80a5 	beq.w	2bc8 <main+0x358>
	    {
	    PRJ_INFO	*pPrjInfo;
	    char	 oldVersion[16] = "<unknown>";
    2a7e:	4d4b      	ldr	r5, [pc, #300]	; (2bac <main+0x33c>)
    2a80:	ab02      	add	r3, sp, #8
    2a82:	6828      	ldr	r0, [r5, #0]
    2a84:	6869      	ldr	r1, [r5, #4]
    2a86:	892f      	ldrh	r7, [r5, #8]
    2a88:	c303      	stmia	r3!, {r0, r1}
    2a8a:	2206      	movs	r2, #6
    2a8c:	4631      	mov	r1, r6
    2a8e:	f10d 0012 	add.w	r0, sp, #18
    2a92:	801f      	strh	r7, [r3, #0]
    2a94:	f001 f82e 	bl	3af4 <memset>
	    char	 newVersion[16] = "<unknown>";
    2a98:	6828      	ldr	r0, [r5, #0]
    2a9a:	6869      	ldr	r1, [r5, #4]
    2a9c:	ab06      	add	r3, sp, #24
    2a9e:	c303      	stmia	r3!, {r0, r1}
    2aa0:	2206      	movs	r2, #6
    2aa2:	4631      	mov	r1, r6
    2aa4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
    2aa8:	801f      	strh	r7, [r3, #0]
    2aaa:	f001 f823 	bl	3af4 <memset>

		/* Yes, then proceed firmware update */
		Log ("Found update file for this board, reprogramming FLASH");
    2aae:	4840      	ldr	r0, [pc, #256]	; (2bb0 <main+0x340>)
    2ab0:	f000 fb98 	bl	31e4 <Log>

		/* Find version of the current (old) application image */
		pPrjInfo = FindPrjInfo();
    2ab4:	f000 f932 	bl	2d1c <FindPrjInfo>
		if (pPrjInfo != NULL)
    2ab8:	4601      	mov	r1, r0
    2aba:	b118      	cbz	r0, 2ac4 <main+0x254>
		    strcpy (oldVersion, pPrjInfo->Version);
    2abc:	a802      	add	r0, sp, #8
    2abe:	3126      	adds	r1, #38	; 0x26
    2ac0:	f001 f9a6 	bl	3e10 <strcpy>

		/* Perform firmware update */
		errorCode = FirmwareUpdate (FirmwareFilename);
    2ac4:	a80a      	add	r0, sp, #40	; 0x28
    2ac6:	f000 f93d 	bl	2d44 <FirmwareUpdate>
    2aca:	4605      	mov	r5, r0

		/* Find version of the new application image */
		pPrjInfo = FindPrjInfo();
    2acc:	f000 f926 	bl	2d1c <FindPrjInfo>
		if (pPrjInfo != NULL)
    2ad0:	4601      	mov	r1, r0
    2ad2:	b118      	cbz	r0, 2adc <main+0x26c>
		    strcpy (newVersion, pPrjInfo->Version);
    2ad4:	a806      	add	r0, sp, #24
    2ad6:	3126      	adds	r1, #38	; 0x26
    2ad8:	f001 f99a 	bl	3e10 <strcpy>

		switch (errorCode)
    2adc:	2d06      	cmp	r5, #6
    2ade:	d813      	bhi.n	2b08 <main+0x298>
    2ae0:	e8df f005 	tbb	[pc, r5]
    2ae4:	12121204 	.word	0x12121204
    2ae8:	0c0a      	.short	0x0c0a
    2aea:	0e          	.byte	0x0e
    2aeb:	00          	.byte	0x00
		{
		    case 0: Log ("Update from version %s to %s finished"
    2aec:	4831      	ldr	r0, [pc, #196]	; (2bb4 <main+0x344>)
    2aee:	a902      	add	r1, sp, #8
    2af0:	aa06      	add	r2, sp, #24
    2af2:	f000 fb77 	bl	31e4 <Log>
				 " - no errors", oldVersion, newVersion);
			    break;
    2af6:	e06b      	b.n	2bd0 <main+0x360>

		    case 4: Log ("Update aborted - File READ ERROR");
    2af8:	482f      	ldr	r0, [pc, #188]	; (2bb8 <main+0x348>)
    2afa:	e002      	b.n	2b02 <main+0x292>
			    break;

		    case 5: Log ("Update aborted - FLASH ERASE ERROR");
    2afc:	482f      	ldr	r0, [pc, #188]	; (2bbc <main+0x34c>)
    2afe:	e000      	b.n	2b02 <main+0x292>
			    break;

		    case 6: Log ("Update aborted - FLASH WRITE ERROR");
    2b00:	482f      	ldr	r0, [pc, #188]	; (2bc0 <main+0x350>)
    2b02:	f000 fb6f 	bl	31e4 <Log>
			    break;
    2b06:	e063      	b.n	2bd0 <main+0x360>

		    default:
			    Log ("Update aborted - Unknown Error %d",
    2b08:	482e      	ldr	r0, [pc, #184]	; (2bc4 <main+0x354>)
    2b0a:	4629      	mov	r1, r5
    2b0c:	f000 fb6a 	bl	31e4 <Log>
				 errorCode);
			    break;
    2b10:	e05e      	b.n	2bd0 <main+0x360>
    2b12:	bf00      	nop
    2b14:	0fe081fc 	.word	0x0fe081fc
    2b18:	400ca00c 	.word	0x400ca00c
    2b1c:	400c6020 	.word	0x400c6020
    2b20:	400c8040 	.word	0x400c8040
    2b24:	400c8044 	.word	0x400c8044
    2b28:	0fe081f0 	.word	0x0fe081f0
    2b2c:	4c8ab9ff 	.word	0x4c8ab9ff
    2b30:	0fe081b4 	.word	0x0fe081b4
    2b34:	40002034 	.word	0x40002034
    2b38:	0fe081c8 	.word	0x0fe081c8
    2b3c:	4000402c 	.word	0x4000402c
    2b40:	00060002 	.word	0x00060002
    2b44:	00120003 	.word	0x00120003
    2b48:	00080430 	.word	0x00080430
    2b4c:	00042300 	.word	0x00042300
    2b50:	00028110 	.word	0x00028110
    2b54:	0002c200 	.word	0x0002c200
    2b58:	40080000 	.word	0x40080000
    2b5c:	e000e100 	.word	0xe000e100
    2b60:	000062f5 	.word	0x000062f5
    2b64:	0000680c 	.word	0x0000680c
    2b68:	00006309 	.word	0x00006309
    2b6c:	00006312 	.word	0x00006312
    2b70:	00006339 	.word	0x00006339
    2b74:	40006000 	.word	0x40006000
    2b78:	20000036 	.word	0x20000036
    2b7c:	20002590 	.word	0x20002590
    2b80:	000062ef 	.word	0x000062ef
    2b84:	000062e9 	.word	0x000062e9
    2b88:	000062e8 	.word	0x000062e8
    2b8c:	00006350 	.word	0x00006350
    2b90:	0000635d 	.word	0x0000635d
    2b94:	0fe081b0 	.word	0x0fe081b0
    2b98:	420c0188 	.word	0x420c0188
    2b9c:	00006364 	.word	0x00006364
    2ba0:	00006380 	.word	0x00006380
    2ba4:	0000638e 	.word	0x0000638e
    2ba8:	00006390 	.word	0x00006390
    2bac:	000062ce 	.word	0x000062ce
    2bb0:	00006396 	.word	0x00006396
    2bb4:	000063cc 	.word	0x000063cc
    2bb8:	000063fe 	.word	0x000063fe
    2bbc:	0000641f 	.word	0x0000641f
    2bc0:	00006442 	.word	0x00006442
    2bc4:	00006465 	.word	0x00006465
		}
	    }
	    else
	    {
		/* No, there isn't any update file for this board */
		Log ("There exist no update file for this board!");
    2bc8:	4841      	ldr	r0, [pc, #260]	; (2cd0 <main+0x460>)
    2bca:	f000 fb0b 	bl	31e4 <Log>

		errorCode = 3;	// Error Code 3: No Update Image for this board
    2bce:	2503      	movs	r5, #3
	    }

	    /* Write all logging to file "UPDATE.TXT" */
	    Log ("Waiting until the SD-Card has been removed");
    2bd0:	4840      	ldr	r0, [pc, #256]	; (2cd4 <main+0x464>)
    2bd2:	f000 fb07 	bl	31e4 <Log>

	    /* Open or create Log File */
	    if (LogFileOpen("UPDATE.TXT", "UPDATE.TXT"))
    2bd6:	4840      	ldr	r0, [pc, #256]	; (2cd8 <main+0x468>)
    2bd8:	4601      	mov	r1, r0
    2bda:	f000 fb2d 	bl	3238 <LogFileOpen>
    2bde:	b108      	cbz	r0, 2be4 <main+0x374>
	    {
		/* Flush current log buffer */
		LogFlush();
    2be0:	f000 fb5c 	bl	329c <LogFlush>
	    else
	    {
		/* No, there isn't any update file for this board */
		Log ("There exist no update file for this board!");

		errorCode = 3;	// Error Code 3: No Update Image for this board
    2be4:	2600      	movs	r6, #0
	     * Wait until the SD-Card has been removed.  Show error code
	     * while waiting.
	     */
	    do
	    {
		if (errorCode == 0)
    2be6:	b93d      	cbnz	r5, 2bf8 <main+0x388>
		{
		    /* No error, flicker LED */
		    POWER_LED = (++n & 0x1) ? 1 : 0;
    2be8:	3601      	adds	r6, #1
    2bea:	f006 0301 	and.w	r3, r6, #1
    2bee:	6023      	str	r3, [r4, #0]
		    msDelay(50);		// pause
    2bf0:	2032      	movs	r0, #50	; 0x32
    2bf2:	f7ff fe1d 	bl	2830 <msDelay>
    2bf6:	e015      	b.n	2c24 <main+0x3b4>
		{
		    /*
		     * Show error code via LED pattern:
		     * repeat: Pause - <errorCode> x LED pulses
		     */
		    POWER_LED = 0;
    2bf8:	2600      	movs	r6, #0
    2bfa:	6026      	str	r6, [r4, #0]
		    msDelay(800);		// pause
    2bfc:	f44f 7048 	mov.w	r0, #800	; 0x320
    2c00:	f7ff fe16 	bl	2830 <msDelay>

		    for (n = 0;  n < errorCode;  n++)
    2c04:	42ae      	cmp	r6, r5
    2c06:	da0b      	bge.n	2c20 <main+0x3b0>
		    {
			POWER_LED = 1;		// LED ON
    2c08:	2301      	movs	r3, #1
    2c0a:	6023      	str	r3, [r4, #0]
			msDelay(200);
    2c0c:	20c8      	movs	r0, #200	; 0xc8
    2c0e:	f7ff fe0f 	bl	2830 <msDelay>
			POWER_LED = 0;		// LED OFF
    2c12:	2300      	movs	r3, #0
    2c14:	6023      	str	r3, [r4, #0]
			msDelay(200);
    2c16:	20c8      	movs	r0, #200	; 0xc8
    2c18:	f7ff fe0a 	bl	2830 <msDelay>
		     * repeat: Pause - <errorCode> x LED pulses
		     */
		    POWER_LED = 0;
		    msDelay(800);		// pause

		    for (n = 0;  n < errorCode;  n++)
    2c1c:	3601      	adds	r6, #1
    2c1e:	e7f1      	b.n	2c04 <main+0x394>
    2c20:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
			msDelay(200);
		    }
		}

		/* Check for SD-Card (again) */
		(void)DiskCheck();
    2c24:	f000 fd48 	bl	36b8 <DiskCheck>

	    } while (! IsDiskRemoved());
    2c28:	f000 fb98 	bl	335c <IsDiskRemoved>
    2c2c:	2800      	cmp	r0, #0
    2c2e:	d0da      	beq.n	2be6 <main+0x376>
    2c30:	e002      	b.n	2c38 <main+0x3c8>

	} // end: found any firmware files
	else
	{
	    drvLEUART_puts("No update files on SD-Card\n");
    2c32:	482a      	ldr	r0, [pc, #168]	; (2cdc <main+0x46c>)
    2c34:	f000 fa0a 	bl	304c <drvLEUART_puts>
	}
    } // end: SF-Card present

    drvLEUART_puts("Starting Application...\n\n");
    2c38:	4829      	ldr	r0, [pc, #164]	; (2ce0 <main+0x470>)
    2c3a:	f000 fa07 	bl	304c <drvLEUART_puts>

    /* Switch LED off and wait until UART DMA transfer is done */
    POWER_LED = 0;
    2c3e:	2300      	movs	r3, #0
    2c40:	6023      	str	r3, [r4, #0]
    while (! IsDmaTransferDone())
    2c42:	f000 f977 	bl	2f34 <IsDmaTransferDone>
    2c46:	2800      	cmp	r0, #0
    2c48:	d0fb      	beq.n	2c42 <main+0x3d2>
	;

    /* Bring the LEUART and its DMA into a quiescent state */
    drvLEUART_Deinit();
    2c4a:	f000 f9db 	bl	3004 <drvLEUART_Deinit>
FCT_PTR	 pStartAppl;
uint32_t  initSP, initPC;


    /* Load initial SP, PC from application's Vector Table */
    initSP = *pInitialSP;
    2c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    2c52:	680a      	ldr	r2, [r1, #0]
    initPC = *pInitialPC;
    2c54:	f248 0304 	movw	r3, #32772	; 0x8004

    /* Verify if values are valid */
    if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
    2c58:	1c55      	adds	r5, r2, #1
uint32_t  initSP, initPC;


    /* Load initial SP, PC from application's Vector Table */
    initSP = *pInitialSP;
    initPC = *pInitialPC;
    2c5a:	681b      	ldr	r3, [r3, #0]

    /* Verify if values are valid */
    if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
    2c5c:	d013      	beq.n	2c86 <main+0x416>
    2c5e:	1c58      	adds	r0, r3, #1
    2c60:	d011      	beq.n	2c86 <main+0x416>
	return 1;

    if (initSP < SRAM_BASE         ||  initSP > SRAM_BASE  + SRAM_SIZE
    2c62:	f102 4060 	add.w	r0, r2, #3758096384	; 0xe0000000
    2c66:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    2c6a:	d80e      	bhi.n	2c8a <main+0x41a>
    ||  initPC < FIRMWARE_ADDRESS  ||  initPC > FLASH_BASE + FLASH_SIZE)
    2c6c:	f5a3 4000 	sub.w	r0, r3, #32768	; 0x8000
    2c70:	f5b0 3fc0 	cmp.w	r0, #98304	; 0x18000
    2c74:	d809      	bhi.n	2c8a <main+0x41a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2c76:	b672      	cpsid	i

    /* Disable interrupts */
    __disable_irq();

    /* Start Application */
    SCB->VTOR = FIRMWARE_ADDRESS;
    2c78:	481a      	ldr	r0, [pc, #104]	; (2ce4 <main+0x474>)
    2c7a:	6081      	str	r1, [r0, #8]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    2c7c:	f382 8808 	msr	MSP, r2
    __set_MSP(initSP);
    pStartAppl = (FCT_PTR)initPC;

    pStartAppl();
    2c80:	4798      	blx	r3

    return 9;		// shall never happen
    2c82:	2509      	movs	r5, #9
    2c84:	e002      	b.n	2c8c <main+0x41c>
    initSP = *pInitialSP;
    initPC = *pInitialPC;

    /* Verify if values are valid */
    if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
	return 1;
    2c86:	2501      	movs	r5, #1
    2c88:	e000      	b.n	2c8c <main+0x41c>

    if (initSP < SRAM_BASE         ||  initSP > SRAM_BASE  + SRAM_SIZE
    ||  initPC < FIRMWARE_ADDRESS  ||  initPC > FLASH_BASE + FLASH_SIZE)
	return 2;
    2c8a:	2502      	movs	r5, #2
     */
    errorCode = StartFirmware(); // never returns - except if there is no image!

    while (true)
    {
	msDelay(800);		// pause
    2c8c:	f44f 7048 	mov.w	r0, #800	; 0x320
    2c90:	f7ff fdce 	bl	2830 <msDelay>

	for (n = 0;  n < errorCode;  n++)
    2c94:	2600      	movs	r6, #0
	{
	    POWER_LED = 1;	// LED ON
    2c96:	2301      	movs	r3, #1
    2c98:	6023      	str	r3, [r4, #0]
	    msDelay(200);
    2c9a:	20c8      	movs	r0, #200	; 0xc8
    2c9c:	f7ff fdc8 	bl	2830 <msDelay>
	    POWER_LED = 0;	// LED OFF
    2ca0:	2300      	movs	r3, #0
    2ca2:	6023      	str	r3, [r4, #0]
	    msDelay(200);
    2ca4:	20c8      	movs	r0, #200	; 0xc8

    while (true)
    {
	msDelay(800);		// pause

	for (n = 0;  n < errorCode;  n++)
    2ca6:	3601      	adds	r6, #1
	{
	    POWER_LED = 1;	// LED ON
	    msDelay(200);
	    POWER_LED = 0;	// LED OFF
	    msDelay(200);
    2ca8:	f7ff fdc2 	bl	2830 <msDelay>

    while (true)
    {
	msDelay(800);		// pause

	for (n = 0;  n < errorCode;  n++)
    2cac:	42ae      	cmp	r6, r5
    2cae:	dbf2      	blt.n	2c96 <main+0x426>
	    msDelay(200);
	    POWER_LED = 0;	// LED OFF
	    msDelay(200);
	}

	msDelay(1000);		// pause
    2cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cb4:	f7ff fdbc 	bl	2830 <msDelay>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2cb8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2cbc:	4a09      	ldr	r2, [pc, #36]	; (2ce4 <main+0x474>)
    2cbe:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <main+0x478>)
    2cc0:	68d1      	ldr	r1, [r2, #12]
    2cc2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    2cc6:	430b      	orrs	r3, r1
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2cc8:	60d3      	str	r3, [r2, #12]
    2cca:	f3bf 8f4f 	dsb	sy
    2cce:	e7fe      	b.n	2cce <main+0x45e>
    2cd0:	00006487 	.word	0x00006487
    2cd4:	000064b2 	.word	0x000064b2
    2cd8:	000064dd 	.word	0x000064dd
    2cdc:	000064e8 	.word	0x000064e8
    2ce0:	00006504 	.word	0x00006504
    2ce4:	e000ed00 	.word	0xe000ed00
    2ce8:	05fa0004 	.word	0x05fa0004

00002cec <dbgInit>:
void setupSWOForPrint(void);
#endif

/*================RAGE-DEBUG===============*/
void dbgInit(void)
{
    2cec:	4770      	bx	lr
	...

00002cf0 <INT_Disable>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cf0:	b672      	cpsid	i
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Disable(void)
{
  __disable_irq();
  if (INT_LockCnt < UINT32_MAX)
    2cf2:	4b04      	ldr	r3, [pc, #16]	; (2d04 <INT_Disable+0x14>)
    2cf4:	681a      	ldr	r2, [r3, #0]
    2cf6:	1c51      	adds	r1, r2, #1
  {
    INT_LockCnt++;
    2cf8:	bf1c      	itt	ne
    2cfa:	3201      	addne	r2, #1
    2cfc:	601a      	strne	r2, [r3, #0]
  }

  return INT_LockCnt;
}
    2cfe:	6818      	ldr	r0, [r3, #0]
    2d00:	4770      	bx	lr
    2d02:	bf00      	nop
    2d04:	20000b20 	.word	0x20000b20

00002d08 <INT_Enable>:
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Enable(void)
{
  uint32_t retVal;

  if (INT_LockCnt > 0)
    2d08:	4b03      	ldr	r3, [pc, #12]	; (2d18 <INT_Enable+0x10>)
    2d0a:	6818      	ldr	r0, [r3, #0]
    2d0c:	b118      	cbz	r0, 2d16 <INT_Enable+0xe>
  {
    INT_LockCnt--;
    2d0e:	3801      	subs	r0, #1
    2d10:	6018      	str	r0, [r3, #0]
    retVal = INT_LockCnt;
    if (retVal == 0)
    2d12:	b900      	cbnz	r0, 2d16 <INT_Enable+0xe>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d14:	b662      	cpsie	i
  }
  else
  {
    return 0;
  }
}
    2d16:	4770      	bx	lr
    2d18:	20000b20 	.word	0x20000b20

00002d1c <FindPrjInfo>:
 * @return
 *	Address of the application's @ref PRJ_INFO, or NULL if not found.
 *
 ******************************************************************************/
PRJ_INFO *FindPrjInfo(void)
{
    2d1c:	b510      	push	{r4, lr}

    /*
     * IAR libraries do not provide function memmem() like GNU does, so we
     * have to implement our own version here.
     */
    for (pFlash = (char *)FIRMWARE_ADDRESS;
    2d1e:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	 pFlash < (char *)FIRMWARE_ADDRESS + FLASH_SIZE - 16;  pFlash++)
    {
	if (strcmp (pFlash, "$PRJ_INFO$") == 0)
    2d22:	4620      	mov	r0, r4
    2d24:	4905      	ldr	r1, [pc, #20]	; (2d3c <FindPrjInfo+0x20>)
    2d26:	f000 ff55 	bl	3bd4 <strcmp>
    2d2a:	b128      	cbz	r0, 2d38 <FindPrjInfo+0x1c>

    /*
     * IAR libraries do not provide function memmem() like GNU does, so we
     * have to implement our own version here.
     */
    for (pFlash = (char *)FIRMWARE_ADDRESS;
    2d2c:	4b04      	ldr	r3, [pc, #16]	; (2d40 <FindPrjInfo+0x24>)
	 pFlash < (char *)FIRMWARE_ADDRESS + FLASH_SIZE - 16;  pFlash++)
    2d2e:	3401      	adds	r4, #1

    /*
     * IAR libraries do not provide function memmem() like GNU does, so we
     * have to implement our own version here.
     */
    for (pFlash = (char *)FIRMWARE_ADDRESS;
    2d30:	429c      	cmp	r4, r3
    2d32:	d1f6      	bne.n	2d22 <FindPrjInfo+0x6>
    {
	if (strcmp (pFlash, "$PRJ_INFO$") == 0)
	    return (PRJ_INFO *)pFlash;
    }

    return NULL;
    2d34:	2000      	movs	r0, #0
}
    2d36:	bd10      	pop	{r4, pc}
    2d38:	4620      	mov	r0, r4
    2d3a:	bd10      	pop	{r4, pc}
    2d3c:	000065b8 	.word	0x000065b8
    2d40:	00027ff0 	.word	0x00027ff0

00002d44 <FirmwareUpdate>:
 * 	Error code: 0 if no error occurred, 4 in case of a file read error,
 * 	5 for a FLASH erase error, and 6 for a FLASH write error.
 *
 ******************************************************************************/
int	 FirmwareUpdate(char *filename)
{
    2d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
uint32_t	 fileSize;	// number of bytes to read
uint32_t	 offs;		// byte offset within file and FLASH
uint16_t	 bytesRead;	// number of bytes really read from the file

    /* Check filename */
    EFM_ASSERT(filename != NULL);
    2d48:	4605      	mov	r5, r0
    2d4a:	b918      	cbnz	r0, 2d54 <FirmwareUpdate+0x10>
    2d4c:	4836      	ldr	r0, [pc, #216]	; (2e28 <FirmwareUpdate+0xe4>)
    2d4e:	215d      	movs	r1, #93	; 0x5d
    2d50:	f7fd faae 	bl	2b0 <assertEFM>

    /* Open update file */
    res = f_open (&l_fh, filename,  FA_READ);
    2d54:	4c35      	ldr	r4, [pc, #212]	; (2e2c <FirmwareUpdate+0xe8>)
    2d56:	4629      	mov	r1, r5
    2d58:	4620      	mov	r0, r4
    2d5a:	2201      	movs	r2, #1
    2d5c:	f7ff f960 	bl	2020 <f_open>
    if (res != FR_OK)
    2d60:	4601      	mov	r1, r0
    2d62:	b130      	cbz	r0, 2d72 <FirmwareUpdate+0x2e>
    {
	LogError ("FirmwareUpdate: Open File - Error Code %d", res);
    2d64:	4832      	ldr	r0, [pc, #200]	; (2e30 <FirmwareUpdate+0xec>)
    2d66:	f000 fa51 	bl	320c <LogError>
	l_fh.fs = NULL;		// invalidate file handle
    2d6a:	2300      	movs	r3, #0
    2d6c:	6023      	str	r3, [r4, #0]
	return 4;
    2d6e:	2004      	movs	r0, #4
    2d70:	e056      	b.n	2e20 <FirmwareUpdate+0xdc>
    }

    /* Enable the flash controller for writing */
    MSC_Init();
    2d72:	f7fe f8b1 	bl	ed8 <MSC_Init>

    /*
     * Read update file - the FLASH sector size determines the portion that
     * is read from file, and erased and programmed in FLASH.
     */
    fileSize = f_size(&l_fh);
    2d76:	f8d4 900c 	ldr.w	r9, [r4, #12]

    for (offs = 0;  offs < fileSize;  offs += FLASH_PAGE_SIZE)
    2d7a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    2d7e:	f5a4 4300 	sub.w	r3, r4, #32768	; 0x8000
    2d82:	454b      	cmp	r3, r9
    2d84:	d245      	bcs.n	2e12 <FirmwareUpdate+0xce>
    {
	/* Read one sector from the update file */
	res = f_read (&l_fh, l_SectorBuf, FLASH_PAGE_SIZE, &bytesRead);
    2d86:	4d29      	ldr	r5, [pc, #164]	; (2e2c <FirmwareUpdate+0xe8>)
    2d88:	492a      	ldr	r1, [pc, #168]	; (2e34 <FirmwareUpdate+0xf0>)
    2d8a:	4628      	mov	r0, r5
    2d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d90:	f10d 0306 	add.w	r3, sp, #6
    2d94:	f7ff f9e0 	bl	2158 <f_read>
	if (res != FR_OK)
    2d98:	4607      	mov	r7, r0
    2d9a:	b138      	cbz	r0, 2dac <FirmwareUpdate+0x68>
	{
	    LogError ("FirmwareUpdate: Read File - Error Code %d", res);
    2d9c:	4826      	ldr	r0, [pc, #152]	; (2e38 <FirmwareUpdate+0xf4>)
    2d9e:	4639      	mov	r1, r7
    2da0:	f000 fa34 	bl	320c <LogError>
	    l_fh.fs = NULL;		// invalidate file handle
    2da4:	2300      	movs	r3, #0
    2da6:	602b      	str	r3, [r5, #0]
	    status = 4;
    2da8:	2404      	movs	r4, #4
	    break;
    2daa:	e033      	b.n	2e14 <FirmwareUpdate+0xd0>
	}

	/* Erase the respective sector in FLASH */
	INT_Disable();			// disable interrupts
    2dac:	f7ff ffa0 	bl	2cf0 <INT_Disable>
	ret = MSC_ErasePage ((uint32_t *)(FIRMWARE_ADDRESS + offs));
    2db0:	4620      	mov	r0, r4
    2db2:	f003 f9d5 	bl	6160 <__MSC_ErasePage_veneer>
    2db6:	4606      	mov	r6, r0
	INT_Enable();			// enable interrupts
    2db8:	f7ff ffa6 	bl	2d08 <INT_Enable>

	if (ret != mscReturnOk)
    2dbc:	b13e      	cbz	r6, 2dce <FirmwareUpdate+0x8a>
	{
	    LogError ("FirmwareUpdate: Erase Sector @ 0x%X - Error Code %d",
    2dbe:	4621      	mov	r1, r4
    2dc0:	481e      	ldr	r0, [pc, #120]	; (2e3c <FirmwareUpdate+0xf8>)
    2dc2:	b272      	sxtb	r2, r6
    2dc4:	f000 fa22 	bl	320c <LogError>
		      FIRMWARE_ADDRESS + offs, ret);
	    l_fh.fs = NULL;		// invalidate file handle
	    status = 5;
    2dc8:	2405      	movs	r4, #5

	if (ret != mscReturnOk)
	{
	    LogError ("FirmwareUpdate: Erase Sector @ 0x%X - Error Code %d",
		      FIRMWARE_ADDRESS + offs, ret);
	    l_fh.fs = NULL;		// invalidate file handle
    2dca:	602f      	str	r7, [r5, #0]
	    status = 5;
	    break;
    2dcc:	e022      	b.n	2e14 <FirmwareUpdate+0xd0>
	}

	POWER_LED = 1;			// LED ON
    2dce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2e44 <FirmwareUpdate+0x100>
    2dd2:	2301      	movs	r3, #1
    2dd4:	f8c8 3000 	str.w	r3, [r8]

	/* Write data to FLASH */
	INT_Disable();			// disable interrupts
    2dd8:	f7ff ff8a 	bl	2cf0 <INT_Disable>
	ret = MSC_WriteWord ((uint32_t *)(FIRMWARE_ADDRESS + offs),
			     l_SectorBuf, (bytesRead + 3) & ~3);
    2ddc:	f8bd 2006 	ldrh.w	r2, [sp, #6]

	POWER_LED = 1;			// LED ON

	/* Write data to FLASH */
	INT_Disable();			// disable interrupts
	ret = MSC_WriteWord ((uint32_t *)(FIRMWARE_ADDRESS + offs),
    2de0:	4914      	ldr	r1, [pc, #80]	; (2e34 <FirmwareUpdate+0xf0>)
			     l_SectorBuf, (bytesRead + 3) & ~3);
    2de2:	3203      	adds	r2, #3

	POWER_LED = 1;			// LED ON

	/* Write data to FLASH */
	INT_Disable();			// disable interrupts
	ret = MSC_WriteWord ((uint32_t *)(FIRMWARE_ADDRESS + offs),
    2de4:	f022 0203 	bic.w	r2, r2, #3
    2de8:	4620      	mov	r0, r4
    2dea:	f003 f9b1 	bl	6150 <__MSC_WriteWord_veneer>
    2dee:	4607      	mov	r7, r0
			     l_SectorBuf, (bytesRead + 3) & ~3);
	INT_Enable();			// enable interrupts
    2df0:	f7ff ff8a 	bl	2d08 <INT_Enable>
    2df4:	f504 7300 	add.w	r3, r4, #512	; 0x200

	if (ret != mscReturnOk)
    2df8:	b13f      	cbz	r7, 2e0a <FirmwareUpdate+0xc6>
	{
	    LogError ("FirmwareUpdate: Write Sector @ 0x%X - Error Code %d",
    2dfa:	4621      	mov	r1, r4
    2dfc:	4810      	ldr	r0, [pc, #64]	; (2e40 <FirmwareUpdate+0xfc>)
    2dfe:	b27a      	sxtb	r2, r7
    2e00:	f000 fa04 	bl	320c <LogError>
		      FIRMWARE_ADDRESS + offs, ret);
	    l_fh.fs = NULL;		// invalidate file handle
	    status = 6;
    2e04:	2406      	movs	r4, #6

	if (ret != mscReturnOk)
	{
	    LogError ("FirmwareUpdate: Write Sector @ 0x%X - Error Code %d",
		      FIRMWARE_ADDRESS + offs, ret);
	    l_fh.fs = NULL;		// invalidate file handle
    2e06:	602e      	str	r6, [r5, #0]
	    status = 6;
	    break;
    2e08:	e004      	b.n	2e14 <FirmwareUpdate+0xd0>
	}

	POWER_LED = 0;			// LED OFF
    2e0a:	f8c8 7000 	str.w	r7, [r8]
    2e0e:	461c      	mov	r4, r3
    2e10:	e7b5      	b.n	2d7e <FirmwareUpdate+0x3a>
 ******************************************************************************/
int	 FirmwareUpdate(char *filename)
{
FRESULT		 res;		// FatFs function common result code
msc_Return_TypeDef ret;		// FLASH library return code
int		 status = 0;	// return status is OK for default
    2e12:	2400      	movs	r4, #0
	POWER_LED = 0;			// LED OFF
    }


    /* Disable flash write access again */
    MSC_Deinit();
    2e14:	f7fe f86c 	bl	ef0 <MSC_Deinit>

    /* Close file */
    f_close (&l_fh);
    2e18:	4804      	ldr	r0, [pc, #16]	; (2e2c <FirmwareUpdate+0xe8>)
    2e1a:	f7ff fb80 	bl	251e <f_close>

    return status;	// return error code (0 = OK)
    2e1e:	4620      	mov	r0, r4
}
    2e20:	b003      	add	sp, #12
    2e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e26:	bf00      	nop
    2e28:	000065c3 	.word	0x000065c3
    2e2c:	20000b30 	.word	0x20000b30
    2e30:	000065d6 	.word	0x000065d6
    2e34:	20000d54 	.word	0x20000d54
    2e38:	00006600 	.word	0x00006600
    2e3c:	0000662a 	.word	0x0000662a
    2e40:	0000665e 	.word	0x0000665e
    2e44:	420c0188 	.word	0x420c0188

00002e48 <INT_Enable>:
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Enable(void)
{
  uint32_t retVal;

  if (INT_LockCnt > 0)
    2e48:	4b03      	ldr	r3, [pc, #12]	; (2e58 <INT_Enable+0x10>)
    2e4a:	6818      	ldr	r0, [r3, #0]
    2e4c:	b118      	cbz	r0, 2e56 <INT_Enable+0xe>
  {
    INT_LockCnt--;
    2e4e:	3801      	subs	r0, #1
    2e50:	6018      	str	r0, [r3, #0]
    retVal = INT_LockCnt;
    if (retVal == 0)
    2e52:	b900      	cbnz	r0, 2e56 <INT_Enable+0xe>
    2e54:	b662      	cpsie	i
  }
  else
  {
    return 0;
  }
}
    2e56:	4770      	bx	lr
    2e58:	20000b20 	.word	0x20000b20

00002e5c <dmaTransferStart>:
 * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 *
 ******************************************************************************/
void dmaTransferStart (void)
{
    2e5c:	b513      	push	{r0, r1, r4, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e5e:	b672      	cpsid	i
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Disable(void)
{
  __disable_irq();
  if (INT_LockCnt < UINT32_MAX)
    2e60:	4b22      	ldr	r3, [pc, #136]	; (2eec <dmaTransferStart+0x90>)
    2e62:	681a      	ldr	r2, [r3, #0]
    2e64:	1c54      	adds	r4, r2, #1
int16_t		cnt;		// number of bytes to send


    INT_Disable();

    if (flgDMArun)
    2e66:	4c22      	ldr	r4, [pc, #136]	; (2ef0 <dmaTransferStart+0x94>)
  {
    INT_LockCnt++;
    2e68:	bf1c      	itt	ne
    2e6a:	3201      	addne	r2, #1
    2e6c:	601a      	strne	r2, [r3, #0]
    2e6e:	7823      	ldrb	r3, [r4, #0]
    2e70:	b123      	cbz	r3, 2e7c <dmaTransferStart+0x20>
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
}
    2e72:	b002      	add	sp, #8
    2e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    INT_Disable();

    if (flgDMArun)
    {
	INT_Enable();
    2e78:	f7ff bfe6 	b.w	2e48 <INT_Enable>
	return;			// do not disturb a running DMA transfer
    }

    flgDMArun = true;		// set flag for DMA activity
    2e7c:	2301      	movs	r3, #1
    2e7e:	7023      	strb	r3, [r4, #0]
    INT_Enable();
    2e80:	f7ff ffe2 	bl	2e48 <INT_Enable>

    /* Use local index that will not change */
    idxPut = txIdxPut;
    2e84:	4b1b      	ldr	r3, [pc, #108]	; (2ef4 <dmaTransferStart+0x98>)

    /* Calculate how many bytes to transfer */
    cnt = idxPut - txIdxGet;
    2e86:	4a1c      	ldr	r2, [pc, #112]	; (2ef8 <dmaTransferStart+0x9c>)

    flgDMArun = true;		// set flag for DMA activity
    INT_Enable();

    /* Use local index that will not change */
    idxPut = txIdxPut;
    2e88:	8819      	ldrh	r1, [r3, #0]

    /* Calculate how many bytes to transfer */
    cnt = idxPut - txIdxGet;
    2e8a:	8813      	ldrh	r3, [r2, #0]

    flgDMArun = true;		// set flag for DMA activity
    INT_Enable();

    /* Use local index that will not change */
    idxPut = txIdxPut;
    2e8c:	b289      	uxth	r1, r1

    /* Calculate how many bytes to transfer */
    cnt = idxPut - txIdxGet;
    2e8e:	1acb      	subs	r3, r1, r3
    2e90:	b29b      	uxth	r3, r3

    if (cnt == 0)
    2e92:	b90b      	cbnz	r3, 2e98 <dmaTransferStart+0x3c>
    {
	flgDMArun = false;	// clear flag again
    2e94:	7023      	strb	r3, [r4, #0]
    2e96:	e026      	b.n	2ee6 <dmaTransferStart+0x8a>
	return;
    }

    if (cnt < 0)
    2e98:	0418      	lsls	r0, r3, #16
    2e9a:	d505      	bpl.n	2ea8 <dmaTransferStart+0x4c>
    {
	/* Limit DMA transfer to end of FIFO buffer */
	idxPut = sizeof(txFIFO);
	cnt = idxPut - txIdxGet;
    2e9c:	8813      	ldrh	r3, [r2, #0]
    }

    if (cnt < 0)
    {
	/* Limit DMA transfer to end of FIFO buffer */
	idxPut = sizeof(txFIFO);
    2e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	cnt = idxPut - txIdxGet;
    2ea2:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
    2ea6:	b29b      	uxth	r3, r3
    }

    /* Calculate next value of the Get Index */
    txIdxGetNext = txIdxGet + cnt;
    2ea8:	8810      	ldrh	r0, [r2, #0]
    2eaa:	4a14      	ldr	r2, [pc, #80]	; (2efc <dmaTransferStart+0xa0>)
    2eac:	4418      	add	r0, r3
    2eae:	b280      	uxth	r0, r0
    2eb0:	8010      	strh	r0, [r2, #0]
    if (txIdxGetNext >= sizeof(txFIFO))
    2eb2:	8810      	ldrh	r0, [r2, #0]
    2eb4:	b280      	uxth	r0, r0
    2eb6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2eba:	d304      	bcc.n	2ec6 <dmaTransferStart+0x6a>
	txIdxGetNext -= sizeof(txFIFO);
    2ebc:	8810      	ldrh	r0, [r2, #0]
    2ebe:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
    2ec2:	b280      	uxth	r0, r0
    2ec4:	8010      	strh	r0, [r2, #0]

    /* Set new DMA source end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
    2ec6:	4a0e      	ldr	r2, [pc, #56]	; (2f00 <dmaTransferStart+0xa4>)

    /* Enable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
    2ec8:	2001      	movs	r0, #1
    txIdxGetNext = txIdxGet + cnt;
    if (txIdxGetNext >= sizeof(txFIFO))
	txIdxGetNext -= sizeof(txFIFO);

    /* Set new DMA source end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
    2eca:	4411      	add	r1, r2
    2ecc:	4a0d      	ldr	r2, [pc, #52]	; (2f04 <dmaTransferStart+0xa8>)
    DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
    2ece:	b21b      	sxth	r3, r3
    txIdxGetNext = txIdxGet + cnt;
    if (txIdxGetNext >= sizeof(txFIFO))
	txIdxGetNext -= sizeof(txFIFO);

    /* Set new DMA source end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
    2ed0:	6111      	str	r1, [r2, #16]

    /* Enable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
    2ed2:	4a0d      	ldr	r2, [pc, #52]	; (2f08 <dmaTransferStart+0xac>)
    DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
    2ed4:	3b01      	subs	r3, #1

    /* Set new DMA source end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];

    /* Enable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
    2ed6:	6010      	str	r0, [r2, #0]

    /* (Re)starting the transfer. Using Basic Mode */
    DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
    2ed8:	2200      	movs	r2, #0
    2eda:	9301      	str	r3, [sp, #4]
    2edc:	9200      	str	r2, [sp, #0]
    2ede:	4601      	mov	r1, r0
    2ee0:	4613      	mov	r3, r2
    2ee2:	f7fd fd39 	bl	958 <DMA_ActivateBasic>
		      true,		// Use primary descriptor
		      false,		// No DMA burst
		      NULL,		// Keep destination address
		      NULL,		// Keep source address
		      cnt - 1);		// Size of buffer - 1
}
    2ee6:	b002      	add	sp, #8
    2ee8:	bd10      	pop	{r4, pc}
    2eea:	bf00      	nop
    2eec:	20000b20 	.word	0x20000b20
    2ef0:	20000f54 	.word	0x20000f54
    2ef4:	20001358 	.word	0x20001358
    2ef8:	2000135a 	.word	0x2000135a
    2efc:	20001356 	.word	0x20001356
    2f00:	20000f54 	.word	0x20000f54
    2f04:	20002900 	.word	0x20002900
    2f08:	43080034 	.word	0x43080034

00002f0c <dmaTransferDone>:
    (void) channel;
    (void) primary;
    (void) user;

    /* Disable DMA wake-up from LEUART TX */
    IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 0;
    2f0c:	4a05      	ldr	r2, [pc, #20]	; (2f24 <dmaTransferDone+0x18>)
    2f0e:	2300      	movs	r3, #0
    2f10:	6013      	str	r3, [r2, #0]

    /* Update Get Index */
    txIdxGet = txIdxGetNext;
    2f12:	4a05      	ldr	r2, [pc, #20]	; (2f28 <dmaTransferDone+0x1c>)
    2f14:	8811      	ldrh	r1, [r2, #0]
    2f16:	4a05      	ldr	r2, [pc, #20]	; (2f2c <dmaTransferDone+0x20>)
    2f18:	b289      	uxth	r1, r1
    2f1a:	8011      	strh	r1, [r2, #0]

    /* Clear DMA running flag */
    flgDMArun = false;
    2f1c:	4a04      	ldr	r2, [pc, #16]	; (2f30 <dmaTransferDone+0x24>)
    2f1e:	7013      	strb	r3, [r2, #0]

    /* Check if still data to send */
    dmaTransferStart();
    2f20:	f7ff bf9c 	b.w	2e5c <dmaTransferStart>
    2f24:	43080034 	.word	0x43080034
    2f28:	20001356 	.word	0x20001356
    2f2c:	2000135a 	.word	0x2000135a
    2f30:	20000f54 	.word	0x20000f54

00002f34 <IsDmaTransferDone>:
 * A value of <b>true</b> if DMA transfer is done, <b>false</b> otherwise.
 *
 ******************************************************************************/
bool IsDmaTransferDone(void)
{
    return (flgDMArun == false);
    2f34:	4b02      	ldr	r3, [pc, #8]	; (2f40 <IsDmaTransferDone+0xc>)
    2f36:	7818      	ldrb	r0, [r3, #0]
}
    2f38:	f080 0001 	eor.w	r0, r0, #1
    2f3c:	4770      	bx	lr
    2f3e:	bf00      	nop
    2f40:	20000f54 	.word	0x20000f54

00002f44 <drvLEUART_Init>:
 * @param[in] baud
 *	Baudrate to use (maximum 9600bd).
 *
 *****************************************************************************/
void	drvLEUART_Init (uint32_t baud)
{
    2f44:	b538      	push	{r3, r4, r5, lr}
    /* Enabling clocks, all other remain disabled */
    CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
    2f46:	2101      	movs	r1, #1
 * @param[in] baud
 *	Baudrate to use (maximum 9600bd).
 *
 *****************************************************************************/
void	drvLEUART_Init (uint32_t baud)
{
    2f48:	4605      	mov	r5, r0
    /* Enabling clocks, all other remain disabled */
    CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
    2f4a:	481e      	ldr	r0, [pc, #120]	; (2fc4 <drvLEUART_Init+0x80>)
    2f4c:	f7fd faea 	bl	524 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
    CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock

    /* Reseting and initializing LEUART */
    LEUART_Reset(LEUART);
    2f50:	4c1d      	ldr	r4, [pc, #116]	; (2fc8 <drvLEUART_Init+0x84>)
 *****************************************************************************/
void	drvLEUART_Init (uint32_t baud)
{
    /* Enabling clocks, all other remain disabled */
    CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
    CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
    2f52:	481e      	ldr	r0, [pc, #120]	; (2fcc <drvLEUART_Init+0x88>)
    2f54:	2101      	movs	r1, #1
    2f56:	f7fd fae5 	bl	524 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock
    2f5a:	2101      	movs	r1, #1
    2f5c:	481c      	ldr	r0, [pc, #112]	; (2fd0 <drvLEUART_Init+0x8c>)
    2f5e:	f7fd fae1 	bl	524 <CMU_ClockEnable>

    /* Reseting and initializing LEUART */
    LEUART_Reset(LEUART);
    2f62:	4620      	mov	r0, r4
    2f64:	f7fd feb4 	bl	cd0 <LEUART_Reset>
    leuartInit.baudrate = baud;
    2f68:	491a      	ldr	r1, [pc, #104]	; (2fd4 <drvLEUART_Init+0x90>)
    LEUART_Init(LEUART, &leuartInit);
    2f6a:	4620      	mov	r0, r4
    CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
    CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock

    /* Reseting and initializing LEUART */
    LEUART_Reset(LEUART);
    leuartInit.baudrate = baud;
    2f6c:	608d      	str	r5, [r1, #8]
    LEUART_Init(LEUART, &leuartInit);
    2f6e:	f7fd fe7d 	bl	c6c <LEUART_Init>

    /* Route LEUART Tx (and Rx) Pin to location 0 (PD4/PD5) */
    LEUART->ROUTE = LEUART_ROUTE_TXPEN
    2f72:	2502      	movs	r5, #2
		  | LEUART_ROUTE_RXPEN
#endif
		  | LEUART_ROUTE_LOCATION_LOC0;

    /* Enable GPIO for LEUART. Tx is on D4, Rx on D5 */
    GPIO_PinModeSet(LEUART_PORT,		// GPIO port
    2f74:	2104      	movs	r1, #4
    2f76:	460a      	mov	r2, r1
    LEUART_Reset(LEUART);
    leuartInit.baudrate = baud;
    LEUART_Init(LEUART, &leuartInit);

    /* Route LEUART Tx (and Rx) Pin to location 0 (PD4/PD5) */
    LEUART->ROUTE = LEUART_ROUTE_TXPEN
    2f78:	6565      	str	r5, [r4, #84]	; 0x54
		  | LEUART_ROUTE_RXPEN
#endif
		  | LEUART_ROUTE_LOCATION_LOC0;

    /* Enable GPIO for LEUART. Tx is on D4, Rx on D5 */
    GPIO_PinModeSet(LEUART_PORT,		// GPIO port
    2f7a:	2003      	movs	r0, #3
    2f7c:	2301      	movs	r3, #1
    2f7e:	f7fd fddd 	bl	b3c <GPIO_PinModeSet>
 *
 *****************************************************************************/
static void setupLeuartDma(void)
{
    /* Setting call-back function */
    g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
    2f82:	4b15      	ldr	r3, [pc, #84]	; (2fd8 <drvLEUART_Init+0x94>)
    2f84:	4a15      	ldr	r2, [pc, #84]	; (2fdc <drvLEUART_Init+0x98>)
    g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
    2f86:	2400      	movs	r4, #0
 *
 *****************************************************************************/
static void setupLeuartDma(void)
{
    /* Setting call-back function */
    g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
    2f88:	60da      	str	r2, [r3, #12]
    g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
    2f8a:	611c      	str	r4, [r3, #16]

    /* Initializing DMA, channel and descriptor for Tx */
    DMA_Init(&dmaInit);
    2f8c:	4814      	ldr	r0, [pc, #80]	; (2fe0 <drvLEUART_Init+0x9c>)
    2f8e:	f7fd fd9b 	bl	ac8 <DMA_Init>
    DMA_CfgChannel(DMA_CHAN_LEUART_TX, &chnlCfgTx);
    2f92:	2001      	movs	r0, #1
    2f94:	4913      	ldr	r1, [pc, #76]	; (2fe4 <drvLEUART_Init+0xa0>)
    2f96:	f7fd fd0d 	bl	9b4 <DMA_CfgChannel>
    DMA_CfgDescr(DMA_CHAN_LEUART_TX, true, &descrCfgTx);
    2f9a:	2001      	movs	r0, #1
    2f9c:	4a12      	ldr	r2, [pc, #72]	; (2fe8 <drvLEUART_Init+0xa4>)
    2f9e:	4601      	mov	r1, r0
    2fa0:	f7fd fd3e 	bl	a20 <DMA_CfgDescr>

    /* Set new DMA destination end address directly in the DMA descriptor */
    g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].DSTEND = &LEUART->TXDATA;
    2fa4:	4a11      	ldr	r2, [pc, #68]	; (2fec <drvLEUART_Init+0xa8>)
    2fa6:	4b12      	ldr	r3, [pc, #72]	; (2ff0 <drvLEUART_Init+0xac>)
    2fa8:	615a      	str	r2, [r3, #20]

    /* Enable DMA Transfer Complete Interrupt */
    DMA->IEN = (DMA_IEN_CH0DONE << DMA_CHAN_LEUART_TX);
    2faa:	4a12      	ldr	r2, [pc, #72]	; (2ff4 <drvLEUART_Init+0xb0>)
    2fac:	f241 030c 	movw	r3, #4108	; 0x100c
    2fb0:	50d5      	str	r5, [r2, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    2fb2:	4b11      	ldr	r3, [pc, #68]	; (2ff8 <drvLEUART_Init+0xb4>)
    2fb4:	2201      	movs	r2, #1
    2fb6:	601a      	str	r2, [r3, #0]

    /* Setup LEUART with DMA */
    setupLeuartDma();

    /* Set index variables to the beginning of the FIFO */
    txIdxPut = txIdxGet = 0;
    2fb8:	4b10      	ldr	r3, [pc, #64]	; (2ffc <drvLEUART_Init+0xb8>)
    2fba:	801c      	strh	r4, [r3, #0]
    2fbc:	4b10      	ldr	r3, [pc, #64]	; (3000 <drvLEUART_Init+0xbc>)
    2fbe:	801c      	strh	r4, [r3, #0]
    2fc0:	bd38      	pop	{r3, r4, r5, pc}
    2fc2:	bf00      	nop
    2fc4:	00041300 	.word	0x00041300
    2fc8:	40084000 	.word	0x40084000
    2fcc:	0002c200 	.word	0x0002c200
    2fd0:	00140540 	.word	0x00140540
    2fd4:	20000014 	.word	0x20000014
    2fd8:	20002a04 	.word	0x20002a04
    2fdc:	00002f0d 	.word	0x00002f0d
    2fe0:	2000000c 	.word	0x2000000c
    2fe4:	20000024 	.word	0x20000024
    2fe8:	20000030 	.word	0x20000030
    2fec:	40084028 	.word	0x40084028
    2ff0:	20002900 	.word	0x20002900
    2ff4:	400c2000 	.word	0x400c2000
    2ff8:	e000e100 	.word	0xe000e100
    2ffc:	2000135a 	.word	0x2000135a
    3000:	20001358 	.word	0x20001358

00003004 <drvLEUART_Deinit>:
 *
 *****************************************************************************/
void	drvLEUART_Deinit (void)
{
    /* Disable DMA Transfer Complete Interrupt */
    DMA->IEN = 0;
    3004:	4a0c      	ldr	r2, [pc, #48]	; (3038 <drvLEUART_Deinit+0x34>)
 *
 * This routine brings the LEUART and its DMA into a quiescent state.
 *
 *****************************************************************************/
void	drvLEUART_Deinit (void)
{
    3006:	b510      	push	{r4, lr}
    /* Disable DMA Transfer Complete Interrupt */
    DMA->IEN = 0;
    3008:	f241 030c 	movw	r3, #4108	; 0x100c
    300c:	2400      	movs	r4, #0
    300e:	50d4      	str	r4, [r2, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <drvLEUART_Deinit+0x38>)
    3012:	2201      	movs	r2, #1
    3014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Disable DMA interrupt vector */
    NVIC_DisableIRQ(DMA_IRQn);

    /* Reset DMA controller */
    DMA_Reset();
    3018:	f7fd fd30 	bl	a7c <DMA_Reset>

    /* Reset LEUART */
    LEUART_Reset(LEUART);
    301c:	4808      	ldr	r0, [pc, #32]	; (3040 <drvLEUART_Deinit+0x3c>)
    301e:	f7fd fe57 	bl	cd0 <LEUART_Reset>

    /* Disable clocks */
    CMU_ClockEnable(cmuClock_DMA, false);
    3022:	4621      	mov	r1, r4
    3024:	4807      	ldr	r0, [pc, #28]	; (3044 <drvLEUART_Deinit+0x40>)
    3026:	f7fd fa7d 	bl	524 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_LEUART, false);
    302a:	4621      	mov	r1, r4
    302c:	4806      	ldr	r0, [pc, #24]	; (3048 <drvLEUART_Deinit+0x44>)
}
    302e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    /* Reset LEUART */
    LEUART_Reset(LEUART);

    /* Disable clocks */
    CMU_ClockEnable(cmuClock_DMA, false);
    CMU_ClockEnable(cmuClock_LEUART, false);
    3032:	f7fd ba77 	b.w	524 <CMU_ClockEnable>
    3036:	bf00      	nop
    3038:	400c2000 	.word	0x400c2000
    303c:	e000e100 	.word	0xe000e100
    3040:	40084000 	.word	0x40084000
    3044:	00041300 	.word	0x00041300
    3048:	00140540 	.word	0x00140540

0000304c <drvLEUART_puts>:
 * @param[in] pStr
 *	Adress pointer of the string to write into the FIFO.
 *
 ******************************************************************************/
void	 drvLEUART_puts (const char *pStr)
{
    304c:	b530      	push	{r4, r5, lr}
int16_t	cnt;			// free buffer space in number of bytes
bool	sendCR = false;		// set true to write <CR> to buffer
    304e:	2100      	movs	r1, #0


    while (*pStr != EOS)
    3050:	7802      	ldrb	r2, [r0, #0]
    3052:	2a00      	cmp	r2, #0
    3054:	d02e      	beq.n	30b4 <drvLEUART_puts+0x68>
    {
	/* Non-blocking: discard string if FIFO is full */
	cnt  = txIdxPut;
    3056:	4b19      	ldr	r3, [pc, #100]	; (30bc <drvLEUART_puts+0x70>)
	cnt -= txIdxGet;
    3058:	4c19      	ldr	r4, [pc, #100]	; (30c0 <drvLEUART_puts+0x74>)


    while (*pStr != EOS)
    {
	/* Non-blocking: discard string if FIFO is full */
	cnt  = txIdxPut;
    305a:	881d      	ldrh	r5, [r3, #0]
	cnt -= txIdxGet;
    305c:	8824      	ldrh	r4, [r4, #0]
    305e:	1b2d      	subs	r5, r5, r4
    3060:	b2ad      	uxth	r5, r5
    3062:	b2ac      	uxth	r4, r5
	if (cnt < 0)
    3064:	f414 4f00 	tst.w	r4, #32768	; 0x8000
	    cnt += sizeof(txFIFO);
    3068:	bf1c      	itt	ne
    306a:	f505 6480 	addne.w	r4, r5, #1024	; 0x400
    306e:	b2a4      	uxthne	r4, r4

	if (cnt > (int16_t)(sizeof(txFIFO) - 2))
    3070:	b224      	sxth	r4, r4
    3072:	f240 35fe 	movw	r5, #1022	; 0x3fe
    3076:	42ac      	cmp	r4, r5
    3078:	dc1c      	bgt.n	30b4 <drvLEUART_puts+0x68>
	    break;

	/* Check if to translate <LF> to <CR><LF> */
	if (g_flgLEUART_LF2CRLF  &&  (*pStr == '\n')  &&  ! sendCR)
    307a:	4c12      	ldr	r4, [pc, #72]	; (30c4 <drvLEUART_puts+0x78>)
    307c:	7825      	ldrb	r5, [r4, #0]
    307e:	4c12      	ldr	r4, [pc, #72]	; (30c8 <drvLEUART_puts+0x7c>)
    3080:	b145      	cbz	r5, 3094 <drvLEUART_puts+0x48>
    3082:	2a0a      	cmp	r2, #10
    3084:	d106      	bne.n	3094 <drvLEUART_puts+0x48>
    3086:	b929      	cbnz	r1, 3094 <drvLEUART_puts+0x48>
	{
	    /* Write <CR> to FIFO */
	    txFIFO[txIdxPut] = '\r';
    3088:	881a      	ldrh	r2, [r3, #0]
    308a:	210d      	movs	r1, #13
    308c:	b292      	uxth	r2, r2
    308e:	54a1      	strb	r1, [r4, r2]
	    sendCR = true;	// special character <CR>, set flag
    3090:	2101      	movs	r1, #1
    3092:	e004      	b.n	309e <drvLEUART_puts+0x52>
	}
	else
	{
	    /* Write Byte to FIFO */
	    txFIFO[txIdxPut] = *pStr++;
    3094:	8819      	ldrh	r1, [r3, #0]
    3096:	3001      	adds	r0, #1
    3098:	b289      	uxth	r1, r1
    309a:	5462      	strb	r2, [r4, r1]
	    sendCR = false;	// regular character, be sure to clear flag
    309c:	2100      	movs	r1, #0
	}

	/* Increment FIFO index */
	if (++txIdxPut >= sizeof(txFIFO))
    309e:	881a      	ldrh	r2, [r3, #0]
    30a0:	3201      	adds	r2, #1
    30a2:	b292      	uxth	r2, r2
    30a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    30a8:	801a      	strh	r2, [r3, #0]
    30aa:	d3d1      	bcc.n	3050 <drvLEUART_puts+0x4>
	    txIdxPut = 0;	// wrap around
    30ac:	4b03      	ldr	r3, [pc, #12]	; (30bc <drvLEUART_puts+0x70>)
    30ae:	2200      	movs	r2, #0
    30b0:	801a      	strh	r2, [r3, #0]
    30b2:	e7cd      	b.n	3050 <drvLEUART_puts+0x4>
    }

    /* Be sure to enable DMA for data transfer */
    dmaTransferStart();
}
    30b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if (++txIdxPut >= sizeof(txFIFO))
	    txIdxPut = 0;	// wrap around
    }

    /* Be sure to enable DMA for data transfer */
    dmaTransferStart();
    30b8:	f7ff bed0 	b.w	2e5c <dmaTransferStart>
    30bc:	20001358 	.word	0x20001358
    30c0:	2000135a 	.word	0x2000135a
    30c4:	20000035 	.word	0x20000035
    30c8:	20000f55 	.word	0x20000f55

000030cc <INT_Disable>:
    30cc:	b672      	cpsid	i
 *
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Disable(void)
{
  __disable_irq();
  if (INT_LockCnt < UINT32_MAX)
    30ce:	4b04      	ldr	r3, [pc, #16]	; (30e0 <INT_Disable+0x14>)
    30d0:	681a      	ldr	r2, [r3, #0]
    30d2:	1c51      	adds	r1, r2, #1
  {
    INT_LockCnt++;
    30d4:	bf1c      	itt	ne
    30d6:	3201      	addne	r2, #1
    30d8:	601a      	strne	r2, [r3, #0]
  }

  return INT_LockCnt;
}
    30da:	6818      	ldr	r0, [r3, #0]
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	20000b20 	.word	0x20000b20

000030e4 <INT_Enable>:
 ******************************************************************************/
__STATIC_INLINE uint32_t INT_Enable(void)
{
  uint32_t retVal;

  if (INT_LockCnt > 0)
    30e4:	4b03      	ldr	r3, [pc, #12]	; (30f4 <INT_Enable+0x10>)
    30e6:	6818      	ldr	r0, [r3, #0]
    30e8:	b118      	cbz	r0, 30f2 <INT_Enable+0xe>
  {
    INT_LockCnt--;
    30ea:	3801      	subs	r0, #1
    30ec:	6018      	str	r0, [r3, #0]
    retVal = INT_LockCnt;
    if (retVal == 0)
    30ee:	b900      	cbnz	r0, 30f2 <INT_Enable+0xe>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    30f0:	b662      	cpsie	i
  }
  else
  {
    return 0;
  }
}
    30f2:	4770      	bx	lr
    30f4:	20000b20 	.word	0x20000b20

000030f8 <logMsg>:
 * The format of a log message is:
 * \<prefix\> \<message\>
 *
 ******************************************************************************/
static void	logMsg(const char *prefix, const char *frmt, va_list args)
{
    30f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
char	*pBuf;				// pointer to the buffer to use
int	 cnt, num;			// message length, available space


    /* Check if there is enough space in the log buffer */
    num = LOG_BUF_SIZE - idxLogPut;	// distance to end of buffer
    30fc:	4d2d      	ldr	r5, [pc, #180]	; (31b4 <logMsg+0xbc>)
 * The format of a log message is:
 * \<prefix\> \<message\>
 *
 ******************************************************************************/
static void	logMsg(const char *prefix, const char *frmt, va_list args)
{
    30fe:	4690      	mov	r8, r2
char	*pBuf;				// pointer to the buffer to use
int	 cnt, num;			// message length, available space


    /* Check if there is enough space in the log buffer */
    num = LOG_BUF_SIZE - idxLogPut;	// distance to end of buffer
    3100:	682a      	ldr	r2, [r5, #0]
 * The format of a log message is:
 * \<prefix\> \<message\>
 *
 ******************************************************************************/
static void	logMsg(const char *prefix, const char *frmt, va_list args)
{
    3102:	4689      	mov	r9, r1
char	*pBuf;				// pointer to the buffer to use
int	 cnt, num;			// message length, available space


    /* Check if there is enough space in the log buffer */
    num = LOG_BUF_SIZE - idxLogPut;	// distance to end of buffer
    3104:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    if (num > LOG_ENTRY_MAX_SIZE)
	num = 0;			// enough space, no additional memory

    cnt = idxLogPut + num - idxLogGet;	// calculate allocated space
    3108:	492b      	ldr	r1, [pc, #172]	; (31b8 <logMsg+0xc0>)


    /* Check if there is enough space in the log buffer */
    num = LOG_BUF_SIZE - idxLogPut;	// distance to end of buffer
    if (num > LOG_ENTRY_MAX_SIZE)
	num = 0;			// enough space, no additional memory
    310a:	2b65      	cmp	r3, #101	; 0x65
    310c:	bfa8      	it	ge
    310e:	2300      	movge	r3, #0

    cnt = idxLogPut + num - idxLogGet;	// calculate allocated space
    3110:	6809      	ldr	r1, [r1, #0]
 * The format of a log message is:
 * \<prefix\> \<message\>
 *
 ******************************************************************************/
static void	logMsg(const char *prefix, const char *frmt, va_list args)
{
    3112:	4607      	mov	r7, r0
    /* Check if there is enough space in the log buffer */
    num = LOG_BUF_SIZE - idxLogPut;	// distance to end of buffer
    if (num > LOG_ENTRY_MAX_SIZE)
	num = 0;			// enough space, no additional memory

    cnt = idxLogPut + num - idxLogGet;	// calculate allocated space
    3114:	18d0      	adds	r0, r2, r3
    if (cnt < 0)
    3116:	1a41      	subs	r1, r0, r1
	cnt += LOG_BUF_SIZE;		// wrap around
    3118:	bf48      	it	mi
    311a:	f501 5180 	addmi.w	r1, r1, #4096	; 0x1000

    cnt = LOG_BUF_SIZE - cnt - 1;	// calculate free space
    311e:	f5c1 617f 	rsb	r1, r1, #4080	; 0xff0
    3122:	310f      	adds	r1, #15
 * The format of a log message is:
 * \<prefix\> \<message\>
 *
 ******************************************************************************/
static void	logMsg(const char *prefix, const char *frmt, va_list args)
{
    3124:	b09a      	sub	sp, #104	; 0x68
    if (cnt < 0)
	cnt += LOG_BUF_SIZE;		// wrap around

    cnt = LOG_BUF_SIZE - cnt - 1;	// calculate free space

    if (cnt < LOG_ENTRY_MAX_SIZE)
    3126:	2963      	cmp	r1, #99	; 0x63
    3128:	ae01      	add	r6, sp, #4
    312a:	dc0c      	bgt.n	3146 <logMsg+0x4e>
    {
	/* Not enough space in buffer - skip entry and count as "lost" */
	l_LostEntryCnt++;
    312c:	4b23      	ldr	r3, [pc, #140]	; (31bc <logMsg+0xc4>)

#ifdef LOG_MONITOR_FUNCTION
	sprintf (tmpBuffer, "ERROR: Log Buffer Out of Memory"
    312e:	4924      	ldr	r1, [pc, #144]	; (31c0 <logMsg+0xc8>)
    cnt = LOG_BUF_SIZE - cnt - 1;	// calculate free space

    if (cnt < LOG_ENTRY_MAX_SIZE)
    {
	/* Not enough space in buffer - skip entry and count as "lost" */
	l_LostEntryCnt++;
    3130:	681a      	ldr	r2, [r3, #0]

#ifdef LOG_MONITOR_FUNCTION
	sprintf (tmpBuffer, "ERROR: Log Buffer Out of Memory"
    3132:	4630      	mov	r0, r6
    cnt = LOG_BUF_SIZE - cnt - 1;	// calculate free space

    if (cnt < LOG_ENTRY_MAX_SIZE)
    {
	/* Not enough space in buffer - skip entry and count as "lost" */
	l_LostEntryCnt++;
    3134:	3201      	adds	r2, #1
    3136:	601a      	str	r2, [r3, #0]

#ifdef LOG_MONITOR_FUNCTION
	sprintf (tmpBuffer, "ERROR: Log Buffer Out of Memory"
    3138:	f000 fd26 	bl	3b88 <siprintf>
			    " - lost %ld Messages\n", l_LostEntryCnt);
	LOG_MONITOR_FUNCTION (tmpBuffer);
    313c:	4630      	mov	r0, r6
    313e:	f7ff ff85 	bl	304c <drvLEUART_puts>
#endif
	pBuf = tmpBuffer;		// use temporary buffer
    3142:	4634      	mov	r4, r6
    3144:	e007      	b.n	3156 <logMsg+0x5e>
    }
    else
    {
	/* There is enough memory in log buffer */
	if (num > 0)
    3146:	2b00      	cmp	r3, #0
    3148:	4b1e      	ldr	r3, [pc, #120]	; (31c4 <logMsg+0xcc>)
    314a:	dd02      	ble.n	3152 <logMsg+0x5a>
	{
	    l_LogBuf[idxLogPut] = 0;	// mark wrap-around
    314c:	2100      	movs	r1, #0
    314e:	5499      	strb	r1, [r3, r2]
	    idxLogPut = 0;		// adjust start of new log message
    3150:	6029      	str	r1, [r5, #0]
	}

	pBuf = l_LogBuf + idxLogPut;	// use standard log buffer
    3152:	682c      	ldr	r4, [r5, #0]
    3154:	441c      	add	r4, r3
    3156:	f104 0a01 	add.w	sl, r4, #1

    /* Reserve one byte for string length information */
    cnt = 1;

    /* Store optional prefix */
    if (prefix != NULL)
    315a:	b157      	cbz	r7, 3172 <logMsg+0x7a>
    {
	if (*prefix != EOS)
    315c:	783b      	ldrb	r3, [r7, #0]
    315e:	b143      	cbz	r3, 3172 <logMsg+0x7a>
	{
	    strcpy (pBuf + cnt, prefix);
    3160:	4639      	mov	r1, r7
    3162:	4650      	mov	r0, sl
    3164:	f000 fe54 	bl	3e10 <strcpy>
	    cnt += strlen(prefix);
    3168:	4638      	mov	r0, r7
    316a:	f000 feaf 	bl	3ecc <strlen>
    316e:	1c47      	adds	r7, r0, #1
    3170:	e000      	b.n	3174 <logMsg+0x7c>

	pBuf = l_LogBuf + idxLogPut;	// use standard log buffer
    }

    /* Reserve one byte for string length information */
    cnt = 1;
    3172:	2701      	movs	r7, #1
	    cnt += strlen(prefix);
	}
    }

    /* Build and store the log message */
    cnt += vsprintf(pBuf + cnt, frmt, args);
    3174:	4642      	mov	r2, r8
    3176:	19e0      	adds	r0, r4, r7
    3178:	4649      	mov	r1, r9
    317a:	f001 fd0f 	bl	4b9c <vsiprintf>
    317e:	4407      	add	r7, r0

    /* add <CR><LF> */
    strcpy (pBuf + cnt, "\r\n");
    3180:	19e0      	adds	r0, r4, r7
    3182:	4911      	ldr	r1, [pc, #68]	; (31c8 <logMsg+0xd0>)
    3184:	f000 fe44 	bl	3e10 <strcpy>
    cnt += 3;			// <CR> <LF> EOS
    3188:	3703      	adds	r7, #3

    /* Immediately send the complete log message to the monitor output */
#ifdef LOG_MONITOR_FUNCTION
    LOG_MONITOR_FUNCTION (pBuf + 1);
    318a:	4650      	mov	r0, sl
    318c:	f7ff ff5e 	bl	304c <drvLEUART_puts>
#endif

    /* Check length */
    EFM_ASSERT(cnt <= LOG_ENTRY_MAX_SIZE);
    3190:	2f64      	cmp	r7, #100	; 0x64
    3192:	dd04      	ble.n	319e <logMsg+0xa6>
    3194:	480d      	ldr	r0, [pc, #52]	; (31cc <logMsg+0xd4>)
    3196:	f44f 71c0 	mov.w	r1, #384	; 0x180
    319a:	f7fd f889 	bl	2b0 <assertEFM>

    /* If used, update standard log buffer */
    if (pBuf != tmpBuffer)
    319e:	42b4      	cmp	r4, r6
    31a0:	d005      	beq.n	31ae <logMsg+0xb6>
    {
	/* Store string length */
	l_LogBuf[idxLogPut] = cnt - 2;	// no <len> byte, no EOS
    31a2:	682b      	ldr	r3, [r5, #0]
    31a4:	4a07      	ldr	r2, [pc, #28]	; (31c4 <logMsg+0xcc>)
    31a6:	1eb9      	subs	r1, r7, #2

	/* Update index */
	idxLogPut += cnt;
    31a8:	441f      	add	r7, r3

    /* If used, update standard log buffer */
    if (pBuf != tmpBuffer)
    {
	/* Store string length */
	l_LogBuf[idxLogPut] = cnt - 2;	// no <len> byte, no EOS
    31aa:	54d1      	strb	r1, [r2, r3]

	/* Update index */
	idxLogPut += cnt;
    31ac:	602f      	str	r7, [r5, #0]
    }
}
    31ae:	b01a      	add	sp, #104	; 0x68
    31b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31b4:	20001588 	.word	0x20001588
    31b8:	2000158c 	.word	0x2000158c
    31bc:	20001584 	.word	0x20001584
    31c0:	00006692 	.word	0x00006692
    31c4:	20001590 	.word	0x20001590
    31c8:	000066c7 	.word	0x000066c7
    31cc:	000066ca 	.word	0x000066ca

000031d0 <LogInit>:
 *
 ******************************************************************************/
void	 LogInit (void)
{
    /* initialize indices */
    idxLogGet = idxLogPut = 0;
    31d0:	4a02      	ldr	r2, [pc, #8]	; (31dc <LogInit+0xc>)
    31d2:	2300      	movs	r3, #0
    31d4:	6013      	str	r3, [r2, #0]
    31d6:	4a02      	ldr	r2, [pc, #8]	; (31e0 <LogInit+0x10>)
    31d8:	6013      	str	r3, [r2, #0]
    31da:	4770      	bx	lr
    31dc:	20001588 	.word	0x20001588
    31e0:	2000158c 	.word	0x2000158c

000031e4 <Log>:
 * The format of a log message is:
 * 20151231-235900 \<message\>
 *
 ******************************************************************************/
void	 Log (const char *frmt, ...)
{
    31e4:	b40f      	push	{r0, r1, r2, r3}
    31e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    31e8:	ac06      	add	r4, sp, #24
    31ea:	f854 5b04 	ldr.w	r5, [r4], #4
va_list	 args;


    /* disable interrupts to prevent interferring of other logs */
    INT_Disable();
    31ee:	f7ff ff6d 	bl	30cc <INT_Disable>

    /* build variable argument list and call logMsg() */
    va_start(args, frmt);
    logMsg (NULL, frmt, args);
    31f2:	4629      	mov	r1, r5
    31f4:	4622      	mov	r2, r4
    31f6:	2000      	movs	r0, #0

    /* disable interrupts to prevent interferring of other logs */
    INT_Disable();

    /* build variable argument list and call logMsg() */
    va_start(args, frmt);
    31f8:	9401      	str	r4, [sp, #4]
    logMsg (NULL, frmt, args);
    31fa:	f7ff ff7d 	bl	30f8 <logMsg>
    va_end(args);

    /* enable interrupts again */
    INT_Enable();
    31fe:	f7ff ff71 	bl	30e4 <INT_Enable>
}
    3202:	b003      	add	sp, #12
    3204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3208:	b004      	add	sp, #16
    320a:	4770      	bx	lr

0000320c <LogError>:
 * The format of an error log message is:
 * 20151231-235900 ERROR \<message\>
 *
 ******************************************************************************/
void	 LogError (const char *frmt, ...)
{
    320c:	b40f      	push	{r0, r1, r2, r3}
    320e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3210:	ac06      	add	r4, sp, #24
    3212:	f854 5b04 	ldr.w	r5, [r4], #4
va_list	 args;


    /* disable interrupts to prevent interfering of other logs */
    INT_Disable();
    3216:	f7ff ff59 	bl	30cc <INT_Disable>

    /* build variable argument list and call logMsg() */
    va_start(args, frmt);
    logMsg ("ERROR ", frmt, args);
    321a:	4629      	mov	r1, r5
    321c:	4622      	mov	r2, r4
    321e:	4805      	ldr	r0, [pc, #20]	; (3234 <LogError+0x28>)

    /* disable interrupts to prevent interfering of other logs */
    INT_Disable();

    /* build variable argument list and call logMsg() */
    va_start(args, frmt);
    3220:	9401      	str	r4, [sp, #4]
    logMsg ("ERROR ", frmt, args);
    3222:	f7ff ff69 	bl	30f8 <logMsg>
    va_end(args);

    /* enable interrupts again */
    INT_Enable();
    3226:	f7ff ff5d 	bl	30e4 <INT_Enable>
}
    322a:	b003      	add	sp, #12
    322c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3230:	b004      	add	sp, #16
    3232:	4770      	bx	lr
    3234:	000066df 	.word	0x000066df

00003238 <LogFileOpen>:
 * @return
 *	Result: true if file exists or could be opened, false if not.
 *
 ******************************************************************************/
bool	 LogFileOpen (char *filepattern, char *filename)
{
    3238:	b538      	push	{r3, r4, r5, lr}
    323a:	460c      	mov	r4, r1
FRESULT	 res;		// FatFs function common result code
char	*pStr;		// string pointer


    /* Parameter Check */
    if (filepattern != NULL)
    323c:	4601      	mov	r1, r0
    323e:	b908      	cbnz	r0, 3244 <LogFileOpen+0xc>
	if (pStr != NULL)
	    filename = pStr;	// found pattern on disk
    }

    /* Check if file on the disk, or a fall-back name exists */
    if (filename == NULL)
    3240:	b314      	cbz	r4, 3288 <LogFileOpen+0x50>
    3242:	e005      	b.n	3250 <LogFileOpen+0x18>

    /* Parameter Check */
    if (filepattern != NULL)
    {
	/* Find filename with specified pattern on the SD-Card */
	pStr = FindFile ("/", filepattern);
    3244:	4811      	ldr	r0, [pc, #68]	; (328c <LogFileOpen+0x54>)
    3246:	f000 f8ad 	bl	33a4 <FindFile>
	if (pStr != NULL)
    324a:	2800      	cmp	r0, #0
    324c:	d0f8      	beq.n	3240 <LogFileOpen+0x8>
    324e:	4604      	mov	r4, r0
    /* Check if file on the disk, or a fall-back name exists */
    if (filename == NULL)
	return false;		// file not found and no fall-back specified

    /* Discard old file handle, open new file */
    res = f_open (&l_fh, filename,  FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
    3250:	4d0f      	ldr	r5, [pc, #60]	; (3290 <LogFileOpen+0x58>)
    3252:	4621      	mov	r1, r4
    3254:	4628      	mov	r0, r5
    3256:	2213      	movs	r2, #19
    3258:	f7fe fee2 	bl	2020 <f_open>
    325c:	462c      	mov	r4, r5
    if (res == FR_OK)
    325e:	4601      	mov	r1, r0
    3260:	b928      	cbnz	r0, 326e <LogFileOpen+0x36>
    {
	res = f_lseek (&l_fh, f_size(&l_fh));
    3262:	68e9      	ldr	r1, [r5, #12]
    3264:	4628      	mov	r0, r5
    3266:	f7ff f961 	bl	252c <f_lseek>
    }

    if (res != FR_OK)
    326a:	4601      	mov	r1, r0
    326c:	b128      	cbz	r0, 327a <LogFileOpen+0x42>
    {
	LogError ("LogFileOpen: Error Code %d", res);
    326e:	4809      	ldr	r0, [pc, #36]	; (3294 <LogFileOpen+0x5c>)
    3270:	f7ff ffcc 	bl	320c <LogError>
	l_fh.fs = NULL;		// invalidate file handle
    3274:	2300      	movs	r3, #0
    3276:	6023      	str	r3, [r4, #0]
    3278:	e002      	b.n	3280 <LogFileOpen+0x48>
    }
    else
    {
	l_ErrMsgCnt = 2;
    327a:	4b07      	ldr	r3, [pc, #28]	; (3298 <LogFileOpen+0x60>)
    327c:	2202      	movs	r2, #2
    327e:	601a      	str	r2, [r3, #0]
    }

    /* Power off the SD-Card Interface */
    MICROSD_PowerOff();
    3280:	f000 f9d6 	bl	3630 <MICROSD_PowerOff>

    return true;
    3284:	2001      	movs	r0, #1
    3286:	bd38      	pop	{r3, r4, r5, pc}
	    filename = pStr;	// found pattern on disk
    }

    /* Check if file on the disk, or a fall-back name exists */
    if (filename == NULL)
	return false;		// file not found and no fall-back specified
    3288:	4620      	mov	r0, r4

    /* Power off the SD-Card Interface */
    MICROSD_PowerOff();

    return true;
}
    328a:	bd38      	pop	{r3, r4, r5, pc}
    328c:	0000638e 	.word	0x0000638e
    3290:	20001360 	.word	0x20001360
    3294:	000066e6 	.word	0x000066e6
    3298:	2000135c 	.word	0x2000135c

0000329c <LogFlush>:
 *
 * This routine flushes the log buffer, i.e. its contents is written to disk.
 *
 ******************************************************************************/
void	 LogFlush (void)
{
    329c:	b537      	push	{r0, r1, r2, r4, r5, lr}
int	 cnt;
UINT	 bytesWr;


    /* See if Log File is open */
    if (IsFileHandleValid(&l_fh) == false)
    329e:	4827      	ldr	r0, [pc, #156]	; (333c <LogFlush+0xa0>)
    32a0:	f000 f864 	bl	336c <IsFileHandleValid>
    32a4:	2800      	cmp	r0, #0
    32a6:	d046      	beq.n	3336 <LogFlush+0x9a>
	return;			// no file open or invalid file handle

    /* Switch the SD-Card Interface on */
    MICROSD_PowerOn();
    32a8:	f000 f98e 	bl	35c8 <MICROSD_PowerOn>

    /* Re-Initialize disk (mount is still the same!) */
    if (disk_initialize(0) != 0)
    32ac:	2000      	movs	r0, #0
    32ae:	f7fd fe43 	bl	f38 <disk_initialize>
    32b2:	b158      	cbz	r0, 32cc <LogFlush+0x30>
    {
	if (--l_ErrMsgCnt >= 0)
    32b4:	4a22      	ldr	r2, [pc, #136]	; (3340 <LogFlush+0xa4>)
    32b6:	6813      	ldr	r3, [r2, #0]
    32b8:	3b01      	subs	r3, #1
    32ba:	2b00      	cmp	r3, #0
    32bc:	6013      	str	r3, [r2, #0]
    32be:	db38      	blt.n	3332 <LogFlush+0x96>
	    LogError ("LogFlush: Init Failed");
    32c0:	4820      	ldr	r0, [pc, #128]	; (3344 <LogFlush+0xa8>)
    32c2:	e026      	b.n	3312 <LogFlush+0x76>
		res = FR_DISK_ERR;
		break;
	    }

	    /* update index, consider <len> byte and EOS */
	    idxLogGet += (cnt + 2);
    32c4:	682b      	ldr	r3, [r5, #0]
    32c6:	3402      	adds	r4, #2
    32c8:	4423      	add	r3, r4
    32ca:	602b      	str	r3, [r5, #0]
	    LogError ("LogFlush: Init Failed");
    }
    else
    {
	/* Write all log messages to disk */
	while (idxLogGet != idxLogPut)
    32cc:	4b1e      	ldr	r3, [pc, #120]	; (3348 <LogFlush+0xac>)
    32ce:	4a1f      	ldr	r2, [pc, #124]	; (334c <LogFlush+0xb0>)
    32d0:	6819      	ldr	r1, [r3, #0]
    32d2:	6812      	ldr	r2, [r2, #0]
    32d4:	4291      	cmp	r1, r2
    32d6:	d029      	beq.n	332c <LogFlush+0x90>
	{
	    cnt = l_LogBuf[idxLogGet];	// get string length
    32d8:	4a1d      	ldr	r2, [pc, #116]	; (3350 <LogFlush+0xb4>)
    32da:	5c54      	ldrb	r4, [r2, r1]
    32dc:	4611      	mov	r1, r2
	    if (cnt == 0)
    32de:	b90c      	cbnz	r4, 32e4 <LogFlush+0x48>
	    {
		idxLogGet = 0;		// length of 0 indicates wrap-around
    32e0:	601c      	str	r4, [r3, #0]
		cnt = l_LogBuf[idxLogGet];
    32e2:	7814      	ldrb	r4, [r2, #0]
	    }

	    /* write string to file without the terminating 0 (EOS) */
	    res = f_write (&l_fh, l_LogBuf + idxLogGet + 1, cnt, &bytesWr);
    32e4:	681b      	ldr	r3, [r3, #0]
    32e6:	4815      	ldr	r0, [pc, #84]	; (333c <LogFlush+0xa0>)
    32e8:	3301      	adds	r3, #1
    32ea:	4419      	add	r1, r3
    32ec:	4622      	mov	r2, r4
    32ee:	f10d 0306 	add.w	r3, sp, #6
    32f2:	f7fe ffef 	bl	22d4 <f_write>
    32f6:	4d14      	ldr	r5, [pc, #80]	; (3348 <LogFlush+0xac>)
	    if (res != FR_OK)
    32f8:	4601      	mov	r1, r0
    32fa:	b968      	cbnz	r0, 3318 <LogFlush+0x7c>
		if (--l_ErrMsgCnt >= 0)
		    LogError ("LogFlush: Error Code %d", res);
		break;
	    }

	    if (bytesWr < cnt)
    32fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3300:	42a3      	cmp	r3, r4
    3302:	dadf      	bge.n	32c4 <LogFlush+0x28>
	    {
		if (--l_ErrMsgCnt >= 0)
    3304:	4a0e      	ldr	r2, [pc, #56]	; (3340 <LogFlush+0xa4>)
    3306:	6813      	ldr	r3, [r2, #0]
    3308:	3b01      	subs	r3, #1
    330a:	2b00      	cmp	r3, #0
    330c:	6013      	str	r3, [r2, #0]
    330e:	db10      	blt.n	3332 <LogFlush+0x96>
		    LogError ("LogFlush: Disk Full");
    3310:	4810      	ldr	r0, [pc, #64]	; (3354 <LogFlush+0xb8>)
    3312:	f7ff ff7b 	bl	320c <LogError>
    3316:	e00c      	b.n	3332 <LogFlush+0x96>

	    /* write string to file without the terminating 0 (EOS) */
	    res = f_write (&l_fh, l_LogBuf + idxLogGet + 1, cnt, &bytesWr);
	    if (res != FR_OK)
	    {
		if (--l_ErrMsgCnt >= 0)
    3318:	4a09      	ldr	r2, [pc, #36]	; (3340 <LogFlush+0xa4>)
    331a:	6813      	ldr	r3, [r2, #0]
    331c:	3b01      	subs	r3, #1
    331e:	2b00      	cmp	r3, #0
    3320:	6013      	str	r3, [r2, #0]
    3322:	db06      	blt.n	3332 <LogFlush+0x96>
		    LogError ("LogFlush: Error Code %d", res);
    3324:	480c      	ldr	r0, [pc, #48]	; (3358 <LogFlush+0xbc>)
    3326:	f7ff ff71 	bl	320c <LogError>
    332a:	e002      	b.n	3332 <LogFlush+0x96>
	    idxLogGet += (cnt + 2);
	}

	/* Synchronize file system */
	if (res == FR_OK)
	    f_sync (&l_fh);
    332c:	4803      	ldr	r0, [pc, #12]	; (333c <LogFlush+0xa0>)
    332e:	f7ff f8a2 	bl	2476 <f_sync>
    }

    /* Switch the SD-Card Interface off */
    MICROSD_PowerOff();
    3332:	f000 f97d 	bl	3630 <MICROSD_PowerOff>
}
    3336:	b003      	add	sp, #12
    3338:	bd30      	pop	{r4, r5, pc}
    333a:	bf00      	nop
    333c:	20001360 	.word	0x20001360
    3340:	2000135c 	.word	0x2000135c
    3344:	00006701 	.word	0x00006701
    3348:	2000158c 	.word	0x2000158c
    334c:	20001588 	.word	0x20001588
    3350:	20001590 	.word	0x20001590
    3354:	0000672f 	.word	0x0000672f
    3358:	00006717 	.word	0x00006717

0000335c <IsDiskRemoved>:
 *	otherwise.
 *
 ******************************************************************************/
bool	 IsDiskRemoved (void)
{
    return l_DiskState == DS_REMOVED ? true : false;
    335c:	4b02      	ldr	r3, [pc, #8]	; (3368 <IsDiskRemoved+0xc>)
    335e:	7818      	ldrb	r0, [r3, #0]
}
    3360:	1e83      	subs	r3, r0, #2
    3362:	4258      	negs	r0, r3
    3364:	4158      	adcs	r0, r3
    3366:	4770      	bx	lr
    3368:	20002598 	.word	0x20002598

0000336c <IsFileHandleValid>:
 *	State of the file handle, <b>true</b> if valid, <b>false</b> if not.
 *
 ******************************************************************************/
bool	 IsFileHandleValid (FIL *pHdl)
{
    if (pHdl == NULL)
    336c:	b128      	cbz	r0, 337a <IsFileHandleValid+0xe>
	return false;

    if (pHdl->fs == NULL)
    336e:	6800      	ldr	r0, [r0, #0]
    3370:	b118      	cbz	r0, 337a <IsFileHandleValid+0xe>
	return false;

    if (pHdl->fs->fs_type == 0)
    3372:	7800      	ldrb	r0, [r0, #0]
    3374:	3000      	adds	r0, #0
    3376:	bf18      	it	ne
    3378:	2001      	movne	r0, #1
	return false;

    return true;
}
    337a:	4770      	bx	lr

0000337c <DiskSize>:
 * @return
 *	Free disk space in MB.
 *
 ******************************************************************************/
uint32_t	 DiskSize (void)
{
    337c:	b507      	push	{r0, r1, r2, lr}
DWORD	 clustCnt;		// Number of available cluster
FATFS	*pFAT;			// Pointer to FAT structure currently in use


    /* Get free space of the whole disk */
    if (f_getfree("/", &clustCnt, &pFAT) == FR_OK)
    337e:	4808      	ldr	r0, [pc, #32]	; (33a0 <DiskSize+0x24>)
    3380:	4669      	mov	r1, sp
    3382:	aa01      	add	r2, sp, #4
    3384:	f7ff f9ca 	bl	271c <f_getfree>
    3388:	b930      	cbnz	r0, 3398 <DiskSize+0x1c>
    {
	/*
	 * Calculate free space in MB.
	 * DIV by 2 to get KB, MUL <clustCnt> DIV 1024 to get MB.
	 */
	return (clustCnt / 2 * pFAT->csize / 1024);
    338a:	9b01      	ldr	r3, [sp, #4]
    338c:	789a      	ldrb	r2, [r3, #2]
    338e:	9b00      	ldr	r3, [sp, #0]
    3390:	0858      	lsrs	r0, r3, #1
    3392:	4350      	muls	r0, r2
    3394:	0a80      	lsrs	r0, r0, #10
    3396:	e000      	b.n	339a <DiskSize+0x1e>
    }

    return 0;
    3398:	2000      	movs	r0, #0
}
    339a:	b003      	add	sp, #12
    339c:	f85d fb04 	ldr.w	pc, [sp], #4
    33a0:	0000638e 	.word	0x0000638e

000033a4 <FindFile>:
 * @warning
 * 	All parameters must be specified in upper case characters!
 *
 ******************************************************************************/
char	*FindFile (char *dirpath, char *filepattern)
{
    33a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33a6:	460d      	mov	r5, r1
    33a8:	b08f      	sub	sp, #60	; 0x3c
FILINFO	 fileinfo;	// File info object
int	 i, j;


    /* check parameters */
    EFM_ASSERT (dirpath != NULL);
    33aa:	4604      	mov	r4, r0
    33ac:	b920      	cbnz	r0, 33b8 <FindFile+0x14>
    33ae:	483c      	ldr	r0, [pc, #240]	; (34a0 <FindFile+0xfc>)
    33b0:	f44f 71b9 	mov.w	r1, #370	; 0x172
    33b4:	f7fc ff7c 	bl	2b0 <assertEFM>
    EFM_ASSERT (filepattern != NULL);
    33b8:	b925      	cbnz	r5, 33c4 <FindFile+0x20>
    33ba:	4839      	ldr	r0, [pc, #228]	; (34a0 <FindFile+0xfc>)
    33bc:	f240 1173 	movw	r1, #371	; 0x173
    33c0:	f7fc ff76 	bl	2b0 <assertEFM>

    /* open the specified directory */
    if (f_opendir(&dir, dirpath) != FR_OK)
    33c4:	a807      	add	r0, sp, #28
    33c6:	4621      	mov	r1, r4
    33c8:	f7ff f94e 	bl	2668 <f_opendir>
    33cc:	b150      	cbz	r0, 33e4 <FindFile+0x40>
	return NULL;	// abort on error
    33ce:	2000      	movs	r0, #0
    33d0:	e064      	b.n	349c <FindFile+0xf8>
    while (1)
    {
	if (f_readdir(&dir, &fileinfo) != FR_OK)
	    return NULL;	// abort on error

	if (fileinfo.fname[0] == EOS)
    33d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d0f9      	beq.n	33ce <FindFile+0x2a>
	    return NULL;	// no  more files in current directory

	if (fileinfo.fattrib & (AM_DIR | AM_VOL | AM_SYS))
    33da:	f89d 400c 	ldrb.w	r4, [sp, #12]
    33de:	f014 041c 	ands.w	r4, r4, #28
    33e2:	d00f      	beq.n	3404 <FindFile+0x60>
	return NULL;	// abort on error

    /* read directory contents name by name */
    while (1)
    {
	if (f_readdir(&dir, &fileinfo) != FR_OK)
    33e4:	a807      	add	r0, sp, #28
    33e6:	a901      	add	r1, sp, #4
    33e8:	f7ff f96e 	bl	26c8 <f_readdir>
    33ec:	2800      	cmp	r0, #0
    33ee:	d0f0      	beq.n	33d2 <FindFile+0x2e>
    33f0:	e7ed      	b.n	33ce <FindFile+0x2a>
	if (fileinfo.fattrib & (AM_DIR | AM_VOL | AM_SYS))
	    continue;	// ignore subdirectories, volume labels and system files

	/* compare basename */
	for (i=j=0;  (i < 8)  &&  fileinfo.fname[i] != '.'
			      &&  fileinfo.fname[i] != EOS;  i++, j++)
    33f2:	b163      	cbz	r3, 340e <FindFile+0x6a>
	{
	    if (filepattern[j] == '*')
    33f4:	5d2a      	ldrb	r2, [r5, r4]
    33f6:	2a2a      	cmp	r2, #42	; 0x2a
    33f8:	d009      	beq.n	340e <FindFile+0x6a>
		break;	// wildcard - ignore the rest of the basename

	    if (fileinfo.fname[i] != filepattern[j])
    33fa:	4293      	cmp	r3, r2
    33fc:	d107      	bne.n	340e <FindFile+0x6a>
	if (fileinfo.fattrib & (AM_DIR | AM_VOL | AM_SYS))
	    continue;	// ignore subdirectories, volume labels and system files

	/* compare basename */
	for (i=j=0;  (i < 8)  &&  fileinfo.fname[i] != '.'
			      &&  fileinfo.fname[i] != EOS;  i++, j++)
    33fe:	3401      	adds	r4, #1

	if (fileinfo.fattrib & (AM_DIR | AM_VOL | AM_SYS))
	    continue;	// ignore subdirectories, volume labels and system files

	/* compare basename */
	for (i=j=0;  (i < 8)  &&  fileinfo.fname[i] != '.'
    3400:	2c08      	cmp	r4, #8
    3402:	d004      	beq.n	340e <FindFile+0x6a>
    3404:	ab01      	add	r3, sp, #4
    3406:	4423      	add	r3, r4
    3408:	7a5b      	ldrb	r3, [r3, #9]
    340a:	2b2e      	cmp	r3, #46	; 0x2e
    340c:	d1f1      	bne.n	33f2 <FindFile+0x4e>
	    if (fileinfo.fname[i] != filepattern[j])
		break;	// not equal - file does not match
	}

	/* check for wildcard */
	if (filepattern[j] == '*')		// "base*[.ext]"
    340e:	5d2b      	ldrb	r3, [r5, r4]
    3410:	2b2a      	cmp	r3, #42	; 0x2a
    3412:	d10a      	bne.n	342a <FindFile+0x86>
	{
	    j++;			// skip '*'
    3414:	1c66      	adds	r6, r4, #1

	    /* skip the rest of the basename */
	    for ( ;  (i < 8)  &&  fileinfo.fname[i] != '.'
    3416:	2c08      	cmp	r4, #8
    3418:	d008      	beq.n	342c <FindFile+0x88>
    341a:	ab01      	add	r3, sp, #4
    341c:	4423      	add	r3, r4
    341e:	7a5b      	ldrb	r3, [r3, #9]
    3420:	2b2e      	cmp	r3, #46	; 0x2e
    3422:	d003      	beq.n	342c <FindFile+0x88>
			      &&  fileinfo.fname[i] != EOS;  i++)
    3424:	b113      	cbz	r3, 342c <FindFile+0x88>
    3426:	3401      	adds	r4, #1
    3428:	e7f5      	b.n	3416 <FindFile+0x72>
    342a:	4626      	mov	r6, r4
	 * a) "basename"  == "basename"
	 * b) "basename"  == "base*"
	 * c) "basename." == "basename."
	 * d) "basename." == "base*."
	 */
	if (fileinfo.fname[i] != filepattern[j])
    342c:	ab0e      	add	r3, sp, #56	; 0x38
    342e:	4423      	add	r3, r4
    3430:	f813 2c2b 	ldrb.w	r2, [r3, #-43]
    3434:	5dab      	ldrb	r3, [r5, r6]
    3436:	19af      	adds	r7, r5, r6
    3438:	4293      	cmp	r3, r2
    343a:	d1d3      	bne.n	33e4 <FindFile+0x40>
	    continue;	// file does not match, try the next file

	/* check for extension */
	if (fileinfo.fname[i] == EOS)
    343c:	b933      	cbnz	r3, 344c <FindFile+0xa8>

	break;		// complete match - leave the loop
    }

    /* file name does match */
    strcpy (filefound, fileinfo.fname);
    343e:	4819      	ldr	r0, [pc, #100]	; (34a4 <FindFile+0x100>)
    3440:	f10d 010d 	add.w	r1, sp, #13
    3444:	f000 fce4 	bl	3e10 <strcpy>
    return filefound;
    3448:	4816      	ldr	r0, [pc, #88]	; (34a4 <FindFile+0x100>)
    344a:	e027      	b.n	349c <FindFile+0xf8>
	/* check for extension */
	if (fileinfo.fname[i] == EOS)
	    break;	// no extension - filename does match

	/* verify if a dot follows the basename */
	EFM_ASSERT (filepattern[j] == '.');	// dot must follow
    344c:	2b2e      	cmp	r3, #46	; 0x2e
    344e:	d004      	beq.n	345a <FindFile+0xb6>
    3450:	4813      	ldr	r0, [pc, #76]	; (34a0 <FindFile+0xfc>)
    3452:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3456:	f7fc ff2b 	bl	2b0 <assertEFM>
	if (filepattern[j] != '.')
    345a:	783b      	ldrb	r3, [r7, #0]
    345c:	2b2e      	cmp	r3, #46	; 0x2e
    345e:	d1b6      	bne.n	33ce <FindFile+0x2a>
	    return NULL;			// abort on error

	/* skip dot, compare extension */
	for (i++, j++;  fileinfo.fname[i] != EOS;  i++, j++)
    3460:	1c73      	adds	r3, r6, #1
    3462:	1ba2      	subs	r2, r4, r6
    3464:	a901      	add	r1, sp, #4
    3466:	440a      	add	r2, r1
    3468:	441a      	add	r2, r3
    346a:	7a52      	ldrb	r2, [r2, #9]
    346c:	b132      	cbz	r2, 347c <FindFile+0xd8>
	{
	    if (filepattern[j] == '*')
    346e:	5ce9      	ldrb	r1, [r5, r3]
    3470:	292a      	cmp	r1, #42	; 0x2a
    3472:	d003      	beq.n	347c <FindFile+0xd8>
		break;	// wildcard - ignore the rest of the extension

	    if (fileinfo.fname[i] != filepattern[j])
    3474:	428a      	cmp	r2, r1
    3476:	d101      	bne.n	347c <FindFile+0xd8>
	EFM_ASSERT (filepattern[j] == '.');	// dot must follow
	if (filepattern[j] != '.')
	    return NULL;			// abort on error

	/* skip dot, compare extension */
	for (i++, j++;  fileinfo.fname[i] != EOS;  i++, j++)
    3478:	3301      	adds	r3, #1
    347a:	e7f2      	b.n	3462 <FindFile+0xbe>
	    if (fileinfo.fname[i] != filepattern[j])
		break;	// not equal - file does not match
	}

	/* check for wildcard */
	if (filepattern[j] == '*')
    347c:	18ec      	adds	r4, r5, r3
    347e:	5ceb      	ldrb	r3, [r5, r3]
    3480:	2b2a      	cmp	r3, #42	; 0x2a
    3482:	d0dc      	beq.n	343e <FindFile+0x9a>
	    break;	// wildcard - filename does match

	if (fileinfo.fname[i] != filepattern[j])
    3484:	429a      	cmp	r2, r3
    3486:	d1ad      	bne.n	33e4 <FindFile+0x40>
	    continue;	// file does not match, try the next file

	EFM_ASSERT (filepattern[j] == EOS);	// EOS must follow
    3488:	b122      	cbz	r2, 3494 <FindFile+0xf0>
    348a:	4805      	ldr	r0, [pc, #20]	; (34a0 <FindFile+0xfc>)
    348c:	f240 11bf 	movw	r1, #447	; 0x1bf
    3490:	f7fc ff0e 	bl	2b0 <assertEFM>
	if (filepattern[j] != EOS)
    3494:	7823      	ldrb	r3, [r4, #0]
    3496:	2b00      	cmp	r3, #0
    3498:	d0d1      	beq.n	343e <FindFile+0x9a>
    349a:	e798      	b.n	33ce <FindFile+0x2a>
    }

    /* file name does match */
    strcpy (filefound, fileinfo.fname);
    return filefound;
}
    349c:	b00f      	add	sp, #60	; 0x3c
    349e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34a0:	00006758 	.word	0x00006758
    34a4:	200027d5 	.word	0x200027d5

000034a8 <MICROSD_Init>:
 * This routine initializes the board-specific hardware for the SD-Card
 * interface, i.e. GPIOs for Power-Enable and the SPI interface.
 *
 ******************************************************************************/
void MICROSD_Init(void)
{
    34a8:	b530      	push	{r4, r5, lr}
USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    34aa:	4d23      	ldr	r5, [pc, #140]	; (3538 <MICROSD_Init+0x90>)
 * This routine initializes the board-specific hardware for the SD-Card
 * interface, i.e. GPIOs for Power-Enable and the SPI interface.
 *
 ******************************************************************************/
void MICROSD_Init(void)
{
    34ac:	b087      	sub	sp, #28
USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    34ae:	ac01      	add	r4, sp, #4
    34b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    34b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    34b4:	682b      	ldr	r3, [r5, #0]

    /* Enabling clock to USART and GPIO */
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    34b6:	4821      	ldr	r0, [pc, #132]	; (353c <MICROSD_Init+0x94>)
    34b8:	2101      	movs	r1, #1
 * interface, i.e. GPIOs for Power-Enable and the SPI interface.
 *
 ******************************************************************************/
void MICROSD_Init(void)
{
USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    34ba:	6023      	str	r3, [r4, #0]

    /* Enabling clock to USART and GPIO */
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    34bc:	f7fd f832 	bl	524 <CMU_ClockEnable>
    CMU_ClockEnable(cmuClock_GPIO, true);
    34c0:	481f      	ldr	r0, [pc, #124]	; (3540 <MICROSD_Init+0x98>)
    34c2:	2101      	movs	r1, #1
    34c4:	f7fd f82e 	bl	524 <CMU_ClockEnable>

    /* Initialize USART in SPI master mode. */
    xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    34c8:	4b1e      	ldr	r3, [pc, #120]	; (3544 <MICROSD_Init+0x9c>)
    34ca:	220c      	movs	r2, #12
    init.baudrate = MICROSD_LO_SPI_FREQ;
    init.msbf     = true;	// Most Significant Bit First
    USART_InitSync(MICROSD_USART, &init);
    34cc:	4d1e      	ldr	r5, [pc, #120]	; (3548 <MICROSD_Init+0xa0>)
    /* Enabling clock to USART and GPIO */
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    CMU_ClockEnable(cmuClock_GPIO, true);

    /* Initialize USART in SPI master mode. */
    xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    34ce:	601a      	str	r2, [r3, #0]
    init.baudrate = MICROSD_LO_SPI_FREQ;
    34d0:	4b1e      	ldr	r3, [pc, #120]	; (354c <MICROSD_Init+0xa4>)
    init.msbf     = true;	// Most Significant Bit First
    34d2:	2401      	movs	r4, #1
    USART_InitSync(MICROSD_USART, &init);
    34d4:	4628      	mov	r0, r5
    34d6:	a901      	add	r1, sp, #4
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    CMU_ClockEnable(cmuClock_GPIO, true);

    /* Initialize USART in SPI master mode. */
    xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    init.baudrate = MICROSD_LO_SPI_FREQ;
    34d8:	9303      	str	r3, [sp, #12]
    init.msbf     = true;	// Most Significant Bit First
    34da:	f88d 4012 	strb.w	r4, [sp, #18]
    USART_InitSync(MICROSD_USART, &init);
    34de:	f7fd fc73 	bl	dc8 <USART_InitSync>

    /* Enabling pins and setting location, SPI CS not enabled */
    MICROSD_USART->ROUTE = USART_ROUTE_TXPEN | USART_ROUTE_RXPEN |
    34e2:	230b      	movs	r3, #11
    34e4:	656b      	str	r3, [r5, #84]	; 0x54
    /* This will allow us to use higher baudrate. */
    MICROSD_USART->CTRL |= USART_CTRL_SMSDELAY;
#endif

    /* Configure Power Enable Pin for SD-Card interface (still OFF) */
    GPIO_PinModeSet (g_MicroSD_PwrPort, g_MicroSD_PwrPin,
    34e6:	4b1a      	ldr	r3, [pc, #104]	; (3550 <MICROSD_Init+0xa8>)
    34e8:	2204      	movs	r2, #4
    34ea:	7818      	ldrb	r0, [r3, #0]
    34ec:	4b19      	ldr	r3, [pc, #100]	; (3554 <MICROSD_Init+0xac>)
    34ee:	6819      	ldr	r1, [r3, #0]
    34f0:	2300      	movs	r3, #0
    34f2:	f7fd fb23 	bl	b3c <GPIO_PinModeSet>
		     gpioModePushPull, 0);

    /* IO configuration of the SPI */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MOSI_PIN, gpioModePushPull, 0);
    34f6:	2002      	movs	r0, #2
    34f8:	4601      	mov	r1, r0
    34fa:	2204      	movs	r2, #4
    34fc:	2300      	movs	r3, #0
    34fe:	f7fd fb1d 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MISO_PIN, gpioModeInputPull, 1);
    3502:	2002      	movs	r0, #2
    3504:	4602      	mov	r2, r0
    3506:	4623      	mov	r3, r4
    3508:	2103      	movs	r1, #3
    350a:	f7fd fb17 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CS_PIN,   gpioModePushPull, 1);
    350e:	4623      	mov	r3, r4
    3510:	2002      	movs	r0, #2
    3512:	2105      	movs	r1, #5
    3514:	2204      	movs	r2, #4
    3516:	f7fd fb11 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CLK_PIN,  gpioModePushPull, 0);
    351a:	2104      	movs	r1, #4
    351c:	460a      	mov	r2, r1
    351e:	2002      	movs	r0, #2
    3520:	2300      	movs	r3, #0
    3522:	f7fd fb0b 	bl	b3c <GPIO_PinModeSet>
    * Configure the Card-Detect (CD) pin as pure input.  There is an external
    * low impedance pull-up resistor which is switched on for 16us to check
    * the current state of the SD-Card socket (card removed or inserted).
    * This is done in polling mode by function DiskCheck().
    */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_CD_PIN, gpioModeInput, 0);
    3526:	2002      	movs	r0, #2
    3528:	2106      	movs	r1, #6
    352a:	4622      	mov	r2, r4
    352c:	2300      	movs	r3, #0
    352e:	f7fd fb05 	bl	b3c <GPIO_PinModeSet>
}
    3532:	b007      	add	sp, #28
    3534:	bd30      	pop	{r4, r5, pc}
    3536:	bf00      	nop
    3538:	00006744 	.word	0x00006744
    353c:	00022200 	.word	0x00022200
    3540:	0002c200 	.word	0x0002c200
    3544:	20002594 	.word	0x20002594
    3548:	4000c800 	.word	0x4000c800
    354c:	000186a0 	.word	0x000186a0
    3550:	20000036 	.word	0x20000036
    3554:	20002590 	.word	0x20002590

00003558 <DiskInit>:
 *
 ******************************************************************************/
void	 DiskInit (void)
{
    /* Initialize the SPI peripheral and GPIOs for microSD card usage */
    MICROSD_Init();
    3558:	f7ff bfa6 	b.w	34a8 <MICROSD_Init>

0000355c <MICROSD_XferSpi>:
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
    if ( timeOut )
    355c:	4b04      	ldr	r3, [pc, #16]	; (3570 <MICROSD_XferSpi+0x14>)
 *
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
    355e:	4601      	mov	r1, r0
    if ( timeOut )
    3560:	681a      	ldr	r2, [r3, #0]
    3562:	b10a      	cbz	r2, 3568 <MICROSD_XferSpi+0xc>
    {
	timeOut--;
    3564:	3a01      	subs	r2, #1
    3566:	601a      	str	r2, [r3, #0]
    }

    return USART_SpiTransfer(MICROSD_USART, data);
    3568:	4802      	ldr	r0, [pc, #8]	; (3574 <MICROSD_XferSpi+0x18>)
    356a:	f7fd bc65 	b.w	e38 <USART_SpiTransfer>
    356e:	bf00      	nop
    3570:	2000259c 	.word	0x2000259c
    3574:	4000c800 	.word	0x4000c800

00003578 <WaitReady>:
{
uint8_t res;
uint32_t retryCount;

    /* Wait for ready in timeout of 500ms */
    retryCount = 500 * xfersPrMsec;
    3578:	4b06      	ldr	r3, [pc, #24]	; (3594 <WaitReady+0x1c>)
/**************************************************************************//**
 * @brief Wait for micro SD card ready.
 * @return 0xff: micro SD card ready, other value: micro SD card not ready.
 *****************************************************************************/
static uint8_t WaitReady(void)
{
    357a:	b510      	push	{r4, lr}
uint8_t res;
uint32_t retryCount;

    /* Wait for ready in timeout of 500ms */
    retryCount = 500 * xfersPrMsec;
    357c:	681b      	ldr	r3, [r3, #0]
    357e:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
    3582:	435c      	muls	r4, r3
    do
	res = MICROSD_XferSpi(0xff);
    3584:	20ff      	movs	r0, #255	; 0xff
    3586:	f7ff ffe9 	bl	355c <MICROSD_XferSpi>
    while ((res != 0xFF) && --retryCount);
    358a:	28ff      	cmp	r0, #255	; 0xff
    358c:	d001      	beq.n	3592 <WaitReady+0x1a>
    358e:	3c01      	subs	r4, #1
    3590:	d1f8      	bne.n	3584 <WaitReady+0xc>

    return res;
}
    3592:	bd10      	pop	{r4, pc}
    3594:	20002594 	.word	0x20002594

00003598 <MICROSD_Deselect>:
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
    GPIO->P[ MICROSD_SPI_GPIO_PORT ].DOUTSET = 1 << MICROSD_SPI_CS_PIN; /* CS pin high. */
    3598:	4b02      	ldr	r3, [pc, #8]	; (35a4 <MICROSD_Deselect+0xc>)
    359a:	2220      	movs	r2, #32
    359c:	659a      	str	r2, [r3, #88]	; 0x58
    MICROSD_XferSpi(0xff);
    359e:	20ff      	movs	r0, #255	; 0xff
    35a0:	f7ff bfdc 	b.w	355c <MICROSD_XferSpi>
    35a4:	40006000 	.word	0x40006000

000035a8 <MICROSD_Select>:
/**************************************************************************//**
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
    35a8:	b508      	push	{r3, lr}
    GPIO->P[ MICROSD_SPI_GPIO_PORT ].DOUTCLR = 1 << MICROSD_SPI_CS_PIN; /* CS pin low. */
    35aa:	4b06      	ldr	r3, [pc, #24]	; (35c4 <MICROSD_Select+0x1c>)
    35ac:	2220      	movs	r2, #32
    35ae:	65da      	str	r2, [r3, #92]	; 0x5c
    if (WaitReady() != 0xFF)
    35b0:	f7ff ffe2 	bl	3578 <WaitReady>
    35b4:	28ff      	cmp	r0, #255	; 0xff
    35b6:	d003      	beq.n	35c0 <MICROSD_Select+0x18>
    {
	MICROSD_Deselect();
    35b8:	f7ff ffee 	bl	3598 <MICROSD_Deselect>
	return 0;
    35bc:	2000      	movs	r0, #0
    35be:	bd08      	pop	{r3, pc}
    }
    return 1;
    35c0:	2001      	movs	r0, #1
}
    35c2:	bd08      	pop	{r3, pc}
    35c4:	40006000 	.word	0x40006000

000035c8 <MICROSD_PowerOn>:
 * @brief Turn on micro SD card power.
 *****************************************************************************/
void MICROSD_PowerOn(void)
{
    /* Enable SD-Card power */
    SET_MICROSD_PWR_PIN;
    35c8:	4a16      	ldr	r2, [pc, #88]	; (3624 <MICROSD_PowerOn+0x5c>)

/**************************************************************************//**
 * @brief Turn on micro SD card power.
 *****************************************************************************/
void MICROSD_PowerOn(void)
{
    35ca:	b510      	push	{r4, lr}
    /* Enable SD-Card power */
    SET_MICROSD_PWR_PIN;
    35cc:	6812      	ldr	r2, [r2, #0]
    35ce:	2401      	movs	r4, #1
    35d0:	fa04 f202 	lsl.w	r2, r4, r2
    35d4:	4b14      	ldr	r3, [pc, #80]	; (3628 <MICROSD_PowerOn+0x60>)
    35d6:	2124      	movs	r1, #36	; 0x24
    35d8:	781b      	ldrb	r3, [r3, #0]

    /* Enable SPI clock */
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    35da:	4814      	ldr	r0, [pc, #80]	; (362c <MICROSD_PowerOn+0x64>)
 * @brief Turn on micro SD card power.
 *****************************************************************************/
void MICROSD_PowerOn(void)
{
    /* Enable SD-Card power */
    SET_MICROSD_PWR_PIN;
    35dc:	434b      	muls	r3, r1
    35de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    35e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    35e6:	611a      	str	r2, [r3, #16]

    /* Enable SPI clock */
    CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    35e8:	4621      	mov	r1, r4
    35ea:	f7fc ff9b 	bl	524 <CMU_ClockEnable>

    /* IO configuration of the SPI */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MOSI_PIN, gpioModePushPull, 0);
    35ee:	2002      	movs	r0, #2
    35f0:	4601      	mov	r1, r0
    35f2:	2204      	movs	r2, #4
    35f4:	2300      	movs	r3, #0
    35f6:	f7fd faa1 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MISO_PIN, gpioModeInputPull, 1);
    35fa:	2002      	movs	r0, #2
    35fc:	4602      	mov	r2, r0
    35fe:	4623      	mov	r3, r4
    3600:	2103      	movs	r1, #3
    3602:	f7fd fa9b 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CS_PIN,   gpioModePushPull, 1);
    3606:	4623      	mov	r3, r4
    3608:	2002      	movs	r0, #2
    360a:	2105      	movs	r1, #5
    360c:	2204      	movs	r2, #4
    360e:	f7fd fa95 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CLK_PIN,  gpioModePushPull, 0);
}
    3612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    /* IO configuration of the SPI */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MOSI_PIN, gpioModePushPull, 0);
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MISO_PIN, gpioModeInputPull, 1);
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CS_PIN,   gpioModePushPull, 1);
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CLK_PIN,  gpioModePushPull, 0);
    3616:	2104      	movs	r1, #4
    3618:	2002      	movs	r0, #2
    361a:	460a      	mov	r2, r1
    361c:	2300      	movs	r3, #0
    361e:	f7fd ba8d 	b.w	b3c <GPIO_PinModeSet>
    3622:	bf00      	nop
    3624:	20002590 	.word	0x20002590
    3628:	20000036 	.word	0x20000036
    362c:	00022200 	.word	0x00022200

00003630 <MICROSD_PowerOff>:

/**************************************************************************//**
 * @brief Turn off micro SD card power.
 *****************************************************************************/
void MICROSD_PowerOff(void)
{
    3630:	b508      	push	{r3, lr}
    /* Wait for micro SD card ready */
    MICROSD_Select();
    3632:	f7ff ffb9 	bl	35a8 <MICROSD_Select>
    MICROSD_Deselect();    /* Wait for micro SD card ready */
    3636:	f7ff ffaf 	bl	3598 <MICROSD_Deselect>
    MICROSD_Select();
    363a:	f7ff ffb5 	bl	35a8 <MICROSD_Select>
    MICROSD_Deselect();
    363e:	f7ff ffab 	bl	3598 <MICROSD_Deselect>

    /* Disable SPI clock */
    CMU_ClockEnable(MICROSD_CMUCLOCK, false);
    3642:	4814      	ldr	r0, [pc, #80]	; (3694 <MICROSD_PowerOff+0x64>)
    3644:	2100      	movs	r1, #0
    3646:	f7fc ff6d 	bl	524 <CMU_ClockEnable>

    /* Reset IO configuration - except the CD pin*/
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MOSI_PIN, gpioModeDisabled, 0);
    364a:	2002      	movs	r0, #2
    364c:	2200      	movs	r2, #0
    364e:	4601      	mov	r1, r0
    3650:	4613      	mov	r3, r2
    3652:	f7fd fa73 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_MISO_PIN, gpioModeDisabled, 0);
    3656:	2200      	movs	r2, #0
    3658:	4613      	mov	r3, r2
    365a:	2002      	movs	r0, #2
    365c:	2103      	movs	r1, #3
    365e:	f7fd fa6d 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CS_PIN,   gpioModeDisabled, 0);
    3662:	2200      	movs	r2, #0
    3664:	4613      	mov	r3, r2
    3666:	2002      	movs	r0, #2
    3668:	2105      	movs	r1, #5
    366a:	f7fd fa67 	bl	b3c <GPIO_PinModeSet>
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_SPI_CLK_PIN,  gpioModeDisabled, 0);
    366e:	2200      	movs	r2, #0
    3670:	4613      	mov	r3, r2
    3672:	2104      	movs	r1, #4
    3674:	2002      	movs	r0, #2
    3676:	f7fd fa61 	bl	b3c <GPIO_PinModeSet>

    /* Disable SD-Card power */
    CLR_MICROSD_PWR_PIN;
    367a:	4a07      	ldr	r2, [pc, #28]	; (3698 <MICROSD_PowerOff+0x68>)
    367c:	2101      	movs	r1, #1
    367e:	6812      	ldr	r2, [r2, #0]
    3680:	4b06      	ldr	r3, [pc, #24]	; (369c <MICROSD_PowerOff+0x6c>)
    3682:	fa01 f202 	lsl.w	r2, r1, r2
    3686:	781b      	ldrb	r3, [r3, #0]
    3688:	2124      	movs	r1, #36	; 0x24
    368a:	4359      	muls	r1, r3
    368c:	4b04      	ldr	r3, [pc, #16]	; (36a0 <MICROSD_PowerOff+0x70>)
    368e:	505a      	str	r2, [r3, r1]
    3690:	bd08      	pop	{r3, pc}
    3692:	bf00      	nop
    3694:	00022200 	.word	0x00022200
    3698:	20002590 	.word	0x20002590
    369c:	20000036 	.word	0x20000036
    36a0:	40006014 	.word	0x40006014

000036a4 <MICROSD_Deinit>:
 * @brief
 *  Deinitialize SPI peripheral.
 *  Turn off the SPI peripheral and disable SPI GPIO pins.
 *****************************************************************************/
void MICROSD_Deinit(void)
{
    36a4:	b508      	push	{r3, lr}
    MICROSD_PowerOff();
    36a6:	f7ff ffc3 	bl	3630 <MICROSD_PowerOff>

    USART_Reset(MICROSD_USART);
}
    36aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 *****************************************************************************/
void MICROSD_Deinit(void)
{
    MICROSD_PowerOff();

    USART_Reset(MICROSD_USART);
    36ae:	4801      	ldr	r0, [pc, #4]	; (36b4 <MICROSD_Deinit+0x10>)
    36b0:	f7fd bb60 	b.w	d74 <USART_Reset>
    36b4:	4000c800 	.word	0x4000c800

000036b8 <DiskCheck>:
 * 	This function may be called from standard program, usually the loop
 * 	in module "main.c" - it must not be called from interrupt routines!
 *
 ******************************************************************************/
bool	 DiskCheck (void)
{
    36b8:	b570      	push	{r4, r5, r6, lr}
bool	 state = false;


    /* Enable Card Detect (CD) Pin with Pull-Up */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_CD_PULLUP_PIN,
    36ba:	210c      	movs	r1, #12
    36bc:	2204      	movs	r2, #4
    36be:	2301      	movs	r3, #1
    36c0:	2002      	movs	r0, #2
    36c2:	f7fd fa3b 	bl	b3c <GPIO_PinModeSet>
                    gpioModePushPull, 1);

    /* Save current state for next time */
    l_PrevDiskState = l_DiskState;
    36c6:	4c33      	ldr	r4, [pc, #204]	; (3794 <DiskCheck+0xdc>)

    /* Always check for card removal */
    if (! IS_DISK_PRESENT)
    36c8:	4a33      	ldr	r2, [pc, #204]	; (3798 <DiskCheck+0xe0>)
    /* Enable Card Detect (CD) Pin with Pull-Up */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_CD_PULLUP_PIN,
                    gpioModePushPull, 1);

    /* Save current state for next time */
    l_PrevDiskState = l_DiskState;
    36ca:	7823      	ldrb	r3, [r4, #0]
    36cc:	4e33      	ldr	r6, [pc, #204]	; (379c <DiskCheck+0xe4>)

    /* Always check for card removal */
    if (! IS_DISK_PRESENT)
    36ce:	6811      	ldr	r1, [r2, #0]
    /* Enable Card Detect (CD) Pin with Pull-Up */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_CD_PULLUP_PIN,
                    gpioModePushPull, 1);

    /* Save current state for next time */
    l_PrevDiskState = l_DiskState;
    36d0:	7033      	strb	r3, [r6, #0]
    36d2:	4615      	mov	r5, r2

    /* Always check for card removal */
    if (! IS_DISK_PRESENT)
    36d4:	b109      	cbz	r1, 36da <DiskCheck+0x22>
    {
	l_DiskState = DS_REMOVED;
    36d6:	2202      	movs	r2, #2
    36d8:	7022      	strb	r2, [r4, #0]
    }

    /*
     * Proceed the current Disk State
     */
    switch (l_DiskState)
    36da:	7822      	ldrb	r2, [r4, #0]
    36dc:	2a05      	cmp	r2, #5
    36de:	d841      	bhi.n	3764 <DiskCheck+0xac>
    36e0:	e8df f002 	tbb	[pc, r2]
    36e4:	27031511 	.word	0x27031511
    36e8:	3e3e      	.short	0x3e3e
    {
	case DS_REMOVED:	// SD-Card has been removed
	    /* Check if state is new or unchanged */
	    if (l_DiskState != l_PrevDiskState)
    36ea:	2b02      	cmp	r3, #2
    36ec:	d00b      	beq.n	3706 <DiskCheck+0x4e>
	    {
		/* State is new, the SD-Card interface must be shut down */
		Log ("SD-Card Removed");
    36ee:	482c      	ldr	r0, [pc, #176]	; (37a0 <DiskCheck+0xe8>)
    36f0:	f7ff fd78 	bl	31e4 <Log>

		/* Invalidate current File System */
		l_FatFS.fs_type = 0;
    36f4:	2000      	movs	r0, #0
    36f6:	4b2b      	ldr	r3, [pc, #172]	; (37a4 <DiskCheck+0xec>)
		disk_ioctl(0, CTRL_INVALIDATE, NULL);
    36f8:	2108      	movs	r1, #8
    36fa:	4602      	mov	r2, r0
	    {
		/* State is new, the SD-Card interface must be shut down */
		Log ("SD-Card Removed");

		/* Invalidate current File System */
		l_FatFS.fs_type = 0;
    36fc:	7018      	strb	r0, [r3, #0]
		disk_ioctl(0, CTRL_INVALIDATE, NULL);
    36fe:	f7fd fd51 	bl	11a4 <disk_ioctl>

		/* Shut Down and Power Off the SD-Card */
		MICROSD_Deinit();
    3702:	f7ff ffcf 	bl	36a4 <MICROSD_Deinit>
	    }
	    /* no break */

	case DS_UNKNOWN:	// Unknown state after power-up or reset
	    /* Check for card insertion */
	    if (IS_DISK_PRESENT)
    3706:	682b      	ldr	r3, [r5, #0]
    3708:	bb53      	cbnz	r3, 3760 <DiskCheck+0xa8>
	    {
		l_DiskState = DS_INSERTED;
    370a:	2301      	movs	r3, #1
    370c:	7023      	strb	r3, [r4, #0]
	    }
	    /* no break */

	case DS_INSERTED:	// SD-Card has been inserted
	    /* Check if state is new or unchanged */
	    if (l_DiskState != l_PrevDiskState)
    370e:	7822      	ldrb	r2, [r4, #0]
    3710:	7833      	ldrb	r3, [r6, #0]
    3712:	429a      	cmp	r2, r3
    3714:	d004      	beq.n	3720 <DiskCheck+0x68>
	    {
		/* State is new, the SD-Card interface must be set up */
		Log ("SD-Card Inserted");
    3716:	4824      	ldr	r0, [pc, #144]	; (37a8 <DiskCheck+0xf0>)
    3718:	f7ff fd64 	bl	31e4 <Log>
		MICROSD_Init();
    371c:	f7ff fec4 	bl	34a8 <MICROSD_Init>
	    }
	    /* SD-Card is present, try to initialize it */
	    if (disk_initialize(0) == 0)
    3720:	2000      	movs	r0, #0
    3722:	f7fd fc09 	bl	f38 <disk_initialize>
    3726:	b9d8      	cbnz	r0, 3760 <DiskCheck+0xa8>
	    {
		l_DiskState = DS_INITIALIZED;
    3728:	2303      	movs	r3, #3
		Log ("SD-Card Initialized");
    372a:	4820      	ldr	r0, [pc, #128]	; (37ac <DiskCheck+0xf4>)
		MICROSD_Init();
	    }
	    /* SD-Card is present, try to initialize it */
	    if (disk_initialize(0) == 0)
	    {
		l_DiskState = DS_INITIALIZED;
    372c:	7023      	strb	r3, [r4, #0]
		Log ("SD-Card Initialized");
    372e:	f7ff fd59 	bl	31e4 <Log>
	    }
	    /* no break */

	case DS_INITIALIZED:	// The SD-Card is initialized
	    /* Try mounting the File System on the SD-Card */
	    if (f_mount(0, &l_FatFS) == FR_OK)
    3732:	2000      	movs	r0, #0
    3734:	491b      	ldr	r1, [pc, #108]	; (37a4 <DiskCheck+0xec>)
    3736:	f7fe fc5b 	bl	1ff0 <f_mount>
    373a:	b960      	cbnz	r0, 3756 <DiskCheck+0x9e>
	    {
	    uint32_t	sizeMB;

		l_DiskState = DS_MOUNTED;
    373c:	2304      	movs	r3, #4
		Log ("SD-Card File System mounted");
    373e:	481c      	ldr	r0, [pc, #112]	; (37b0 <DiskCheck+0xf8>)
	    /* Try mounting the File System on the SD-Card */
	    if (f_mount(0, &l_FatFS) == FR_OK)
	    {
	    uint32_t	sizeMB;

		l_DiskState = DS_MOUNTED;
    3740:	7023      	strb	r3, [r4, #0]
		Log ("SD-Card File System mounted");
    3742:	f7ff fd4f 	bl	31e4 <Log>
		state = true;	// Inform caller about the new mount

		/* Log Disk Size and display it on the LCD */
		sizeMB = DiskSize();
    3746:	f7ff fe19 	bl	337c <DiskSize>
		if (sizeMB > 0)
    374a:	4601      	mov	r1, r0
    374c:	b188      	cbz	r0, 3772 <DiskCheck+0xba>
		{
		    Log ("SD-Card %ldMB free", sizeMB);
    374e:	4819      	ldr	r0, [pc, #100]	; (37b4 <DiskCheck+0xfc>)
    3750:	f7ff fd48 	bl	31e4 <Log>
    3754:	e00d      	b.n	3772 <DiskCheck+0xba>
		}
	    }
	    else
	    {
		l_DiskState = DS_MOUNT_FAILED;
    3756:	2305      	movs	r3, #5
		LogError ("SD-Card Mount Failed");
    3758:	4817      	ldr	r0, [pc, #92]	; (37b8 <DiskCheck+0x100>)
		    Log ("SD-Card %ldMB free", sizeMB);
		}
	    }
	    else
	    {
		l_DiskState = DS_MOUNT_FAILED;
    375a:	7023      	strb	r3, [r4, #0]
		LogError ("SD-Card Mount Failed");
    375c:	f7ff fd56 	bl	320c <LogError>
 * 	in module "main.c" - it must not be called from interrupt routines!
 *
 ******************************************************************************/
bool	 DiskCheck (void)
{
bool	 state = false;
    3760:	2500      	movs	r5, #0
    3762:	e007      	b.n	3774 <DiskCheck+0xbc>
	case DS_MOUNT_FAILED:	// Mounting the File System failed
	    /* Remain in this state until card removal */
	    break;

	default:		// Invalid state code
	    EFM_ASSERT(false);
    3764:	4815      	ldr	r0, [pc, #84]	; (37bc <DiskCheck+0x104>)
    3766:	21f4      	movs	r1, #244	; 0xf4
	    l_DiskState = DS_UNKNOWN;	// try to recover
    3768:	2500      	movs	r5, #0
	case DS_MOUNT_FAILED:	// Mounting the File System failed
	    /* Remain in this state until card removal */
	    break;

	default:		// Invalid state code
	    EFM_ASSERT(false);
    376a:	f7fc fda1 	bl	2b0 <assertEFM>
	    l_DiskState = DS_UNKNOWN;	// try to recover
    376e:	7025      	strb	r5, [r4, #0]
    3770:	e000      	b.n	3774 <DiskCheck+0xbc>
	    {
	    uint32_t	sizeMB;

		l_DiskState = DS_MOUNTED;
		Log ("SD-Card File System mounted");
		state = true;	// Inform caller about the new mount
    3772:	2501      	movs	r5, #1
	    EFM_ASSERT(false);
	    l_DiskState = DS_UNKNOWN;	// try to recover
    }

    /* See if Disk State has changed */
    if (l_DiskState != l_PrevDiskState)
    3774:	7822      	ldrb	r2, [r4, #0]
    3776:	7833      	ldrb	r3, [r6, #0]
    3778:	429a      	cmp	r2, r3
    377a:	d002      	beq.n	3782 <DiskCheck+0xca>
	g_flgIRQ = true;		// immediately process the new state
    377c:	4b10      	ldr	r3, [pc, #64]	; (37c0 <DiskCheck+0x108>)
    377e:	2201      	movs	r2, #1
    3780:	701a      	strb	r2, [r3, #0]

    /* Disable Card Detect (CD) Pin again */
    GPIO_PinModeSet(MICROSD_SPI_GPIO_PORT, MICROSD_CD_PULLUP_PIN,
    3782:	2200      	movs	r2, #0
    3784:	2002      	movs	r0, #2
    3786:	210c      	movs	r1, #12
    3788:	4613      	mov	r3, r2
    378a:	f7fd f9d7 	bl	b3c <GPIO_PinModeSet>
                    gpioModeDisabled, 0);

    return state;
}
    378e:	4628      	mov	r0, r5
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	bf00      	nop
    3794:	20002598 	.word	0x20002598
    3798:	420c0c98 	.word	0x420c0c98
    379c:	200027d4 	.word	0x200027d4
    37a0:	0000676d 	.word	0x0000676d
    37a4:	200025a0 	.word	0x200025a0
    37a8:	0000677d 	.word	0x0000677d
    37ac:	0000678e 	.word	0x0000678e
    37b0:	000067a2 	.word	0x000067a2
    37b4:	000067be 	.word	0x000067be
    37b8:	000067d1 	.word	0x000067d1
    37bc:	00006758 	.word	0x00006758
    37c0:	20002a00 	.word	0x20002a00

000037c4 <MICROSD_BlockRx>:
 *  Byte count (must be multiple of 4).
 * @return
 *  1:OK, 0:Failed.
 *****************************************************************************/
int MICROSD_BlockRx(uint8_t *buff, uint32_t btr)
{
    37c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
uint16_t val;
uint32_t retryCount, framectrl, ctrl;


    /* Wait for data packet in timeout of 100ms */
    retryCount = 100 * xfersPrMsec;
    37c6:	4b25      	ldr	r3, [pc, #148]	; (385c <MICROSD_BlockRx+0x98>)
    37c8:	2464      	movs	r4, #100	; 0x64
    37ca:	681b      	ldr	r3, [r3, #0]
 *  Byte count (must be multiple of 4).
 * @return
 *  1:OK, 0:Failed.
 *****************************************************************************/
int MICROSD_BlockRx(uint8_t *buff, uint32_t btr)
{
    37cc:	4606      	mov	r6, r0
uint16_t val;
uint32_t retryCount, framectrl, ctrl;


    /* Wait for data packet in timeout of 100ms */
    retryCount = 100 * xfersPrMsec;
    37ce:	435c      	muls	r4, r3
 *  Byte count (must be multiple of 4).
 * @return
 *  1:OK, 0:Failed.
 *****************************************************************************/
int MICROSD_BlockRx(uint8_t *buff, uint32_t btr)
{
    37d0:	460d      	mov	r5, r1

    /* Wait for data packet in timeout of 100ms */
    retryCount = 100 * xfersPrMsec;
    do
    {
	token = MICROSD_XferSpi(0xff);
    37d2:	20ff      	movs	r0, #255	; 0xff
    37d4:	f7ff fec2 	bl	355c <MICROSD_XferSpi>
    } while ((token == 0xFF) && --retryCount);
    37d8:	28ff      	cmp	r0, #255	; 0xff
    37da:	d102      	bne.n	37e2 <MICROSD_BlockRx+0x1e>
    37dc:	3c01      	subs	r4, #1
    37de:	d1f8      	bne.n	37d2 <MICROSD_BlockRx+0xe>
    37e0:	e039      	b.n	3856 <MICROSD_BlockRx+0x92>

    if (token != 0xFE)
    37e2:	28fe      	cmp	r0, #254	; 0xfe
    37e4:	d137      	bne.n	3856 <MICROSD_BlockRx+0x92>
	/* Invalid data token */
	return 0;
    }

    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    37e6:	4b1e      	ldr	r3, [pc, #120]	; (3860 <MICROSD_BlockRx+0x9c>)
    MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;

    /* Clear send and receive buffers. */
    MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;

    if ( timeOut >= btr + 2 )
    37e8:	1caf      	adds	r7, r5, #2
	/* Invalid data token */
	return 0;
    }

    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    37ea:	685c      	ldr	r4, [r3, #4]
    ctrl      = MICROSD_USART->CTRL;
    37ec:	6818      	ldr	r0, [r3, #0]

    /* Set frame length to 16 bit. This will increase the effective data rate. */
    MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    37ee:	685a      	ldr	r2, [r3, #4]
    37f0:	f022 020f 	bic.w	r2, r2, #15
			 | USART_FRAME_DATABITS_SIXTEEN;
    37f4:	f042 020d 	orr.w	r2, r2, #13
    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    ctrl      = MICROSD_USART->CTRL;

    /* Set frame length to 16 bit. This will increase the effective data rate. */
    MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    37f8:	605a      	str	r2, [r3, #4]
			 | USART_FRAME_DATABITS_SIXTEEN;
    MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    37fa:	681a      	ldr	r2, [r3, #0]
    37fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3800:	601a      	str	r2, [r3, #0]

    /* Clear send and receive buffers. */
    MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    3802:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    3806:	60da      	str	r2, [r3, #12]

    if ( timeOut >= btr + 2 )
    3808:	4a16      	ldr	r2, [pc, #88]	; (3864 <MICROSD_BlockRx+0xa0>)
    380a:	6811      	ldr	r1, [r2, #0]
    380c:	42b9      	cmp	r1, r7
    {
	timeOut -= btr + 2;
    380e:	bf26      	itte	cs
    3810:	3902      	subcs	r1, #2
    3812:	ebc5 0101 	rsbcs	r1, r5, r1
    }
    else
    {
	timeOut = 0;
    3816:	2100      	movcc	r1, #0
    3818:	6011      	str	r1, [r2, #0]
    }

    /* Pipelining - The USART has two buffers of 16 bit in both
    * directions. Make sure that at least one is in the pipe at all
    * times to maximize throughput. */
    MICROSD_USART->TXDOUBLE = 0xffff;
    381a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    381e:	63da      	str	r2, [r3, #60]	; 0x3c
    3820:	2300      	movs	r3, #0
    do
    {
	MICROSD_USART->TXDOUBLE = 0xffff;
    3822:	4a0f      	ldr	r2, [pc, #60]	; (3860 <MICROSD_BlockRx+0x9c>)
    3824:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3828:	63d1      	str	r1, [r2, #60]	; 0x3c

	while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV))
    382a:	6911      	ldr	r1, [r2, #16]
    382c:	0609      	lsls	r1, r1, #24
    382e:	d5fc      	bpl.n	382a <MICROSD_BlockRx+0x66>
	    ;

	val = MICROSD_USART->RXDOUBLE;
    3830:	4a0b      	ldr	r2, [pc, #44]	; (3860 <MICROSD_BlockRx+0x9c>)
    3832:	18f1      	adds	r1, r6, r3
    3834:	6a52      	ldr	r2, [r2, #36]	; 0x24
	*buff++ = val;
    3836:	54f2      	strb	r2, [r6, r3]
    3838:	3302      	adds	r3, #2
	*buff++ = val >> 8;
    383a:	f3c2 2207 	ubfx	r2, r2, #8, #8

	btr -= 2;
    } while (btr);
    383e:	429d      	cmp	r5, r3
	while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV))
	    ;

	val = MICROSD_USART->RXDOUBLE;
	*buff++ = val;
	*buff++ = val >> 8;
    3840:	704a      	strb	r2, [r1, #1]

	btr -= 2;
    } while (btr);
    3842:	d1ee      	bne.n	3822 <MICROSD_BlockRx+0x5e>

    /* Next two bytes is the CRC which we discard. */
    while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV));
    3844:	4b06      	ldr	r3, [pc, #24]	; (3860 <MICROSD_BlockRx+0x9c>)
    3846:	691a      	ldr	r2, [r3, #16]
    3848:	0612      	lsls	r2, r2, #24
    384a:	d5fb      	bpl.n	3844 <MICROSD_BlockRx+0x80>
    MICROSD_USART->RXDOUBLE;
    384c:	6a5a      	ldr	r2, [r3, #36]	; 0x24

    /* Restore old settings. */
    MICROSD_USART->FRAME = framectrl;
    384e:	605c      	str	r4, [r3, #4]
    MICROSD_USART->CTRL  = ctrl;
    3850:	6018      	str	r0, [r3, #0]

    return 1;     /* Return with success */
    3852:	2001      	movs	r0, #1
    3854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } while ((token == 0xFF) && --retryCount);

    if (token != 0xFE)
    {
	/* Invalid data token */
	return 0;
    3856:	2000      	movs	r0, #0
    /* Restore old settings. */
    MICROSD_USART->FRAME = framectrl;
    MICROSD_USART->CTRL  = ctrl;

    return 1;     /* Return with success */
}
    3858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    385a:	bf00      	nop
    385c:	20002594 	.word	0x20002594
    3860:	4000c800 	.word	0x4000c800
    3864:	2000259c 	.word	0x2000259c

00003868 <MICROSD_BlockTx>:
 * @param token Data token.
 * @return 1:OK, 0:Failed.
 *****************************************************************************/
#if _READONLY == 0
int MICROSD_BlockTx(const uint8_t *buff, uint8_t token)
{
    3868:	b570      	push	{r4, r5, r6, lr}
    386a:	4604      	mov	r4, r0
    386c:	460d      	mov	r5, r1
uint16_t val;
uint32_t bc = 512;
uint32_t framectrl, ctrl;


    if (WaitReady() != 0xFF)
    386e:	f7ff fe83 	bl	3578 <WaitReady>
    3872:	28ff      	cmp	r0, #255	; 0xff
    3874:	d146      	bne.n	3904 <MICROSD_BlockTx+0x9c>
    {
	return 0;
    }

    MICROSD_XferSpi(token);         /* Xmit a token */
    3876:	4628      	mov	r0, r5
    3878:	f7ff fe70 	bl	355c <MICROSD_XferSpi>

    if (token == 0xFD)
    387c:	2dfd      	cmp	r5, #253	; 0xfd
    387e:	d043      	beq.n	3908 <MICROSD_BlockTx+0xa0>
	/* StopTran token */
	return 1;
    }

    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    3880:	4b22      	ldr	r3, [pc, #136]	; (390c <MICROSD_BlockTx+0xa4>)
    MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;

    /* Clear send and receive buffers. */
    MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;

    if ( timeOut >= bc + 2 )
    3882:	f240 2501 	movw	r5, #513	; 0x201
	/* StopTran token */
	return 1;
    }

    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    3886:	6858      	ldr	r0, [r3, #4]
    ctrl      = MICROSD_USART->CTRL;
    3888:	6819      	ldr	r1, [r3, #0]

    /* Set frame length to 16 bit. This will increase the effective data rate. */
    MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    388a:	685a      	ldr	r2, [r3, #4]
    388c:	f022 020f 	bic.w	r2, r2, #15
			 | USART_FRAME_DATABITS_SIXTEEN;
    3890:	f042 020d 	orr.w	r2, r2, #13
    /* Save current configuration. */
    framectrl = MICROSD_USART->FRAME;
    ctrl      = MICROSD_USART->CTRL;

    /* Set frame length to 16 bit. This will increase the effective data rate. */
    MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    3894:	605a      	str	r2, [r3, #4]
			 | USART_FRAME_DATABITS_SIXTEEN;
    MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    3896:	681a      	ldr	r2, [r3, #0]
    3898:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    389c:	601a      	str	r2, [r3, #0]

    /* Clear send and receive buffers. */
    MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    389e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    38a2:	60da      	str	r2, [r3, #12]

    if ( timeOut >= bc + 2 )
    38a4:	4b1a      	ldr	r3, [pc, #104]	; (3910 <MICROSD_BlockTx+0xa8>)
    38a6:	681a      	ldr	r2, [r3, #0]
    38a8:	42aa      	cmp	r2, r5
    {
	timeOut -= bc + 2;
    38aa:	bf8c      	ite	hi
    38ac:	f2a2 2202 	subwhi	r2, r2, #514	; 0x202
    }
    else
    {
	timeOut = 0;
    38b0:	2200      	movls	r2, #0
    38b2:	601a      	str	r2, [r3, #0]
 * @param token Data token.
 * @return 1:OK, 0:Failed.
 *****************************************************************************/
#if _READONLY == 0
int MICROSD_BlockTx(const uint8_t *buff, uint8_t token)
{
    38b4:	2300      	movs	r3, #0
    38b6:	18e2      	adds	r2, r4, r3

    do
    {
	/* Transmit a 512 byte data block to the SD-Card. */
	val  = *buff++;
	val |= *buff++ << 8;
    38b8:	7855      	ldrb	r5, [r2, #1]
    38ba:	5ce2      	ldrb	r2, [r4, r3]
    38bc:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	bc  -= 2;

	while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL))
    38c0:	4a12      	ldr	r2, [pc, #72]	; (390c <MICROSD_BlockTx+0xa4>)
    38c2:	6916      	ldr	r6, [r2, #16]
    38c4:	0676      	lsls	r6, r6, #25
    38c6:	d5fb      	bpl.n	38c0 <MICROSD_BlockTx+0x58>
    38c8:	3302      	adds	r3, #2
	    ;

	MICROSD_USART->TXDOUBLE = val;
    } while (bc);
    38ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	bc  -= 2;

	while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL))
	    ;

	MICROSD_USART->TXDOUBLE = val;
    38ce:	63d5      	str	r5, [r2, #60]	; 0x3c
    } while (bc);
    38d0:	d1f1      	bne.n	38b6 <MICROSD_BlockTx+0x4e>

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL));
    38d2:	6913      	ldr	r3, [r2, #16]
    38d4:	065c      	lsls	r4, r3, #25
    38d6:	d5fc      	bpl.n	38d2 <MICROSD_BlockTx+0x6a>

    /* Transmit two dummy CRC bytes. */
    MICROSD_USART->TXDOUBLE = 0xFFFF;
    38d8:	4b0c      	ldr	r3, [pc, #48]	; (390c <MICROSD_BlockTx+0xa4>)
    38da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    38de:	63da      	str	r2, [r3, #60]	; 0x3c

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXC));
    38e0:	4b0a      	ldr	r3, [pc, #40]	; (390c <MICROSD_BlockTx+0xa4>)
    38e2:	691a      	ldr	r2, [r3, #16]
    38e4:	0692      	lsls	r2, r2, #26
    38e6:	d5fb      	bpl.n	38e0 <MICROSD_BlockTx+0x78>

    /* Clear send and receive buffers. */
    MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    38e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    38ec:	60da      	str	r2, [r3, #12]

    /* Restore old settings. */
    MICROSD_USART->FRAME = framectrl;
    38ee:	6058      	str	r0, [r3, #4]
    MICROSD_USART->CTRL  = ctrl;
    38f0:	6019      	str	r1, [r3, #0]

    resp = MICROSD_XferSpi(0xff); /* Receive a data response */
    38f2:	20ff      	movs	r0, #255	; 0xff
    38f4:	f7ff fe32 	bl	355c <MICROSD_XferSpi>

    if ((resp & 0x1F) != 0x05)    /* If not accepted, return with error */
    38f8:	f000 001f 	and.w	r0, r0, #31
    38fc:	1f43      	subs	r3, r0, #5
    38fe:	4258      	negs	r0, r3
    3900:	4158      	adcs	r0, r3
    3902:	bd70      	pop	{r4, r5, r6, pc}
uint32_t framectrl, ctrl;


    if (WaitReady() != 0xFF)
    {
	return 0;
    3904:	2000      	movs	r0, #0
    3906:	bd70      	pop	{r4, r5, r6, pc}
    MICROSD_XferSpi(token);         /* Xmit a token */

    if (token == 0xFD)
    {
	/* StopTran token */
	return 1;
    3908:	2001      	movs	r0, #1
    {
	return 0;
    }

    return 1;
}
    390a:	bd70      	pop	{r4, r5, r6, pc}
    390c:	4000c800 	.word	0x4000c800
    3910:	2000259c 	.word	0x2000259c

00003914 <MICROSD_SendCmd>:
{
uint8_t  n, res;
uint32_t retryCount;


    if (cmd & 0x80)
    3914:	0602      	lsls	r2, r0, #24
 *  Argument.
 * @return
 *  Response value.
 *****************************************************************************/
uint8_t MICROSD_SendCmd(uint8_t cmd, DWORD arg)
{
    3916:	b538      	push	{r3, r4, r5, lr}
    3918:	4604      	mov	r4, r0
    391a:	460d      	mov	r5, r1
uint8_t  n, res;
uint32_t retryCount;


    if (cmd & 0x80)
    391c:	d507      	bpl.n	392e <MICROSD_SendCmd+0x1a>
    {
	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
	cmd &= 0x7F;
	res  = MICROSD_SendCmd(CMD55, 0);
    391e:	2037      	movs	r0, #55	; 0x37
    3920:	2100      	movs	r1, #0
    3922:	f7ff fff7 	bl	3914 <MICROSD_SendCmd>
	if (res > 1)
    3926:	2801      	cmp	r0, #1
    3928:	d830      	bhi.n	398c <MICROSD_SendCmd+0x78>


    if (cmd & 0x80)
    {
	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
	cmd &= 0x7F;
    392a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	    return res;
	}
    }

    /* Select the card and wait for ready */
    MICROSD_Deselect();
    392e:	f7ff fe33 	bl	3598 <MICROSD_Deselect>
    if (!MICROSD_Select())
    3932:	f7ff fe39 	bl	35a8 <MICROSD_Select>
    3936:	b340      	cbz	r0, 398a <MICROSD_SendCmd+0x76>
    {
	return 0xFF;
    }

    /* Send command packet */
    MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
    3938:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    393c:	f7ff fe0e 	bl	355c <MICROSD_XferSpi>
    MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
    3940:	0e28      	lsrs	r0, r5, #24
    3942:	f7ff fe0b 	bl	355c <MICROSD_XferSpi>
    MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
    3946:	f3c5 4007 	ubfx	r0, r5, #16, #8
    394a:	f7ff fe07 	bl	355c <MICROSD_XferSpi>
    MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
    394e:	f3c5 2007 	ubfx	r0, r5, #8, #8
    3952:	f7ff fe03 	bl	355c <MICROSD_XferSpi>
    MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
    3956:	b2e8      	uxtb	r0, r5
    3958:	f7ff fe00 	bl	355c <MICROSD_XferSpi>
    n = 0x01;                               /* Dummy CRC + Stop */
    if (cmd == CMD0)
    395c:	b124      	cbz	r4, 3968 <MICROSD_SendCmd+0x54>
    MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
    MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
    MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
    MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
    MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
    n = 0x01;                               /* Dummy CRC + Stop */
    395e:	2c08      	cmp	r4, #8
    3960:	bf0c      	ite	eq
    3962:	2087      	moveq	r0, #135	; 0x87
    3964:	2001      	movne	r0, #1
    3966:	e000      	b.n	396a <MICROSD_SendCmd+0x56>
    if (cmd == CMD0)
    {
	n = 0x95;                             /* Valid CRC for CMD0(0) */
    3968:	2095      	movs	r0, #149	; 0x95
    }
    if (cmd == CMD8)
    {
	n = 0x87;                             /* Valid CRC for CMD8(0x1AA) */
    }
    MICROSD_XferSpi(n);
    396a:	f7ff fdf7 	bl	355c <MICROSD_XferSpi>

    /* Receive command response */
    if (cmd == CMD12)
    396e:	2c0c      	cmp	r4, #12
    3970:	d102      	bne.n	3978 <MICROSD_SendCmd+0x64>
    {
	MICROSD_XferSpi(0xff);                /* Skip a stuff byte when stop reading */
    3972:	20ff      	movs	r0, #255	; 0xff
    3974:	f7ff fdf2 	bl	355c <MICROSD_XferSpi>
    {
	n = 0x95;                             /* Valid CRC for CMD0(0) */
    }
    if (cmd == CMD8)
    {
	n = 0x87;                             /* Valid CRC for CMD8(0x1AA) */
    3978:	240a      	movs	r4, #10
	MICROSD_XferSpi(0xff);                /* Skip a stuff byte when stop reading */
    }
    retryCount = 10;                        /* Wait for a valid response in timeout of 10 attempts */
    do
    {
	res = MICROSD_XferSpi(0xff);
    397a:	20ff      	movs	r0, #255	; 0xff
    397c:	f7ff fdee 	bl	355c <MICROSD_XferSpi>
    } while ((res & 0x80) && --retryCount);
    3980:	0603      	lsls	r3, r0, #24
    3982:	d503      	bpl.n	398c <MICROSD_SendCmd+0x78>
    3984:	3c01      	subs	r4, #1
    3986:	d1f8      	bne.n	397a <MICROSD_SendCmd+0x66>
    3988:	bd38      	pop	{r3, r4, r5, pc}

    /* Select the card and wait for ready */
    MICROSD_Deselect();
    if (!MICROSD_Select())
    {
	return 0xFF;
    398a:	20ff      	movs	r0, #255	; 0xff
    {
	res = MICROSD_XferSpi(0xff);
    } while ((res & 0x80) && --retryCount);

    return res;             /* Return with the response value */
}
    398c:	bd38      	pop	{r3, r4, r5, pc}
	...

00003990 <MICROSD_SpiClkSlow>:
/**************************************************************************//**
 * @brief Set SPI clock to a low frequency suitable for initial
 *        card initialization.
 *****************************************************************************/
void MICROSD_SpiClkSlow(void)
{
    3990:	b508      	push	{r3, lr}
    USART_BaudrateSyncSet(MICROSD_USART, 0, MICROSD_LO_SPI_FREQ);
    3992:	4a04      	ldr	r2, [pc, #16]	; (39a4 <MICROSD_SpiClkSlow+0x14>)
    3994:	4804      	ldr	r0, [pc, #16]	; (39a8 <MICROSD_SpiClkSlow+0x18>)
    3996:	2100      	movs	r1, #0
    3998:	f7fd f9c0 	bl	d1c <USART_BaudrateSyncSet>
    xfersPrMsec = MICROSD_LO_SPI_FREQ / 8000;
    399c:	4b03      	ldr	r3, [pc, #12]	; (39ac <MICROSD_SpiClkSlow+0x1c>)
    399e:	220c      	movs	r2, #12
    39a0:	601a      	str	r2, [r3, #0]
    39a2:	bd08      	pop	{r3, pc}
    39a4:	000186a0 	.word	0x000186a0
    39a8:	4000c800 	.word	0x4000c800
    39ac:	20002594 	.word	0x20002594

000039b0 <MICROSD_SpiClkFast>:

/**************************************************************************//**
 * @brief Set SPI clock to maximum frequency.
 *****************************************************************************/
void MICROSD_SpiClkFast(void)
{
    39b0:	b508      	push	{r3, lr}
    USART_BaudrateSyncSet(MICROSD_USART, 0, MICROSD_HI_SPI_FREQ);
    39b2:	4a05      	ldr	r2, [pc, #20]	; (39c8 <MICROSD_SpiClkFast+0x18>)
    39b4:	4805      	ldr	r0, [pc, #20]	; (39cc <MICROSD_SpiClkFast+0x1c>)
    39b6:	2100      	movs	r1, #0
    39b8:	f7fd f9b0 	bl	d1c <USART_BaudrateSyncSet>
    xfersPrMsec = MICROSD_HI_SPI_FREQ / 8000;
    39bc:	4b04      	ldr	r3, [pc, #16]	; (39d0 <MICROSD_SpiClkFast+0x20>)
    39be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39c2:	601a      	str	r2, [r3, #0]
    39c4:	bd08      	pop	{r3, pc}
    39c6:	bf00      	nop
    39c8:	007a1200 	.word	0x007a1200
    39cc:	4000c800 	.word	0x4000c800
    39d0:	20002594 	.word	0x20002594

000039d4 <MICROSD_TimeOutSet>:
 * @param[in] msec
 *  Millisecond timeout value (very approximate).
 *****************************************************************************/
void MICROSD_TimeOutSet(uint32_t msec)
{
    timeOut = xfersPrMsec * msec;
    39d4:	4b02      	ldr	r3, [pc, #8]	; (39e0 <MICROSD_TimeOutSet+0xc>)
    39d6:	4a03      	ldr	r2, [pc, #12]	; (39e4 <MICROSD_TimeOutSet+0x10>)
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	4358      	muls	r0, r3
    39dc:	6010      	str	r0, [r2, #0]
    39de:	4770      	bx	lr
    39e0:	20002594 	.word	0x20002594
    39e4:	2000259c 	.word	0x2000259c

000039e8 <MICROSD_TimeOutElapsed>:
 * @return
 *  True if timeout has elapsed.
 *****************************************************************************/
bool MICROSD_TimeOutElapsed(void)
{
    return timeOut == 0;
    39e8:	4b03      	ldr	r3, [pc, #12]	; (39f8 <MICROSD_TimeOutElapsed+0x10>)
    39ea:	6818      	ldr	r0, [r3, #0]
}
    39ec:	f1d0 0001 	rsbs	r0, r0, #1
    39f0:	bf38      	it	cc
    39f2:	2000      	movcc	r0, #0
    39f4:	4770      	bx	lr
    39f6:	bf00      	nop
    39f8:	2000259c 	.word	0x2000259c

000039fc <get_fattime>:
 *    A DWORD containing the current time and date as a packed data structure.
 ******************************************************************************/
DWORD get_fattime(void)
{
    return 0;
}
    39fc:	2000      	movs	r0, #0
    39fe:	4770      	bx	lr

00003a00 <Reset_Handler>:
    3a00:	4807      	ldr	r0, [pc, #28]	; (3a20 <.flash_to_ram_loop_end+0x6>)
    3a02:	4780      	blx	r0
    3a04:	4907      	ldr	r1, [pc, #28]	; (3a24 <.flash_to_ram_loop_end+0xa>)
    3a06:	4a08      	ldr	r2, [pc, #32]	; (3a28 <.flash_to_ram_loop_end+0xe>)
    3a08:	4b08      	ldr	r3, [pc, #32]	; (3a2c <.flash_to_ram_loop_end+0x12>)
    3a0a:	1a9b      	subs	r3, r3, r2
    3a0c:	f340 8005 	ble.w	3a1a <.flash_to_ram_loop_end>

00003a10 <.flash_to_ram_loop>:
    3a10:	3b04      	subs	r3, #4
    3a12:	58c8      	ldr	r0, [r1, r3]
    3a14:	50d0      	str	r0, [r2, r3]
    3a16:	f73f affb 	bgt.w	3a10 <.flash_to_ram_loop>

00003a1a <.flash_to_ram_loop_end>:
    3a1a:	4805      	ldr	r0, [pc, #20]	; (3a30 <.flash_to_ram_loop_end+0x16>)
    3a1c:	4700      	bx	r0
    3a1e:	0000      	.short	0x0000
    3a20:	0000029d 	.word	0x0000029d
    3a24:	00006880 	.word	0x00006880
    3a28:	20000000 	.word	0x20000000
    3a2c:	20000a04 	.word	0x20000a04
    3a30:	00000155 	.word	0x00000155

00003a34 <Default_Handler>:
    3a34:	e7fe      	b.n	3a34 <Default_Handler>

00003a36 <NMI_Handler>:
    3a36:	e7fe      	b.n	3a36 <NMI_Handler>

00003a38 <HardFault_Handler>:
    3a38:	e7fe      	b.n	3a38 <HardFault_Handler>

00003a3a <MemManage_Handler>:
    3a3a:	e7fe      	b.n	3a3a <MemManage_Handler>

00003a3c <BusFault_Handler>:
    3a3c:	e7fe      	b.n	3a3c <BusFault_Handler>

00003a3e <UsageFault_Handler>:
    3a3e:	e7fe      	b.n	3a3e <UsageFault_Handler>

00003a40 <SVC_Handler>:
    3a40:	e7fe      	b.n	3a40 <SVC_Handler>

00003a42 <DebugMon_Handler>:
    3a42:	e7fe      	b.n	3a42 <DebugMon_Handler>

00003a44 <PendSV_Handler>:
    3a44:	e7fe      	b.n	3a44 <PendSV_Handler>

00003a46 <SysTick_Handler>:
    3a46:	e7fe      	b.n	3a46 <SysTick_Handler>
    3a48:	e7fe      	b.n	3a48 <SysTick_Handler+0x2>

00003a4a <GPIO_EVEN_IRQHandler>:
    3a4a:	e7fe      	b.n	3a4a <GPIO_EVEN_IRQHandler>

00003a4c <TIMER0_IRQHandler>:
    3a4c:	e7fe      	b.n	3a4c <TIMER0_IRQHandler>

00003a4e <USART0_RX_IRQHandler>:
    3a4e:	e7fe      	b.n	3a4e <USART0_RX_IRQHandler>

00003a50 <USART0_TX_IRQHandler>:
    3a50:	e7fe      	b.n	3a50 <USART0_TX_IRQHandler>

00003a52 <ACMP0_IRQHandler>:
    3a52:	e7fe      	b.n	3a52 <ACMP0_IRQHandler>

00003a54 <ADC0_IRQHandler>:
    3a54:	e7fe      	b.n	3a54 <ADC0_IRQHandler>

00003a56 <DAC0_IRQHandler>:
    3a56:	e7fe      	b.n	3a56 <DAC0_IRQHandler>

00003a58 <I2C0_IRQHandler>:
    3a58:	e7fe      	b.n	3a58 <I2C0_IRQHandler>

00003a5a <GPIO_ODD_IRQHandler>:
    3a5a:	e7fe      	b.n	3a5a <GPIO_ODD_IRQHandler>

00003a5c <TIMER1_IRQHandler>:
    3a5c:	e7fe      	b.n	3a5c <TIMER1_IRQHandler>

00003a5e <TIMER2_IRQHandler>:
    3a5e:	e7fe      	b.n	3a5e <TIMER2_IRQHandler>

00003a60 <USART1_RX_IRQHandler>:
    3a60:	e7fe      	b.n	3a60 <USART1_RX_IRQHandler>

00003a62 <USART1_TX_IRQHandler>:
    3a62:	e7fe      	b.n	3a62 <USART1_TX_IRQHandler>

00003a64 <USART2_RX_IRQHandler>:
    3a64:	e7fe      	b.n	3a64 <USART2_RX_IRQHandler>

00003a66 <USART2_TX_IRQHandler>:
    3a66:	e7fe      	b.n	3a66 <USART2_TX_IRQHandler>

00003a68 <UART0_RX_IRQHandler>:
    3a68:	e7fe      	b.n	3a68 <UART0_RX_IRQHandler>

00003a6a <UART0_TX_IRQHandler>:
    3a6a:	e7fe      	b.n	3a6a <UART0_TX_IRQHandler>

00003a6c <LEUART0_IRQHandler>:
    3a6c:	e7fe      	b.n	3a6c <LEUART0_IRQHandler>

00003a6e <LEUART1_IRQHandler>:
    3a6e:	e7fe      	b.n	3a6e <LEUART1_IRQHandler>

00003a70 <LETIMER0_IRQHandler>:
    3a70:	e7fe      	b.n	3a70 <LETIMER0_IRQHandler>

00003a72 <PCNT0_IRQHandler>:
    3a72:	e7fe      	b.n	3a72 <PCNT0_IRQHandler>

00003a74 <PCNT1_IRQHandler>:
    3a74:	e7fe      	b.n	3a74 <PCNT1_IRQHandler>

00003a76 <PCNT2_IRQHandler>:
    3a76:	e7fe      	b.n	3a76 <PCNT2_IRQHandler>
    3a78:	e7fe      	b.n	3a78 <PCNT2_IRQHandler+0x2>

00003a7a <CMU_IRQHandler>:
    3a7a:	e7fe      	b.n	3a7a <CMU_IRQHandler>

00003a7c <VCMP_IRQHandler>:
    3a7c:	e7fe      	b.n	3a7c <VCMP_IRQHandler>

00003a7e <LCD_IRQHandler>:
    3a7e:	e7fe      	b.n	3a7e <LCD_IRQHandler>

00003a80 <MSC_IRQHandler>:
    3a80:	e7fe      	b.n	3a80 <MSC_IRQHandler>

00003a82 <AES_IRQHandler>:
    3a82:	e7fe      	b.n	3a82 <AES_IRQHandler>

00003a84 <exit>:
    3a84:	b508      	push	{r3, lr}
    3a86:	2100      	movs	r1, #0
    3a88:	4604      	mov	r4, r0
    3a8a:	f001 f89d 	bl	4bc8 <__call_exitprocs>
    3a8e:	4b04      	ldr	r3, [pc, #16]	; (3aa0 <exit+0x1c>)
    3a90:	6818      	ldr	r0, [r3, #0]
    3a92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    3a94:	b103      	cbz	r3, 3a98 <exit+0x14>
    3a96:	4798      	blx	r3
    3a98:	4620      	mov	r0, r4
    3a9a:	f002 f86b 	bl	5b74 <_exit>
    3a9e:	bf00      	nop
    3aa0:	00006820 	.word	0x00006820

00003aa4 <__libc_init_array>:
    3aa4:	b570      	push	{r4, r5, r6, lr}
    3aa6:	4e0f      	ldr	r6, [pc, #60]	; (3ae4 <__libc_init_array+0x40>)
    3aa8:	4d0f      	ldr	r5, [pc, #60]	; (3ae8 <__libc_init_array+0x44>)
    3aaa:	1b76      	subs	r6, r6, r5
    3aac:	10b6      	asrs	r6, r6, #2
    3aae:	d007      	beq.n	3ac0 <__libc_init_array+0x1c>
    3ab0:	3d04      	subs	r5, #4
    3ab2:	2400      	movs	r4, #0
    3ab4:	3401      	adds	r4, #1
    3ab6:	f855 3f04 	ldr.w	r3, [r5, #4]!
    3aba:	4798      	blx	r3
    3abc:	42a6      	cmp	r6, r4
    3abe:	d1f9      	bne.n	3ab4 <__libc_init_array+0x10>
    3ac0:	4e0a      	ldr	r6, [pc, #40]	; (3aec <__libc_init_array+0x48>)
    3ac2:	4d0b      	ldr	r5, [pc, #44]	; (3af0 <__libc_init_array+0x4c>)
    3ac4:	f002 fb38 	bl	6138 <_init>
    3ac8:	1b76      	subs	r6, r6, r5
    3aca:	10b6      	asrs	r6, r6, #2
    3acc:	d008      	beq.n	3ae0 <__libc_init_array+0x3c>
    3ace:	3d04      	subs	r5, #4
    3ad0:	2400      	movs	r4, #0
    3ad2:	3401      	adds	r4, #1
    3ad4:	f855 3f04 	ldr.w	r3, [r5, #4]!
    3ad8:	4798      	blx	r3
    3ada:	42a6      	cmp	r6, r4
    3adc:	d1f9      	bne.n	3ad2 <__libc_init_array+0x2e>
    3ade:	bd70      	pop	{r4, r5, r6, pc}
    3ae0:	bd70      	pop	{r4, r5, r6, pc}
    3ae2:	bf00      	nop
    3ae4:	200009f8 	.word	0x200009f8
    3ae8:	200009f8 	.word	0x200009f8
    3aec:	20000a00 	.word	0x20000a00
    3af0:	200009f8 	.word	0x200009f8

00003af4 <memset>:
    3af4:	b4f0      	push	{r4, r5, r6, r7}
    3af6:	0784      	lsls	r4, r0, #30
    3af8:	d043      	beq.n	3b82 <memset+0x8e>
    3afa:	1e54      	subs	r4, r2, #1
    3afc:	2a00      	cmp	r2, #0
    3afe:	d03e      	beq.n	3b7e <memset+0x8a>
    3b00:	b2cd      	uxtb	r5, r1
    3b02:	4603      	mov	r3, r0
    3b04:	e003      	b.n	3b0e <memset+0x1a>
    3b06:	1e62      	subs	r2, r4, #1
    3b08:	2c00      	cmp	r4, #0
    3b0a:	d038      	beq.n	3b7e <memset+0x8a>
    3b0c:	4614      	mov	r4, r2
    3b0e:	f803 5b01 	strb.w	r5, [r3], #1
    3b12:	079a      	lsls	r2, r3, #30
    3b14:	d1f7      	bne.n	3b06 <memset+0x12>
    3b16:	2c03      	cmp	r4, #3
    3b18:	d92a      	bls.n	3b70 <memset+0x7c>
    3b1a:	b2cd      	uxtb	r5, r1
    3b1c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    3b20:	2c0f      	cmp	r4, #15
    3b22:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3b26:	d915      	bls.n	3b54 <memset+0x60>
    3b28:	f1a4 0710 	sub.w	r7, r4, #16
    3b2c:	093f      	lsrs	r7, r7, #4
    3b2e:	f103 0610 	add.w	r6, r3, #16
    3b32:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    3b36:	461a      	mov	r2, r3
    3b38:	6015      	str	r5, [r2, #0]
    3b3a:	6055      	str	r5, [r2, #4]
    3b3c:	6095      	str	r5, [r2, #8]
    3b3e:	60d5      	str	r5, [r2, #12]
    3b40:	3210      	adds	r2, #16
    3b42:	42b2      	cmp	r2, r6
    3b44:	d1f8      	bne.n	3b38 <memset+0x44>
    3b46:	f004 040f 	and.w	r4, r4, #15
    3b4a:	3701      	adds	r7, #1
    3b4c:	2c03      	cmp	r4, #3
    3b4e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    3b52:	d90d      	bls.n	3b70 <memset+0x7c>
    3b54:	461e      	mov	r6, r3
    3b56:	4622      	mov	r2, r4
    3b58:	3a04      	subs	r2, #4
    3b5a:	2a03      	cmp	r2, #3
    3b5c:	f846 5b04 	str.w	r5, [r6], #4
    3b60:	d8fa      	bhi.n	3b58 <memset+0x64>
    3b62:	1f22      	subs	r2, r4, #4
    3b64:	f022 0203 	bic.w	r2, r2, #3
    3b68:	3204      	adds	r2, #4
    3b6a:	4413      	add	r3, r2
    3b6c:	f004 0403 	and.w	r4, r4, #3
    3b70:	b12c      	cbz	r4, 3b7e <memset+0x8a>
    3b72:	b2c9      	uxtb	r1, r1
    3b74:	441c      	add	r4, r3
    3b76:	f803 1b01 	strb.w	r1, [r3], #1
    3b7a:	42a3      	cmp	r3, r4
    3b7c:	d1fb      	bne.n	3b76 <memset+0x82>
    3b7e:	bcf0      	pop	{r4, r5, r6, r7}
    3b80:	4770      	bx	lr
    3b82:	4614      	mov	r4, r2
    3b84:	4603      	mov	r3, r0
    3b86:	e7c6      	b.n	3b16 <memset+0x22>

00003b88 <siprintf>:
    3b88:	b40e      	push	{r1, r2, r3}
    3b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b8c:	b09c      	sub	sp, #112	; 0x70
    3b8e:	ac21      	add	r4, sp, #132	; 0x84
    3b90:	f854 2b04 	ldr.w	r2, [r4], #4
    3b94:	490e      	ldr	r1, [pc, #56]	; (3bd0 <siprintf+0x48>)
    3b96:	4606      	mov	r6, r0
    3b98:	4623      	mov	r3, r4
    3b9a:	f44f 7e02 	mov.w	lr, #520	; 0x208
    3b9e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    3ba2:	6808      	ldr	r0, [r1, #0]
    3ba4:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3ba8:	a902      	add	r1, sp, #8
    3baa:	9602      	str	r6, [sp, #8]
    3bac:	9606      	str	r6, [sp, #24]
    3bae:	9401      	str	r4, [sp, #4]
    3bb0:	f8ad e014 	strh.w	lr, [sp, #20]
    3bb4:	9504      	str	r5, [sp, #16]
    3bb6:	9507      	str	r5, [sp, #28]
    3bb8:	f8ad 7016 	strh.w	r7, [sp, #22]
    3bbc:	f000 fa36 	bl	402c <_svfiprintf_r>
    3bc0:	9b02      	ldr	r3, [sp, #8]
    3bc2:	2200      	movs	r2, #0
    3bc4:	701a      	strb	r2, [r3, #0]
    3bc6:	b01c      	add	sp, #112	; 0x70
    3bc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3bcc:	b003      	add	sp, #12
    3bce:	4770      	bx	lr
    3bd0:	20000460 	.word	0x20000460

00003bd4 <strcmp>:
    3bd4:	ea40 0c01 	orr.w	ip, r0, r1
    3bd8:	f01c 0f07 	tst.w	ip, #7
    3bdc:	d127      	bne.n	3c2e <strcmp+0x5a>
    3bde:	f1bd 0d10 	subs.w	sp, sp, #16
    3be2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    3be6:	e9cd 6700 	strd	r6, r7, [sp]
    3bea:	f06f 0600 	mvn.w	r6, #0
    3bee:	f04f 0700 	mov.w	r7, #0
    3bf2:	bf00      	nop
    3bf4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3bf8:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    3bfc:	42a2      	cmp	r2, r4
    3bfe:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    3c02:	ea2c 0c02 	bic.w	ip, ip, r2
    3c06:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3c0a:	bf08      	it	eq
    3c0c:	f1bc 0f00 	cmpeq.w	ip, #0
    3c10:	f040 80e5 	bne.w	3dde <strcmp+0x20a>
    3c14:	42ab      	cmp	r3, r5
    3c16:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    3c1a:	ea2c 0c03 	bic.w	ip, ip, r3
    3c1e:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3c22:	bf08      	it	eq
    3c24:	f1bc 0f00 	cmpeq.w	ip, #0
    3c28:	f040 80d6 	bne.w	3dd8 <strcmp+0x204>
    3c2c:	e7e2      	b.n	3bf4 <strcmp+0x20>
    3c2e:	f010 0c03 	ands.w	ip, r0, #3
    3c32:	d021      	beq.n	3c78 <strcmp+0xa4>
    3c34:	f020 0003 	bic.w	r0, r0, #3
    3c38:	f850 2b04 	ldr.w	r2, [r0], #4
    3c3c:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
    3c40:	d008      	beq.n	3c54 <strcmp+0x80>
    3c42:	d20f      	bcs.n	3c64 <strcmp+0x90>
    3c44:	f811 cb01 	ldrb.w	ip, [r1], #1
    3c48:	fa5f f392 	uxtb.w	r3, r2, ror #8
    3c4c:	ebb3 0c0c 	subs.w	ip, r3, ip
    3c50:	d110      	bne.n	3c74 <strcmp+0xa0>
    3c52:	b17b      	cbz	r3, 3c74 <strcmp+0xa0>
    3c54:	f811 cb01 	ldrb.w	ip, [r1], #1
    3c58:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
    3c5c:	ebb3 0c0c 	subs.w	ip, r3, ip
    3c60:	d108      	bne.n	3c74 <strcmp+0xa0>
    3c62:	b13b      	cbz	r3, 3c74 <strcmp+0xa0>
    3c64:	f811 cb01 	ldrb.w	ip, [r1], #1
    3c68:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
    3c6c:	ebb3 0c0c 	subs.w	ip, r3, ip
    3c70:	d100      	bne.n	3c74 <strcmp+0xa0>
    3c72:	b90b      	cbnz	r3, 3c78 <strcmp+0xa4>
    3c74:	4660      	mov	r0, ip
    3c76:	4770      	bx	lr
    3c78:	f1bd 0d10 	subs.w	sp, sp, #16
    3c7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    3c80:	e9cd 6700 	strd	r6, r7, [sp]
    3c84:	f06f 0600 	mvn.w	r6, #0
    3c88:	f04f 0700 	mov.w	r7, #0
    3c8c:	f011 0c03 	ands.w	ip, r1, #3
    3c90:	d133      	bne.n	3cfa <strcmp+0x126>
    3c92:	f010 0f04 	tst.w	r0, #4
    3c96:	d00f      	beq.n	3cb8 <strcmp+0xe4>
    3c98:	f850 2b04 	ldr.w	r2, [r0], #4
    3c9c:	f851 4b04 	ldr.w	r4, [r1], #4
    3ca0:	42a2      	cmp	r2, r4
    3ca2:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    3ca6:	ea2c 0c02 	bic.w	ip, ip, r2
    3caa:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3cae:	bf08      	it	eq
    3cb0:	f1bc 0f00 	cmpeq.w	ip, #0
    3cb4:	f040 8093 	bne.w	3dde <strcmp+0x20a>
    3cb8:	f011 0f04 	tst.w	r1, #4
    3cbc:	d099      	beq.n	3bf2 <strcmp+0x1e>
    3cbe:	f851 5b04 	ldr.w	r5, [r1], #4
    3cc2:	bf00      	nop
    3cc4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    3cc8:	42aa      	cmp	r2, r5
    3cca:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
    3cce:	ea2c 0c02 	bic.w	ip, ip, r2
    3cd2:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3cd6:	bf08      	it	eq
    3cd8:	f1bc 0f00 	cmpeq.w	ip, #0
    3cdc:	d179      	bne.n	3dd2 <strcmp+0x1fe>
    3cde:	e8f1 4502 	ldrd	r4, r5, [r1], #8
    3ce2:	42a3      	cmp	r3, r4
    3ce4:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    3ce8:	ea2c 0c03 	bic.w	ip, ip, r3
    3cec:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3cf0:	bf08      	it	eq
    3cf2:	f1bc 0f00 	cmpeq.w	ip, #0
    3cf6:	d169      	bne.n	3dcc <strcmp+0x1f8>
    3cf8:	e7e4      	b.n	3cc4 <strcmp+0xf0>
    3cfa:	f021 0103 	bic.w	r1, r1, #3
    3cfe:	f1bc 0f02 	cmp.w	ip, #2
    3d02:	d020      	beq.n	3d46 <strcmp+0x172>
    3d04:	da3f      	bge.n	3d86 <strcmp+0x1b2>
    3d06:	f851 5b04 	ldr.w	r5, [r1], #4
    3d0a:	bf00      	nop
    3d0c:	f850 3b04 	ldr.w	r3, [r0], #4
    3d10:	ea4f 2515 	mov.w	r5, r5, lsr #8
    3d14:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    3d18:	ea2c 0c03 	bic.w	ip, ip, r3
    3d1c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3d20:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
    3d24:	ea03 2216 	and.w	r2, r3, r6, lsr #8
    3d28:	bf08      	it	eq
    3d2a:	42aa      	cmpeq	r2, r5
    3d2c:	d151      	bne.n	3dd2 <strcmp+0x1fe>
    3d2e:	f851 5b04 	ldr.w	r5, [r1], #4
    3d32:	f1bc 0f00 	cmp.w	ip, #0
    3d36:	ea82 0303 	eor.w	r3, r2, r3
    3d3a:	ea4f 6205 	mov.w	r2, r5, lsl #24
    3d3e:	bf08      	it	eq
    3d40:	4293      	cmpeq	r3, r2
    3d42:	d140      	bne.n	3dc6 <strcmp+0x1f2>
    3d44:	e7e2      	b.n	3d0c <strcmp+0x138>
    3d46:	f851 5b04 	ldr.w	r5, [r1], #4
    3d4a:	bf00      	nop
    3d4c:	f850 3b04 	ldr.w	r3, [r0], #4
    3d50:	ea4f 4515 	mov.w	r5, r5, lsr #16
    3d54:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    3d58:	ea2c 0c03 	bic.w	ip, ip, r3
    3d5c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3d60:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
    3d64:	ea03 4216 	and.w	r2, r3, r6, lsr #16
    3d68:	bf08      	it	eq
    3d6a:	42aa      	cmpeq	r2, r5
    3d6c:	d131      	bne.n	3dd2 <strcmp+0x1fe>
    3d6e:	f851 5b04 	ldr.w	r5, [r1], #4
    3d72:	f1bc 0f00 	cmp.w	ip, #0
    3d76:	ea82 0303 	eor.w	r3, r2, r3
    3d7a:	ea4f 4205 	mov.w	r2, r5, lsl #16
    3d7e:	bf08      	it	eq
    3d80:	4293      	cmpeq	r3, r2
    3d82:	d120      	bne.n	3dc6 <strcmp+0x1f2>
    3d84:	e7e2      	b.n	3d4c <strcmp+0x178>
    3d86:	f851 5b04 	ldr.w	r5, [r1], #4
    3d8a:	bf00      	nop
    3d8c:	f850 3b04 	ldr.w	r3, [r0], #4
    3d90:	ea4f 6515 	mov.w	r5, r5, lsr #24
    3d94:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
    3d98:	ea2c 0c03 	bic.w	ip, ip, r3
    3d9c:	f00c 3c80 	and.w	ip, ip, #2155905152	; 0x80808080
    3da0:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
    3da4:	ea03 6216 	and.w	r2, r3, r6, lsr #24
    3da8:	bf08      	it	eq
    3daa:	42aa      	cmpeq	r2, r5
    3dac:	d111      	bne.n	3dd2 <strcmp+0x1fe>
    3dae:	f851 5b04 	ldr.w	r5, [r1], #4
    3db2:	f1bc 0f00 	cmp.w	ip, #0
    3db6:	ea82 0303 	eor.w	r3, r2, r3
    3dba:	ea4f 2205 	mov.w	r2, r5, lsl #8
    3dbe:	bf08      	it	eq
    3dc0:	4293      	cmpeq	r3, r2
    3dc2:	d100      	bne.n	3dc6 <strcmp+0x1f2>
    3dc4:	e7e2      	b.n	3d8c <strcmp+0x1b8>
    3dc6:	ba19      	rev	r1, r3
    3dc8:	ba12      	rev	r2, r2
    3dca:	e00a      	b.n	3de2 <strcmp+0x20e>
    3dcc:	ba19      	rev	r1, r3
    3dce:	ba22      	rev	r2, r4
    3dd0:	e007      	b.n	3de2 <strcmp+0x20e>
    3dd2:	ba11      	rev	r1, r2
    3dd4:	ba2a      	rev	r2, r5
    3dd6:	e004      	b.n	3de2 <strcmp+0x20e>
    3dd8:	ba19      	rev	r1, r3
    3dda:	ba2a      	rev	r2, r5
    3ddc:	e001      	b.n	3de2 <strcmp+0x20e>
    3dde:	ba11      	rev	r1, r2
    3de0:	ba22      	rev	r2, r4
    3de2:	fa9c f08c 	rev.w	r0, ip
    3de6:	e9dd 6700 	ldrd	r6, r7, [sp]
    3dea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
    3dee:	f11d 0d10 	adds.w	sp, sp, #16
    3df2:	b138      	cbz	r0, 3e04 <strcmp+0x230>
    3df4:	fab0 f080 	clz	r0, r0
    3df8:	f1c0 0018 	rsb	r0, r0, #24
    3dfc:	fa21 f100 	lsr.w	r1, r1, r0
    3e00:	fa22 f200 	lsr.w	r2, r2, r0
    3e04:	2001      	movs	r0, #1
    3e06:	4291      	cmp	r1, r2
    3e08:	bf98      	it	ls
    3e0a:	4180      	sbcls	r0, r0
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop

00003e10 <strcpy>:
    3e10:	ea80 0201 	eor.w	r2, r0, r1
    3e14:	4684      	mov	ip, r0
    3e16:	f012 0f03 	tst.w	r2, #3
    3e1a:	d14f      	bne.n	3ebc <strcpy+0xac>
    3e1c:	f011 0f03 	tst.w	r1, #3
    3e20:	d132      	bne.n	3e88 <strcpy+0x78>
    3e22:	f84d 4d04 	str.w	r4, [sp, #-4]!
    3e26:	f011 0f04 	tst.w	r1, #4
    3e2a:	f851 3b04 	ldr.w	r3, [r1], #4
    3e2e:	d00b      	beq.n	3e48 <strcpy+0x38>
    3e30:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    3e34:	439a      	bics	r2, r3
    3e36:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3e3a:	bf04      	itt	eq
    3e3c:	f84c 3b04 	streq.w	r3, [ip], #4
    3e40:	f851 3b04 	ldreq.w	r3, [r1], #4
    3e44:	d116      	bne.n	3e74 <strcpy+0x64>
    3e46:	bf00      	nop
    3e48:	f851 4b04 	ldr.w	r4, [r1], #4
    3e4c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    3e50:	439a      	bics	r2, r3
    3e52:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3e56:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    3e5a:	d10b      	bne.n	3e74 <strcpy+0x64>
    3e5c:	f84c 3b04 	str.w	r3, [ip], #4
    3e60:	43a2      	bics	r2, r4
    3e62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    3e66:	bf04      	itt	eq
    3e68:	f851 3b04 	ldreq.w	r3, [r1], #4
    3e6c:	f84c 4b04 	streq.w	r4, [ip], #4
    3e70:	d0ea      	beq.n	3e48 <strcpy+0x38>
    3e72:	4623      	mov	r3, r4
    3e74:	f80c 3b01 	strb.w	r3, [ip], #1
    3e78:	f013 0fff 	tst.w	r3, #255	; 0xff
    3e7c:	ea4f 2333 	mov.w	r3, r3, ror #8
    3e80:	d1f8      	bne.n	3e74 <strcpy+0x64>
    3e82:	f85d 4b04 	ldr.w	r4, [sp], #4
    3e86:	4770      	bx	lr
    3e88:	f011 0f01 	tst.w	r1, #1
    3e8c:	d006      	beq.n	3e9c <strcpy+0x8c>
    3e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
    3e92:	f80c 2b01 	strb.w	r2, [ip], #1
    3e96:	2a00      	cmp	r2, #0
    3e98:	bf08      	it	eq
    3e9a:	4770      	bxeq	lr
    3e9c:	f011 0f02 	tst.w	r1, #2
    3ea0:	d0bf      	beq.n	3e22 <strcpy+0x12>
    3ea2:	f831 2b02 	ldrh.w	r2, [r1], #2
    3ea6:	f012 0fff 	tst.w	r2, #255	; 0xff
    3eaa:	bf16      	itet	ne
    3eac:	f82c 2b02 	strhne.w	r2, [ip], #2
    3eb0:	f88c 2000 	strbeq.w	r2, [ip]
    3eb4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    3eb8:	d1b3      	bne.n	3e22 <strcpy+0x12>
    3eba:	4770      	bx	lr
    3ebc:	f811 2b01 	ldrb.w	r2, [r1], #1
    3ec0:	f80c 2b01 	strb.w	r2, [ip], #1
    3ec4:	2a00      	cmp	r2, #0
    3ec6:	d1f9      	bne.n	3ebc <strcpy+0xac>
    3ec8:	4770      	bx	lr
    3eca:	bf00      	nop

00003ecc <strlen>:
    3ecc:	f020 0103 	bic.w	r1, r0, #3
    3ed0:	f010 0003 	ands.w	r0, r0, #3
    3ed4:	f1c0 0000 	rsb	r0, r0, #0
    3ed8:	f851 3b04 	ldr.w	r3, [r1], #4
    3edc:	f100 0c04 	add.w	ip, r0, #4
    3ee0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    3ee4:	f06f 0200 	mvn.w	r2, #0
    3ee8:	bf1c      	itt	ne
    3eea:	fa22 f20c 	lsrne.w	r2, r2, ip
    3eee:	4313      	orrne	r3, r2
    3ef0:	f04f 0c01 	mov.w	ip, #1
    3ef4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    3ef8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    3efc:	eba3 020c 	sub.w	r2, r3, ip
    3f00:	ea22 0203 	bic.w	r2, r2, r3
    3f04:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    3f08:	bf04      	itt	eq
    3f0a:	f851 3b04 	ldreq.w	r3, [r1], #4
    3f0e:	3004      	addeq	r0, #4
    3f10:	d0f4      	beq.n	3efc <strlen+0x30>
    3f12:	f013 0fff 	tst.w	r3, #255	; 0xff
    3f16:	bf1f      	itttt	ne
    3f18:	3001      	addne	r0, #1
    3f1a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
    3f1e:	3001      	addne	r0, #1
    3f20:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
    3f24:	bf18      	it	ne
    3f26:	3001      	addne	r0, #1
    3f28:	4770      	bx	lr
    3f2a:	bf00      	nop

00003f2c <__ssprint_r>:
    3f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f30:	6894      	ldr	r4, [r2, #8]
    3f32:	b083      	sub	sp, #12
    3f34:	4692      	mov	sl, r2
    3f36:	4680      	mov	r8, r0
    3f38:	460d      	mov	r5, r1
    3f3a:	6816      	ldr	r6, [r2, #0]
    3f3c:	2c00      	cmp	r4, #0
    3f3e:	d06f      	beq.n	4020 <__ssprint_r+0xf4>
    3f40:	f04f 0b00 	mov.w	fp, #0
    3f44:	6808      	ldr	r0, [r1, #0]
    3f46:	688b      	ldr	r3, [r1, #8]
    3f48:	465c      	mov	r4, fp
    3f4a:	2c00      	cmp	r4, #0
    3f4c:	d043      	beq.n	3fd6 <__ssprint_r+0xaa>
    3f4e:	429c      	cmp	r4, r3
    3f50:	461f      	mov	r7, r3
    3f52:	d345      	bcc.n	3fe0 <__ssprint_r+0xb4>
    3f54:	89ab      	ldrh	r3, [r5, #12]
    3f56:	f413 6f90 	tst.w	r3, #1152	; 0x480
    3f5a:	d044      	beq.n	3fe6 <__ssprint_r+0xba>
    3f5c:	696f      	ldr	r7, [r5, #20]
    3f5e:	6929      	ldr	r1, [r5, #16]
    3f60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    3f64:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    3f68:	ebc1 0900 	rsb	r9, r1, r0
    3f6c:	1c62      	adds	r2, r4, #1
    3f6e:	107f      	asrs	r7, r7, #1
    3f70:	444a      	add	r2, r9
    3f72:	4297      	cmp	r7, r2
    3f74:	bf34      	ite	cc
    3f76:	4617      	movcc	r7, r2
    3f78:	463a      	movcs	r2, r7
    3f7a:	055b      	lsls	r3, r3, #21
    3f7c:	d535      	bpl.n	3fea <__ssprint_r+0xbe>
    3f7e:	4611      	mov	r1, r2
    3f80:	4640      	mov	r0, r8
    3f82:	f000 ffd1 	bl	4f28 <_malloc_r>
    3f86:	2800      	cmp	r0, #0
    3f88:	d039      	beq.n	3ffe <__ssprint_r+0xd2>
    3f8a:	6929      	ldr	r1, [r5, #16]
    3f8c:	464a      	mov	r2, r9
    3f8e:	9001      	str	r0, [sp, #4]
    3f90:	f001 fab0 	bl	54f4 <memcpy>
    3f94:	89aa      	ldrh	r2, [r5, #12]
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    3f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3fa0:	81aa      	strh	r2, [r5, #12]
    3fa2:	ebc9 0207 	rsb	r2, r9, r7
    3fa6:	eb03 0009 	add.w	r0, r3, r9
    3faa:	616f      	str	r7, [r5, #20]
    3fac:	612b      	str	r3, [r5, #16]
    3fae:	6028      	str	r0, [r5, #0]
    3fb0:	60aa      	str	r2, [r5, #8]
    3fb2:	4627      	mov	r7, r4
    3fb4:	46a1      	mov	r9, r4
    3fb6:	464a      	mov	r2, r9
    3fb8:	4659      	mov	r1, fp
    3fba:	f001 fb11 	bl	55e0 <memmove>
    3fbe:	f8da 2008 	ldr.w	r2, [sl, #8]
    3fc2:	68ab      	ldr	r3, [r5, #8]
    3fc4:	6828      	ldr	r0, [r5, #0]
    3fc6:	1bdb      	subs	r3, r3, r7
    3fc8:	4448      	add	r0, r9
    3fca:	1b14      	subs	r4, r2, r4
    3fcc:	60ab      	str	r3, [r5, #8]
    3fce:	6028      	str	r0, [r5, #0]
    3fd0:	f8ca 4008 	str.w	r4, [sl, #8]
    3fd4:	b324      	cbz	r4, 4020 <__ssprint_r+0xf4>
    3fd6:	f8d6 b000 	ldr.w	fp, [r6]
    3fda:	6874      	ldr	r4, [r6, #4]
    3fdc:	3608      	adds	r6, #8
    3fde:	e7b4      	b.n	3f4a <__ssprint_r+0x1e>
    3fe0:	4627      	mov	r7, r4
    3fe2:	46a1      	mov	r9, r4
    3fe4:	e7e7      	b.n	3fb6 <__ssprint_r+0x8a>
    3fe6:	46b9      	mov	r9, r7
    3fe8:	e7e5      	b.n	3fb6 <__ssprint_r+0x8a>
    3fea:	4640      	mov	r0, r8
    3fec:	f001 fb62 	bl	56b4 <_realloc_r>
    3ff0:	4603      	mov	r3, r0
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d1d5      	bne.n	3fa2 <__ssprint_r+0x76>
    3ff6:	4640      	mov	r0, r8
    3ff8:	6929      	ldr	r1, [r5, #16]
    3ffa:	f000 fec9 	bl	4d90 <_free_r>
    3ffe:	89aa      	ldrh	r2, [r5, #12]
    4000:	230c      	movs	r3, #12
    4002:	f8c8 3000 	str.w	r3, [r8]
    4006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    400a:	2300      	movs	r3, #0
    400c:	f04f 30ff 	mov.w	r0, #4294967295
    4010:	81aa      	strh	r2, [r5, #12]
    4012:	f8ca 3008 	str.w	r3, [sl, #8]
    4016:	f8ca 3004 	str.w	r3, [sl, #4]
    401a:	b003      	add	sp, #12
    401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4020:	4620      	mov	r0, r4
    4022:	f8ca 4004 	str.w	r4, [sl, #4]
    4026:	b003      	add	sp, #12
    4028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000402c <_svfiprintf_r>:
    402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4030:	468a      	mov	sl, r1
    4032:	8989      	ldrh	r1, [r1, #12]
    4034:	b0b1      	sub	sp, #196	; 0xc4
    4036:	4690      	mov	r8, r2
    4038:	060a      	lsls	r2, r1, #24
    403a:	9309      	str	r3, [sp, #36]	; 0x24
    403c:	9002      	str	r0, [sp, #8]
    403e:	d504      	bpl.n	404a <_svfiprintf_r+0x1e>
    4040:	f8da 3010 	ldr.w	r3, [sl, #16]
    4044:	2b00      	cmp	r3, #0
    4046:	f000 854c 	beq.w	4ae2 <_svfiprintf_r+0xab6>
    404a:	2300      	movs	r3, #0
    404c:	af20      	add	r7, sp, #128	; 0x80
    404e:	930b      	str	r3, [sp, #44]	; 0x2c
    4050:	9315      	str	r3, [sp, #84]	; 0x54
    4052:	9314      	str	r3, [sp, #80]	; 0x50
    4054:	9308      	str	r3, [sp, #32]
    4056:	9713      	str	r7, [sp, #76]	; 0x4c
    4058:	463e      	mov	r6, r7
    405a:	f898 3000 	ldrb.w	r3, [r8]
    405e:	2b00      	cmp	r3, #0
    4060:	f000 83a2 	beq.w	47a8 <_svfiprintf_r+0x77c>
    4064:	2b25      	cmp	r3, #37	; 0x25
    4066:	f000 839f 	beq.w	47a8 <_svfiprintf_r+0x77c>
    406a:	f108 0201 	add.w	r2, r8, #1
    406e:	e001      	b.n	4074 <_svfiprintf_r+0x48>
    4070:	2b25      	cmp	r3, #37	; 0x25
    4072:	d004      	beq.n	407e <_svfiprintf_r+0x52>
    4074:	7813      	ldrb	r3, [r2, #0]
    4076:	4614      	mov	r4, r2
    4078:	3201      	adds	r2, #1
    407a:	2b00      	cmp	r3, #0
    407c:	d1f8      	bne.n	4070 <_svfiprintf_r+0x44>
    407e:	ebc8 0504 	rsb	r5, r8, r4
    4082:	b17d      	cbz	r5, 40a4 <_svfiprintf_r+0x78>
    4084:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4086:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4088:	3301      	adds	r3, #1
    408a:	442a      	add	r2, r5
    408c:	2b07      	cmp	r3, #7
    408e:	f8c6 8000 	str.w	r8, [r6]
    4092:	6075      	str	r5, [r6, #4]
    4094:	9215      	str	r2, [sp, #84]	; 0x54
    4096:	9314      	str	r3, [sp, #80]	; 0x50
    4098:	f300 8430 	bgt.w	48fc <_svfiprintf_r+0x8d0>
    409c:	3608      	adds	r6, #8
    409e:	9808      	ldr	r0, [sp, #32]
    40a0:	4428      	add	r0, r5
    40a2:	9008      	str	r0, [sp, #32]
    40a4:	7823      	ldrb	r3, [r4, #0]
    40a6:	2b00      	cmp	r3, #0
    40a8:	f000 83ca 	beq.w	4840 <_svfiprintf_r+0x814>
    40ac:	2100      	movs	r1, #0
    40ae:	f04f 0200 	mov.w	r2, #0
    40b2:	f104 0801 	add.w	r8, r4, #1
    40b6:	7863      	ldrb	r3, [r4, #1]
    40b8:	f04f 34ff 	mov.w	r4, #4294967295
    40bc:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
    40c0:	9105      	str	r1, [sp, #20]
    40c2:	9101      	str	r1, [sp, #4]
    40c4:	9403      	str	r4, [sp, #12]
    40c6:	4608      	mov	r0, r1
    40c8:	f108 0801 	add.w	r8, r8, #1
    40cc:	f1a3 0220 	sub.w	r2, r3, #32
    40d0:	2a58      	cmp	r2, #88	; 0x58
    40d2:	f200 829e 	bhi.w	4612 <_svfiprintf_r+0x5e6>
    40d6:	e8df f012 	tbh	[pc, r2, lsl #1]
    40da:	0103      	.short	0x0103
    40dc:	029c029c 	.word	0x029c029c
    40e0:	029c00cf 	.word	0x029c00cf
    40e4:	029c029c 	.word	0x029c029c
    40e8:	029c029c 	.word	0x029c029c
    40ec:	0059029c 	.word	0x0059029c
    40f0:	029c00d6 	.word	0x029c00d6
    40f4:	023d0064 	.word	0x023d0064
    40f8:	022f029c 	.word	0x022f029c
    40fc:	02210221 	.word	0x02210221
    4100:	02210221 	.word	0x02210221
    4104:	02210221 	.word	0x02210221
    4108:	02210221 	.word	0x02210221
    410c:	029c0221 	.word	0x029c0221
    4110:	029c029c 	.word	0x029c029c
    4114:	029c029c 	.word	0x029c029c
    4118:	029c029c 	.word	0x029c029c
    411c:	029c029c 	.word	0x029c029c
    4120:	0201029c 	.word	0x0201029c
    4124:	029c029c 	.word	0x029c029c
    4128:	029c029c 	.word	0x029c029c
    412c:	029c029c 	.word	0x029c029c
    4130:	029c029c 	.word	0x029c029c
    4134:	029c029c 	.word	0x029c029c
    4138:	029c027a 	.word	0x029c027a
    413c:	029c029c 	.word	0x029c029c
    4140:	029c029c 	.word	0x029c029c
    4144:	029c025a 	.word	0x029c025a
    4148:	0172029c 	.word	0x0172029c
    414c:	029c029c 	.word	0x029c029c
    4150:	029c029c 	.word	0x029c029c
    4154:	029c029c 	.word	0x029c029c
    4158:	029c029c 	.word	0x029c029c
    415c:	029c029c 	.word	0x029c029c
    4160:	01b4010a 	.word	0x01b4010a
    4164:	029c029c 	.word	0x029c029c
    4168:	01ab029c 	.word	0x01ab029c
    416c:	029c01b4 	.word	0x029c01b4
    4170:	01a0029c 	.word	0x01a0029c
    4174:	018d029c 	.word	0x018d029c
    4178:	00b800a6 	.word	0x00b800a6
    417c:	029c01f8 	.word	0x029c01f8
    4180:	029c01d2 	.word	0x029c01d2
    4184:	029c006b 	.word	0x029c006b
    4188:	00da029c 	.word	0x00da029c
    418c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4190:	f8dc 0000 	ldr.w	r0, [ip]
    4194:	f10c 0304 	add.w	r3, ip, #4
    4198:	2800      	cmp	r0, #0
    419a:	f280 841e 	bge.w	49da <_svfiprintf_r+0x9ae>
    419e:	4240      	negs	r0, r0
    41a0:	9309      	str	r3, [sp, #36]	; 0x24
    41a2:	9c01      	ldr	r4, [sp, #4]
    41a4:	f044 0404 	orr.w	r4, r4, #4
    41a8:	9401      	str	r4, [sp, #4]
    41aa:	f898 3000 	ldrb.w	r3, [r8]
    41ae:	e78b      	b.n	40c8 <_svfiprintf_r+0x9c>
    41b0:	9c01      	ldr	r4, [sp, #4]
    41b2:	9005      	str	r0, [sp, #20]
    41b4:	06a0      	lsls	r0, r4, #26
    41b6:	f140 81f5 	bpl.w	45a4 <_svfiprintf_r+0x578>
    41ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
    41bc:	1deb      	adds	r3, r5, #7
    41be:	f023 0307 	bic.w	r3, r3, #7
    41c2:	f103 0c08 	add.w	ip, r3, #8
    41c6:	e9d3 4500 	ldrd	r4, r5, [r3]
    41ca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    41ce:	2301      	movs	r3, #1
    41d0:	9a03      	ldr	r2, [sp, #12]
    41d2:	f04f 0100 	mov.w	r1, #0
    41d6:	2000      	movs	r0, #0
    41d8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    41dc:	9206      	str	r2, [sp, #24]
    41de:	9007      	str	r0, [sp, #28]
    41e0:	9903      	ldr	r1, [sp, #12]
    41e2:	2900      	cmp	r1, #0
    41e4:	db05      	blt.n	41f2 <_svfiprintf_r+0x1c6>
    41e6:	f8dd c004 	ldr.w	ip, [sp, #4]
    41ea:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
    41ee:	f8cd c004 	str.w	ip, [sp, #4]
    41f2:	ea54 0005 	orrs.w	r0, r4, r5
    41f6:	f040 82d9 	bne.w	47ac <_svfiprintf_r+0x780>
    41fa:	9903      	ldr	r1, [sp, #12]
    41fc:	2900      	cmp	r1, #0
    41fe:	f040 82d5 	bne.w	47ac <_svfiprintf_r+0x780>
    4202:	b91b      	cbnz	r3, 420c <_svfiprintf_r+0x1e0>
    4204:	9c01      	ldr	r4, [sp, #4]
    4206:	07e2      	lsls	r2, r4, #31
    4208:	f100 8311 	bmi.w	482e <_svfiprintf_r+0x802>
    420c:	46b9      	mov	r9, r7
    420e:	9c03      	ldr	r4, [sp, #12]
    4210:	9d06      	ldr	r5, [sp, #24]
    4212:	42a5      	cmp	r5, r4
    4214:	bfb8      	it	lt
    4216:	4625      	movlt	r5, r4
    4218:	9c07      	ldr	r4, [sp, #28]
    421a:	9504      	str	r5, [sp, #16]
    421c:	2c00      	cmp	r4, #0
    421e:	d07c      	beq.n	431a <_svfiprintf_r+0x2ee>
    4220:	3501      	adds	r5, #1
    4222:	9504      	str	r5, [sp, #16]
    4224:	e079      	b.n	431a <_svfiprintf_r+0x2ee>
    4226:	f8dd c004 	ldr.w	ip, [sp, #4]
    422a:	9005      	str	r0, [sp, #20]
    422c:	f01c 0320 	ands.w	r3, ip, #32
    4230:	f000 81d8 	beq.w	45e4 <_svfiprintf_r+0x5b8>
    4234:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4236:	1de3      	adds	r3, r4, #7
    4238:	f023 0307 	bic.w	r3, r3, #7
    423c:	f103 0508 	add.w	r5, r3, #8
    4240:	9509      	str	r5, [sp, #36]	; 0x24
    4242:	e9d3 4500 	ldrd	r4, r5, [r3]
    4246:	2300      	movs	r3, #0
    4248:	e7c2      	b.n	41d0 <_svfiprintf_r+0x1a4>
    424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    424c:	f8dd c004 	ldr.w	ip, [sp, #4]
    4250:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4252:	9005      	str	r0, [sp, #20]
    4254:	48bc      	ldr	r0, [pc, #752]	; (4548 <_svfiprintf_r+0x51c>)
    4256:	3504      	adds	r5, #4
    4258:	681c      	ldr	r4, [r3, #0]
    425a:	2230      	movs	r2, #48	; 0x30
    425c:	2378      	movs	r3, #120	; 0x78
    425e:	f04c 0c02 	orr.w	ip, ip, #2
    4262:	9509      	str	r5, [sp, #36]	; 0x24
    4264:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    4268:	f8cd c004 	str.w	ip, [sp, #4]
    426c:	2500      	movs	r5, #0
    426e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    4272:	900b      	str	r0, [sp, #44]	; 0x2c
    4274:	2302      	movs	r3, #2
    4276:	e7ab      	b.n	41d0 <_svfiprintf_r+0x1a4>
    4278:	9d01      	ldr	r5, [sp, #4]
    427a:	f045 0501 	orr.w	r5, r5, #1
    427e:	9501      	str	r5, [sp, #4]
    4280:	f898 3000 	ldrb.w	r3, [r8]
    4284:	e720      	b.n	40c8 <_svfiprintf_r+0x9c>
    4286:	f898 3000 	ldrb.w	r3, [r8]
    428a:	212b      	movs	r1, #43	; 0x2b
    428c:	e71c      	b.n	40c8 <_svfiprintf_r+0x9c>
    428e:	9d01      	ldr	r5, [sp, #4]
    4290:	4cad      	ldr	r4, [pc, #692]	; (4548 <_svfiprintf_r+0x51c>)
    4292:	06aa      	lsls	r2, r5, #26
    4294:	9005      	str	r0, [sp, #20]
    4296:	940b      	str	r4, [sp, #44]	; 0x2c
    4298:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    429c:	f140 8098 	bpl.w	43d0 <_svfiprintf_r+0x3a4>
    42a0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    42a4:	f10c 0207 	add.w	r2, ip, #7
    42a8:	f022 0207 	bic.w	r2, r2, #7
    42ac:	f102 0408 	add.w	r4, r2, #8
    42b0:	9409      	str	r4, [sp, #36]	; 0x24
    42b2:	e9d2 4500 	ldrd	r4, r5, [r2]
    42b6:	f8dd c004 	ldr.w	ip, [sp, #4]
    42ba:	f01c 0f01 	tst.w	ip, #1
    42be:	f000 81bd 	beq.w	463c <_svfiprintf_r+0x610>
    42c2:	ea54 0005 	orrs.w	r0, r4, r5
    42c6:	f000 81b9 	beq.w	463c <_svfiprintf_r+0x610>
    42ca:	2230      	movs	r2, #48	; 0x30
    42cc:	f04c 0c02 	orr.w	ip, ip, #2
    42d0:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    42d4:	f8cd c004 	str.w	ip, [sp, #4]
    42d8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    42dc:	2302      	movs	r3, #2
    42de:	e777      	b.n	41d0 <_svfiprintf_r+0x1a4>
    42e0:	f898 3000 	ldrb.w	r3, [r8]
    42e4:	2900      	cmp	r1, #0
    42e6:	f47f aeef 	bne.w	40c8 <_svfiprintf_r+0x9c>
    42ea:	2120      	movs	r1, #32
    42ec:	e6ec      	b.n	40c8 <_svfiprintf_r+0x9c>
    42ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42f0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	2401      	movs	r4, #1
    42f8:	f04f 0500 	mov.w	r5, #0
    42fc:	f10c 0c04 	add.w	ip, ip, #4
    4300:	9005      	str	r0, [sp, #20]
    4302:	9404      	str	r4, [sp, #16]
    4304:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
    4308:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    430c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    4310:	9406      	str	r4, [sp, #24]
    4312:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    4316:	2400      	movs	r4, #0
    4318:	9403      	str	r4, [sp, #12]
    431a:	9d01      	ldr	r5, [sp, #4]
    431c:	f015 0502 	ands.w	r5, r5, #2
    4320:	9507      	str	r5, [sp, #28]
    4322:	d005      	beq.n	4330 <_svfiprintf_r+0x304>
    4324:	f8dd c010 	ldr.w	ip, [sp, #16]
    4328:	f10c 0c02 	add.w	ip, ip, #2
    432c:	f8cd c010 	str.w	ip, [sp, #16]
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    4336:	930a      	str	r3, [sp, #40]	; 0x28
    4338:	f040 8182 	bne.w	4640 <_svfiprintf_r+0x614>
    433c:	9d05      	ldr	r5, [sp, #20]
    433e:	f8dd c010 	ldr.w	ip, [sp, #16]
    4342:	ebcc 0405 	rsb	r4, ip, r5
    4346:	2c00      	cmp	r4, #0
    4348:	f340 817a 	ble.w	4640 <_svfiprintf_r+0x614>
    434c:	2c10      	cmp	r4, #16
    434e:	9915      	ldr	r1, [sp, #84]	; 0x54
    4350:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4352:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 4550 <_svfiprintf_r+0x524>
    4356:	dd26      	ble.n	43a6 <_svfiprintf_r+0x37a>
    4358:	465b      	mov	r3, fp
    435a:	2510      	movs	r5, #16
    435c:	46a3      	mov	fp, r4
    435e:	461c      	mov	r4, r3
    4360:	e006      	b.n	4370 <_svfiprintf_r+0x344>
    4362:	f1ab 0b10 	sub.w	fp, fp, #16
    4366:	f1bb 0f10 	cmp.w	fp, #16
    436a:	f106 0608 	add.w	r6, r6, #8
    436e:	dd17      	ble.n	43a0 <_svfiprintf_r+0x374>
    4370:	3201      	adds	r2, #1
    4372:	3110      	adds	r1, #16
    4374:	2a07      	cmp	r2, #7
    4376:	9115      	str	r1, [sp, #84]	; 0x54
    4378:	9214      	str	r2, [sp, #80]	; 0x50
    437a:	e886 0030 	stmia.w	r6, {r4, r5}
    437e:	ddf0      	ble.n	4362 <_svfiprintf_r+0x336>
    4380:	9802      	ldr	r0, [sp, #8]
    4382:	4651      	mov	r1, sl
    4384:	aa13      	add	r2, sp, #76	; 0x4c
    4386:	f7ff fdd1 	bl	3f2c <__ssprint_r>
    438a:	2800      	cmp	r0, #0
    438c:	f040 825f 	bne.w	484e <_svfiprintf_r+0x822>
    4390:	f1ab 0b10 	sub.w	fp, fp, #16
    4394:	f1bb 0f10 	cmp.w	fp, #16
    4398:	9915      	ldr	r1, [sp, #84]	; 0x54
    439a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    439c:	463e      	mov	r6, r7
    439e:	dce7      	bgt.n	4370 <_svfiprintf_r+0x344>
    43a0:	4623      	mov	r3, r4
    43a2:	465c      	mov	r4, fp
    43a4:	469b      	mov	fp, r3
    43a6:	3201      	adds	r2, #1
    43a8:	4421      	add	r1, r4
    43aa:	2a07      	cmp	r2, #7
    43ac:	9115      	str	r1, [sp, #84]	; 0x54
    43ae:	9214      	str	r2, [sp, #80]	; 0x50
    43b0:	f8c6 b000 	str.w	fp, [r6]
    43b4:	6074      	str	r4, [r6, #4]
    43b6:	f300 82f1 	bgt.w	499c <_svfiprintf_r+0x970>
    43ba:	3608      	adds	r6, #8
    43bc:	e142      	b.n	4644 <_svfiprintf_r+0x618>
    43be:	9d01      	ldr	r5, [sp, #4]
    43c0:	4c62      	ldr	r4, [pc, #392]	; (454c <_svfiprintf_r+0x520>)
    43c2:	06aa      	lsls	r2, r5, #26
    43c4:	9005      	str	r0, [sp, #20]
    43c6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    43ca:	940b      	str	r4, [sp, #44]	; 0x2c
    43cc:	f53f af68 	bmi.w	42a0 <_svfiprintf_r+0x274>
    43d0:	9d01      	ldr	r5, [sp, #4]
    43d2:	06ed      	lsls	r5, r5, #27
    43d4:	f100 832f 	bmi.w	4a36 <_svfiprintf_r+0xa0a>
    43d8:	9c01      	ldr	r4, [sp, #4]
    43da:	0664      	lsls	r4, r4, #25
    43dc:	f140 8357 	bpl.w	4a8e <_svfiprintf_r+0xa62>
    43e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    43e4:	2500      	movs	r5, #0
    43e6:	f8bc 4000 	ldrh.w	r4, [ip]
    43ea:	f10c 0c04 	add.w	ip, ip, #4
    43ee:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    43f2:	e760      	b.n	42b6 <_svfiprintf_r+0x28a>
    43f4:	9c01      	ldr	r4, [sp, #4]
    43f6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    43fa:	06a4      	lsls	r4, r4, #26
    43fc:	f100 8325 	bmi.w	4a4a <_svfiprintf_r+0xa1e>
    4400:	f8dd c004 	ldr.w	ip, [sp, #4]
    4404:	f01c 0f10 	tst.w	ip, #16
    4408:	f000 8347 	beq.w	4a9a <_svfiprintf_r+0xa6e>
    440c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    440e:	9d08      	ldr	r5, [sp, #32]
    4410:	6823      	ldr	r3, [r4, #0]
    4412:	3404      	adds	r4, #4
    4414:	9409      	str	r4, [sp, #36]	; 0x24
    4416:	601d      	str	r5, [r3, #0]
    4418:	e61f      	b.n	405a <_svfiprintf_r+0x2e>
    441a:	f898 3000 	ldrb.w	r3, [r8]
    441e:	4642      	mov	r2, r8
    4420:	2b6c      	cmp	r3, #108	; 0x6c
    4422:	f000 831f 	beq.w	4a64 <_svfiprintf_r+0xa38>
    4426:	9d01      	ldr	r5, [sp, #4]
    4428:	f045 0510 	orr.w	r5, r5, #16
    442c:	9501      	str	r5, [sp, #4]
    442e:	e64b      	b.n	40c8 <_svfiprintf_r+0x9c>
    4430:	f8dd c004 	ldr.w	ip, [sp, #4]
    4434:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
    4438:	f8cd c004 	str.w	ip, [sp, #4]
    443c:	f898 3000 	ldrb.w	r3, [r8]
    4440:	e642      	b.n	40c8 <_svfiprintf_r+0x9c>
    4442:	9d01      	ldr	r5, [sp, #4]
    4444:	9005      	str	r0, [sp, #20]
    4446:	06ab      	lsls	r3, r5, #26
    4448:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    444c:	d550      	bpl.n	44f0 <_svfiprintf_r+0x4c4>
    444e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4452:	f10c 0107 	add.w	r1, ip, #7
    4456:	f021 0107 	bic.w	r1, r1, #7
    445a:	e9d1 2300 	ldrd	r2, r3, [r1]
    445e:	3108      	adds	r1, #8
    4460:	9109      	str	r1, [sp, #36]	; 0x24
    4462:	4614      	mov	r4, r2
    4464:	461d      	mov	r5, r3
    4466:	2a00      	cmp	r2, #0
    4468:	f173 0c00 	sbcs.w	ip, r3, #0
    446c:	f2c0 82d5 	blt.w	4a1a <_svfiprintf_r+0x9ee>
    4470:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
    4474:	9903      	ldr	r1, [sp, #12]
    4476:	9007      	str	r0, [sp, #28]
    4478:	9106      	str	r1, [sp, #24]
    447a:	2301      	movs	r3, #1
    447c:	e6b0      	b.n	41e0 <_svfiprintf_r+0x1b4>
    447e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4480:	f04f 0500 	mov.w	r5, #0
    4484:	f8d4 9000 	ldr.w	r9, [r4]
    4488:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
    448c:	9005      	str	r0, [sp, #20]
    448e:	3404      	adds	r4, #4
    4490:	9d03      	ldr	r5, [sp, #12]
    4492:	f1b9 0f00 	cmp.w	r9, #0
    4496:	f000 8318 	beq.w	4aca <_svfiprintf_r+0xa9e>
    449a:	2d00      	cmp	r5, #0
    449c:	4648      	mov	r0, r9
    449e:	f2c0 8309 	blt.w	4ab4 <_svfiprintf_r+0xa88>
    44a2:	2100      	movs	r1, #0
    44a4:	462a      	mov	r2, r5
    44a6:	f000 ffdb 	bl	5460 <memchr>
    44aa:	2800      	cmp	r0, #0
    44ac:	f000 8333 	beq.w	4b16 <_svfiprintf_r+0xaea>
    44b0:	ebc9 0000 	rsb	r0, r9, r0
    44b4:	42a8      	cmp	r0, r5
    44b6:	bfb8      	it	lt
    44b8:	4605      	movlt	r5, r0
    44ba:	9409      	str	r4, [sp, #36]	; 0x24
    44bc:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
    44c0:	9506      	str	r5, [sp, #24]
    44c2:	2500      	movs	r5, #0
    44c4:	9407      	str	r4, [sp, #28]
    44c6:	9503      	str	r5, [sp, #12]
    44c8:	e6a1      	b.n	420e <_svfiprintf_r+0x1e2>
    44ca:	f8dd c004 	ldr.w	ip, [sp, #4]
    44ce:	f04c 0c20 	orr.w	ip, ip, #32
    44d2:	f8cd c004 	str.w	ip, [sp, #4]
    44d6:	f898 3000 	ldrb.w	r3, [r8]
    44da:	e5f5      	b.n	40c8 <_svfiprintf_r+0x9c>
    44dc:	9c01      	ldr	r4, [sp, #4]
    44de:	9005      	str	r0, [sp, #20]
    44e0:	f044 0410 	orr.w	r4, r4, #16
    44e4:	9401      	str	r4, [sp, #4]
    44e6:	9d01      	ldr	r5, [sp, #4]
    44e8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    44ec:	06ab      	lsls	r3, r5, #26
    44ee:	d4ae      	bmi.n	444e <_svfiprintf_r+0x422>
    44f0:	9c01      	ldr	r4, [sp, #4]
    44f2:	06e5      	lsls	r5, r4, #27
    44f4:	f100 8285 	bmi.w	4a02 <_svfiprintf_r+0x9d6>
    44f8:	f8dd c004 	ldr.w	ip, [sp, #4]
    44fc:	f01c 0f40 	tst.w	ip, #64	; 0x40
    4500:	f000 827f 	beq.w	4a02 <_svfiprintf_r+0x9d6>
    4504:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4508:	f9bc 4000 	ldrsh.w	r4, [ip]
    450c:	f10c 0c04 	add.w	ip, ip, #4
    4510:	17e5      	asrs	r5, r4, #31
    4512:	4622      	mov	r2, r4
    4514:	462b      	mov	r3, r5
    4516:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    451a:	e7a4      	b.n	4466 <_svfiprintf_r+0x43a>
    451c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4520:	2000      	movs	r0, #0
    4522:	f818 3b01 	ldrb.w	r3, [r8], #1
    4526:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    452a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    452e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4532:	2a09      	cmp	r2, #9
    4534:	d9f5      	bls.n	4522 <_svfiprintf_r+0x4f6>
    4536:	e5c9      	b.n	40cc <_svfiprintf_r+0xa0>
    4538:	9d01      	ldr	r5, [sp, #4]
    453a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
    453e:	9501      	str	r5, [sp, #4]
    4540:	f898 3000 	ldrb.w	r3, [r8]
    4544:	e5c0      	b.n	40c8 <_svfiprintf_r+0x9c>
    4546:	bf00      	nop
    4548:	00006848 	.word	0x00006848
    454c:	00006834 	.word	0x00006834
    4550:	00006864 	.word	0x00006864
    4554:	f898 3000 	ldrb.w	r3, [r8]
    4558:	f108 0501 	add.w	r5, r8, #1
    455c:	2b2a      	cmp	r3, #42	; 0x2a
    455e:	f000 82e8 	beq.w	4b32 <_svfiprintf_r+0xb06>
    4562:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4566:	2a09      	cmp	r2, #9
    4568:	bf98      	it	ls
    456a:	2400      	movls	r4, #0
    456c:	f200 82dc 	bhi.w	4b28 <_svfiprintf_r+0xafc>
    4570:	f815 3b01 	ldrb.w	r3, [r5], #1
    4574:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4578:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    457c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    4580:	2a09      	cmp	r2, #9
    4582:	d9f5      	bls.n	4570 <_svfiprintf_r+0x544>
    4584:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
    4588:	9403      	str	r4, [sp, #12]
    458a:	46a8      	mov	r8, r5
    458c:	e59e      	b.n	40cc <_svfiprintf_r+0xa0>
    458e:	f8dd c004 	ldr.w	ip, [sp, #4]
    4592:	9005      	str	r0, [sp, #20]
    4594:	f04c 0c10 	orr.w	ip, ip, #16
    4598:	f8cd c004 	str.w	ip, [sp, #4]
    459c:	9c01      	ldr	r4, [sp, #4]
    459e:	06a0      	lsls	r0, r4, #26
    45a0:	f53f ae0b 	bmi.w	41ba <_svfiprintf_r+0x18e>
    45a4:	9c01      	ldr	r4, [sp, #4]
    45a6:	06e1      	lsls	r1, r4, #27
    45a8:	f100 8223 	bmi.w	49f2 <_svfiprintf_r+0x9c6>
    45ac:	f8dd c004 	ldr.w	ip, [sp, #4]
    45b0:	f01c 0f40 	tst.w	ip, #64	; 0x40
    45b4:	f000 821d 	beq.w	49f2 <_svfiprintf_r+0x9c6>
    45b8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    45bc:	2500      	movs	r5, #0
    45be:	f8bc 4000 	ldrh.w	r4, [ip]
    45c2:	f10c 0c04 	add.w	ip, ip, #4
    45c6:	2301      	movs	r3, #1
    45c8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    45cc:	e600      	b.n	41d0 <_svfiprintf_r+0x1a4>
    45ce:	9d01      	ldr	r5, [sp, #4]
    45d0:	9005      	str	r0, [sp, #20]
    45d2:	f045 0510 	orr.w	r5, r5, #16
    45d6:	9501      	str	r5, [sp, #4]
    45d8:	f8dd c004 	ldr.w	ip, [sp, #4]
    45dc:	f01c 0320 	ands.w	r3, ip, #32
    45e0:	f47f ae28 	bne.w	4234 <_svfiprintf_r+0x208>
    45e4:	f8dd c004 	ldr.w	ip, [sp, #4]
    45e8:	f01c 0210 	ands.w	r2, ip, #16
    45ec:	f040 81fa 	bne.w	49e4 <_svfiprintf_r+0x9b8>
    45f0:	f8dd c004 	ldr.w	ip, [sp, #4]
    45f4:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
    45f8:	f000 81f4 	beq.w	49e4 <_svfiprintf_r+0x9b8>
    45fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4600:	4613      	mov	r3, r2
    4602:	f8bc 4000 	ldrh.w	r4, [ip]
    4606:	f10c 0c04 	add.w	ip, ip, #4
    460a:	2500      	movs	r5, #0
    460c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    4610:	e5de      	b.n	41d0 <_svfiprintf_r+0x1a4>
    4612:	9005      	str	r0, [sp, #20]
    4614:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    4618:	2b00      	cmp	r3, #0
    461a:	f000 8111 	beq.w	4840 <_svfiprintf_r+0x814>
    461e:	f04f 0c01 	mov.w	ip, #1
    4622:	f04f 0000 	mov.w	r0, #0
    4626:	f8cd c010 	str.w	ip, [sp, #16]
    462a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    462e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    4632:	f8cd c018 	str.w	ip, [sp, #24]
    4636:	f10d 0958 	add.w	r9, sp, #88	; 0x58
    463a:	e66c      	b.n	4316 <_svfiprintf_r+0x2ea>
    463c:	2302      	movs	r3, #2
    463e:	e5c7      	b.n	41d0 <_svfiprintf_r+0x1a4>
    4640:	9915      	ldr	r1, [sp, #84]	; 0x54
    4642:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4644:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    4648:	b163      	cbz	r3, 4664 <_svfiprintf_r+0x638>
    464a:	3201      	adds	r2, #1
    464c:	3101      	adds	r1, #1
    464e:	f10d 0047 	add.w	r0, sp, #71	; 0x47
    4652:	2301      	movs	r3, #1
    4654:	2a07      	cmp	r2, #7
    4656:	9115      	str	r1, [sp, #84]	; 0x54
    4658:	9214      	str	r2, [sp, #80]	; 0x50
    465a:	e886 0009 	stmia.w	r6, {r0, r3}
    465e:	f300 8185 	bgt.w	496c <_svfiprintf_r+0x940>
    4662:	3608      	adds	r6, #8
    4664:	9b07      	ldr	r3, [sp, #28]
    4666:	b15b      	cbz	r3, 4680 <_svfiprintf_r+0x654>
    4668:	3201      	adds	r2, #1
    466a:	3102      	adds	r1, #2
    466c:	a812      	add	r0, sp, #72	; 0x48
    466e:	2302      	movs	r3, #2
    4670:	2a07      	cmp	r2, #7
    4672:	9115      	str	r1, [sp, #84]	; 0x54
    4674:	9214      	str	r2, [sp, #80]	; 0x50
    4676:	e886 0009 	stmia.w	r6, {r0, r3}
    467a:	f300 8183 	bgt.w	4984 <_svfiprintf_r+0x958>
    467e:	3608      	adds	r6, #8
    4680:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4682:	2c80      	cmp	r4, #128	; 0x80
    4684:	f000 80ee 	beq.w	4864 <_svfiprintf_r+0x838>
    4688:	9d03      	ldr	r5, [sp, #12]
    468a:	9b06      	ldr	r3, [sp, #24]
    468c:	1aec      	subs	r4, r5, r3
    468e:	2c00      	cmp	r4, #0
    4690:	dd30      	ble.n	46f4 <_svfiprintf_r+0x6c8>
    4692:	2c10      	cmp	r4, #16
    4694:	4da4      	ldr	r5, [pc, #656]	; (4928 <_svfiprintf_r+0x8fc>)
    4696:	dd23      	ble.n	46e0 <_svfiprintf_r+0x6b4>
    4698:	462b      	mov	r3, r5
    469a:	f04f 0b10 	mov.w	fp, #16
    469e:	4625      	mov	r5, r4
    46a0:	461c      	mov	r4, r3
    46a2:	e004      	b.n	46ae <_svfiprintf_r+0x682>
    46a4:	3d10      	subs	r5, #16
    46a6:	2d10      	cmp	r5, #16
    46a8:	f106 0608 	add.w	r6, r6, #8
    46ac:	dd15      	ble.n	46da <_svfiprintf_r+0x6ae>
    46ae:	3201      	adds	r2, #1
    46b0:	3110      	adds	r1, #16
    46b2:	2a07      	cmp	r2, #7
    46b4:	9115      	str	r1, [sp, #84]	; 0x54
    46b6:	9214      	str	r2, [sp, #80]	; 0x50
    46b8:	e886 0810 	stmia.w	r6, {r4, fp}
    46bc:	ddf2      	ble.n	46a4 <_svfiprintf_r+0x678>
    46be:	9802      	ldr	r0, [sp, #8]
    46c0:	4651      	mov	r1, sl
    46c2:	aa13      	add	r2, sp, #76	; 0x4c
    46c4:	f7ff fc32 	bl	3f2c <__ssprint_r>
    46c8:	2800      	cmp	r0, #0
    46ca:	f040 80c0 	bne.w	484e <_svfiprintf_r+0x822>
    46ce:	3d10      	subs	r5, #16
    46d0:	2d10      	cmp	r5, #16
    46d2:	9915      	ldr	r1, [sp, #84]	; 0x54
    46d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    46d6:	463e      	mov	r6, r7
    46d8:	dce9      	bgt.n	46ae <_svfiprintf_r+0x682>
    46da:	4623      	mov	r3, r4
    46dc:	462c      	mov	r4, r5
    46de:	461d      	mov	r5, r3
    46e0:	3201      	adds	r2, #1
    46e2:	4421      	add	r1, r4
    46e4:	2a07      	cmp	r2, #7
    46e6:	9115      	str	r1, [sp, #84]	; 0x54
    46e8:	9214      	str	r2, [sp, #80]	; 0x50
    46ea:	6035      	str	r5, [r6, #0]
    46ec:	6074      	str	r4, [r6, #4]
    46ee:	f300 810f 	bgt.w	4910 <_svfiprintf_r+0x8e4>
    46f2:	3608      	adds	r6, #8
    46f4:	9c06      	ldr	r4, [sp, #24]
    46f6:	3201      	adds	r2, #1
    46f8:	4421      	add	r1, r4
    46fa:	2a07      	cmp	r2, #7
    46fc:	9115      	str	r1, [sp, #84]	; 0x54
    46fe:	9214      	str	r2, [sp, #80]	; 0x50
    4700:	f8c6 9000 	str.w	r9, [r6]
    4704:	6074      	str	r4, [r6, #4]
    4706:	f300 80e6 	bgt.w	48d6 <_svfiprintf_r+0x8aa>
    470a:	3608      	adds	r6, #8
    470c:	9d01      	ldr	r5, [sp, #4]
    470e:	076b      	lsls	r3, r5, #29
    4710:	d536      	bpl.n	4780 <_svfiprintf_r+0x754>
    4712:	9d05      	ldr	r5, [sp, #20]
    4714:	f8dd c010 	ldr.w	ip, [sp, #16]
    4718:	ebcc 0405 	rsb	r4, ip, r5
    471c:	2c00      	cmp	r4, #0
    471e:	dd2f      	ble.n	4780 <_svfiprintf_r+0x754>
    4720:	2c10      	cmp	r4, #16
    4722:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4724:	f8df b204 	ldr.w	fp, [pc, #516]	; 492c <_svfiprintf_r+0x900>
    4728:	dd20      	ble.n	476c <_svfiprintf_r+0x740>
    472a:	2510      	movs	r5, #16
    472c:	460b      	mov	r3, r1
    472e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4732:	e004      	b.n	473e <_svfiprintf_r+0x712>
    4734:	3c10      	subs	r4, #16
    4736:	2c10      	cmp	r4, #16
    4738:	f106 0608 	add.w	r6, r6, #8
    473c:	dd15      	ble.n	476a <_svfiprintf_r+0x73e>
    473e:	3201      	adds	r2, #1
    4740:	3310      	adds	r3, #16
    4742:	2a07      	cmp	r2, #7
    4744:	9315      	str	r3, [sp, #84]	; 0x54
    4746:	9214      	str	r2, [sp, #80]	; 0x50
    4748:	f8c6 b000 	str.w	fp, [r6]
    474c:	6075      	str	r5, [r6, #4]
    474e:	ddf1      	ble.n	4734 <_svfiprintf_r+0x708>
    4750:	4648      	mov	r0, r9
    4752:	4651      	mov	r1, sl
    4754:	aa13      	add	r2, sp, #76	; 0x4c
    4756:	f7ff fbe9 	bl	3f2c <__ssprint_r>
    475a:	2800      	cmp	r0, #0
    475c:	d177      	bne.n	484e <_svfiprintf_r+0x822>
    475e:	3c10      	subs	r4, #16
    4760:	2c10      	cmp	r4, #16
    4762:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4764:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4766:	463e      	mov	r6, r7
    4768:	dce9      	bgt.n	473e <_svfiprintf_r+0x712>
    476a:	4619      	mov	r1, r3
    476c:	3201      	adds	r2, #1
    476e:	4421      	add	r1, r4
    4770:	2a07      	cmp	r2, #7
    4772:	9115      	str	r1, [sp, #84]	; 0x54
    4774:	9214      	str	r2, [sp, #80]	; 0x50
    4776:	f8c6 b000 	str.w	fp, [r6]
    477a:	6074      	str	r4, [r6, #4]
    477c:	f300 8123 	bgt.w	49c6 <_svfiprintf_r+0x99a>
    4780:	9c08      	ldr	r4, [sp, #32]
    4782:	f8dd c010 	ldr.w	ip, [sp, #16]
    4786:	9d05      	ldr	r5, [sp, #20]
    4788:	45ac      	cmp	ip, r5
    478a:	bfac      	ite	ge
    478c:	4464      	addge	r4, ip
    478e:	1964      	addlt	r4, r4, r5
    4790:	9408      	str	r4, [sp, #32]
    4792:	2900      	cmp	r1, #0
    4794:	f040 80a9 	bne.w	48ea <_svfiprintf_r+0x8be>
    4798:	f898 3000 	ldrb.w	r3, [r8]
    479c:	2000      	movs	r0, #0
    479e:	9014      	str	r0, [sp, #80]	; 0x50
    47a0:	463e      	mov	r6, r7
    47a2:	2b00      	cmp	r3, #0
    47a4:	f47f ac5e 	bne.w	4064 <_svfiprintf_r+0x38>
    47a8:	4644      	mov	r4, r8
    47aa:	e47b      	b.n	40a4 <_svfiprintf_r+0x78>
    47ac:	2b01      	cmp	r3, #1
    47ae:	f000 80bf 	beq.w	4930 <_svfiprintf_r+0x904>
    47b2:	2b02      	cmp	r3, #2
    47b4:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
    47b8:	d119      	bne.n	47ee <_svfiprintf_r+0x7c2>
    47ba:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    47be:	4619      	mov	r1, r3
    47c0:	f004 000f 	and.w	r0, r4, #15
    47c4:	0922      	lsrs	r2, r4, #4
    47c6:	f81c 0000 	ldrb.w	r0, [ip, r0]
    47ca:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
    47ce:	092b      	lsrs	r3, r5, #4
    47d0:	7008      	strb	r0, [r1, #0]
    47d2:	ea52 0003 	orrs.w	r0, r2, r3
    47d6:	4689      	mov	r9, r1
    47d8:	4614      	mov	r4, r2
    47da:	461d      	mov	r5, r3
    47dc:	f101 31ff 	add.w	r1, r1, #4294967295
    47e0:	d1ee      	bne.n	47c0 <_svfiprintf_r+0x794>
    47e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    47e6:	ebc9 0307 	rsb	r3, r9, r7
    47ea:	9306      	str	r3, [sp, #24]
    47ec:	e50f      	b.n	420e <_svfiprintf_r+0x1e2>
    47ee:	08e0      	lsrs	r0, r4, #3
    47f0:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
    47f4:	f004 0207 	and.w	r2, r4, #7
    47f8:	08e9      	lsrs	r1, r5, #3
    47fa:	3230      	adds	r2, #48	; 0x30
    47fc:	ea50 0c01 	orrs.w	ip, r0, r1
    4800:	4699      	mov	r9, r3
    4802:	701a      	strb	r2, [r3, #0]
    4804:	4604      	mov	r4, r0
    4806:	460d      	mov	r5, r1
    4808:	f103 33ff 	add.w	r3, r3, #4294967295
    480c:	d1ef      	bne.n	47ee <_svfiprintf_r+0x7c2>
    480e:	9c01      	ldr	r4, [sp, #4]
    4810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    4814:	07e0      	lsls	r0, r4, #31
    4816:	4649      	mov	r1, r9
    4818:	d50e      	bpl.n	4838 <_svfiprintf_r+0x80c>
    481a:	2a30      	cmp	r2, #48	; 0x30
    481c:	d0e3      	beq.n	47e6 <_svfiprintf_r+0x7ba>
    481e:	4699      	mov	r9, r3
    4820:	ebc9 0407 	rsb	r4, r9, r7
    4824:	2330      	movs	r3, #48	; 0x30
    4826:	9406      	str	r4, [sp, #24]
    4828:	f801 3c01 	strb.w	r3, [r1, #-1]
    482c:	e4ef      	b.n	420e <_svfiprintf_r+0x1e2>
    482e:	2330      	movs	r3, #48	; 0x30
    4830:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    4834:	f809 3d41 	strb.w	r3, [r9, #-65]!
    4838:	ebc9 0507 	rsb	r5, r9, r7
    483c:	9506      	str	r5, [sp, #24]
    483e:	e4e6      	b.n	420e <_svfiprintf_r+0x1e2>
    4840:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4842:	b123      	cbz	r3, 484e <_svfiprintf_r+0x822>
    4844:	9802      	ldr	r0, [sp, #8]
    4846:	4651      	mov	r1, sl
    4848:	aa13      	add	r2, sp, #76	; 0x4c
    484a:	f7ff fb6f 	bl	3f2c <__ssprint_r>
    484e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
    4852:	9808      	ldr	r0, [sp, #32]
    4854:	f013 0f40 	tst.w	r3, #64	; 0x40
    4858:	bf18      	it	ne
    485a:	f04f 30ff 	movne.w	r0, #4294967295
    485e:	b031      	add	sp, #196	; 0xc4
    4860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4864:	9d05      	ldr	r5, [sp, #20]
    4866:	f8dd c010 	ldr.w	ip, [sp, #16]
    486a:	ebcc 0405 	rsb	r4, ip, r5
    486e:	2c00      	cmp	r4, #0
    4870:	f77f af0a 	ble.w	4688 <_svfiprintf_r+0x65c>
    4874:	2c10      	cmp	r4, #16
    4876:	4d2c      	ldr	r5, [pc, #176]	; (4928 <_svfiprintf_r+0x8fc>)
    4878:	dd22      	ble.n	48c0 <_svfiprintf_r+0x894>
    487a:	462b      	mov	r3, r5
    487c:	f04f 0b10 	mov.w	fp, #16
    4880:	4625      	mov	r5, r4
    4882:	461c      	mov	r4, r3
    4884:	e004      	b.n	4890 <_svfiprintf_r+0x864>
    4886:	3d10      	subs	r5, #16
    4888:	2d10      	cmp	r5, #16
    488a:	f106 0608 	add.w	r6, r6, #8
    488e:	dd14      	ble.n	48ba <_svfiprintf_r+0x88e>
    4890:	3201      	adds	r2, #1
    4892:	3110      	adds	r1, #16
    4894:	2a07      	cmp	r2, #7
    4896:	9115      	str	r1, [sp, #84]	; 0x54
    4898:	9214      	str	r2, [sp, #80]	; 0x50
    489a:	e886 0810 	stmia.w	r6, {r4, fp}
    489e:	ddf2      	ble.n	4886 <_svfiprintf_r+0x85a>
    48a0:	9802      	ldr	r0, [sp, #8]
    48a2:	4651      	mov	r1, sl
    48a4:	aa13      	add	r2, sp, #76	; 0x4c
    48a6:	f7ff fb41 	bl	3f2c <__ssprint_r>
    48aa:	2800      	cmp	r0, #0
    48ac:	d1cf      	bne.n	484e <_svfiprintf_r+0x822>
    48ae:	3d10      	subs	r5, #16
    48b0:	2d10      	cmp	r5, #16
    48b2:	9915      	ldr	r1, [sp, #84]	; 0x54
    48b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    48b6:	463e      	mov	r6, r7
    48b8:	dcea      	bgt.n	4890 <_svfiprintf_r+0x864>
    48ba:	4623      	mov	r3, r4
    48bc:	462c      	mov	r4, r5
    48be:	461d      	mov	r5, r3
    48c0:	3201      	adds	r2, #1
    48c2:	4421      	add	r1, r4
    48c4:	2a07      	cmp	r2, #7
    48c6:	9115      	str	r1, [sp, #84]	; 0x54
    48c8:	9214      	str	r2, [sp, #80]	; 0x50
    48ca:	6035      	str	r5, [r6, #0]
    48cc:	6074      	str	r4, [r6, #4]
    48ce:	f300 80d2 	bgt.w	4a76 <_svfiprintf_r+0xa4a>
    48d2:	3608      	adds	r6, #8
    48d4:	e6d8      	b.n	4688 <_svfiprintf_r+0x65c>
    48d6:	9802      	ldr	r0, [sp, #8]
    48d8:	4651      	mov	r1, sl
    48da:	aa13      	add	r2, sp, #76	; 0x4c
    48dc:	f7ff fb26 	bl	3f2c <__ssprint_r>
    48e0:	2800      	cmp	r0, #0
    48e2:	d1b4      	bne.n	484e <_svfiprintf_r+0x822>
    48e4:	9915      	ldr	r1, [sp, #84]	; 0x54
    48e6:	463e      	mov	r6, r7
    48e8:	e710      	b.n	470c <_svfiprintf_r+0x6e0>
    48ea:	9802      	ldr	r0, [sp, #8]
    48ec:	4651      	mov	r1, sl
    48ee:	aa13      	add	r2, sp, #76	; 0x4c
    48f0:	f7ff fb1c 	bl	3f2c <__ssprint_r>
    48f4:	2800      	cmp	r0, #0
    48f6:	f43f af4f 	beq.w	4798 <_svfiprintf_r+0x76c>
    48fa:	e7a8      	b.n	484e <_svfiprintf_r+0x822>
    48fc:	9802      	ldr	r0, [sp, #8]
    48fe:	4651      	mov	r1, sl
    4900:	aa13      	add	r2, sp, #76	; 0x4c
    4902:	f7ff fb13 	bl	3f2c <__ssprint_r>
    4906:	2800      	cmp	r0, #0
    4908:	d1a1      	bne.n	484e <_svfiprintf_r+0x822>
    490a:	463e      	mov	r6, r7
    490c:	f7ff bbc7 	b.w	409e <_svfiprintf_r+0x72>
    4910:	9802      	ldr	r0, [sp, #8]
    4912:	4651      	mov	r1, sl
    4914:	aa13      	add	r2, sp, #76	; 0x4c
    4916:	f7ff fb09 	bl	3f2c <__ssprint_r>
    491a:	2800      	cmp	r0, #0
    491c:	d197      	bne.n	484e <_svfiprintf_r+0x822>
    491e:	9915      	ldr	r1, [sp, #84]	; 0x54
    4920:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4922:	463e      	mov	r6, r7
    4924:	e6e6      	b.n	46f4 <_svfiprintf_r+0x6c8>
    4926:	bf00      	nop
    4928:	00006824 	.word	0x00006824
    492c:	00006864 	.word	0x00006864
    4930:	2d00      	cmp	r5, #0
    4932:	bf08      	it	eq
    4934:	2c0a      	cmpeq	r4, #10
    4936:	d33d      	bcc.n	49b4 <_svfiprintf_r+0x988>
    4938:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
    493c:	4620      	mov	r0, r4
    493e:	4629      	mov	r1, r5
    4940:	220a      	movs	r2, #10
    4942:	2300      	movs	r3, #0
    4944:	f001 f918 	bl	5b78 <__aeabi_uldivmod>
    4948:	3230      	adds	r2, #48	; 0x30
    494a:	f88b 2000 	strb.w	r2, [fp]
    494e:	4620      	mov	r0, r4
    4950:	4629      	mov	r1, r5
    4952:	220a      	movs	r2, #10
    4954:	2300      	movs	r3, #0
    4956:	f001 f90f 	bl	5b78 <__aeabi_uldivmod>
    495a:	4604      	mov	r4, r0
    495c:	460d      	mov	r5, r1
    495e:	ea54 0c05 	orrs.w	ip, r4, r5
    4962:	46d9      	mov	r9, fp
    4964:	f10b 3bff 	add.w	fp, fp, #4294967295
    4968:	d1e8      	bne.n	493c <_svfiprintf_r+0x910>
    496a:	e73c      	b.n	47e6 <_svfiprintf_r+0x7ba>
    496c:	9802      	ldr	r0, [sp, #8]
    496e:	4651      	mov	r1, sl
    4970:	aa13      	add	r2, sp, #76	; 0x4c
    4972:	f7ff fadb 	bl	3f2c <__ssprint_r>
    4976:	2800      	cmp	r0, #0
    4978:	f47f af69 	bne.w	484e <_svfiprintf_r+0x822>
    497c:	9915      	ldr	r1, [sp, #84]	; 0x54
    497e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4980:	463e      	mov	r6, r7
    4982:	e66f      	b.n	4664 <_svfiprintf_r+0x638>
    4984:	9802      	ldr	r0, [sp, #8]
    4986:	4651      	mov	r1, sl
    4988:	aa13      	add	r2, sp, #76	; 0x4c
    498a:	f7ff facf 	bl	3f2c <__ssprint_r>
    498e:	2800      	cmp	r0, #0
    4990:	f47f af5d 	bne.w	484e <_svfiprintf_r+0x822>
    4994:	9915      	ldr	r1, [sp, #84]	; 0x54
    4996:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4998:	463e      	mov	r6, r7
    499a:	e671      	b.n	4680 <_svfiprintf_r+0x654>
    499c:	9802      	ldr	r0, [sp, #8]
    499e:	4651      	mov	r1, sl
    49a0:	aa13      	add	r2, sp, #76	; 0x4c
    49a2:	f7ff fac3 	bl	3f2c <__ssprint_r>
    49a6:	2800      	cmp	r0, #0
    49a8:	f47f af51 	bne.w	484e <_svfiprintf_r+0x822>
    49ac:	9915      	ldr	r1, [sp, #84]	; 0x54
    49ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
    49b0:	463e      	mov	r6, r7
    49b2:	e647      	b.n	4644 <_svfiprintf_r+0x618>
    49b4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    49b8:	3430      	adds	r4, #48	; 0x30
    49ba:	f809 4d41 	strb.w	r4, [r9, #-65]!
    49be:	ebc9 0507 	rsb	r5, r9, r7
    49c2:	9506      	str	r5, [sp, #24]
    49c4:	e423      	b.n	420e <_svfiprintf_r+0x1e2>
    49c6:	9802      	ldr	r0, [sp, #8]
    49c8:	4651      	mov	r1, sl
    49ca:	aa13      	add	r2, sp, #76	; 0x4c
    49cc:	f7ff faae 	bl	3f2c <__ssprint_r>
    49d0:	2800      	cmp	r0, #0
    49d2:	f47f af3c 	bne.w	484e <_svfiprintf_r+0x822>
    49d6:	9915      	ldr	r1, [sp, #84]	; 0x54
    49d8:	e6d2      	b.n	4780 <_svfiprintf_r+0x754>
    49da:	9309      	str	r3, [sp, #36]	; 0x24
    49dc:	f898 3000 	ldrb.w	r3, [r8]
    49e0:	f7ff bb72 	b.w	40c8 <_svfiprintf_r+0x9c>
    49e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    49e6:	682c      	ldr	r4, [r5, #0]
    49e8:	3504      	adds	r5, #4
    49ea:	9509      	str	r5, [sp, #36]	; 0x24
    49ec:	2500      	movs	r5, #0
    49ee:	f7ff bbef 	b.w	41d0 <_svfiprintf_r+0x1a4>
    49f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    49f4:	2301      	movs	r3, #1
    49f6:	682c      	ldr	r4, [r5, #0]
    49f8:	3504      	adds	r5, #4
    49fa:	9509      	str	r5, [sp, #36]	; 0x24
    49fc:	2500      	movs	r5, #0
    49fe:	f7ff bbe7 	b.w	41d0 <_svfiprintf_r+0x1a4>
    4a02:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4a04:	682c      	ldr	r4, [r5, #0]
    4a06:	3504      	adds	r5, #4
    4a08:	9509      	str	r5, [sp, #36]	; 0x24
    4a0a:	17e5      	asrs	r5, r4, #31
    4a0c:	4622      	mov	r2, r4
    4a0e:	462b      	mov	r3, r5
    4a10:	2a00      	cmp	r2, #0
    4a12:	f173 0c00 	sbcs.w	ip, r3, #0
    4a16:	f6bf ad2b 	bge.w	4470 <_svfiprintf_r+0x444>
    4a1a:	9a03      	ldr	r2, [sp, #12]
    4a1c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
    4a20:	4264      	negs	r4, r4
    4a22:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    4a26:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
    4a2a:	f8cd b01c 	str.w	fp, [sp, #28]
    4a2e:	9206      	str	r2, [sp, #24]
    4a30:	2301      	movs	r3, #1
    4a32:	f7ff bbd5 	b.w	41e0 <_svfiprintf_r+0x1b4>
    4a36:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4a3a:	2500      	movs	r5, #0
    4a3c:	f8dc 4000 	ldr.w	r4, [ip]
    4a40:	f10c 0c04 	add.w	ip, ip, #4
    4a44:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    4a48:	e435      	b.n	42b6 <_svfiprintf_r+0x28a>
    4a4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4a4c:	9c08      	ldr	r4, [sp, #32]
    4a4e:	6829      	ldr	r1, [r5, #0]
    4a50:	17e5      	asrs	r5, r4, #31
    4a52:	462b      	mov	r3, r5
    4a54:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4a56:	4622      	mov	r2, r4
    4a58:	3504      	adds	r5, #4
    4a5a:	9509      	str	r5, [sp, #36]	; 0x24
    4a5c:	e9c1 2300 	strd	r2, r3, [r1]
    4a60:	f7ff bafb 	b.w	405a <_svfiprintf_r+0x2e>
    4a64:	9c01      	ldr	r4, [sp, #4]
    4a66:	f108 0801 	add.w	r8, r8, #1
    4a6a:	f044 0420 	orr.w	r4, r4, #32
    4a6e:	9401      	str	r4, [sp, #4]
    4a70:	7853      	ldrb	r3, [r2, #1]
    4a72:	f7ff bb29 	b.w	40c8 <_svfiprintf_r+0x9c>
    4a76:	9802      	ldr	r0, [sp, #8]
    4a78:	4651      	mov	r1, sl
    4a7a:	aa13      	add	r2, sp, #76	; 0x4c
    4a7c:	f7ff fa56 	bl	3f2c <__ssprint_r>
    4a80:	2800      	cmp	r0, #0
    4a82:	f47f aee4 	bne.w	484e <_svfiprintf_r+0x822>
    4a86:	9915      	ldr	r1, [sp, #84]	; 0x54
    4a88:	9a14      	ldr	r2, [sp, #80]	; 0x50
    4a8a:	463e      	mov	r6, r7
    4a8c:	e5fc      	b.n	4688 <_svfiprintf_r+0x65c>
    4a8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4a90:	682c      	ldr	r4, [r5, #0]
    4a92:	3504      	adds	r5, #4
    4a94:	9509      	str	r5, [sp, #36]	; 0x24
    4a96:	2500      	movs	r5, #0
    4a98:	e40d      	b.n	42b6 <_svfiprintf_r+0x28a>
    4a9a:	f8dd c004 	ldr.w	ip, [sp, #4]
    4a9e:	f01c 0f40 	tst.w	ip, #64	; 0x40
    4aa2:	d02c      	beq.n	4afe <_svfiprintf_r+0xad2>
    4aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4aa6:	9d08      	ldr	r5, [sp, #32]
    4aa8:	6823      	ldr	r3, [r4, #0]
    4aaa:	3404      	adds	r4, #4
    4aac:	9409      	str	r4, [sp, #36]	; 0x24
    4aae:	801d      	strh	r5, [r3, #0]
    4ab0:	f7ff bad3 	b.w	405a <_svfiprintf_r+0x2e>
    4ab4:	9409      	str	r4, [sp, #36]	; 0x24
    4ab6:	f7ff fa09 	bl	3ecc <strlen>
    4aba:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
    4abe:	2500      	movs	r5, #0
    4ac0:	9006      	str	r0, [sp, #24]
    4ac2:	9407      	str	r4, [sp, #28]
    4ac4:	9503      	str	r5, [sp, #12]
    4ac6:	f7ff bba2 	b.w	420e <_svfiprintf_r+0x1e2>
    4aca:	2d06      	cmp	r5, #6
    4acc:	bf28      	it	cs
    4ace:	2506      	movcs	r5, #6
    4ad0:	ea25 7ce5 	bic.w	ip, r5, r5, asr #31
    4ad4:	9506      	str	r5, [sp, #24]
    4ad6:	9409      	str	r4, [sp, #36]	; 0x24
    4ad8:	f8cd c010 	str.w	ip, [sp, #16]
    4adc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4b64 <_svfiprintf_r+0xb38>
    4ae0:	e419      	b.n	4316 <_svfiprintf_r+0x2ea>
    4ae2:	2140      	movs	r1, #64	; 0x40
    4ae4:	f000 fa20 	bl	4f28 <_malloc_r>
    4ae8:	f8ca 0000 	str.w	r0, [sl]
    4aec:	f8ca 0010 	str.w	r0, [sl, #16]
    4af0:	2800      	cmp	r0, #0
    4af2:	d031      	beq.n	4b58 <_svfiprintf_r+0xb2c>
    4af4:	2340      	movs	r3, #64	; 0x40
    4af6:	f8ca 3014 	str.w	r3, [sl, #20]
    4afa:	f7ff baa6 	b.w	404a <_svfiprintf_r+0x1e>
    4afe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4b02:	9c08      	ldr	r4, [sp, #32]
    4b04:	f8dc 3000 	ldr.w	r3, [ip]
    4b08:	f10c 0c04 	add.w	ip, ip, #4
    4b0c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    4b10:	601c      	str	r4, [r3, #0]
    4b12:	f7ff baa2 	b.w	405a <_svfiprintf_r+0x2e>
    4b16:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
    4b1a:	9409      	str	r4, [sp, #36]	; 0x24
    4b1c:	9507      	str	r5, [sp, #28]
    4b1e:	9d03      	ldr	r5, [sp, #12]
    4b20:	9003      	str	r0, [sp, #12]
    4b22:	9506      	str	r5, [sp, #24]
    4b24:	f7ff bb73 	b.w	420e <_svfiprintf_r+0x1e2>
    4b28:	46a8      	mov	r8, r5
    4b2a:	2500      	movs	r5, #0
    4b2c:	9503      	str	r5, [sp, #12]
    4b2e:	f7ff bacd 	b.w	40cc <_svfiprintf_r+0xa0>
    4b32:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4b34:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    4b38:	6824      	ldr	r4, [r4, #0]
    4b3a:	f10c 0204 	add.w	r2, ip, #4
    4b3e:	2c00      	cmp	r4, #0
    4b40:	f898 3001 	ldrb.w	r3, [r8, #1]
    4b44:	9403      	str	r4, [sp, #12]
    4b46:	9209      	str	r2, [sp, #36]	; 0x24
    4b48:	46a8      	mov	r8, r5
    4b4a:	f6bf aabd 	bge.w	40c8 <_svfiprintf_r+0x9c>
    4b4e:	f04f 34ff 	mov.w	r4, #4294967295
    4b52:	9403      	str	r4, [sp, #12]
    4b54:	f7ff bab8 	b.w	40c8 <_svfiprintf_r+0x9c>
    4b58:	9c02      	ldr	r4, [sp, #8]
    4b5a:	230c      	movs	r3, #12
    4b5c:	6023      	str	r3, [r4, #0]
    4b5e:	f04f 30ff 	mov.w	r0, #4294967295
    4b62:	e67c      	b.n	485e <_svfiprintf_r+0x832>
    4b64:	0000685c 	.word	0x0000685c

00004b68 <_vsiprintf_r>:
    4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6a:	b09b      	sub	sp, #108	; 0x6c
    4b6c:	460d      	mov	r5, r1
    4b6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    4b72:	f44f 7702 	mov.w	r7, #520	; 0x208
    4b76:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4b7a:	4669      	mov	r1, sp
    4b7c:	9500      	str	r5, [sp, #0]
    4b7e:	9504      	str	r5, [sp, #16]
    4b80:	f8ad 700c 	strh.w	r7, [sp, #12]
    4b84:	9402      	str	r4, [sp, #8]
    4b86:	9405      	str	r4, [sp, #20]
    4b88:	f8ad 600e 	strh.w	r6, [sp, #14]
    4b8c:	f7ff fa4e 	bl	402c <_svfiprintf_r>
    4b90:	9b00      	ldr	r3, [sp, #0]
    4b92:	2200      	movs	r2, #0
    4b94:	701a      	strb	r2, [r3, #0]
    4b96:	b01b      	add	sp, #108	; 0x6c
    4b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b9a:	bf00      	nop

00004b9c <vsiprintf>:
    4b9c:	b430      	push	{r4, r5}
    4b9e:	4c04      	ldr	r4, [pc, #16]	; (4bb0 <vsiprintf+0x14>)
    4ba0:	460d      	mov	r5, r1
    4ba2:	4613      	mov	r3, r2
    4ba4:	4601      	mov	r1, r0
    4ba6:	462a      	mov	r2, r5
    4ba8:	6820      	ldr	r0, [r4, #0]
    4baa:	bc30      	pop	{r4, r5}
    4bac:	f7ff bfdc 	b.w	4b68 <_vsiprintf_r>
    4bb0:	20000460 	.word	0x20000460

00004bb4 <register_fini>:
    4bb4:	4b02      	ldr	r3, [pc, #8]	; (4bc0 <register_fini+0xc>)
    4bb6:	b113      	cbz	r3, 4bbe <register_fini+0xa>
    4bb8:	4802      	ldr	r0, [pc, #8]	; (4bc4 <register_fini+0x10>)
    4bba:	f000 b87d 	b.w	4cb8 <atexit>
    4bbe:	4770      	bx	lr
    4bc0:	00000000 	.word	0x00000000
    4bc4:	00004cc5 	.word	0x00004cc5

00004bc8 <__call_exitprocs>:
    4bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bcc:	4b38      	ldr	r3, [pc, #224]	; (4cb0 <__call_exitprocs+0xe8>)
    4bce:	b085      	sub	sp, #20
    4bd0:	681b      	ldr	r3, [r3, #0]
    4bd2:	9002      	str	r0, [sp, #8]
    4bd4:	f503 72a4 	add.w	r2, r3, #328	; 0x148
    4bd8:	9301      	str	r3, [sp, #4]
    4bda:	460f      	mov	r7, r1
    4bdc:	9203      	str	r2, [sp, #12]
    4bde:	9b01      	ldr	r3, [sp, #4]
    4be0:	f8d3 8148 	ldr.w	r8, [r3, #328]	; 0x148
    4be4:	f1b8 0f00 	cmp.w	r8, #0
    4be8:	d01c      	beq.n	4c24 <__call_exitprocs+0x5c>
    4bea:	f8dd b00c 	ldr.w	fp, [sp, #12]
    4bee:	f04f 0901 	mov.w	r9, #1
    4bf2:	46da      	mov	sl, fp
    4bf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4bf8:	1e5c      	subs	r4, r3, #1
    4bfa:	d411      	bmi.n	4c20 <__call_exitprocs+0x58>
    4bfc:	f108 0588 	add.w	r5, r8, #136	; 0x88
    4c00:	1c9e      	adds	r6, r3, #2
    4c02:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4c06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
    4c0a:	b177      	cbz	r7, 4c2a <__call_exitprocs+0x62>
    4c0c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    4c0e:	42bb      	cmp	r3, r7
    4c10:	d00b      	beq.n	4c2a <__call_exitprocs+0x62>
    4c12:	3c01      	subs	r4, #1
    4c14:	1c63      	adds	r3, r4, #1
    4c16:	f1a5 0504 	sub.w	r5, r5, #4
    4c1a:	f1a6 0604 	sub.w	r6, r6, #4
    4c1e:	d1f4      	bne.n	4c0a <__call_exitprocs+0x42>
    4c20:	4a24      	ldr	r2, [pc, #144]	; (4cb4 <__call_exitprocs+0xec>)
    4c22:	bb7a      	cbnz	r2, 4c84 <__call_exitprocs+0xbc>
    4c24:	b005      	add	sp, #20
    4c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4c2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    4c32:	3a01      	subs	r2, #1
    4c34:	42a2      	cmp	r2, r4
    4c36:	bf16      	itet	ne
    4c38:	2200      	movne	r2, #0
    4c3a:	f8c8 4004 	streq.w	r4, [r8, #4]
    4c3e:	f846 2c04 	strne.w	r2, [r6, #-4]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d0e5      	beq.n	4c12 <__call_exitprocs+0x4a>
    4c46:	fa09 f204 	lsl.w	r2, r9, r4
    4c4a:	f8d8 1188 	ldr.w	r1, [r8, #392]	; 0x188
    4c4e:	f8d8 b004 	ldr.w	fp, [r8, #4]
    4c52:	420a      	tst	r2, r1
    4c54:	d010      	beq.n	4c78 <__call_exitprocs+0xb0>
    4c56:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
    4c5a:	420a      	tst	r2, r1
    4c5c:	d10e      	bne.n	4c7c <__call_exitprocs+0xb4>
    4c5e:	9802      	ldr	r0, [sp, #8]
    4c60:	f855 1c04 	ldr.w	r1, [r5, #-4]
    4c64:	4798      	blx	r3
    4c66:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4c6a:	455b      	cmp	r3, fp
    4c6c:	d1b7      	bne.n	4bde <__call_exitprocs+0x16>
    4c6e:	f8da 3000 	ldr.w	r3, [sl]
    4c72:	4543      	cmp	r3, r8
    4c74:	d0cd      	beq.n	4c12 <__call_exitprocs+0x4a>
    4c76:	e7b2      	b.n	4bde <__call_exitprocs+0x16>
    4c78:	4798      	blx	r3
    4c7a:	e7f4      	b.n	4c66 <__call_exitprocs+0x9e>
    4c7c:	f855 0c04 	ldr.w	r0, [r5, #-4]
    4c80:	4798      	blx	r3
    4c82:	e7f0      	b.n	4c66 <__call_exitprocs+0x9e>
    4c84:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4c88:	b96b      	cbnz	r3, 4ca6 <__call_exitprocs+0xde>
    4c8a:	f8d8 3000 	ldr.w	r3, [r8]
    4c8e:	b163      	cbz	r3, 4caa <__call_exitprocs+0xe2>
    4c90:	4640      	mov	r0, r8
    4c92:	f8ca 3000 	str.w	r3, [sl]
    4c96:	f3af 8000 	nop.w
    4c9a:	f8da 8000 	ldr.w	r8, [sl]
    4c9e:	f1b8 0f00 	cmp.w	r8, #0
    4ca2:	d1a7      	bne.n	4bf4 <__call_exitprocs+0x2c>
    4ca4:	e7be      	b.n	4c24 <__call_exitprocs+0x5c>
    4ca6:	f8d8 3000 	ldr.w	r3, [r8]
    4caa:	46c2      	mov	sl, r8
    4cac:	4698      	mov	r8, r3
    4cae:	e7f6      	b.n	4c9e <__call_exitprocs+0xd6>
    4cb0:	00006820 	.word	0x00006820
    4cb4:	00000000 	.word	0x00000000

00004cb8 <atexit>:
    4cb8:	4601      	mov	r1, r0
    4cba:	2000      	movs	r0, #0
    4cbc:	4602      	mov	r2, r0
    4cbe:	4603      	mov	r3, r0
    4cc0:	f000 beea 	b.w	5a98 <__register_exitproc>

00004cc4 <__libc_fini_array>:
    4cc4:	b538      	push	{r3, r4, r5, lr}
    4cc6:	4d09      	ldr	r5, [pc, #36]	; (4cec <__libc_fini_array+0x28>)
    4cc8:	4c09      	ldr	r4, [pc, #36]	; (4cf0 <__libc_fini_array+0x2c>)
    4cca:	1b64      	subs	r4, r4, r5
    4ccc:	10a4      	asrs	r4, r4, #2
    4cce:	bf18      	it	ne
    4cd0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
    4cd4:	d005      	beq.n	4ce2 <__libc_fini_array+0x1e>
    4cd6:	3c01      	subs	r4, #1
    4cd8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4cdc:	4798      	blx	r3
    4cde:	2c00      	cmp	r4, #0
    4ce0:	d1f9      	bne.n	4cd6 <__libc_fini_array+0x12>
    4ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4ce6:	f001 ba2d 	b.w	6144 <_fini>
    4cea:	bf00      	nop
    4cec:	20000a00 	.word	0x20000a00
    4cf0:	20000a04 	.word	0x20000a04

00004cf4 <_malloc_trim_r>:
    4cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cf6:	4d23      	ldr	r5, [pc, #140]	; (4d84 <_malloc_trim_r+0x90>)
    4cf8:	460f      	mov	r7, r1
    4cfa:	4604      	mov	r4, r0
    4cfc:	f000 fcd6 	bl	56ac <__malloc_lock>
    4d00:	68ab      	ldr	r3, [r5, #8]
    4d02:	685e      	ldr	r6, [r3, #4]
    4d04:	f026 0603 	bic.w	r6, r6, #3
    4d08:	1bf1      	subs	r1, r6, r7
    4d0a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    4d0e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    4d12:	f021 010f 	bic.w	r1, r1, #15
    4d16:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
    4d1a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    4d1e:	db07      	blt.n	4d30 <_malloc_trim_r+0x3c>
    4d20:	4620      	mov	r0, r4
    4d22:	2100      	movs	r1, #0
    4d24:	f000 fea6 	bl	5a74 <_sbrk_r>
    4d28:	68ab      	ldr	r3, [r5, #8]
    4d2a:	4433      	add	r3, r6
    4d2c:	4298      	cmp	r0, r3
    4d2e:	d004      	beq.n	4d3a <_malloc_trim_r+0x46>
    4d30:	4620      	mov	r0, r4
    4d32:	f000 fcbd 	bl	56b0 <__malloc_unlock>
    4d36:	2000      	movs	r0, #0
    4d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d3a:	4620      	mov	r0, r4
    4d3c:	4279      	negs	r1, r7
    4d3e:	f000 fe99 	bl	5a74 <_sbrk_r>
    4d42:	3001      	adds	r0, #1
    4d44:	d00d      	beq.n	4d62 <_malloc_trim_r+0x6e>
    4d46:	4b10      	ldr	r3, [pc, #64]	; (4d88 <_malloc_trim_r+0x94>)
    4d48:	68aa      	ldr	r2, [r5, #8]
    4d4a:	6819      	ldr	r1, [r3, #0]
    4d4c:	1bf6      	subs	r6, r6, r7
    4d4e:	f046 0601 	orr.w	r6, r6, #1
    4d52:	4620      	mov	r0, r4
    4d54:	1bc9      	subs	r1, r1, r7
    4d56:	6056      	str	r6, [r2, #4]
    4d58:	6019      	str	r1, [r3, #0]
    4d5a:	f000 fca9 	bl	56b0 <__malloc_unlock>
    4d5e:	2001      	movs	r0, #1
    4d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d62:	4620      	mov	r0, r4
    4d64:	2100      	movs	r1, #0
    4d66:	f000 fe85 	bl	5a74 <_sbrk_r>
    4d6a:	68ab      	ldr	r3, [r5, #8]
    4d6c:	1ac2      	subs	r2, r0, r3
    4d6e:	2a0f      	cmp	r2, #15
    4d70:	ddde      	ble.n	4d30 <_malloc_trim_r+0x3c>
    4d72:	4d06      	ldr	r5, [pc, #24]	; (4d8c <_malloc_trim_r+0x98>)
    4d74:	4904      	ldr	r1, [pc, #16]	; (4d88 <_malloc_trim_r+0x94>)
    4d76:	682d      	ldr	r5, [r5, #0]
    4d78:	f042 0201 	orr.w	r2, r2, #1
    4d7c:	1b40      	subs	r0, r0, r5
    4d7e:	605a      	str	r2, [r3, #4]
    4d80:	6008      	str	r0, [r1, #0]
    4d82:	e7d5      	b.n	4d30 <_malloc_trim_r+0x3c>
    4d84:	20000464 	.word	0x20000464
    4d88:	200027f0 	.word	0x200027f0
    4d8c:	20000870 	.word	0x20000870

00004d90 <_free_r>:
    4d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d94:	460d      	mov	r5, r1
    4d96:	4606      	mov	r6, r0
    4d98:	2900      	cmp	r1, #0
    4d9a:	d055      	beq.n	4e48 <_free_r+0xb8>
    4d9c:	f000 fc86 	bl	56ac <__malloc_lock>
    4da0:	f855 1c04 	ldr.w	r1, [r5, #-4]
    4da4:	f8df c170 	ldr.w	ip, [pc, #368]	; 4f18 <_free_r+0x188>
    4da8:	f1a5 0408 	sub.w	r4, r5, #8
    4dac:	f021 0301 	bic.w	r3, r1, #1
    4db0:	18e2      	adds	r2, r4, r3
    4db2:	f8dc 0008 	ldr.w	r0, [ip, #8]
    4db6:	6857      	ldr	r7, [r2, #4]
    4db8:	4290      	cmp	r0, r2
    4dba:	f027 0703 	bic.w	r7, r7, #3
    4dbe:	d068      	beq.n	4e92 <_free_r+0x102>
    4dc0:	f011 0101 	ands.w	r1, r1, #1
    4dc4:	6057      	str	r7, [r2, #4]
    4dc6:	d032      	beq.n	4e2e <_free_r+0x9e>
    4dc8:	2100      	movs	r1, #0
    4dca:	19d0      	adds	r0, r2, r7
    4dcc:	6840      	ldr	r0, [r0, #4]
    4dce:	07c0      	lsls	r0, r0, #31
    4dd0:	d406      	bmi.n	4de0 <_free_r+0x50>
    4dd2:	443b      	add	r3, r7
    4dd4:	6890      	ldr	r0, [r2, #8]
    4dd6:	2900      	cmp	r1, #0
    4dd8:	d04d      	beq.n	4e76 <_free_r+0xe6>
    4dda:	68d2      	ldr	r2, [r2, #12]
    4ddc:	60c2      	str	r2, [r0, #12]
    4dde:	6090      	str	r0, [r2, #8]
    4de0:	f043 0201 	orr.w	r2, r3, #1
    4de4:	6062      	str	r2, [r4, #4]
    4de6:	50e3      	str	r3, [r4, r3]
    4de8:	b9e1      	cbnz	r1, 4e24 <_free_r+0x94>
    4dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4dee:	d32d      	bcc.n	4e4c <_free_r+0xbc>
    4df0:	0a5a      	lsrs	r2, r3, #9
    4df2:	2a04      	cmp	r2, #4
    4df4:	d869      	bhi.n	4eca <_free_r+0x13a>
    4df6:	0998      	lsrs	r0, r3, #6
    4df8:	3038      	adds	r0, #56	; 0x38
    4dfa:	0041      	lsls	r1, r0, #1
    4dfc:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
    4e00:	f8dc 2008 	ldr.w	r2, [ip, #8]
    4e04:	4944      	ldr	r1, [pc, #272]	; (4f18 <_free_r+0x188>)
    4e06:	4562      	cmp	r2, ip
    4e08:	d065      	beq.n	4ed6 <_free_r+0x146>
    4e0a:	6851      	ldr	r1, [r2, #4]
    4e0c:	f021 0103 	bic.w	r1, r1, #3
    4e10:	428b      	cmp	r3, r1
    4e12:	d202      	bcs.n	4e1a <_free_r+0x8a>
    4e14:	6892      	ldr	r2, [r2, #8]
    4e16:	4594      	cmp	ip, r2
    4e18:	d1f7      	bne.n	4e0a <_free_r+0x7a>
    4e1a:	68d3      	ldr	r3, [r2, #12]
    4e1c:	60e3      	str	r3, [r4, #12]
    4e1e:	60a2      	str	r2, [r4, #8]
    4e20:	609c      	str	r4, [r3, #8]
    4e22:	60d4      	str	r4, [r2, #12]
    4e24:	4630      	mov	r0, r6
    4e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e2a:	f000 bc41 	b.w	56b0 <__malloc_unlock>
    4e2e:	f855 5c08 	ldr.w	r5, [r5, #-8]
    4e32:	f10c 0808 	add.w	r8, ip, #8
    4e36:	1b64      	subs	r4, r4, r5
    4e38:	68a0      	ldr	r0, [r4, #8]
    4e3a:	442b      	add	r3, r5
    4e3c:	4540      	cmp	r0, r8
    4e3e:	d042      	beq.n	4ec6 <_free_r+0x136>
    4e40:	68e5      	ldr	r5, [r4, #12]
    4e42:	60c5      	str	r5, [r0, #12]
    4e44:	60a8      	str	r0, [r5, #8]
    4e46:	e7c0      	b.n	4dca <_free_r+0x3a>
    4e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e4c:	08db      	lsrs	r3, r3, #3
    4e4e:	109a      	asrs	r2, r3, #2
    4e50:	2001      	movs	r0, #1
    4e52:	4090      	lsls	r0, r2
    4e54:	f8dc 1004 	ldr.w	r1, [ip, #4]
    4e58:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    4e5c:	689a      	ldr	r2, [r3, #8]
    4e5e:	4301      	orrs	r1, r0
    4e60:	60a2      	str	r2, [r4, #8]
    4e62:	60e3      	str	r3, [r4, #12]
    4e64:	f8cc 1004 	str.w	r1, [ip, #4]
    4e68:	4630      	mov	r0, r6
    4e6a:	609c      	str	r4, [r3, #8]
    4e6c:	60d4      	str	r4, [r2, #12]
    4e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e72:	f000 bc1d 	b.w	56b0 <__malloc_unlock>
    4e76:	4d29      	ldr	r5, [pc, #164]	; (4f1c <_free_r+0x18c>)
    4e78:	42a8      	cmp	r0, r5
    4e7a:	d1ae      	bne.n	4dda <_free_r+0x4a>
    4e7c:	f043 0201 	orr.w	r2, r3, #1
    4e80:	f8cc 4014 	str.w	r4, [ip, #20]
    4e84:	f8cc 4010 	str.w	r4, [ip, #16]
    4e88:	60e0      	str	r0, [r4, #12]
    4e8a:	60a0      	str	r0, [r4, #8]
    4e8c:	6062      	str	r2, [r4, #4]
    4e8e:	50e3      	str	r3, [r4, r3]
    4e90:	e7c8      	b.n	4e24 <_free_r+0x94>
    4e92:	441f      	add	r7, r3
    4e94:	07cb      	lsls	r3, r1, #31
    4e96:	d407      	bmi.n	4ea8 <_free_r+0x118>
    4e98:	f855 1c08 	ldr.w	r1, [r5, #-8]
    4e9c:	1a64      	subs	r4, r4, r1
    4e9e:	68e3      	ldr	r3, [r4, #12]
    4ea0:	68a2      	ldr	r2, [r4, #8]
    4ea2:	440f      	add	r7, r1
    4ea4:	60d3      	str	r3, [r2, #12]
    4ea6:	609a      	str	r2, [r3, #8]
    4ea8:	4b1d      	ldr	r3, [pc, #116]	; (4f20 <_free_r+0x190>)
    4eaa:	f047 0201 	orr.w	r2, r7, #1
    4eae:	681b      	ldr	r3, [r3, #0]
    4eb0:	6062      	str	r2, [r4, #4]
    4eb2:	429f      	cmp	r7, r3
    4eb4:	f8cc 4008 	str.w	r4, [ip, #8]
    4eb8:	d3b4      	bcc.n	4e24 <_free_r+0x94>
    4eba:	4b1a      	ldr	r3, [pc, #104]	; (4f24 <_free_r+0x194>)
    4ebc:	4630      	mov	r0, r6
    4ebe:	6819      	ldr	r1, [r3, #0]
    4ec0:	f7ff ff18 	bl	4cf4 <_malloc_trim_r>
    4ec4:	e7ae      	b.n	4e24 <_free_r+0x94>
    4ec6:	2101      	movs	r1, #1
    4ec8:	e77f      	b.n	4dca <_free_r+0x3a>
    4eca:	2a14      	cmp	r2, #20
    4ecc:	d80b      	bhi.n	4ee6 <_free_r+0x156>
    4ece:	f102 005b 	add.w	r0, r2, #91	; 0x5b
    4ed2:	0041      	lsls	r1, r0, #1
    4ed4:	e792      	b.n	4dfc <_free_r+0x6c>
    4ed6:	1080      	asrs	r0, r0, #2
    4ed8:	2501      	movs	r5, #1
    4eda:	4085      	lsls	r5, r0
    4edc:	6848      	ldr	r0, [r1, #4]
    4ede:	4613      	mov	r3, r2
    4ee0:	4328      	orrs	r0, r5
    4ee2:	6048      	str	r0, [r1, #4]
    4ee4:	e79a      	b.n	4e1c <_free_r+0x8c>
    4ee6:	2a54      	cmp	r2, #84	; 0x54
    4ee8:	d803      	bhi.n	4ef2 <_free_r+0x162>
    4eea:	0b18      	lsrs	r0, r3, #12
    4eec:	306e      	adds	r0, #110	; 0x6e
    4eee:	0041      	lsls	r1, r0, #1
    4ef0:	e784      	b.n	4dfc <_free_r+0x6c>
    4ef2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4ef6:	d803      	bhi.n	4f00 <_free_r+0x170>
    4ef8:	0bd8      	lsrs	r0, r3, #15
    4efa:	3077      	adds	r0, #119	; 0x77
    4efc:	0041      	lsls	r1, r0, #1
    4efe:	e77d      	b.n	4dfc <_free_r+0x6c>
    4f00:	f240 5154 	movw	r1, #1364	; 0x554
    4f04:	428a      	cmp	r2, r1
    4f06:	d803      	bhi.n	4f10 <_free_r+0x180>
    4f08:	0c98      	lsrs	r0, r3, #18
    4f0a:	307c      	adds	r0, #124	; 0x7c
    4f0c:	0041      	lsls	r1, r0, #1
    4f0e:	e775      	b.n	4dfc <_free_r+0x6c>
    4f10:	21fc      	movs	r1, #252	; 0xfc
    4f12:	207e      	movs	r0, #126	; 0x7e
    4f14:	e772      	b.n	4dfc <_free_r+0x6c>
    4f16:	bf00      	nop
    4f18:	20000464 	.word	0x20000464
    4f1c:	2000046c 	.word	0x2000046c
    4f20:	2000086c 	.word	0x2000086c
    4f24:	200027ec 	.word	0x200027ec

00004f28 <_malloc_r>:
    4f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f2c:	f101 050b 	add.w	r5, r1, #11
    4f30:	2d16      	cmp	r5, #22
    4f32:	b083      	sub	sp, #12
    4f34:	4606      	mov	r6, r0
    4f36:	d927      	bls.n	4f88 <_malloc_r+0x60>
    4f38:	f035 0507 	bics.w	r5, r5, #7
    4f3c:	d427      	bmi.n	4f8e <_malloc_r+0x66>
    4f3e:	42a9      	cmp	r1, r5
    4f40:	d825      	bhi.n	4f8e <_malloc_r+0x66>
    4f42:	4630      	mov	r0, r6
    4f44:	f000 fbb2 	bl	56ac <__malloc_lock>
    4f48:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    4f4c:	d226      	bcs.n	4f9c <_malloc_r+0x74>
    4f4e:	4fc1      	ldr	r7, [pc, #772]	; (5254 <_malloc_r+0x32c>)
    4f50:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
    4f54:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
    4f58:	68dc      	ldr	r4, [r3, #12]
    4f5a:	429c      	cmp	r4, r3
    4f5c:	f000 81d2 	beq.w	5304 <_malloc_r+0x3dc>
    4f60:	6863      	ldr	r3, [r4, #4]
    4f62:	68e2      	ldr	r2, [r4, #12]
    4f64:	f023 0303 	bic.w	r3, r3, #3
    4f68:	4423      	add	r3, r4
    4f6a:	6858      	ldr	r0, [r3, #4]
    4f6c:	68a1      	ldr	r1, [r4, #8]
    4f6e:	f040 0501 	orr.w	r5, r0, #1
    4f72:	60ca      	str	r2, [r1, #12]
    4f74:	4630      	mov	r0, r6
    4f76:	6091      	str	r1, [r2, #8]
    4f78:	605d      	str	r5, [r3, #4]
    4f7a:	f000 fb99 	bl	56b0 <__malloc_unlock>
    4f7e:	3408      	adds	r4, #8
    4f80:	4620      	mov	r0, r4
    4f82:	b003      	add	sp, #12
    4f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f88:	2510      	movs	r5, #16
    4f8a:	42a9      	cmp	r1, r5
    4f8c:	d9d9      	bls.n	4f42 <_malloc_r+0x1a>
    4f8e:	2400      	movs	r4, #0
    4f90:	230c      	movs	r3, #12
    4f92:	4620      	mov	r0, r4
    4f94:	6033      	str	r3, [r6, #0]
    4f96:	b003      	add	sp, #12
    4f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f9c:	ea5f 2c55 	movs.w	ip, r5, lsr #9
    4fa0:	f000 8089 	beq.w	50b6 <_malloc_r+0x18e>
    4fa4:	f1bc 0f04 	cmp.w	ip, #4
    4fa8:	f200 8160 	bhi.w	526c <_malloc_r+0x344>
    4fac:	ea4f 1c95 	mov.w	ip, r5, lsr #6
    4fb0:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
    4fb4:	ea4f 014c 	mov.w	r1, ip, lsl #1
    4fb8:	4fa6      	ldr	r7, [pc, #664]	; (5254 <_malloc_r+0x32c>)
    4fba:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    4fbe:	68cc      	ldr	r4, [r1, #12]
    4fc0:	42a1      	cmp	r1, r4
    4fc2:	d105      	bne.n	4fd0 <_malloc_r+0xa8>
    4fc4:	e00c      	b.n	4fe0 <_malloc_r+0xb8>
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	da79      	bge.n	50be <_malloc_r+0x196>
    4fca:	68e4      	ldr	r4, [r4, #12]
    4fcc:	42a1      	cmp	r1, r4
    4fce:	d007      	beq.n	4fe0 <_malloc_r+0xb8>
    4fd0:	6862      	ldr	r2, [r4, #4]
    4fd2:	f022 0203 	bic.w	r2, r2, #3
    4fd6:	1b53      	subs	r3, r2, r5
    4fd8:	2b0f      	cmp	r3, #15
    4fda:	ddf4      	ble.n	4fc6 <_malloc_r+0x9e>
    4fdc:	f10c 3cff 	add.w	ip, ip, #4294967295
    4fe0:	f10c 0c01 	add.w	ip, ip, #1
    4fe4:	4b9b      	ldr	r3, [pc, #620]	; (5254 <_malloc_r+0x32c>)
    4fe6:	693c      	ldr	r4, [r7, #16]
    4fe8:	f103 0e08 	add.w	lr, r3, #8
    4fec:	4574      	cmp	r4, lr
    4fee:	f000 817e 	beq.w	52ee <_malloc_r+0x3c6>
    4ff2:	6861      	ldr	r1, [r4, #4]
    4ff4:	f021 0103 	bic.w	r1, r1, #3
    4ff8:	1b4a      	subs	r2, r1, r5
    4ffa:	2a0f      	cmp	r2, #15
    4ffc:	f300 8164 	bgt.w	52c8 <_malloc_r+0x3a0>
    5000:	2a00      	cmp	r2, #0
    5002:	f8c3 e014 	str.w	lr, [r3, #20]
    5006:	f8c3 e010 	str.w	lr, [r3, #16]
    500a:	da69      	bge.n	50e0 <_malloc_r+0x1b8>
    500c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5010:	f080 813a 	bcs.w	5288 <_malloc_r+0x360>
    5014:	08c9      	lsrs	r1, r1, #3
    5016:	108a      	asrs	r2, r1, #2
    5018:	f04f 0801 	mov.w	r8, #1
    501c:	fa08 f802 	lsl.w	r8, r8, r2
    5020:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    5024:	685a      	ldr	r2, [r3, #4]
    5026:	6888      	ldr	r0, [r1, #8]
    5028:	ea48 0202 	orr.w	r2, r8, r2
    502c:	60a0      	str	r0, [r4, #8]
    502e:	60e1      	str	r1, [r4, #12]
    5030:	605a      	str	r2, [r3, #4]
    5032:	608c      	str	r4, [r1, #8]
    5034:	60c4      	str	r4, [r0, #12]
    5036:	ea4f 03ac 	mov.w	r3, ip, asr #2
    503a:	2001      	movs	r0, #1
    503c:	4098      	lsls	r0, r3
    503e:	4290      	cmp	r0, r2
    5040:	d85b      	bhi.n	50fa <_malloc_r+0x1d2>
    5042:	4202      	tst	r2, r0
    5044:	d106      	bne.n	5054 <_malloc_r+0x12c>
    5046:	f02c 0c03 	bic.w	ip, ip, #3
    504a:	0040      	lsls	r0, r0, #1
    504c:	4202      	tst	r2, r0
    504e:	f10c 0c04 	add.w	ip, ip, #4
    5052:	d0fa      	beq.n	504a <_malloc_r+0x122>
    5054:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
    5058:	4644      	mov	r4, r8
    505a:	46e1      	mov	r9, ip
    505c:	68e3      	ldr	r3, [r4, #12]
    505e:	429c      	cmp	r4, r3
    5060:	d107      	bne.n	5072 <_malloc_r+0x14a>
    5062:	e146      	b.n	52f2 <_malloc_r+0x3ca>
    5064:	2a00      	cmp	r2, #0
    5066:	f280 8157 	bge.w	5318 <_malloc_r+0x3f0>
    506a:	68db      	ldr	r3, [r3, #12]
    506c:	429c      	cmp	r4, r3
    506e:	f000 8140 	beq.w	52f2 <_malloc_r+0x3ca>
    5072:	6859      	ldr	r1, [r3, #4]
    5074:	f021 0103 	bic.w	r1, r1, #3
    5078:	1b4a      	subs	r2, r1, r5
    507a:	2a0f      	cmp	r2, #15
    507c:	ddf2      	ble.n	5064 <_malloc_r+0x13c>
    507e:	461c      	mov	r4, r3
    5080:	f854 cf08 	ldr.w	ip, [r4, #8]!
    5084:	68d9      	ldr	r1, [r3, #12]
    5086:	f045 0901 	orr.w	r9, r5, #1
    508a:	f042 0801 	orr.w	r8, r2, #1
    508e:	441d      	add	r5, r3
    5090:	f8c3 9004 	str.w	r9, [r3, #4]
    5094:	4630      	mov	r0, r6
    5096:	f8cc 100c 	str.w	r1, [ip, #12]
    509a:	f8c1 c008 	str.w	ip, [r1, #8]
    509e:	617d      	str	r5, [r7, #20]
    50a0:	613d      	str	r5, [r7, #16]
    50a2:	f8c5 e00c 	str.w	lr, [r5, #12]
    50a6:	f8c5 e008 	str.w	lr, [r5, #8]
    50aa:	f8c5 8004 	str.w	r8, [r5, #4]
    50ae:	50aa      	str	r2, [r5, r2]
    50b0:	f000 fafe 	bl	56b0 <__malloc_unlock>
    50b4:	e764      	b.n	4f80 <_malloc_r+0x58>
    50b6:	217e      	movs	r1, #126	; 0x7e
    50b8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    50bc:	e77c      	b.n	4fb8 <_malloc_r+0x90>
    50be:	4422      	add	r2, r4
    50c0:	6850      	ldr	r0, [r2, #4]
    50c2:	68e3      	ldr	r3, [r4, #12]
    50c4:	68a1      	ldr	r1, [r4, #8]
    50c6:	f040 0501 	orr.w	r5, r0, #1
    50ca:	60cb      	str	r3, [r1, #12]
    50cc:	4630      	mov	r0, r6
    50ce:	6099      	str	r1, [r3, #8]
    50d0:	6055      	str	r5, [r2, #4]
    50d2:	f000 faed 	bl	56b0 <__malloc_unlock>
    50d6:	3408      	adds	r4, #8
    50d8:	4620      	mov	r0, r4
    50da:	b003      	add	sp, #12
    50dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50e0:	4421      	add	r1, r4
    50e2:	684b      	ldr	r3, [r1, #4]
    50e4:	4630      	mov	r0, r6
    50e6:	f043 0301 	orr.w	r3, r3, #1
    50ea:	604b      	str	r3, [r1, #4]
    50ec:	f000 fae0 	bl	56b0 <__malloc_unlock>
    50f0:	3408      	adds	r4, #8
    50f2:	4620      	mov	r0, r4
    50f4:	b003      	add	sp, #12
    50f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50fa:	68bc      	ldr	r4, [r7, #8]
    50fc:	6863      	ldr	r3, [r4, #4]
    50fe:	f023 0903 	bic.w	r9, r3, #3
    5102:	45a9      	cmp	r9, r5
    5104:	d304      	bcc.n	5110 <_malloc_r+0x1e8>
    5106:	ebc5 0309 	rsb	r3, r5, r9
    510a:	2b0f      	cmp	r3, #15
    510c:	f300 8091 	bgt.w	5232 <_malloc_r+0x30a>
    5110:	4b51      	ldr	r3, [pc, #324]	; (5258 <_malloc_r+0x330>)
    5112:	4a52      	ldr	r2, [pc, #328]	; (525c <_malloc_r+0x334>)
    5114:	6819      	ldr	r1, [r3, #0]
    5116:	6813      	ldr	r3, [r2, #0]
    5118:	eb05 0a01 	add.w	sl, r5, r1
    511c:	3301      	adds	r3, #1
    511e:	eb04 0b09 	add.w	fp, r4, r9
    5122:	f000 8161 	beq.w	53e8 <_malloc_r+0x4c0>
    5126:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
    512a:	f10a 0a0f 	add.w	sl, sl, #15
    512e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
    5132:	f02a 0a0f 	bic.w	sl, sl, #15
    5136:	4630      	mov	r0, r6
    5138:	4651      	mov	r1, sl
    513a:	9201      	str	r2, [sp, #4]
    513c:	f000 fc9a 	bl	5a74 <_sbrk_r>
    5140:	f1b0 3fff 	cmp.w	r0, #4294967295
    5144:	4680      	mov	r8, r0
    5146:	9a01      	ldr	r2, [sp, #4]
    5148:	f000 8101 	beq.w	534e <_malloc_r+0x426>
    514c:	4583      	cmp	fp, r0
    514e:	f200 80fb 	bhi.w	5348 <_malloc_r+0x420>
    5152:	f8df c114 	ldr.w	ip, [pc, #276]	; 5268 <_malloc_r+0x340>
    5156:	45c3      	cmp	fp, r8
    5158:	f8dc 3000 	ldr.w	r3, [ip]
    515c:	4453      	add	r3, sl
    515e:	f8cc 3000 	str.w	r3, [ip]
    5162:	f000 814a 	beq.w	53fa <_malloc_r+0x4d2>
    5166:	6812      	ldr	r2, [r2, #0]
    5168:	493c      	ldr	r1, [pc, #240]	; (525c <_malloc_r+0x334>)
    516a:	3201      	adds	r2, #1
    516c:	bf1b      	ittet	ne
    516e:	ebcb 0b08 	rsbne	fp, fp, r8
    5172:	445b      	addne	r3, fp
    5174:	f8c1 8000 	streq.w	r8, [r1]
    5178:	f8cc 3000 	strne.w	r3, [ip]
    517c:	f018 0307 	ands.w	r3, r8, #7
    5180:	f000 8114 	beq.w	53ac <_malloc_r+0x484>
    5184:	f1c3 0208 	rsb	r2, r3, #8
    5188:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    518c:	4490      	add	r8, r2
    518e:	3308      	adds	r3, #8
    5190:	44c2      	add	sl, r8
    5192:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
    5196:	ebca 0a03 	rsb	sl, sl, r3
    519a:	4651      	mov	r1, sl
    519c:	4630      	mov	r0, r6
    519e:	f8cd c004 	str.w	ip, [sp, #4]
    51a2:	f000 fc67 	bl	5a74 <_sbrk_r>
    51a6:	1c43      	adds	r3, r0, #1
    51a8:	f8dd c004 	ldr.w	ip, [sp, #4]
    51ac:	f000 8135 	beq.w	541a <_malloc_r+0x4f2>
    51b0:	ebc8 0200 	rsb	r2, r8, r0
    51b4:	4452      	add	r2, sl
    51b6:	f042 0201 	orr.w	r2, r2, #1
    51ba:	f8dc 3000 	ldr.w	r3, [ip]
    51be:	42bc      	cmp	r4, r7
    51c0:	4453      	add	r3, sl
    51c2:	f8c7 8008 	str.w	r8, [r7, #8]
    51c6:	f8cc 3000 	str.w	r3, [ip]
    51ca:	f8c8 2004 	str.w	r2, [r8, #4]
    51ce:	f8df a098 	ldr.w	sl, [pc, #152]	; 5268 <_malloc_r+0x340>
    51d2:	d015      	beq.n	5200 <_malloc_r+0x2d8>
    51d4:	f1b9 0f0f 	cmp.w	r9, #15
    51d8:	f240 80eb 	bls.w	53b2 <_malloc_r+0x48a>
    51dc:	6861      	ldr	r1, [r4, #4]
    51de:	f1a9 020c 	sub.w	r2, r9, #12
    51e2:	f022 0207 	bic.w	r2, r2, #7
    51e6:	f001 0101 	and.w	r1, r1, #1
    51ea:	ea42 0e01 	orr.w	lr, r2, r1
    51ee:	2005      	movs	r0, #5
    51f0:	18a1      	adds	r1, r4, r2
    51f2:	2a0f      	cmp	r2, #15
    51f4:	f8c4 e004 	str.w	lr, [r4, #4]
    51f8:	6048      	str	r0, [r1, #4]
    51fa:	6088      	str	r0, [r1, #8]
    51fc:	f200 8111 	bhi.w	5422 <_malloc_r+0x4fa>
    5200:	4a17      	ldr	r2, [pc, #92]	; (5260 <_malloc_r+0x338>)
    5202:	68bc      	ldr	r4, [r7, #8]
    5204:	6811      	ldr	r1, [r2, #0]
    5206:	428b      	cmp	r3, r1
    5208:	bf88      	it	hi
    520a:	6013      	strhi	r3, [r2, #0]
    520c:	4a15      	ldr	r2, [pc, #84]	; (5264 <_malloc_r+0x33c>)
    520e:	6811      	ldr	r1, [r2, #0]
    5210:	428b      	cmp	r3, r1
    5212:	bf88      	it	hi
    5214:	6013      	strhi	r3, [r2, #0]
    5216:	6862      	ldr	r2, [r4, #4]
    5218:	f022 0203 	bic.w	r2, r2, #3
    521c:	4295      	cmp	r5, r2
    521e:	ebc5 0302 	rsb	r3, r5, r2
    5222:	d801      	bhi.n	5228 <_malloc_r+0x300>
    5224:	2b0f      	cmp	r3, #15
    5226:	dc04      	bgt.n	5232 <_malloc_r+0x30a>
    5228:	4630      	mov	r0, r6
    522a:	f000 fa41 	bl	56b0 <__malloc_unlock>
    522e:	2400      	movs	r4, #0
    5230:	e6a6      	b.n	4f80 <_malloc_r+0x58>
    5232:	f045 0201 	orr.w	r2, r5, #1
    5236:	f043 0301 	orr.w	r3, r3, #1
    523a:	4425      	add	r5, r4
    523c:	6062      	str	r2, [r4, #4]
    523e:	4630      	mov	r0, r6
    5240:	60bd      	str	r5, [r7, #8]
    5242:	606b      	str	r3, [r5, #4]
    5244:	f000 fa34 	bl	56b0 <__malloc_unlock>
    5248:	3408      	adds	r4, #8
    524a:	4620      	mov	r0, r4
    524c:	b003      	add	sp, #12
    524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5252:	bf00      	nop
    5254:	20000464 	.word	0x20000464
    5258:	200027ec 	.word	0x200027ec
    525c:	20000870 	.word	0x20000870
    5260:	200027e8 	.word	0x200027e8
    5264:	200027e4 	.word	0x200027e4
    5268:	200027f0 	.word	0x200027f0
    526c:	f1bc 0f14 	cmp.w	ip, #20
    5270:	d961      	bls.n	5336 <_malloc_r+0x40e>
    5272:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
    5276:	f200 808f 	bhi.w	5398 <_malloc_r+0x470>
    527a:	ea4f 3c15 	mov.w	ip, r5, lsr #12
    527e:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
    5282:	ea4f 014c 	mov.w	r1, ip, lsl #1
    5286:	e697      	b.n	4fb8 <_malloc_r+0x90>
    5288:	0a4b      	lsrs	r3, r1, #9
    528a:	2b04      	cmp	r3, #4
    528c:	d958      	bls.n	5340 <_malloc_r+0x418>
    528e:	2b14      	cmp	r3, #20
    5290:	f200 80ad 	bhi.w	53ee <_malloc_r+0x4c6>
    5294:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    5298:	0050      	lsls	r0, r2, #1
    529a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    529e:	6883      	ldr	r3, [r0, #8]
    52a0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 545c <_malloc_r+0x534>
    52a4:	4283      	cmp	r3, r0
    52a6:	f000 808a 	beq.w	53be <_malloc_r+0x496>
    52aa:	685a      	ldr	r2, [r3, #4]
    52ac:	f022 0203 	bic.w	r2, r2, #3
    52b0:	4291      	cmp	r1, r2
    52b2:	d202      	bcs.n	52ba <_malloc_r+0x392>
    52b4:	689b      	ldr	r3, [r3, #8]
    52b6:	4298      	cmp	r0, r3
    52b8:	d1f7      	bne.n	52aa <_malloc_r+0x382>
    52ba:	68d9      	ldr	r1, [r3, #12]
    52bc:	687a      	ldr	r2, [r7, #4]
    52be:	60e1      	str	r1, [r4, #12]
    52c0:	60a3      	str	r3, [r4, #8]
    52c2:	608c      	str	r4, [r1, #8]
    52c4:	60dc      	str	r4, [r3, #12]
    52c6:	e6b6      	b.n	5036 <_malloc_r+0x10e>
    52c8:	f045 0701 	orr.w	r7, r5, #1
    52cc:	f042 0101 	orr.w	r1, r2, #1
    52d0:	4425      	add	r5, r4
    52d2:	6067      	str	r7, [r4, #4]
    52d4:	4630      	mov	r0, r6
    52d6:	615d      	str	r5, [r3, #20]
    52d8:	611d      	str	r5, [r3, #16]
    52da:	f8c5 e00c 	str.w	lr, [r5, #12]
    52de:	f8c5 e008 	str.w	lr, [r5, #8]
    52e2:	6069      	str	r1, [r5, #4]
    52e4:	50aa      	str	r2, [r5, r2]
    52e6:	3408      	adds	r4, #8
    52e8:	f000 f9e2 	bl	56b0 <__malloc_unlock>
    52ec:	e648      	b.n	4f80 <_malloc_r+0x58>
    52ee:	685a      	ldr	r2, [r3, #4]
    52f0:	e6a1      	b.n	5036 <_malloc_r+0x10e>
    52f2:	f109 0901 	add.w	r9, r9, #1
    52f6:	f019 0f03 	tst.w	r9, #3
    52fa:	f104 0408 	add.w	r4, r4, #8
    52fe:	f47f aead 	bne.w	505c <_malloc_r+0x134>
    5302:	e02d      	b.n	5360 <_malloc_r+0x438>
    5304:	f104 0308 	add.w	r3, r4, #8
    5308:	6964      	ldr	r4, [r4, #20]
    530a:	42a3      	cmp	r3, r4
    530c:	bf08      	it	eq
    530e:	f10c 0c02 	addeq.w	ip, ip, #2
    5312:	f43f ae67 	beq.w	4fe4 <_malloc_r+0xbc>
    5316:	e623      	b.n	4f60 <_malloc_r+0x38>
    5318:	4419      	add	r1, r3
    531a:	6848      	ldr	r0, [r1, #4]
    531c:	461c      	mov	r4, r3
    531e:	f854 2f08 	ldr.w	r2, [r4, #8]!
    5322:	68db      	ldr	r3, [r3, #12]
    5324:	f040 0501 	orr.w	r5, r0, #1
    5328:	604d      	str	r5, [r1, #4]
    532a:	4630      	mov	r0, r6
    532c:	60d3      	str	r3, [r2, #12]
    532e:	609a      	str	r2, [r3, #8]
    5330:	f000 f9be 	bl	56b0 <__malloc_unlock>
    5334:	e624      	b.n	4f80 <_malloc_r+0x58>
    5336:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
    533a:	ea4f 014c 	mov.w	r1, ip, lsl #1
    533e:	e63b      	b.n	4fb8 <_malloc_r+0x90>
    5340:	098a      	lsrs	r2, r1, #6
    5342:	3238      	adds	r2, #56	; 0x38
    5344:	0050      	lsls	r0, r2, #1
    5346:	e7a8      	b.n	529a <_malloc_r+0x372>
    5348:	42bc      	cmp	r4, r7
    534a:	f43f af02 	beq.w	5152 <_malloc_r+0x22a>
    534e:	68bc      	ldr	r4, [r7, #8]
    5350:	6862      	ldr	r2, [r4, #4]
    5352:	f022 0203 	bic.w	r2, r2, #3
    5356:	e761      	b.n	521c <_malloc_r+0x2f4>
    5358:	f8d8 8000 	ldr.w	r8, [r8]
    535c:	4598      	cmp	r8, r3
    535e:	d17a      	bne.n	5456 <_malloc_r+0x52e>
    5360:	f01c 0f03 	tst.w	ip, #3
    5364:	f1a8 0308 	sub.w	r3, r8, #8
    5368:	f10c 3cff 	add.w	ip, ip, #4294967295
    536c:	d1f4      	bne.n	5358 <_malloc_r+0x430>
    536e:	687b      	ldr	r3, [r7, #4]
    5370:	ea23 0300 	bic.w	r3, r3, r0
    5374:	607b      	str	r3, [r7, #4]
    5376:	0040      	lsls	r0, r0, #1
    5378:	4298      	cmp	r0, r3
    537a:	f63f aebe 	bhi.w	50fa <_malloc_r+0x1d2>
    537e:	2800      	cmp	r0, #0
    5380:	f43f aebb 	beq.w	50fa <_malloc_r+0x1d2>
    5384:	4203      	tst	r3, r0
    5386:	46cc      	mov	ip, r9
    5388:	f47f ae64 	bne.w	5054 <_malloc_r+0x12c>
    538c:	0040      	lsls	r0, r0, #1
    538e:	4203      	tst	r3, r0
    5390:	f10c 0c04 	add.w	ip, ip, #4
    5394:	d0fa      	beq.n	538c <_malloc_r+0x464>
    5396:	e65d      	b.n	5054 <_malloc_r+0x12c>
    5398:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
    539c:	d819      	bhi.n	53d2 <_malloc_r+0x4aa>
    539e:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
    53a2:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
    53a6:	ea4f 014c 	mov.w	r1, ip, lsl #1
    53aa:	e605      	b.n	4fb8 <_malloc_r+0x90>
    53ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    53b0:	e6ee      	b.n	5190 <_malloc_r+0x268>
    53b2:	2301      	movs	r3, #1
    53b4:	f8c8 3004 	str.w	r3, [r8, #4]
    53b8:	4644      	mov	r4, r8
    53ba:	2200      	movs	r2, #0
    53bc:	e72e      	b.n	521c <_malloc_r+0x2f4>
    53be:	1092      	asrs	r2, r2, #2
    53c0:	2001      	movs	r0, #1
    53c2:	4090      	lsls	r0, r2
    53c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    53c8:	4619      	mov	r1, r3
    53ca:	4302      	orrs	r2, r0
    53cc:	f8c8 2004 	str.w	r2, [r8, #4]
    53d0:	e775      	b.n	52be <_malloc_r+0x396>
    53d2:	f240 5354 	movw	r3, #1364	; 0x554
    53d6:	459c      	cmp	ip, r3
    53d8:	d81b      	bhi.n	5412 <_malloc_r+0x4ea>
    53da:	ea4f 4c95 	mov.w	ip, r5, lsr #18
    53de:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
    53e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
    53e6:	e5e7      	b.n	4fb8 <_malloc_r+0x90>
    53e8:	f10a 0a10 	add.w	sl, sl, #16
    53ec:	e6a3      	b.n	5136 <_malloc_r+0x20e>
    53ee:	2b54      	cmp	r3, #84	; 0x54
    53f0:	d81f      	bhi.n	5432 <_malloc_r+0x50a>
    53f2:	0b0a      	lsrs	r2, r1, #12
    53f4:	326e      	adds	r2, #110	; 0x6e
    53f6:	0050      	lsls	r0, r2, #1
    53f8:	e74f      	b.n	529a <_malloc_r+0x372>
    53fa:	f3cb 010b 	ubfx	r1, fp, #0, #12
    53fe:	2900      	cmp	r1, #0
    5400:	f47f aeb1 	bne.w	5166 <_malloc_r+0x23e>
    5404:	eb0a 0109 	add.w	r1, sl, r9
    5408:	68ba      	ldr	r2, [r7, #8]
    540a:	f041 0101 	orr.w	r1, r1, #1
    540e:	6051      	str	r1, [r2, #4]
    5410:	e6f6      	b.n	5200 <_malloc_r+0x2d8>
    5412:	21fc      	movs	r1, #252	; 0xfc
    5414:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    5418:	e5ce      	b.n	4fb8 <_malloc_r+0x90>
    541a:	2201      	movs	r2, #1
    541c:	f04f 0a00 	mov.w	sl, #0
    5420:	e6cb      	b.n	51ba <_malloc_r+0x292>
    5422:	f104 0108 	add.w	r1, r4, #8
    5426:	4630      	mov	r0, r6
    5428:	f7ff fcb2 	bl	4d90 <_free_r>
    542c:	f8da 3000 	ldr.w	r3, [sl]
    5430:	e6e6      	b.n	5200 <_malloc_r+0x2d8>
    5432:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5436:	d803      	bhi.n	5440 <_malloc_r+0x518>
    5438:	0bca      	lsrs	r2, r1, #15
    543a:	3277      	adds	r2, #119	; 0x77
    543c:	0050      	lsls	r0, r2, #1
    543e:	e72c      	b.n	529a <_malloc_r+0x372>
    5440:	f240 5254 	movw	r2, #1364	; 0x554
    5444:	4293      	cmp	r3, r2
    5446:	d803      	bhi.n	5450 <_malloc_r+0x528>
    5448:	0c8a      	lsrs	r2, r1, #18
    544a:	327c      	adds	r2, #124	; 0x7c
    544c:	0050      	lsls	r0, r2, #1
    544e:	e724      	b.n	529a <_malloc_r+0x372>
    5450:	20fc      	movs	r0, #252	; 0xfc
    5452:	227e      	movs	r2, #126	; 0x7e
    5454:	e721      	b.n	529a <_malloc_r+0x372>
    5456:	687b      	ldr	r3, [r7, #4]
    5458:	e78d      	b.n	5376 <_malloc_r+0x44e>
    545a:	bf00      	nop
    545c:	20000464 	.word	0x20000464

00005460 <memchr>:
    5460:	0783      	lsls	r3, r0, #30
    5462:	b470      	push	{r4, r5, r6}
    5464:	b2c9      	uxtb	r1, r1
    5466:	d040      	beq.n	54ea <memchr+0x8a>
    5468:	1e54      	subs	r4, r2, #1
    546a:	b32a      	cbz	r2, 54b8 <memchr+0x58>
    546c:	7803      	ldrb	r3, [r0, #0]
    546e:	428b      	cmp	r3, r1
    5470:	d023      	beq.n	54ba <memchr+0x5a>
    5472:	1c43      	adds	r3, r0, #1
    5474:	e004      	b.n	5480 <memchr+0x20>
    5476:	b1fc      	cbz	r4, 54b8 <memchr+0x58>
    5478:	7805      	ldrb	r5, [r0, #0]
    547a:	4614      	mov	r4, r2
    547c:	428d      	cmp	r5, r1
    547e:	d01c      	beq.n	54ba <memchr+0x5a>
    5480:	f013 0f03 	tst.w	r3, #3
    5484:	4618      	mov	r0, r3
    5486:	f104 32ff 	add.w	r2, r4, #4294967295
    548a:	f103 0301 	add.w	r3, r3, #1
    548e:	d1f2      	bne.n	5476 <memchr+0x16>
    5490:	2c03      	cmp	r4, #3
    5492:	d814      	bhi.n	54be <memchr+0x5e>
    5494:	1e65      	subs	r5, r4, #1
    5496:	b354      	cbz	r4, 54ee <memchr+0x8e>
    5498:	7803      	ldrb	r3, [r0, #0]
    549a:	428b      	cmp	r3, r1
    549c:	d00d      	beq.n	54ba <memchr+0x5a>
    549e:	1c42      	adds	r2, r0, #1
    54a0:	2300      	movs	r3, #0
    54a2:	e002      	b.n	54aa <memchr+0x4a>
    54a4:	7804      	ldrb	r4, [r0, #0]
    54a6:	428c      	cmp	r4, r1
    54a8:	d007      	beq.n	54ba <memchr+0x5a>
    54aa:	42ab      	cmp	r3, r5
    54ac:	4610      	mov	r0, r2
    54ae:	f103 0301 	add.w	r3, r3, #1
    54b2:	f102 0201 	add.w	r2, r2, #1
    54b6:	d1f5      	bne.n	54a4 <memchr+0x44>
    54b8:	2000      	movs	r0, #0
    54ba:	bc70      	pop	{r4, r5, r6}
    54bc:	4770      	bx	lr
    54be:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
    54c2:	4603      	mov	r3, r0
    54c4:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
    54c8:	681a      	ldr	r2, [r3, #0]
    54ca:	4618      	mov	r0, r3
    54cc:	4072      	eors	r2, r6
    54ce:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
    54d2:	ea25 0202 	bic.w	r2, r5, r2
    54d6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    54da:	f103 0304 	add.w	r3, r3, #4
    54de:	d1d9      	bne.n	5494 <memchr+0x34>
    54e0:	3c04      	subs	r4, #4
    54e2:	2c03      	cmp	r4, #3
    54e4:	4618      	mov	r0, r3
    54e6:	d8ef      	bhi.n	54c8 <memchr+0x68>
    54e8:	e7d4      	b.n	5494 <memchr+0x34>
    54ea:	4614      	mov	r4, r2
    54ec:	e7d0      	b.n	5490 <memchr+0x30>
    54ee:	4620      	mov	r0, r4
    54f0:	e7e3      	b.n	54ba <memchr+0x5a>
    54f2:	bf00      	nop

000054f4 <memcpy>:
    54f4:	4684      	mov	ip, r0
    54f6:	ea41 0300 	orr.w	r3, r1, r0
    54fa:	f013 0303 	ands.w	r3, r3, #3
    54fe:	d149      	bne.n	5594 <memcpy+0xa0>
    5500:	3a40      	subs	r2, #64	; 0x40
    5502:	d323      	bcc.n	554c <memcpy+0x58>
    5504:	680b      	ldr	r3, [r1, #0]
    5506:	6003      	str	r3, [r0, #0]
    5508:	684b      	ldr	r3, [r1, #4]
    550a:	6043      	str	r3, [r0, #4]
    550c:	688b      	ldr	r3, [r1, #8]
    550e:	6083      	str	r3, [r0, #8]
    5510:	68cb      	ldr	r3, [r1, #12]
    5512:	60c3      	str	r3, [r0, #12]
    5514:	690b      	ldr	r3, [r1, #16]
    5516:	6103      	str	r3, [r0, #16]
    5518:	694b      	ldr	r3, [r1, #20]
    551a:	6143      	str	r3, [r0, #20]
    551c:	698b      	ldr	r3, [r1, #24]
    551e:	6183      	str	r3, [r0, #24]
    5520:	69cb      	ldr	r3, [r1, #28]
    5522:	61c3      	str	r3, [r0, #28]
    5524:	6a0b      	ldr	r3, [r1, #32]
    5526:	6203      	str	r3, [r0, #32]
    5528:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    552a:	6243      	str	r3, [r0, #36]	; 0x24
    552c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    552e:	6283      	str	r3, [r0, #40]	; 0x28
    5530:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5532:	62c3      	str	r3, [r0, #44]	; 0x2c
    5534:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5536:	6303      	str	r3, [r0, #48]	; 0x30
    5538:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    553a:	6343      	str	r3, [r0, #52]	; 0x34
    553c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    553e:	6383      	str	r3, [r0, #56]	; 0x38
    5540:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5542:	63c3      	str	r3, [r0, #60]	; 0x3c
    5544:	3040      	adds	r0, #64	; 0x40
    5546:	3140      	adds	r1, #64	; 0x40
    5548:	3a40      	subs	r2, #64	; 0x40
    554a:	d2db      	bcs.n	5504 <memcpy+0x10>
    554c:	3230      	adds	r2, #48	; 0x30
    554e:	d30b      	bcc.n	5568 <memcpy+0x74>
    5550:	680b      	ldr	r3, [r1, #0]
    5552:	6003      	str	r3, [r0, #0]
    5554:	684b      	ldr	r3, [r1, #4]
    5556:	6043      	str	r3, [r0, #4]
    5558:	688b      	ldr	r3, [r1, #8]
    555a:	6083      	str	r3, [r0, #8]
    555c:	68cb      	ldr	r3, [r1, #12]
    555e:	60c3      	str	r3, [r0, #12]
    5560:	3010      	adds	r0, #16
    5562:	3110      	adds	r1, #16
    5564:	3a10      	subs	r2, #16
    5566:	d2f3      	bcs.n	5550 <memcpy+0x5c>
    5568:	320c      	adds	r2, #12
    556a:	d305      	bcc.n	5578 <memcpy+0x84>
    556c:	f851 3b04 	ldr.w	r3, [r1], #4
    5570:	f840 3b04 	str.w	r3, [r0], #4
    5574:	3a04      	subs	r2, #4
    5576:	d2f9      	bcs.n	556c <memcpy+0x78>
    5578:	3204      	adds	r2, #4
    557a:	d008      	beq.n	558e <memcpy+0x9a>
    557c:	07d2      	lsls	r2, r2, #31
    557e:	bf1c      	itt	ne
    5580:	f811 3b01 	ldrbne.w	r3, [r1], #1
    5584:	f800 3b01 	strbne.w	r3, [r0], #1
    5588:	d301      	bcc.n	558e <memcpy+0x9a>
    558a:	880b      	ldrh	r3, [r1, #0]
    558c:	8003      	strh	r3, [r0, #0]
    558e:	4660      	mov	r0, ip
    5590:	4770      	bx	lr
    5592:	bf00      	nop
    5594:	2a08      	cmp	r2, #8
    5596:	d313      	bcc.n	55c0 <memcpy+0xcc>
    5598:	078b      	lsls	r3, r1, #30
    559a:	d0b1      	beq.n	5500 <memcpy+0xc>
    559c:	f010 0303 	ands.w	r3, r0, #3
    55a0:	d0ae      	beq.n	5500 <memcpy+0xc>
    55a2:	f1c3 0304 	rsb	r3, r3, #4
    55a6:	1ad2      	subs	r2, r2, r3
    55a8:	07db      	lsls	r3, r3, #31
    55aa:	bf1c      	itt	ne
    55ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
    55b0:	f800 3b01 	strbne.w	r3, [r0], #1
    55b4:	d3a4      	bcc.n	5500 <memcpy+0xc>
    55b6:	f831 3b02 	ldrh.w	r3, [r1], #2
    55ba:	f820 3b02 	strh.w	r3, [r0], #2
    55be:	e79f      	b.n	5500 <memcpy+0xc>
    55c0:	3a04      	subs	r2, #4
    55c2:	d3d9      	bcc.n	5578 <memcpy+0x84>
    55c4:	3a01      	subs	r2, #1
    55c6:	f811 3b01 	ldrb.w	r3, [r1], #1
    55ca:	f800 3b01 	strb.w	r3, [r0], #1
    55ce:	d2f9      	bcs.n	55c4 <memcpy+0xd0>
    55d0:	780b      	ldrb	r3, [r1, #0]
    55d2:	7003      	strb	r3, [r0, #0]
    55d4:	784b      	ldrb	r3, [r1, #1]
    55d6:	7043      	strb	r3, [r0, #1]
    55d8:	788b      	ldrb	r3, [r1, #2]
    55da:	7083      	strb	r3, [r0, #2]
    55dc:	4660      	mov	r0, ip
    55de:	4770      	bx	lr

000055e0 <memmove>:
    55e0:	4288      	cmp	r0, r1
    55e2:	b4f0      	push	{r4, r5, r6, r7}
    55e4:	d910      	bls.n	5608 <memmove+0x28>
    55e6:	188c      	adds	r4, r1, r2
    55e8:	42a0      	cmp	r0, r4
    55ea:	d20d      	bcs.n	5608 <memmove+0x28>
    55ec:	1885      	adds	r5, r0, r2
    55ee:	1e53      	subs	r3, r2, #1
    55f0:	b142      	cbz	r2, 5604 <memmove+0x24>
    55f2:	4621      	mov	r1, r4
    55f4:	462a      	mov	r2, r5
    55f6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    55fa:	3b01      	subs	r3, #1
    55fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
    5600:	1c5c      	adds	r4, r3, #1
    5602:	d1f8      	bne.n	55f6 <memmove+0x16>
    5604:	bcf0      	pop	{r4, r5, r6, r7}
    5606:	4770      	bx	lr
    5608:	2a0f      	cmp	r2, #15
    560a:	d944      	bls.n	5696 <memmove+0xb6>
    560c:	ea40 0301 	orr.w	r3, r0, r1
    5610:	079b      	lsls	r3, r3, #30
    5612:	d144      	bne.n	569e <memmove+0xbe>
    5614:	f1a2 0710 	sub.w	r7, r2, #16
    5618:	093f      	lsrs	r7, r7, #4
    561a:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    561e:	3610      	adds	r6, #16
    5620:	460c      	mov	r4, r1
    5622:	4603      	mov	r3, r0
    5624:	6825      	ldr	r5, [r4, #0]
    5626:	3310      	adds	r3, #16
    5628:	f843 5c10 	str.w	r5, [r3, #-16]
    562c:	6865      	ldr	r5, [r4, #4]
    562e:	3410      	adds	r4, #16
    5630:	f843 5c0c 	str.w	r5, [r3, #-12]
    5634:	f854 5c08 	ldr.w	r5, [r4, #-8]
    5638:	f843 5c08 	str.w	r5, [r3, #-8]
    563c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    5640:	f843 5c04 	str.w	r5, [r3, #-4]
    5644:	42b3      	cmp	r3, r6
    5646:	d1ed      	bne.n	5624 <memmove+0x44>
    5648:	1c7b      	adds	r3, r7, #1
    564a:	f002 0c0f 	and.w	ip, r2, #15
    564e:	011b      	lsls	r3, r3, #4
    5650:	f1bc 0f03 	cmp.w	ip, #3
    5654:	4419      	add	r1, r3
    5656:	4403      	add	r3, r0
    5658:	d923      	bls.n	56a2 <memmove+0xc2>
    565a:	460e      	mov	r6, r1
    565c:	461d      	mov	r5, r3
    565e:	4664      	mov	r4, ip
    5660:	f856 7b04 	ldr.w	r7, [r6], #4
    5664:	3c04      	subs	r4, #4
    5666:	2c03      	cmp	r4, #3
    5668:	f845 7b04 	str.w	r7, [r5], #4
    566c:	d8f8      	bhi.n	5660 <memmove+0x80>
    566e:	f1ac 0404 	sub.w	r4, ip, #4
    5672:	f024 0403 	bic.w	r4, r4, #3
    5676:	3404      	adds	r4, #4
    5678:	f002 0203 	and.w	r2, r2, #3
    567c:	4423      	add	r3, r4
    567e:	4421      	add	r1, r4
    5680:	2a00      	cmp	r2, #0
    5682:	d0bf      	beq.n	5604 <memmove+0x24>
    5684:	441a      	add	r2, r3
    5686:	f811 4b01 	ldrb.w	r4, [r1], #1
    568a:	f803 4b01 	strb.w	r4, [r3], #1
    568e:	4293      	cmp	r3, r2
    5690:	d1f9      	bne.n	5686 <memmove+0xa6>
    5692:	bcf0      	pop	{r4, r5, r6, r7}
    5694:	4770      	bx	lr
    5696:	4603      	mov	r3, r0
    5698:	2a00      	cmp	r2, #0
    569a:	d1f3      	bne.n	5684 <memmove+0xa4>
    569c:	e7b2      	b.n	5604 <memmove+0x24>
    569e:	4603      	mov	r3, r0
    56a0:	e7f0      	b.n	5684 <memmove+0xa4>
    56a2:	4662      	mov	r2, ip
    56a4:	2a00      	cmp	r2, #0
    56a6:	d1ed      	bne.n	5684 <memmove+0xa4>
    56a8:	e7ac      	b.n	5604 <memmove+0x24>
    56aa:	bf00      	nop

000056ac <__malloc_lock>:
    56ac:	4770      	bx	lr
    56ae:	bf00      	nop

000056b0 <__malloc_unlock>:
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop

000056b4 <_realloc_r>:
    56b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56b8:	460c      	mov	r4, r1
    56ba:	b083      	sub	sp, #12
    56bc:	4690      	mov	r8, r2
    56be:	4681      	mov	r9, r0
    56c0:	2900      	cmp	r1, #0
    56c2:	f000 80ba 	beq.w	583a <_realloc_r+0x186>
    56c6:	f7ff fff1 	bl	56ac <__malloc_lock>
    56ca:	f108 060b 	add.w	r6, r8, #11
    56ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    56d2:	2e16      	cmp	r6, #22
    56d4:	f023 0503 	bic.w	r5, r3, #3
    56d8:	f1a4 0708 	sub.w	r7, r4, #8
    56dc:	d84b      	bhi.n	5776 <_realloc_r+0xc2>
    56de:	2110      	movs	r1, #16
    56e0:	460e      	mov	r6, r1
    56e2:	45b0      	cmp	r8, r6
    56e4:	d84c      	bhi.n	5780 <_realloc_r+0xcc>
    56e6:	428d      	cmp	r5, r1
    56e8:	da51      	bge.n	578e <_realloc_r+0xda>
    56ea:	f8df b384 	ldr.w	fp, [pc, #900]	; 5a70 <_realloc_r+0x3bc>
    56ee:	1978      	adds	r0, r7, r5
    56f0:	f8db e008 	ldr.w	lr, [fp, #8]
    56f4:	4586      	cmp	lr, r0
    56f6:	f000 80a6 	beq.w	5846 <_realloc_r+0x192>
    56fa:	6842      	ldr	r2, [r0, #4]
    56fc:	f022 0c01 	bic.w	ip, r2, #1
    5700:	4484      	add	ip, r0
    5702:	f8dc c004 	ldr.w	ip, [ip, #4]
    5706:	f01c 0f01 	tst.w	ip, #1
    570a:	d054      	beq.n	57b6 <_realloc_r+0x102>
    570c:	2200      	movs	r2, #0
    570e:	4610      	mov	r0, r2
    5710:	07db      	lsls	r3, r3, #31
    5712:	d46f      	bmi.n	57f4 <_realloc_r+0x140>
    5714:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5718:	ebc3 0a07 	rsb	sl, r3, r7
    571c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5720:	f023 0303 	bic.w	r3, r3, #3
    5724:	442b      	add	r3, r5
    5726:	2800      	cmp	r0, #0
    5728:	d062      	beq.n	57f0 <_realloc_r+0x13c>
    572a:	4570      	cmp	r0, lr
    572c:	f000 80e9 	beq.w	5902 <_realloc_r+0x24e>
    5730:	eb02 0e03 	add.w	lr, r2, r3
    5734:	458e      	cmp	lr, r1
    5736:	db5b      	blt.n	57f0 <_realloc_r+0x13c>
    5738:	68c3      	ldr	r3, [r0, #12]
    573a:	6882      	ldr	r2, [r0, #8]
    573c:	46d0      	mov	r8, sl
    573e:	60d3      	str	r3, [r2, #12]
    5740:	609a      	str	r2, [r3, #8]
    5742:	f858 1f08 	ldr.w	r1, [r8, #8]!
    5746:	f8da 300c 	ldr.w	r3, [sl, #12]
    574a:	1f2a      	subs	r2, r5, #4
    574c:	2a24      	cmp	r2, #36	; 0x24
    574e:	60cb      	str	r3, [r1, #12]
    5750:	6099      	str	r1, [r3, #8]
    5752:	f200 8123 	bhi.w	599c <_realloc_r+0x2e8>
    5756:	2a13      	cmp	r2, #19
    5758:	f240 80b0 	bls.w	58bc <_realloc_r+0x208>
    575c:	6823      	ldr	r3, [r4, #0]
    575e:	2a1b      	cmp	r2, #27
    5760:	f8ca 3008 	str.w	r3, [sl, #8]
    5764:	6863      	ldr	r3, [r4, #4]
    5766:	f8ca 300c 	str.w	r3, [sl, #12]
    576a:	f200 812b 	bhi.w	59c4 <_realloc_r+0x310>
    576e:	3408      	adds	r4, #8
    5770:	f10a 0310 	add.w	r3, sl, #16
    5774:	e0a3      	b.n	58be <_realloc_r+0x20a>
    5776:	f026 0607 	bic.w	r6, r6, #7
    577a:	2e00      	cmp	r6, #0
    577c:	4631      	mov	r1, r6
    577e:	dab0      	bge.n	56e2 <_realloc_r+0x2e>
    5780:	230c      	movs	r3, #12
    5782:	2000      	movs	r0, #0
    5784:	f8c9 3000 	str.w	r3, [r9]
    5788:	b003      	add	sp, #12
    578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    578e:	46a0      	mov	r8, r4
    5790:	1baa      	subs	r2, r5, r6
    5792:	2a0f      	cmp	r2, #15
    5794:	f003 0301 	and.w	r3, r3, #1
    5798:	d81a      	bhi.n	57d0 <_realloc_r+0x11c>
    579a:	432b      	orrs	r3, r5
    579c:	607b      	str	r3, [r7, #4]
    579e:	443d      	add	r5, r7
    57a0:	686b      	ldr	r3, [r5, #4]
    57a2:	f043 0301 	orr.w	r3, r3, #1
    57a6:	606b      	str	r3, [r5, #4]
    57a8:	4648      	mov	r0, r9
    57aa:	f7ff ff81 	bl	56b0 <__malloc_unlock>
    57ae:	4640      	mov	r0, r8
    57b0:	b003      	add	sp, #12
    57b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57b6:	f022 0203 	bic.w	r2, r2, #3
    57ba:	eb02 0c05 	add.w	ip, r2, r5
    57be:	458c      	cmp	ip, r1
    57c0:	dba6      	blt.n	5710 <_realloc_r+0x5c>
    57c2:	68c2      	ldr	r2, [r0, #12]
    57c4:	6881      	ldr	r1, [r0, #8]
    57c6:	46a0      	mov	r8, r4
    57c8:	60ca      	str	r2, [r1, #12]
    57ca:	4665      	mov	r5, ip
    57cc:	6091      	str	r1, [r2, #8]
    57ce:	e7df      	b.n	5790 <_realloc_r+0xdc>
    57d0:	19b9      	adds	r1, r7, r6
    57d2:	4333      	orrs	r3, r6
    57d4:	f042 0001 	orr.w	r0, r2, #1
    57d8:	607b      	str	r3, [r7, #4]
    57da:	440a      	add	r2, r1
    57dc:	6048      	str	r0, [r1, #4]
    57de:	6853      	ldr	r3, [r2, #4]
    57e0:	3108      	adds	r1, #8
    57e2:	f043 0301 	orr.w	r3, r3, #1
    57e6:	6053      	str	r3, [r2, #4]
    57e8:	4648      	mov	r0, r9
    57ea:	f7ff fad1 	bl	4d90 <_free_r>
    57ee:	e7db      	b.n	57a8 <_realloc_r+0xf4>
    57f0:	428b      	cmp	r3, r1
    57f2:	da33      	bge.n	585c <_realloc_r+0x1a8>
    57f4:	4641      	mov	r1, r8
    57f6:	4648      	mov	r0, r9
    57f8:	f7ff fb96 	bl	4f28 <_malloc_r>
    57fc:	4680      	mov	r8, r0
    57fe:	2800      	cmp	r0, #0
    5800:	d0d2      	beq.n	57a8 <_realloc_r+0xf4>
    5802:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5806:	f1a0 0108 	sub.w	r1, r0, #8
    580a:	f023 0201 	bic.w	r2, r3, #1
    580e:	443a      	add	r2, r7
    5810:	4291      	cmp	r1, r2
    5812:	f000 80bc 	beq.w	598e <_realloc_r+0x2da>
    5816:	1f2a      	subs	r2, r5, #4
    5818:	2a24      	cmp	r2, #36	; 0x24
    581a:	d86e      	bhi.n	58fa <_realloc_r+0x246>
    581c:	2a13      	cmp	r2, #19
    581e:	d842      	bhi.n	58a6 <_realloc_r+0x1f2>
    5820:	4603      	mov	r3, r0
    5822:	4622      	mov	r2, r4
    5824:	6811      	ldr	r1, [r2, #0]
    5826:	6019      	str	r1, [r3, #0]
    5828:	6851      	ldr	r1, [r2, #4]
    582a:	6059      	str	r1, [r3, #4]
    582c:	6892      	ldr	r2, [r2, #8]
    582e:	609a      	str	r2, [r3, #8]
    5830:	4621      	mov	r1, r4
    5832:	4648      	mov	r0, r9
    5834:	f7ff faac 	bl	4d90 <_free_r>
    5838:	e7b6      	b.n	57a8 <_realloc_r+0xf4>
    583a:	4611      	mov	r1, r2
    583c:	b003      	add	sp, #12
    583e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5842:	f7ff bb71 	b.w	4f28 <_malloc_r>
    5846:	f8de 2004 	ldr.w	r2, [lr, #4]
    584a:	f106 0c10 	add.w	ip, r6, #16
    584e:	f022 0203 	bic.w	r2, r2, #3
    5852:	1950      	adds	r0, r2, r5
    5854:	4560      	cmp	r0, ip
    5856:	da3d      	bge.n	58d4 <_realloc_r+0x220>
    5858:	4670      	mov	r0, lr
    585a:	e759      	b.n	5710 <_realloc_r+0x5c>
    585c:	46d0      	mov	r8, sl
    585e:	f858 0f08 	ldr.w	r0, [r8, #8]!
    5862:	f8da 100c 	ldr.w	r1, [sl, #12]
    5866:	1f2a      	subs	r2, r5, #4
    5868:	2a24      	cmp	r2, #36	; 0x24
    586a:	60c1      	str	r1, [r0, #12]
    586c:	6088      	str	r0, [r1, #8]
    586e:	f200 80a0 	bhi.w	59b2 <_realloc_r+0x2fe>
    5872:	2a13      	cmp	r2, #19
    5874:	f240 809b 	bls.w	59ae <_realloc_r+0x2fa>
    5878:	6821      	ldr	r1, [r4, #0]
    587a:	2a1b      	cmp	r2, #27
    587c:	f8ca 1008 	str.w	r1, [sl, #8]
    5880:	6861      	ldr	r1, [r4, #4]
    5882:	f8ca 100c 	str.w	r1, [sl, #12]
    5886:	f200 80b2 	bhi.w	59ee <_realloc_r+0x33a>
    588a:	3408      	adds	r4, #8
    588c:	f10a 0210 	add.w	r2, sl, #16
    5890:	6821      	ldr	r1, [r4, #0]
    5892:	461d      	mov	r5, r3
    5894:	6011      	str	r1, [r2, #0]
    5896:	6861      	ldr	r1, [r4, #4]
    5898:	4657      	mov	r7, sl
    589a:	6051      	str	r1, [r2, #4]
    589c:	68a3      	ldr	r3, [r4, #8]
    589e:	6093      	str	r3, [r2, #8]
    58a0:	f8da 3004 	ldr.w	r3, [sl, #4]
    58a4:	e774      	b.n	5790 <_realloc_r+0xdc>
    58a6:	6823      	ldr	r3, [r4, #0]
    58a8:	2a1b      	cmp	r2, #27
    58aa:	6003      	str	r3, [r0, #0]
    58ac:	6863      	ldr	r3, [r4, #4]
    58ae:	6043      	str	r3, [r0, #4]
    58b0:	d862      	bhi.n	5978 <_realloc_r+0x2c4>
    58b2:	f100 0308 	add.w	r3, r0, #8
    58b6:	f104 0208 	add.w	r2, r4, #8
    58ba:	e7b3      	b.n	5824 <_realloc_r+0x170>
    58bc:	4643      	mov	r3, r8
    58be:	6822      	ldr	r2, [r4, #0]
    58c0:	4675      	mov	r5, lr
    58c2:	601a      	str	r2, [r3, #0]
    58c4:	6862      	ldr	r2, [r4, #4]
    58c6:	4657      	mov	r7, sl
    58c8:	605a      	str	r2, [r3, #4]
    58ca:	68a2      	ldr	r2, [r4, #8]
    58cc:	609a      	str	r2, [r3, #8]
    58ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    58d2:	e75d      	b.n	5790 <_realloc_r+0xdc>
    58d4:	1b83      	subs	r3, r0, r6
    58d6:	4437      	add	r7, r6
    58d8:	f043 0301 	orr.w	r3, r3, #1
    58dc:	f8cb 7008 	str.w	r7, [fp, #8]
    58e0:	607b      	str	r3, [r7, #4]
    58e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    58e6:	4648      	mov	r0, r9
    58e8:	f003 0301 	and.w	r3, r3, #1
    58ec:	431e      	orrs	r6, r3
    58ee:	f844 6c04 	str.w	r6, [r4, #-4]
    58f2:	f7ff fedd 	bl	56b0 <__malloc_unlock>
    58f6:	4620      	mov	r0, r4
    58f8:	e75a      	b.n	57b0 <_realloc_r+0xfc>
    58fa:	4621      	mov	r1, r4
    58fc:	f7ff fe70 	bl	55e0 <memmove>
    5900:	e796      	b.n	5830 <_realloc_r+0x17c>
    5902:	eb02 0c03 	add.w	ip, r2, r3
    5906:	f106 0210 	add.w	r2, r6, #16
    590a:	4594      	cmp	ip, r2
    590c:	f6ff af70 	blt.w	57f0 <_realloc_r+0x13c>
    5910:	4657      	mov	r7, sl
    5912:	f857 1f08 	ldr.w	r1, [r7, #8]!
    5916:	f8da 300c 	ldr.w	r3, [sl, #12]
    591a:	1f2a      	subs	r2, r5, #4
    591c:	2a24      	cmp	r2, #36	; 0x24
    591e:	60cb      	str	r3, [r1, #12]
    5920:	6099      	str	r1, [r3, #8]
    5922:	f200 8086 	bhi.w	5a32 <_realloc_r+0x37e>
    5926:	2a13      	cmp	r2, #19
    5928:	d977      	bls.n	5a1a <_realloc_r+0x366>
    592a:	6823      	ldr	r3, [r4, #0]
    592c:	2a1b      	cmp	r2, #27
    592e:	f8ca 3008 	str.w	r3, [sl, #8]
    5932:	6863      	ldr	r3, [r4, #4]
    5934:	f8ca 300c 	str.w	r3, [sl, #12]
    5938:	f200 8084 	bhi.w	5a44 <_realloc_r+0x390>
    593c:	3408      	adds	r4, #8
    593e:	f10a 0310 	add.w	r3, sl, #16
    5942:	6822      	ldr	r2, [r4, #0]
    5944:	601a      	str	r2, [r3, #0]
    5946:	6862      	ldr	r2, [r4, #4]
    5948:	605a      	str	r2, [r3, #4]
    594a:	68a2      	ldr	r2, [r4, #8]
    594c:	609a      	str	r2, [r3, #8]
    594e:	ebc6 020c 	rsb	r2, r6, ip
    5952:	eb0a 0306 	add.w	r3, sl, r6
    5956:	f042 0201 	orr.w	r2, r2, #1
    595a:	f8cb 3008 	str.w	r3, [fp, #8]
    595e:	605a      	str	r2, [r3, #4]
    5960:	f8da 3004 	ldr.w	r3, [sl, #4]
    5964:	4648      	mov	r0, r9
    5966:	f003 0301 	and.w	r3, r3, #1
    596a:	431e      	orrs	r6, r3
    596c:	f8ca 6004 	str.w	r6, [sl, #4]
    5970:	f7ff fe9e 	bl	56b0 <__malloc_unlock>
    5974:	4638      	mov	r0, r7
    5976:	e71b      	b.n	57b0 <_realloc_r+0xfc>
    5978:	68a3      	ldr	r3, [r4, #8]
    597a:	2a24      	cmp	r2, #36	; 0x24
    597c:	6083      	str	r3, [r0, #8]
    597e:	68e3      	ldr	r3, [r4, #12]
    5980:	60c3      	str	r3, [r0, #12]
    5982:	d02b      	beq.n	59dc <_realloc_r+0x328>
    5984:	f100 0310 	add.w	r3, r0, #16
    5988:	f104 0210 	add.w	r2, r4, #16
    598c:	e74a      	b.n	5824 <_realloc_r+0x170>
    598e:	f850 2c04 	ldr.w	r2, [r0, #-4]
    5992:	46a0      	mov	r8, r4
    5994:	f022 0203 	bic.w	r2, r2, #3
    5998:	4415      	add	r5, r2
    599a:	e6f9      	b.n	5790 <_realloc_r+0xdc>
    599c:	4621      	mov	r1, r4
    599e:	4640      	mov	r0, r8
    59a0:	4675      	mov	r5, lr
    59a2:	4657      	mov	r7, sl
    59a4:	f7ff fe1c 	bl	55e0 <memmove>
    59a8:	f8da 3004 	ldr.w	r3, [sl, #4]
    59ac:	e6f0      	b.n	5790 <_realloc_r+0xdc>
    59ae:	4642      	mov	r2, r8
    59b0:	e76e      	b.n	5890 <_realloc_r+0x1dc>
    59b2:	4621      	mov	r1, r4
    59b4:	4640      	mov	r0, r8
    59b6:	461d      	mov	r5, r3
    59b8:	4657      	mov	r7, sl
    59ba:	f7ff fe11 	bl	55e0 <memmove>
    59be:	f8da 3004 	ldr.w	r3, [sl, #4]
    59c2:	e6e5      	b.n	5790 <_realloc_r+0xdc>
    59c4:	68a3      	ldr	r3, [r4, #8]
    59c6:	2a24      	cmp	r2, #36	; 0x24
    59c8:	f8ca 3010 	str.w	r3, [sl, #16]
    59cc:	68e3      	ldr	r3, [r4, #12]
    59ce:	f8ca 3014 	str.w	r3, [sl, #20]
    59d2:	d018      	beq.n	5a06 <_realloc_r+0x352>
    59d4:	3410      	adds	r4, #16
    59d6:	f10a 0318 	add.w	r3, sl, #24
    59da:	e770      	b.n	58be <_realloc_r+0x20a>
    59dc:	6922      	ldr	r2, [r4, #16]
    59de:	f100 0318 	add.w	r3, r0, #24
    59e2:	6102      	str	r2, [r0, #16]
    59e4:	6961      	ldr	r1, [r4, #20]
    59e6:	f104 0218 	add.w	r2, r4, #24
    59ea:	6141      	str	r1, [r0, #20]
    59ec:	e71a      	b.n	5824 <_realloc_r+0x170>
    59ee:	68a1      	ldr	r1, [r4, #8]
    59f0:	2a24      	cmp	r2, #36	; 0x24
    59f2:	f8ca 1010 	str.w	r1, [sl, #16]
    59f6:	68e1      	ldr	r1, [r4, #12]
    59f8:	f8ca 1014 	str.w	r1, [sl, #20]
    59fc:	d00f      	beq.n	5a1e <_realloc_r+0x36a>
    59fe:	3410      	adds	r4, #16
    5a00:	f10a 0218 	add.w	r2, sl, #24
    5a04:	e744      	b.n	5890 <_realloc_r+0x1dc>
    5a06:	6922      	ldr	r2, [r4, #16]
    5a08:	f10a 0320 	add.w	r3, sl, #32
    5a0c:	f8ca 2018 	str.w	r2, [sl, #24]
    5a10:	6962      	ldr	r2, [r4, #20]
    5a12:	3418      	adds	r4, #24
    5a14:	f8ca 201c 	str.w	r2, [sl, #28]
    5a18:	e751      	b.n	58be <_realloc_r+0x20a>
    5a1a:	463b      	mov	r3, r7
    5a1c:	e791      	b.n	5942 <_realloc_r+0x28e>
    5a1e:	6921      	ldr	r1, [r4, #16]
    5a20:	f10a 0220 	add.w	r2, sl, #32
    5a24:	f8ca 1018 	str.w	r1, [sl, #24]
    5a28:	6961      	ldr	r1, [r4, #20]
    5a2a:	3418      	adds	r4, #24
    5a2c:	f8ca 101c 	str.w	r1, [sl, #28]
    5a30:	e72e      	b.n	5890 <_realloc_r+0x1dc>
    5a32:	4621      	mov	r1, r4
    5a34:	4638      	mov	r0, r7
    5a36:	f8cd c004 	str.w	ip, [sp, #4]
    5a3a:	f7ff fdd1 	bl	55e0 <memmove>
    5a3e:	f8dd c004 	ldr.w	ip, [sp, #4]
    5a42:	e784      	b.n	594e <_realloc_r+0x29a>
    5a44:	68a3      	ldr	r3, [r4, #8]
    5a46:	2a24      	cmp	r2, #36	; 0x24
    5a48:	f8ca 3010 	str.w	r3, [sl, #16]
    5a4c:	68e3      	ldr	r3, [r4, #12]
    5a4e:	f8ca 3014 	str.w	r3, [sl, #20]
    5a52:	d003      	beq.n	5a5c <_realloc_r+0x3a8>
    5a54:	3410      	adds	r4, #16
    5a56:	f10a 0318 	add.w	r3, sl, #24
    5a5a:	e772      	b.n	5942 <_realloc_r+0x28e>
    5a5c:	6922      	ldr	r2, [r4, #16]
    5a5e:	f10a 0320 	add.w	r3, sl, #32
    5a62:	f8ca 2018 	str.w	r2, [sl, #24]
    5a66:	6962      	ldr	r2, [r4, #20]
    5a68:	3418      	adds	r4, #24
    5a6a:	f8ca 201c 	str.w	r2, [sl, #28]
    5a6e:	e768      	b.n	5942 <_realloc_r+0x28e>
    5a70:	20000464 	.word	0x20000464

00005a74 <_sbrk_r>:
    5a74:	b538      	push	{r3, r4, r5, lr}
    5a76:	4c07      	ldr	r4, [pc, #28]	; (5a94 <_sbrk_r+0x20>)
    5a78:	2300      	movs	r3, #0
    5a7a:	4605      	mov	r5, r0
    5a7c:	4608      	mov	r0, r1
    5a7e:	6023      	str	r3, [r4, #0]
    5a80:	f000 f85e 	bl	5b40 <_sbrk>
    5a84:	1c43      	adds	r3, r0, #1
    5a86:	d000      	beq.n	5a8a <_sbrk_r+0x16>
    5a88:	bd38      	pop	{r3, r4, r5, pc}
    5a8a:	6823      	ldr	r3, [r4, #0]
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	d0fb      	beq.n	5a88 <_sbrk_r+0x14>
    5a90:	602b      	str	r3, [r5, #0]
    5a92:	bd38      	pop	{r3, r4, r5, pc}
    5a94:	20002a64 	.word	0x20002a64

00005a98 <__register_exitproc>:
    5a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a9a:	4c27      	ldr	r4, [pc, #156]	; (5b38 <__register_exitproc+0xa0>)
    5a9c:	b085      	sub	sp, #20
    5a9e:	6826      	ldr	r6, [r4, #0]
    5aa0:	4607      	mov	r7, r0
    5aa2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
    5aa6:	2c00      	cmp	r4, #0
    5aa8:	d040      	beq.n	5b2c <__register_exitproc+0x94>
    5aaa:	6865      	ldr	r5, [r4, #4]
    5aac:	2d1f      	cmp	r5, #31
    5aae:	dd1e      	ble.n	5aee <__register_exitproc+0x56>
    5ab0:	4822      	ldr	r0, [pc, #136]	; (5b3c <__register_exitproc+0xa4>)
    5ab2:	b918      	cbnz	r0, 5abc <__register_exitproc+0x24>
    5ab4:	f04f 30ff 	mov.w	r0, #4294967295
    5ab8:	b005      	add	sp, #20
    5aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5abc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5ac0:	9103      	str	r1, [sp, #12]
    5ac2:	9202      	str	r2, [sp, #8]
    5ac4:	9301      	str	r3, [sp, #4]
    5ac6:	f3af 8000 	nop.w
    5aca:	9903      	ldr	r1, [sp, #12]
    5acc:	4604      	mov	r4, r0
    5ace:	9a02      	ldr	r2, [sp, #8]
    5ad0:	9b01      	ldr	r3, [sp, #4]
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d0ee      	beq.n	5ab4 <__register_exitproc+0x1c>
    5ad6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
    5ada:	2000      	movs	r0, #0
    5adc:	6025      	str	r5, [r4, #0]
    5ade:	6060      	str	r0, [r4, #4]
    5ae0:	4605      	mov	r5, r0
    5ae2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    5ae6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
    5aea:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
    5aee:	b93f      	cbnz	r7, 5b00 <__register_exitproc+0x68>
    5af0:	1c6b      	adds	r3, r5, #1
    5af2:	2000      	movs	r0, #0
    5af4:	3502      	adds	r5, #2
    5af6:	6063      	str	r3, [r4, #4]
    5af8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    5afc:	b005      	add	sp, #20
    5afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b00:	2601      	movs	r6, #1
    5b02:	40ae      	lsls	r6, r5
    5b04:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    5b08:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    5b0c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    5b10:	2f02      	cmp	r7, #2
    5b12:	ea42 0206 	orr.w	r2, r2, r6
    5b16:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    5b1a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    5b1e:	d1e7      	bne.n	5af0 <__register_exitproc+0x58>
    5b20:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    5b24:	431e      	orrs	r6, r3
    5b26:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
    5b2a:	e7e1      	b.n	5af0 <__register_exitproc+0x58>
    5b2c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
    5b30:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
    5b34:	e7b9      	b.n	5aaa <__register_exitproc+0x12>
    5b36:	bf00      	nop
    5b38:	00006820 	.word	0x00006820
    5b3c:	00000000 	.word	0x00000000

00005b40 <_sbrk>:
    5b40:	4a09      	ldr	r2, [pc, #36]	; (5b68 <_sbrk+0x28>)
    5b42:	6813      	ldr	r3, [r2, #0]
    5b44:	b163      	cbz	r3, 5b60 <_sbrk+0x20>
    5b46:	4418      	add	r0, r3
    5b48:	4669      	mov	r1, sp
    5b4a:	4288      	cmp	r0, r1
    5b4c:	d802      	bhi.n	5b54 <_sbrk+0x14>
    5b4e:	6010      	str	r0, [r2, #0]
    5b50:	4618      	mov	r0, r3
    5b52:	4770      	bx	lr
    5b54:	4b05      	ldr	r3, [pc, #20]	; (5b6c <_sbrk+0x2c>)
    5b56:	220c      	movs	r2, #12
    5b58:	601a      	str	r2, [r3, #0]
    5b5a:	f04f 30ff 	mov.w	r0, #4294967295
    5b5e:	4770      	bx	lr
    5b60:	4b03      	ldr	r3, [pc, #12]	; (5b70 <_sbrk+0x30>)
    5b62:	6013      	str	r3, [r2, #0]
    5b64:	e7ef      	b.n	5b46 <_sbrk+0x6>
    5b66:	bf00      	nop
    5b68:	20002818 	.word	0x20002818
    5b6c:	20002a64 	.word	0x20002a64
    5b70:	20002a68 	.word	0x20002a68

00005b74 <_exit>:
    5b74:	e7fe      	b.n	5b74 <_exit>
    5b76:	bf00      	nop

00005b78 <__aeabi_uldivmod>:
    5b78:	b94b      	cbnz	r3, 5b8e <__aeabi_uldivmod+0x16>
    5b7a:	b942      	cbnz	r2, 5b8e <__aeabi_uldivmod+0x16>
    5b7c:	2900      	cmp	r1, #0
    5b7e:	bf08      	it	eq
    5b80:	2800      	cmpeq	r0, #0
    5b82:	d002      	beq.n	5b8a <__aeabi_uldivmod+0x12>
    5b84:	f04f 31ff 	mov.w	r1, #4294967295
    5b88:	4608      	mov	r0, r1
    5b8a:	f000 b83b 	b.w	5c04 <__aeabi_idiv0>
    5b8e:	b082      	sub	sp, #8
    5b90:	46ec      	mov	ip, sp
    5b92:	e92d 5000 	stmdb	sp!, {ip, lr}
    5b96:	f000 f81d 	bl	5bd4 <__gnu_uldivmod_helper>
    5b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
    5b9e:	b002      	add	sp, #8
    5ba0:	bc0c      	pop	{r2, r3}
    5ba2:	4770      	bx	lr

00005ba4 <__gnu_ldivmod_helper>:
    5ba4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    5ba8:	9e08      	ldr	r6, [sp, #32]
    5baa:	4614      	mov	r4, r2
    5bac:	461d      	mov	r5, r3
    5bae:	4680      	mov	r8, r0
    5bb0:	4689      	mov	r9, r1
    5bb2:	f000 f829 	bl	5c08 <__divdi3>
    5bb6:	fb04 f301 	mul.w	r3, r4, r1
    5bba:	fba4 ab00 	umull	sl, fp, r4, r0
    5bbe:	fb00 3205 	mla	r2, r0, r5, r3
    5bc2:	4493      	add	fp, r2
    5bc4:	ebb8 080a 	subs.w	r8, r8, sl
    5bc8:	eb69 090b 	sbc.w	r9, r9, fp
    5bcc:	e9c6 8900 	strd	r8, r9, [r6]
    5bd0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00005bd4 <__gnu_uldivmod_helper>:
    5bd4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    5bd8:	9e08      	ldr	r6, [sp, #32]
    5bda:	4614      	mov	r4, r2
    5bdc:	461d      	mov	r5, r3
    5bde:	4680      	mov	r8, r0
    5be0:	4689      	mov	r9, r1
    5be2:	f000 f961 	bl	5ea8 <__udivdi3>
    5be6:	fb00 f505 	mul.w	r5, r0, r5
    5bea:	fba0 ab04 	umull	sl, fp, r0, r4
    5bee:	fb04 5401 	mla	r4, r4, r1, r5
    5bf2:	44a3      	add	fp, r4
    5bf4:	ebb8 080a 	subs.w	r8, r8, sl
    5bf8:	eb69 090b 	sbc.w	r9, r9, fp
    5bfc:	e9c6 8900 	strd	r8, r9, [r6]
    5c00:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00005c04 <__aeabi_idiv0>:
    5c04:	4770      	bx	lr
    5c06:	bf00      	nop

00005c08 <__divdi3>:
    5c08:	2900      	cmp	r1, #0
    5c0a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5c0e:	f2c0 80a1 	blt.w	5d54 <__divdi3+0x14c>
    5c12:	2400      	movs	r4, #0
    5c14:	2b00      	cmp	r3, #0
    5c16:	f2c0 8098 	blt.w	5d4a <__divdi3+0x142>
    5c1a:	4615      	mov	r5, r2
    5c1c:	4606      	mov	r6, r0
    5c1e:	460f      	mov	r7, r1
    5c20:	2b00      	cmp	r3, #0
    5c22:	d13f      	bne.n	5ca4 <__divdi3+0x9c>
    5c24:	428a      	cmp	r2, r1
    5c26:	d958      	bls.n	5cda <__divdi3+0xd2>
    5c28:	fab2 f382 	clz	r3, r2
    5c2c:	b14b      	cbz	r3, 5c42 <__divdi3+0x3a>
    5c2e:	f1c3 0220 	rsb	r2, r3, #32
    5c32:	fa01 f703 	lsl.w	r7, r1, r3
    5c36:	fa20 f202 	lsr.w	r2, r0, r2
    5c3a:	409d      	lsls	r5, r3
    5c3c:	fa00 f603 	lsl.w	r6, r0, r3
    5c40:	4317      	orrs	r7, r2
    5c42:	0c29      	lsrs	r1, r5, #16
    5c44:	fbb7 f2f1 	udiv	r2, r7, r1
    5c48:	fb01 7712 	mls	r7, r1, r2, r7
    5c4c:	b2a8      	uxth	r0, r5
    5c4e:	fb00 f302 	mul.w	r3, r0, r2
    5c52:	ea4f 4c16 	mov.w	ip, r6, lsr #16
    5c56:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
    5c5a:	42bb      	cmp	r3, r7
    5c5c:	d909      	bls.n	5c72 <__divdi3+0x6a>
    5c5e:	197f      	adds	r7, r7, r5
    5c60:	f102 3cff 	add.w	ip, r2, #4294967295
    5c64:	f080 8105 	bcs.w	5e72 <__divdi3+0x26a>
    5c68:	42bb      	cmp	r3, r7
    5c6a:	f240 8102 	bls.w	5e72 <__divdi3+0x26a>
    5c6e:	3a02      	subs	r2, #2
    5c70:	442f      	add	r7, r5
    5c72:	1aff      	subs	r7, r7, r3
    5c74:	fbb7 f3f1 	udiv	r3, r7, r1
    5c78:	fb01 7113 	mls	r1, r1, r3, r7
    5c7c:	fb00 f003 	mul.w	r0, r0, r3
    5c80:	b2b6      	uxth	r6, r6
    5c82:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    5c86:	4288      	cmp	r0, r1
    5c88:	d908      	bls.n	5c9c <__divdi3+0x94>
    5c8a:	1949      	adds	r1, r1, r5
    5c8c:	f103 37ff 	add.w	r7, r3, #4294967295
    5c90:	f080 80f1 	bcs.w	5e76 <__divdi3+0x26e>
    5c94:	4288      	cmp	r0, r1
    5c96:	f240 80ee 	bls.w	5e76 <__divdi3+0x26e>
    5c9a:	3b02      	subs	r3, #2
    5c9c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5ca0:	2300      	movs	r3, #0
    5ca2:	e003      	b.n	5cac <__divdi3+0xa4>
    5ca4:	428b      	cmp	r3, r1
    5ca6:	d90a      	bls.n	5cbe <__divdi3+0xb6>
    5ca8:	2300      	movs	r3, #0
    5caa:	461a      	mov	r2, r3
    5cac:	4610      	mov	r0, r2
    5cae:	4619      	mov	r1, r3
    5cb0:	b114      	cbz	r4, 5cb8 <__divdi3+0xb0>
    5cb2:	4240      	negs	r0, r0
    5cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5cb8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cbc:	4770      	bx	lr
    5cbe:	fab3 f883 	clz	r8, r3
    5cc2:	f1b8 0f00 	cmp.w	r8, #0
    5cc6:	f040 8088 	bne.w	5dda <__divdi3+0x1d2>
    5cca:	428b      	cmp	r3, r1
    5ccc:	d302      	bcc.n	5cd4 <__divdi3+0xcc>
    5cce:	4282      	cmp	r2, r0
    5cd0:	f200 80e2 	bhi.w	5e98 <__divdi3+0x290>
    5cd4:	2300      	movs	r3, #0
    5cd6:	2201      	movs	r2, #1
    5cd8:	e7e8      	b.n	5cac <__divdi3+0xa4>
    5cda:	b912      	cbnz	r2, 5ce2 <__divdi3+0xda>
    5cdc:	2301      	movs	r3, #1
    5cde:	fbb3 f5f2 	udiv	r5, r3, r2
    5ce2:	fab5 f285 	clz	r2, r5
    5ce6:	2a00      	cmp	r2, #0
    5ce8:	d13a      	bne.n	5d60 <__divdi3+0x158>
    5cea:	1b7f      	subs	r7, r7, r5
    5cec:	0c28      	lsrs	r0, r5, #16
    5cee:	fa1f fc85 	uxth.w	ip, r5
    5cf2:	2301      	movs	r3, #1
    5cf4:	fbb7 f1f0 	udiv	r1, r7, r0
    5cf8:	fb00 7711 	mls	r7, r0, r1, r7
    5cfc:	fb0c f201 	mul.w	r2, ip, r1
    5d00:	ea4f 4816 	mov.w	r8, r6, lsr #16
    5d04:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
    5d08:	42ba      	cmp	r2, r7
    5d0a:	d907      	bls.n	5d1c <__divdi3+0x114>
    5d0c:	197f      	adds	r7, r7, r5
    5d0e:	f101 38ff 	add.w	r8, r1, #4294967295
    5d12:	d202      	bcs.n	5d1a <__divdi3+0x112>
    5d14:	42ba      	cmp	r2, r7
    5d16:	f200 80c4 	bhi.w	5ea2 <__divdi3+0x29a>
    5d1a:	4641      	mov	r1, r8
    5d1c:	1abf      	subs	r7, r7, r2
    5d1e:	fbb7 f2f0 	udiv	r2, r7, r0
    5d22:	fb00 7012 	mls	r0, r0, r2, r7
    5d26:	fb0c fc02 	mul.w	ip, ip, r2
    5d2a:	b2b6      	uxth	r6, r6
    5d2c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
    5d30:	4584      	cmp	ip, r0
    5d32:	d907      	bls.n	5d44 <__divdi3+0x13c>
    5d34:	1940      	adds	r0, r0, r5
    5d36:	f102 37ff 	add.w	r7, r2, #4294967295
    5d3a:	d202      	bcs.n	5d42 <__divdi3+0x13a>
    5d3c:	4584      	cmp	ip, r0
    5d3e:	f200 80ae 	bhi.w	5e9e <__divdi3+0x296>
    5d42:	463a      	mov	r2, r7
    5d44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    5d48:	e7b0      	b.n	5cac <__divdi3+0xa4>
    5d4a:	43e4      	mvns	r4, r4
    5d4c:	4252      	negs	r2, r2
    5d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5d52:	e762      	b.n	5c1a <__divdi3+0x12>
    5d54:	4240      	negs	r0, r0
    5d56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    5d5a:	f04f 34ff 	mov.w	r4, #4294967295
    5d5e:	e759      	b.n	5c14 <__divdi3+0xc>
    5d60:	4095      	lsls	r5, r2
    5d62:	f1c2 0920 	rsb	r9, r2, #32
    5d66:	fa27 f109 	lsr.w	r1, r7, r9
    5d6a:	fa26 f909 	lsr.w	r9, r6, r9
    5d6e:	4097      	lsls	r7, r2
    5d70:	0c28      	lsrs	r0, r5, #16
    5d72:	fbb1 f8f0 	udiv	r8, r1, r0
    5d76:	fb00 1118 	mls	r1, r0, r8, r1
    5d7a:	fa1f fc85 	uxth.w	ip, r5
    5d7e:	fb0c f308 	mul.w	r3, ip, r8
    5d82:	ea49 0907 	orr.w	r9, r9, r7
    5d86:	ea4f 4719 	mov.w	r7, r9, lsr #16
    5d8a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
    5d8e:	428b      	cmp	r3, r1
    5d90:	fa06 f602 	lsl.w	r6, r6, r2
    5d94:	d908      	bls.n	5da8 <__divdi3+0x1a0>
    5d96:	1949      	adds	r1, r1, r5
    5d98:	f108 32ff 	add.w	r2, r8, #4294967295
    5d9c:	d27a      	bcs.n	5e94 <__divdi3+0x28c>
    5d9e:	428b      	cmp	r3, r1
    5da0:	d978      	bls.n	5e94 <__divdi3+0x28c>
    5da2:	f1a8 0802 	sub.w	r8, r8, #2
    5da6:	4429      	add	r1, r5
    5da8:	1ac9      	subs	r1, r1, r3
    5daa:	fbb1 f3f0 	udiv	r3, r1, r0
    5dae:	fb00 1713 	mls	r7, r0, r3, r1
    5db2:	fb0c f203 	mul.w	r2, ip, r3
    5db6:	fa1f f989 	uxth.w	r9, r9
    5dba:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
    5dbe:	42ba      	cmp	r2, r7
    5dc0:	d907      	bls.n	5dd2 <__divdi3+0x1ca>
    5dc2:	197f      	adds	r7, r7, r5
    5dc4:	f103 31ff 	add.w	r1, r3, #4294967295
    5dc8:	d260      	bcs.n	5e8c <__divdi3+0x284>
    5dca:	42ba      	cmp	r2, r7
    5dcc:	d95e      	bls.n	5e8c <__divdi3+0x284>
    5dce:	3b02      	subs	r3, #2
    5dd0:	442f      	add	r7, r5
    5dd2:	1abf      	subs	r7, r7, r2
    5dd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    5dd8:	e78c      	b.n	5cf4 <__divdi3+0xec>
    5dda:	f1c8 0220 	rsb	r2, r8, #32
    5dde:	fa25 f102 	lsr.w	r1, r5, r2
    5de2:	fa03 fc08 	lsl.w	ip, r3, r8
    5de6:	fa27 f302 	lsr.w	r3, r7, r2
    5dea:	fa20 f202 	lsr.w	r2, r0, r2
    5dee:	fa07 f708 	lsl.w	r7, r7, r8
    5df2:	ea41 0c0c 	orr.w	ip, r1, ip
    5df6:	ea4f 491c 	mov.w	r9, ip, lsr #16
    5dfa:	fbb3 f1f9 	udiv	r1, r3, r9
    5dfe:	fb09 3311 	mls	r3, r9, r1, r3
    5e02:	fa1f fa8c 	uxth.w	sl, ip
    5e06:	fb0a fb01 	mul.w	fp, sl, r1
    5e0a:	4317      	orrs	r7, r2
    5e0c:	0c3a      	lsrs	r2, r7, #16
    5e0e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    5e12:	459b      	cmp	fp, r3
    5e14:	fa05 f008 	lsl.w	r0, r5, r8
    5e18:	d908      	bls.n	5e2c <__divdi3+0x224>
    5e1a:	eb13 030c 	adds.w	r3, r3, ip
    5e1e:	f101 32ff 	add.w	r2, r1, #4294967295
    5e22:	d235      	bcs.n	5e90 <__divdi3+0x288>
    5e24:	459b      	cmp	fp, r3
    5e26:	d933      	bls.n	5e90 <__divdi3+0x288>
    5e28:	3902      	subs	r1, #2
    5e2a:	4463      	add	r3, ip
    5e2c:	ebcb 0303 	rsb	r3, fp, r3
    5e30:	fbb3 f2f9 	udiv	r2, r3, r9
    5e34:	fb09 3312 	mls	r3, r9, r2, r3
    5e38:	fb0a fa02 	mul.w	sl, sl, r2
    5e3c:	b2bf      	uxth	r7, r7
    5e3e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    5e42:	45ba      	cmp	sl, r7
    5e44:	d908      	bls.n	5e58 <__divdi3+0x250>
    5e46:	eb17 070c 	adds.w	r7, r7, ip
    5e4a:	f102 33ff 	add.w	r3, r2, #4294967295
    5e4e:	d21b      	bcs.n	5e88 <__divdi3+0x280>
    5e50:	45ba      	cmp	sl, r7
    5e52:	d919      	bls.n	5e88 <__divdi3+0x280>
    5e54:	3a02      	subs	r2, #2
    5e56:	4467      	add	r7, ip
    5e58:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
    5e5c:	fba5 0100 	umull	r0, r1, r5, r0
    5e60:	ebca 0707 	rsb	r7, sl, r7
    5e64:	428f      	cmp	r7, r1
    5e66:	f04f 0300 	mov.w	r3, #0
    5e6a:	d30a      	bcc.n	5e82 <__divdi3+0x27a>
    5e6c:	d005      	beq.n	5e7a <__divdi3+0x272>
    5e6e:	462a      	mov	r2, r5
    5e70:	e71c      	b.n	5cac <__divdi3+0xa4>
    5e72:	4662      	mov	r2, ip
    5e74:	e6fd      	b.n	5c72 <__divdi3+0x6a>
    5e76:	463b      	mov	r3, r7
    5e78:	e710      	b.n	5c9c <__divdi3+0x94>
    5e7a:	fa06 f608 	lsl.w	r6, r6, r8
    5e7e:	4286      	cmp	r6, r0
    5e80:	d2f5      	bcs.n	5e6e <__divdi3+0x266>
    5e82:	1e6a      	subs	r2, r5, #1
    5e84:	2300      	movs	r3, #0
    5e86:	e711      	b.n	5cac <__divdi3+0xa4>
    5e88:	461a      	mov	r2, r3
    5e8a:	e7e5      	b.n	5e58 <__divdi3+0x250>
    5e8c:	460b      	mov	r3, r1
    5e8e:	e7a0      	b.n	5dd2 <__divdi3+0x1ca>
    5e90:	4611      	mov	r1, r2
    5e92:	e7cb      	b.n	5e2c <__divdi3+0x224>
    5e94:	4690      	mov	r8, r2
    5e96:	e787      	b.n	5da8 <__divdi3+0x1a0>
    5e98:	4643      	mov	r3, r8
    5e9a:	4642      	mov	r2, r8
    5e9c:	e706      	b.n	5cac <__divdi3+0xa4>
    5e9e:	3a02      	subs	r2, #2
    5ea0:	e750      	b.n	5d44 <__divdi3+0x13c>
    5ea2:	3902      	subs	r1, #2
    5ea4:	442f      	add	r7, r5
    5ea6:	e739      	b.n	5d1c <__divdi3+0x114>

00005ea8 <__udivdi3>:
    5ea8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5eac:	4614      	mov	r4, r2
    5eae:	4605      	mov	r5, r0
    5eb0:	460e      	mov	r6, r1
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d143      	bne.n	5f3e <__udivdi3+0x96>
    5eb6:	428a      	cmp	r2, r1
    5eb8:	d953      	bls.n	5f62 <__udivdi3+0xba>
    5eba:	fab2 f782 	clz	r7, r2
    5ebe:	b157      	cbz	r7, 5ed6 <__udivdi3+0x2e>
    5ec0:	f1c7 0620 	rsb	r6, r7, #32
    5ec4:	fa20 f606 	lsr.w	r6, r0, r6
    5ec8:	fa01 f307 	lsl.w	r3, r1, r7
    5ecc:	fa02 f407 	lsl.w	r4, r2, r7
    5ed0:	fa00 f507 	lsl.w	r5, r0, r7
    5ed4:	431e      	orrs	r6, r3
    5ed6:	0c21      	lsrs	r1, r4, #16
    5ed8:	fbb6 f2f1 	udiv	r2, r6, r1
    5edc:	fb01 6612 	mls	r6, r1, r2, r6
    5ee0:	b2a0      	uxth	r0, r4
    5ee2:	fb00 f302 	mul.w	r3, r0, r2
    5ee6:	0c2f      	lsrs	r7, r5, #16
    5ee8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    5eec:	42b3      	cmp	r3, r6
    5eee:	d909      	bls.n	5f04 <__udivdi3+0x5c>
    5ef0:	1936      	adds	r6, r6, r4
    5ef2:	f102 37ff 	add.w	r7, r2, #4294967295
    5ef6:	f080 80fd 	bcs.w	60f4 <__udivdi3+0x24c>
    5efa:	42b3      	cmp	r3, r6
    5efc:	f240 80fa 	bls.w	60f4 <__udivdi3+0x24c>
    5f00:	3a02      	subs	r2, #2
    5f02:	4426      	add	r6, r4
    5f04:	1af6      	subs	r6, r6, r3
    5f06:	fbb6 f3f1 	udiv	r3, r6, r1
    5f0a:	fb01 6113 	mls	r1, r1, r3, r6
    5f0e:	fb00 f003 	mul.w	r0, r0, r3
    5f12:	b2ad      	uxth	r5, r5
    5f14:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    5f18:	4288      	cmp	r0, r1
    5f1a:	d908      	bls.n	5f2e <__udivdi3+0x86>
    5f1c:	1909      	adds	r1, r1, r4
    5f1e:	f103 36ff 	add.w	r6, r3, #4294967295
    5f22:	f080 80e9 	bcs.w	60f8 <__udivdi3+0x250>
    5f26:	4288      	cmp	r0, r1
    5f28:	f240 80e6 	bls.w	60f8 <__udivdi3+0x250>
    5f2c:	3b02      	subs	r3, #2
    5f2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    5f32:	2300      	movs	r3, #0
    5f34:	4610      	mov	r0, r2
    5f36:	4619      	mov	r1, r3
    5f38:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5f3c:	4770      	bx	lr
    5f3e:	428b      	cmp	r3, r1
    5f40:	d84c      	bhi.n	5fdc <__udivdi3+0x134>
    5f42:	fab3 f683 	clz	r6, r3
    5f46:	2e00      	cmp	r6, #0
    5f48:	d14f      	bne.n	5fea <__udivdi3+0x142>
    5f4a:	428b      	cmp	r3, r1
    5f4c:	d302      	bcc.n	5f54 <__udivdi3+0xac>
    5f4e:	4282      	cmp	r2, r0
    5f50:	f200 80dd 	bhi.w	610e <__udivdi3+0x266>
    5f54:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5f58:	2300      	movs	r3, #0
    5f5a:	2201      	movs	r2, #1
    5f5c:	4610      	mov	r0, r2
    5f5e:	4619      	mov	r1, r3
    5f60:	4770      	bx	lr
    5f62:	b912      	cbnz	r2, 5f6a <__udivdi3+0xc2>
    5f64:	2401      	movs	r4, #1
    5f66:	fbb4 f4f2 	udiv	r4, r4, r2
    5f6a:	fab4 f284 	clz	r2, r4
    5f6e:	2a00      	cmp	r2, #0
    5f70:	f040 8082 	bne.w	6078 <__udivdi3+0x1d0>
    5f74:	1b09      	subs	r1, r1, r4
    5f76:	0c26      	lsrs	r6, r4, #16
    5f78:	b2a7      	uxth	r7, r4
    5f7a:	2301      	movs	r3, #1
    5f7c:	fbb1 f0f6 	udiv	r0, r1, r6
    5f80:	fb06 1110 	mls	r1, r6, r0, r1
    5f84:	fb07 f200 	mul.w	r2, r7, r0
    5f88:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    5f8c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
    5f90:	428a      	cmp	r2, r1
    5f92:	d907      	bls.n	5fa4 <__udivdi3+0xfc>
    5f94:	1909      	adds	r1, r1, r4
    5f96:	f100 3cff 	add.w	ip, r0, #4294967295
    5f9a:	d202      	bcs.n	5fa2 <__udivdi3+0xfa>
    5f9c:	428a      	cmp	r2, r1
    5f9e:	f200 80c8 	bhi.w	6132 <__udivdi3+0x28a>
    5fa2:	4660      	mov	r0, ip
    5fa4:	1a89      	subs	r1, r1, r2
    5fa6:	fbb1 f2f6 	udiv	r2, r1, r6
    5faa:	fb06 1112 	mls	r1, r6, r2, r1
    5fae:	fb07 f702 	mul.w	r7, r7, r2
    5fb2:	b2ad      	uxth	r5, r5
    5fb4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
    5fb8:	42af      	cmp	r7, r5
    5fba:	d908      	bls.n	5fce <__udivdi3+0x126>
    5fbc:	192c      	adds	r4, r5, r4
    5fbe:	f102 31ff 	add.w	r1, r2, #4294967295
    5fc2:	f080 809b 	bcs.w	60fc <__udivdi3+0x254>
    5fc6:	42a7      	cmp	r7, r4
    5fc8:	f240 8098 	bls.w	60fc <__udivdi3+0x254>
    5fcc:	3a02      	subs	r2, #2
    5fce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    5fd2:	4610      	mov	r0, r2
    5fd4:	4619      	mov	r1, r3
    5fd6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5fda:	4770      	bx	lr
    5fdc:	2300      	movs	r3, #0
    5fde:	461a      	mov	r2, r3
    5fe0:	4610      	mov	r0, r2
    5fe2:	4619      	mov	r1, r3
    5fe4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5fe8:	4770      	bx	lr
    5fea:	f1c6 0520 	rsb	r5, r6, #32
    5fee:	fa22 f705 	lsr.w	r7, r2, r5
    5ff2:	fa03 f406 	lsl.w	r4, r3, r6
    5ff6:	fa21 f305 	lsr.w	r3, r1, r5
    5ffa:	fa01 fb06 	lsl.w	fp, r1, r6
    5ffe:	fa20 f505 	lsr.w	r5, r0, r5
    6002:	433c      	orrs	r4, r7
    6004:	ea4f 4814 	mov.w	r8, r4, lsr #16
    6008:	fbb3 fcf8 	udiv	ip, r3, r8
    600c:	fb08 331c 	mls	r3, r8, ip, r3
    6010:	fa1f f984 	uxth.w	r9, r4
    6014:	fb09 fa0c 	mul.w	sl, r9, ip
    6018:	ea45 0b0b 	orr.w	fp, r5, fp
    601c:	ea4f 451b 	mov.w	r5, fp, lsr #16
    6020:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    6024:	459a      	cmp	sl, r3
    6026:	fa02 f206 	lsl.w	r2, r2, r6
    602a:	d904      	bls.n	6036 <__udivdi3+0x18e>
    602c:	191b      	adds	r3, r3, r4
    602e:	f10c 35ff 	add.w	r5, ip, #4294967295
    6032:	d36f      	bcc.n	6114 <__udivdi3+0x26c>
    6034:	46ac      	mov	ip, r5
    6036:	ebca 0303 	rsb	r3, sl, r3
    603a:	fbb3 f5f8 	udiv	r5, r3, r8
    603e:	fb08 3315 	mls	r3, r8, r5, r3
    6042:	fb09 f905 	mul.w	r9, r9, r5
    6046:	fa1f fb8b 	uxth.w	fp, fp
    604a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
    604e:	45b9      	cmp	r9, r7
    6050:	d904      	bls.n	605c <__udivdi3+0x1b4>
    6052:	193f      	adds	r7, r7, r4
    6054:	f105 33ff 	add.w	r3, r5, #4294967295
    6058:	d362      	bcc.n	6120 <__udivdi3+0x278>
    605a:	461d      	mov	r5, r3
    605c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
    6060:	fbac 2302 	umull	r2, r3, ip, r2
    6064:	ebc9 0707 	rsb	r7, r9, r7
    6068:	429f      	cmp	r7, r3
    606a:	f04f 0500 	mov.w	r5, #0
    606e:	d34a      	bcc.n	6106 <__udivdi3+0x25e>
    6070:	d046      	beq.n	6100 <__udivdi3+0x258>
    6072:	4662      	mov	r2, ip
    6074:	462b      	mov	r3, r5
    6076:	e75d      	b.n	5f34 <__udivdi3+0x8c>
    6078:	4094      	lsls	r4, r2
    607a:	f1c2 0920 	rsb	r9, r2, #32
    607e:	fa21 fc09 	lsr.w	ip, r1, r9
    6082:	4091      	lsls	r1, r2
    6084:	fa20 f909 	lsr.w	r9, r0, r9
    6088:	0c26      	lsrs	r6, r4, #16
    608a:	fbbc f8f6 	udiv	r8, ip, r6
    608e:	fb06 cc18 	mls	ip, r6, r8, ip
    6092:	b2a7      	uxth	r7, r4
    6094:	fb07 f308 	mul.w	r3, r7, r8
    6098:	ea49 0901 	orr.w	r9, r9, r1
    609c:	ea4f 4119 	mov.w	r1, r9, lsr #16
    60a0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    60a4:	4563      	cmp	r3, ip
    60a6:	fa00 f502 	lsl.w	r5, r0, r2
    60aa:	d909      	bls.n	60c0 <__udivdi3+0x218>
    60ac:	eb1c 0c04 	adds.w	ip, ip, r4
    60b0:	f108 32ff 	add.w	r2, r8, #4294967295
    60b4:	d23b      	bcs.n	612e <__udivdi3+0x286>
    60b6:	4563      	cmp	r3, ip
    60b8:	d939      	bls.n	612e <__udivdi3+0x286>
    60ba:	f1a8 0802 	sub.w	r8, r8, #2
    60be:	44a4      	add	ip, r4
    60c0:	ebc3 0c0c 	rsb	ip, r3, ip
    60c4:	fbbc f3f6 	udiv	r3, ip, r6
    60c8:	fb06 c113 	mls	r1, r6, r3, ip
    60cc:	fb07 f203 	mul.w	r2, r7, r3
    60d0:	fa1f f989 	uxth.w	r9, r9
    60d4:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
    60d8:	428a      	cmp	r2, r1
    60da:	d907      	bls.n	60ec <__udivdi3+0x244>
    60dc:	1909      	adds	r1, r1, r4
    60de:	f103 30ff 	add.w	r0, r3, #4294967295
    60e2:	d222      	bcs.n	612a <__udivdi3+0x282>
    60e4:	428a      	cmp	r2, r1
    60e6:	d920      	bls.n	612a <__udivdi3+0x282>
    60e8:	3b02      	subs	r3, #2
    60ea:	4421      	add	r1, r4
    60ec:	1a89      	subs	r1, r1, r2
    60ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    60f2:	e743      	b.n	5f7c <__udivdi3+0xd4>
    60f4:	463a      	mov	r2, r7
    60f6:	e705      	b.n	5f04 <__udivdi3+0x5c>
    60f8:	4633      	mov	r3, r6
    60fa:	e718      	b.n	5f2e <__udivdi3+0x86>
    60fc:	460a      	mov	r2, r1
    60fe:	e766      	b.n	5fce <__udivdi3+0x126>
    6100:	40b0      	lsls	r0, r6
    6102:	4290      	cmp	r0, r2
    6104:	d2b5      	bcs.n	6072 <__udivdi3+0x1ca>
    6106:	f10c 32ff 	add.w	r2, ip, #4294967295
    610a:	2300      	movs	r3, #0
    610c:	e712      	b.n	5f34 <__udivdi3+0x8c>
    610e:	4633      	mov	r3, r6
    6110:	4632      	mov	r2, r6
    6112:	e70f      	b.n	5f34 <__udivdi3+0x8c>
    6114:	459a      	cmp	sl, r3
    6116:	d98d      	bls.n	6034 <__udivdi3+0x18c>
    6118:	f1ac 0c02 	sub.w	ip, ip, #2
    611c:	4423      	add	r3, r4
    611e:	e78a      	b.n	6036 <__udivdi3+0x18e>
    6120:	45b9      	cmp	r9, r7
    6122:	d99a      	bls.n	605a <__udivdi3+0x1b2>
    6124:	3d02      	subs	r5, #2
    6126:	4427      	add	r7, r4
    6128:	e798      	b.n	605c <__udivdi3+0x1b4>
    612a:	4603      	mov	r3, r0
    612c:	e7de      	b.n	60ec <__udivdi3+0x244>
    612e:	4690      	mov	r8, r2
    6130:	e7c6      	b.n	60c0 <__udivdi3+0x218>
    6132:	3802      	subs	r0, #2
    6134:	4421      	add	r1, r4
    6136:	e735      	b.n	5fa4 <__udivdi3+0xfc>

00006138 <_init>:
    6138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    613a:	bf00      	nop
    613c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    613e:	bc08      	pop	{r3}
    6140:	469e      	mov	lr, r3
    6142:	4770      	bx	lr

00006144 <_fini>:
    6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6146:	bf00      	nop
    6148:	bcf8      	pop	{r3, r4, r5, r6, r7}
    614a:	bc08      	pop	{r3}
    614c:	469e      	mov	lr, r3
    614e:	4770      	bx	lr

00006150 <__MSC_WriteWord_veneer>:
    6150:	b401      	push	{r0}
    6152:	4802      	ldr	r0, [pc, #8]	; (615c <__MSC_WriteWord_veneer+0xc>)
    6154:	4684      	mov	ip, r0
    6156:	bc01      	pop	{r0}
    6158:	4760      	bx	ip
    615a:	bf00      	nop
    615c:	2000097d 	.word	0x2000097d

00006160 <__MSC_ErasePage_veneer>:
    6160:	b401      	push	{r0}
    6162:	4802      	ldr	r0, [pc, #8]	; (616c <__MSC_ErasePage_veneer+0xc>)
    6164:	4684      	mov	ip, r0
    6166:	bc01      	pop	{r0}
    6168:	4760      	bx	ip
    616a:	bf00      	nop
    616c:	200008f5 	.word	0x200008f5
    6170:	652f2e2e 	.word	0x652f2e2e
    6174:	62696c6d 	.word	0x62696c6d
    6178:	6372732f 	.word	0x6372732f
    617c:	5f6d652f 	.word	0x5f6d652f
    6180:	2e756d63 	.word	0x2e756d63
    6184:	0063      	.short	0x0063
    6186:	2e2e      	.short	0x2e2e
    6188:	6c6d652f 	.word	0x6c6d652f
    618c:	732f6269 	.word	0x732f6269
    6190:	652f6372 	.word	0x652f6372
    6194:	6d645f6d 	.word	0x6d645f6d
    6198:	00632e61 	.word	0x00632e61
    619c:	652f2e2e 	.word	0x652f2e2e
    61a0:	62696c6d 	.word	0x62696c6d
    61a4:	6372732f 	.word	0x6372732f
    61a8:	5f6d652f 	.word	0x5f6d652f
    61ac:	2e756d65 	.word	0x2e756d65
    61b0:	0063      	.short	0x0063
    61b2:	2e2e      	.short	0x2e2e
    61b4:	6c6d652f 	.word	0x6c6d652f
    61b8:	732f6269 	.word	0x732f6269
    61bc:	652f6372 	.word	0x652f6372
    61c0:	70675f6d 	.word	0x70675f6d
    61c4:	632e6f69 	.word	0x632e6f69
    61c8:	00          	.byte	0x00
    61c9:	2e          	.byte	0x2e
    61ca:	2f2e      	.short	0x2f2e
    61cc:	696c6d65 	.word	0x696c6d65
    61d0:	72732f62 	.word	0x72732f62
    61d4:	6d652f63 	.word	0x6d652f63
    61d8:	75656c5f 	.word	0x75656c5f
    61dc:	2e747261 	.word	0x2e747261
    61e0:	0063      	.short	0x0063
    61e2:	2e2e      	.short	0x2e2e
    61e4:	6c6d652f 	.word	0x6c6d652f
    61e8:	732f6269 	.word	0x732f6269
    61ec:	652f6372 	.word	0x652f6372
    61f0:	73755f6d 	.word	0x73755f6d
    61f4:	2e747261 	.word	0x2e747261
    61f8:	0063      	.short	0x0063
    61fa:	2e2e      	.short	0x2e2e
    61fc:	6c6d652f 	.word	0x6c6d652f
    6200:	732f6269 	.word	0x732f6269
    6204:	652f6372 	.word	0x652f6372
    6208:	74725f6d 	.word	0x74725f6d
    620c:	00632e63 	.word	0x00632e63
    6210:	652f2e2e 	.word	0x652f2e2e
    6214:	62696c6d 	.word	0x62696c6d
    6218:	6372732f 	.word	0x6372732f
    621c:	5f6d652f 	.word	0x5f6d652f
    6220:	2e63736d 	.word	0x2e63736d
    6224:	0063      	.short	0x0063
    6226:	2e2e      	.short	0x2e2e
    6228:	6c6d652f 	.word	0x6c6d652f
    622c:	732f6269 	.word	0x732f6269
    6230:	652f6372 	.word	0x652f6372
    6234:	79735f6d 	.word	0x79735f6d
    6238:	6d657473 	.word	0x6d657473
    623c:	632e      	.short	0x632e
    623e:	00          	.byte	0x00
    623f:	22          	.byte	0x22
    6240:	3a2c2b2a 	.word	0x3a2c2b2a
    6244:	3e3d3c3b 	.word	0x3e3d3c3b
    6248:	7c5d5b3f 	.word	0x7c5d5b3f
    624c:	007f      	.short	0x007f

0000624e <excvt.4461>:
    624e:	8180 8382 8584 8786 8988 8b8a 8d8c 8f8e     ................
    625e:	9190 9392 9594 9796 9998 9b8a 8d8c 8f8e     ................
    626e:	a1a0 a3a2 a5a4 a7a6 a9a8 abaa adac afae     ................
    627e:	b1b0 a3b2 b5b4 b7b6 a5b8 bbaa bdbc afbc     ................
    628e:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
    629e:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    62ae:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
    62be:	d1d0 d3d2 d5d4 f7d6 d9d8 dbda dddc ffde     ................
    62ce:	753c 6b6e 6f6e 6e77 003e 0000 0000 0000     <unknown>.......
    62de:	2e2e 6d2f 6961 2e6e 0063 414d 5250 4c44     ../main.c.MAPRDL
    62ee:	5400 4d41 4c44 0a00 2a2a 2a2a 202a 4645     .TAMDL..***** EF
    62fe:	334d 5f32 6f42 746f 5620 2000 2a2a 2a2a     M32_Boot V. ****
    630e:	0a2a 000a 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     *...============
    631e:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    632e:	3d3d 3d3d 3d3d 3d3d 3d3d 4500 4d46 3233     ==========.EFM32
    633e:	425f 6f6f 2074 2556 2073 2528 2073 7325     _Boot V%s (%s %s
    634e:	0029 6c50 7461 6f66 6d72 203a 7325 2500     ).Platform: %s.%
    635e:	2e73 5055 0044 434d 3a55 2520 2073 5748     s.UPD.MCU: %s HW
    636e:	492d 3a44 3020 2578 3830 586c 3025 6c38     -ID: 0x%08lX%08l
    637e:	0058 4645 334d 4732 3332 4630 3231 0038     X.EFM32G230F128.
    638e:	002f 2e2a 5055 0044 6f46 6e75 2064 7075     /.*.UPD.Found up
    639e:	6164 6574 6620 6c69 2065 6f66 2072 6874     date file for th
    63ae:	7369 6220 616f 6472 202c 6572 7270 676f     is board, reprog
    63be:	6172 6d6d 6e69 2067 4c46 5341 0048 7055     ramming FLASH.Up
    63ce:	6164 6574 6620 6f72 206d 6576 7372 6f69     date from versio
    63de:	206e 7325 7420 206f 7325 6620 6e69 7369     n %s to %s finis
    63ee:	6568 2064 202d 6f6e 6520 7272 726f 0073     hed - no errors.
    63fe:	7055 6164 6574 6120 6f62 7472 6465 2d20     Update aborted -
    640e:	4620 6c69 2065 4552 4441 4520 5252 524f      File READ ERROR
    641e:	5500 6470 7461 2065 6261 726f 6574 2064     .Update aborted 
    642e:	202d 4c46 5341 2048 5245 5341 2045 5245     - FLASH ERASE ER
    643e:	4f52 0052 7055 6164 6574 6120 6f62 7472     ROR.Update abort
    644e:	6465 2d20 4620 414c 4853 5720 4952 4554     ed - FLASH WRITE
    645e:	4520 5252 524f 5500 6470 7461 2065 6261      ERROR.Update ab
    646e:	726f 6574 2064 202d 6e55 6e6b 776f 206e     orted - Unknown 
    647e:	7245 6f72 2072 6425 5400 6568 6572 6520     Error %d.There e
    648e:	6978 7473 6e20 206f 7075 6164 6574 6620     xist no update f
    649e:	6c69 2065 6f66 2072 6874 7369 6220 616f     ile for this boa
    64ae:	6472 0021 6157 7469 6e69 2067 6e75 6974     rd!.Waiting unti
    64be:	206c 6874 2065 4453 432d 7261 2064 6168     l the SD-Card ha
    64ce:	2073 6562 6e65 7220 6d65 766f 6465 5500     s been removed.U
    64de:	4450 5441 2e45 5854 0054 6f4e 7520 6470     PDATE.TXT.No upd
    64ee:	7461 2065 6966 656c 2073 6e6f 5320 2d44     ate files on SD-
    64fe:	6143 6472 000a 7453 7261 6974 676e 4120     Card..Starting A
    650e:	7070 696c 6163 6974 6e6f 2e2e 0a2e 000a     pplication......
	...

00006520 <_pTIMER0>:
    6520:	0000 4001                                   ...@

00006524 <_pVCMP>:
    6524:	0000 4000                                   ...@

00006528 <_pDAC0>:
    6528:	4000 4000                                   .@.@

0000652c <_pSysTick>:
    652c:	e010 e000                                   ....

00006530 <_pDEVINFO>:
    6530:	81b0 0fe0                                   ....

00006534 <_pAES>:
    6534:	0000 400e                                   ...@

00006538 <_pSCnSCB>:
    6538:	e000 e000                                   ....

0000653c <_pI2C0>:
    653c:	a000 4000                                   ...@

00006540 <_pTIMER1>:
    6540:	0400 4001                                   ...@

00006544 <_pTIMER2>:
    6544:	0800 4001                                   ...@

00006548 <_pADC0>:
    6548:	2000 4000                                   . .@

0000654c <_pACMP0>:
    654c:	1000 4000                                   ...@

00006550 <_pACMP1>:
    6550:	1400 4000                                   ...@

00006554 <_pGPIO>:
    6554:	6000 4000                                   .`.@

00006558 <_pMSC>:
    6558:	0000 400c                                   ...@

0000655c <_pRMU>:
    655c:	a000 400c                                   ...@

00006560 <_pDMA>:
    6560:	2000 400c                                   . .@

00006564 <_pROMTABLE>:
    6564:	ffd0 e00f                                   ....

00006568 <_pUSART2>:
    6568:	c800 4000                                   ...@

0000656c <_pTPI>:
    656c:	0000 e004                                   ....

00006570 <_pLETIMER0>:
    6570:	2000 4008                                   . .@

00006574 <_pCoreDebug>:
    6574:	edf0 e000                                   ....

00006578 <_pCMU>:
    6578:	8000 400c                                   ...@

0000657c <_pUSART0>:
    657c:	c000 4000                                   ...@

00006580 <_pUSART1>:
    6580:	c400 4000                                   ...@

00006584 <_pLEUART0>:
    6584:	4000 4008                                   .@.@

00006588 <_pLEUART1>:
    6588:	4400 4008                                   .D.@

0000658c <_pPRS>:
    658c:	c000 400c                                   ...@

00006590 <_pSCB>:
    6590:	ed00 e000                                   ....

00006594 <_pWDOG>:
    6594:	8000 4008                                   ...@

00006598 <_pEMU>:
    6598:	6000 400c                                   .`.@

0000659c <_pMPU>:
    659c:	ed90 e000                                   ....

000065a0 <_pRTC>:
    65a0:	0000 4008                                   ...@

000065a4 <_pNVIC>:
    65a4:	e100 e000                                   ....

000065a8 <_pCALIBRATE>:
    65a8:	8000 0fe0                                   ....

000065ac <_pPCNT0>:
    65ac:	6000 4008                                   .`.@

000065b0 <_pPCNT1>:
    65b0:	6400 4008                                   .d.@

000065b4 <_pPCNT2>:
    65b4:	6800 4008 5024 4a52 495f 464e 244f 2e00     .h.@$PRJ_INFO$..
    65c4:	2f2e 7264 7669 7265 2f73 6c46 7361 2e68     ./drivers/Flash.
    65d4:	0063 6946 6d72 6177 6572 7055 6164 6574     c.FirmwareUpdate
    65e4:	203a 704f 6e65 4620 6c69 2065 202d 7245     : Open File - Er
    65f4:	6f72 2072 6f43 6564 2520 0064 6946 6d72     ror Code %d.Firm
    6604:	6177 6572 7055 6164 6574 203a 6552 6461     wareUpdate: Read
    6614:	4620 6c69 2065 202d 7245 6f72 2072 6f43      File - Error Co
    6624:	6564 2520 0064 6946 6d72 6177 6572 7055     de %d.FirmwareUp
    6634:	6164 6574 203a 7245 7361 2065 6553 7463     date: Erase Sect
    6644:	726f 4020 3020 2578 2058 202d 7245 6f72     or @ 0x%X - Erro
    6654:	2072 6f43 6564 2520 0064 6946 6d72 6177     r Code %d.Firmwa
    6664:	6572 7055 6164 6574 203a 7257 7469 2065     reUpdate: Write 
    6674:	6553 7463 726f 4020 3020 2578 2058 202d     Sector @ 0x%X - 
    6684:	7245 6f72 2072 6f43 6564 2520 0064 5245     Error Code %d.ER
    6694:	4f52 3a52 4c20 676f 4220 6675 6566 2072     ROR: Log Buffer 
    66a4:	754f 2074 666f 4d20 6d65 726f 2079 202d     Out of Memory - 
    66b4:	6f6c 7473 2520 646c 4d20 7365 6173 6567     lost %ld Message
    66c4:	0a73 0d00 000a 2e2e 642f 6972 6576 7372     s......./drivers
    66d4:	4c2f 676f 6967 676e 632e 4500 5252 524f     /Logging.c.ERROR
    66e4:	0020 6f4c 4667 6c69 4f65 6570 3a6e 4520      .LogFileOpen: E
    66f4:	7272 726f 4320 646f 2065 6425 4c00 676f     rror Code %d.Log
    6704:	6c46 7375 3a68 4920 696e 2074 6146 6c69     Flush: Init Fail
    6714:	6465 4c00 676f 6c46 7375 3a68 4520 7272     ed.LogFlush: Err
    6724:	726f 4320 646f 2065 6425 4c00 676f 6c46     or Code %d.LogFl
    6734:	7375 3a68 4420 7369 206b 7546 6c6c 0000     ush: Disk Full..
    6744:	0005 0000 0000 0000 4240 000f 0105 0000     ........@B......
    6754:	0000 0000 2e2e 642f 6972 6576 7372 6d2f     ....../drivers/m
    6764:	6369 6f72 6473 632e 5300 2d44 6143 6472     icrosd.c.SD-Card
    6774:	5220 6d65 766f 6465 5300 2d44 6143 6472      Removed.SD-Card
    6784:	4920 736e 7265 6574 0064 4453 432d 7261      Inserted.SD-Car
    6794:	2064 6e49 7469 6169 696c 657a 0064 4453     d Initialized.SD
    67a4:	432d 7261 2064 6946 656c 5320 7379 6574     -Card File Syste
    67b4:	206d 6f6d 6e75 6574 0064 4453 432d 7261     m mounted.SD-Car
    67c4:	2064 6c25 4d64 2042 7266 6565 5300 2d44     d %ldMB free.SD-
    67d4:	6143 6472 4d20 756f 746e 4620 6961 656c     Card Mount Faile
    67e4:	0064                                        d.

000067e6 <prj>:
    67e6:	5024 4a52 495f 464e 244f 0000 6553 2070     $PRJ_INFO$..Sep 
    67f6:	3931 3220 3130 0039 0000 0000 3131 313a     19 2019.....11:1
    6806:	3a32 3135 0000 2e31 0034 0000 0000 0000     2:51..1.4.......
    6816:	0000 0000 0000 0043 0000                    ......C...

00006820 <_global_impure_ptr>:
    6820:	0038 2000                                   8.. 

00006824 <zeroes.6707>:
    6824:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
    6834:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    6844:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
    6854:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00006864 <blanks.6706>:
    6864:	2020 2020 2020 2020 2020 2020 2020 2020                     

00006874 <__EH_FRAME_BEGIN__>:
    6874:	0000 0000                                   ....

Disassembly of section .data:

20000000 <__data_start__>:
20000000:	00008000 	.word	0x00008000

20000004 <SystemHFXOClock>:
20000004:	01e84800                                .H..

20000008 <stat>:
20000008:	00000001                                ....

2000000c <dmaInit>:
2000000c:	00000000 20002900                       .....). 

20000014 <leuartInit>:
20000014:	00000004 00000000 00002580 00100000     .........%......

20000024 <chnlCfgTx>:
20000024:	00000000 00100001 20002a10              .........*. 

20000030 <descrCfgTx>:
20000030:	00000003 00030100                                .....

20000035 <g_flgLEUART_LF2CRLF>:
20000035:	00000301                                         .

20000036 <g_MicroSD_PwrPort>:
20000036:	00000003                                         ..

20000038 <impure_data>:
20000038:	00000000 20000324 2000038c 200003f4     ....$.. ... ... 
	...
2000006c:	0000681c 00000000 00000000 00000000     .h..............
	...
200000e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200000f0:	0005deec 0000000b 00000000 00000000     ................
	...

20000460 <_impure_ptr>:
20000460:	20000038                                8.. 

20000464 <__malloc_av_>:
	...
2000046c:	20000464 20000464 2000046c 2000046c     d.. d.. l.. l.. 
2000047c:	20000474 20000474 2000047c 2000047c     t.. t.. |.. |.. 
2000048c:	20000484 20000484 2000048c 2000048c     ... ... ... ... 
2000049c:	20000494 20000494 2000049c 2000049c     ... ... ... ... 
200004ac:	200004a4 200004a4 200004ac 200004ac     ... ... ... ... 
200004bc:	200004b4 200004b4 200004bc 200004bc     ... ... ... ... 
200004cc:	200004c4 200004c4 200004cc 200004cc     ... ... ... ... 
200004dc:	200004d4 200004d4 200004dc 200004dc     ... ... ... ... 
200004ec:	200004e4 200004e4 200004ec 200004ec     ... ... ... ... 
200004fc:	200004f4 200004f4 200004fc 200004fc     ... ... ... ... 
2000050c:	20000504 20000504 2000050c 2000050c     ... ... ... ... 
2000051c:	20000514 20000514 2000051c 2000051c     ... ... ... ... 
2000052c:	20000524 20000524 2000052c 2000052c     $.. $.. ,.. ,.. 
2000053c:	20000534 20000534 2000053c 2000053c     4.. 4.. <.. <.. 
2000054c:	20000544 20000544 2000054c 2000054c     D.. D.. L.. L.. 
2000055c:	20000554 20000554 2000055c 2000055c     T.. T.. \.. \.. 
2000056c:	20000564 20000564 2000056c 2000056c     d.. d.. l.. l.. 
2000057c:	20000574 20000574 2000057c 2000057c     t.. t.. |.. |.. 
2000058c:	20000584 20000584 2000058c 2000058c     ... ... ... ... 
2000059c:	20000594 20000594 2000059c 2000059c     ... ... ... ... 
200005ac:	200005a4 200005a4 200005ac 200005ac     ... ... ... ... 
200005bc:	200005b4 200005b4 200005bc 200005bc     ... ... ... ... 
200005cc:	200005c4 200005c4 200005cc 200005cc     ... ... ... ... 
200005dc:	200005d4 200005d4 200005dc 200005dc     ... ... ... ... 
200005ec:	200005e4 200005e4 200005ec 200005ec     ... ... ... ... 
200005fc:	200005f4 200005f4 200005fc 200005fc     ... ... ... ... 
2000060c:	20000604 20000604 2000060c 2000060c     ... ... ... ... 
2000061c:	20000614 20000614 2000061c 2000061c     ... ... ... ... 
2000062c:	20000624 20000624 2000062c 2000062c     $.. $.. ,.. ,.. 
2000063c:	20000634 20000634 2000063c 2000063c     4.. 4.. <.. <.. 
2000064c:	20000644 20000644 2000064c 2000064c     D.. D.. L.. L.. 
2000065c:	20000654 20000654 2000065c 2000065c     T.. T.. \.. \.. 
2000066c:	20000664 20000664 2000066c 2000066c     d.. d.. l.. l.. 
2000067c:	20000674 20000674 2000067c 2000067c     t.. t.. |.. |.. 
2000068c:	20000684 20000684 2000068c 2000068c     ... ... ... ... 
2000069c:	20000694 20000694 2000069c 2000069c     ... ... ... ... 
200006ac:	200006a4 200006a4 200006ac 200006ac     ... ... ... ... 
200006bc:	200006b4 200006b4 200006bc 200006bc     ... ... ... ... 
200006cc:	200006c4 200006c4 200006cc 200006cc     ... ... ... ... 
200006dc:	200006d4 200006d4 200006dc 200006dc     ... ... ... ... 
200006ec:	200006e4 200006e4 200006ec 200006ec     ... ... ... ... 
200006fc:	200006f4 200006f4 200006fc 200006fc     ... ... ... ... 
2000070c:	20000704 20000704 2000070c 2000070c     ... ... ... ... 
2000071c:	20000714 20000714 2000071c 2000071c     ... ... ... ... 
2000072c:	20000724 20000724 2000072c 2000072c     $.. $.. ,.. ,.. 
2000073c:	20000734 20000734 2000073c 2000073c     4.. 4.. <.. <.. 
2000074c:	20000744 20000744 2000074c 2000074c     D.. D.. L.. L.. 
2000075c:	20000754 20000754 2000075c 2000075c     T.. T.. \.. \.. 
2000076c:	20000764 20000764 2000076c 2000076c     d.. d.. l.. l.. 
2000077c:	20000774 20000774 2000077c 2000077c     t.. t.. |.. |.. 
2000078c:	20000784 20000784 2000078c 2000078c     ... ... ... ... 
2000079c:	20000794 20000794 2000079c 2000079c     ... ... ... ... 
200007ac:	200007a4 200007a4 200007ac 200007ac     ... ... ... ... 
200007bc:	200007b4 200007b4 200007bc 200007bc     ... ... ... ... 
200007cc:	200007c4 200007c4 200007cc 200007cc     ... ... ... ... 
200007dc:	200007d4 200007d4 200007dc 200007dc     ... ... ... ... 
200007ec:	200007e4 200007e4 200007ec 200007ec     ... ... ... ... 
200007fc:	200007f4 200007f4 200007fc 200007fc     ... ... ... ... 
2000080c:	20000804 20000804 2000080c 2000080c     ... ... ... ... 
2000081c:	20000814 20000814 2000081c 2000081c     ... ... ... ... 
2000082c:	20000824 20000824 2000082c 2000082c     $.. $.. ,.. ,.. 
2000083c:	20000834 20000834 2000083c 2000083c     4.. 4.. <.. <.. 
2000084c:	20000844 20000844 2000084c 2000084c     D.. D.. L.. L.. 
2000085c:	20000854 20000854 2000085c 2000085c     T.. T.. \.. \.. 

2000086c <__malloc_trim_threshold>:
2000086c:	00020000                                ....

20000870 <__malloc_sbrk_base>:
20000870:	ffffffff                                ....

20000874 <MscLoadAddress>:
msc_Return_TypeDef MscLoadAddress(uint32_t* address)
{
  uint32_t status;

  /* Load address */
  MSC->ADDRB    = (uint32_t) (address);
20000874:	4b09      	ldr	r3, [pc, #36]	; (2000089c <MscLoadAddress+0x28>)
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
20000876:	2201      	movs	r2, #1
msc_Return_TypeDef MscLoadAddress(uint32_t* address)
{
  uint32_t status;

  /* Load address */
  MSC->ADDRB    = (uint32_t) (address);
20000878:	6118      	str	r0, [r3, #16]
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
2000087a:	60da      	str	r2, [r3, #12]

  status = MSC->STATUS;
2000087c:	69db      	ldr	r3, [r3, #28]
  if (status & (MSC_STATUS_INVADDR | MSC_STATUS_LOCKED))
2000087e:	f013 0006 	ands.w	r0, r3, #6
20000882:	d008      	beq.n	20000896 <MscLoadAddress+0x22>
  {
    /* Check for invalid address */
    if (status & MSC_STATUS_INVADDR)
20000884:	075a      	lsls	r2, r3, #29
20000886:	d405      	bmi.n	20000894 <MscLoadAddress+0x20>
      return mscReturnInvalidAddr;
    /* Check for write protected page */
    if (status & MSC_STATUS_LOCKED)
20000888:	f013 0f02 	tst.w	r3, #2
      return mscReturnLocked;
2000088c:	bf0c      	ite	eq
2000088e:	2000      	moveq	r0, #0
20000890:	20fe      	movne	r0, #254	; 0xfe
20000892:	e000      	b.n	20000896 <MscLoadAddress+0x22>
  status = MSC->STATUS;
  if (status & (MSC_STATUS_INVADDR | MSC_STATUS_LOCKED))
  {
    /* Check for invalid address */
    if (status & MSC_STATUS_INVADDR)
      return mscReturnInvalidAddr;
20000894:	20ff      	movs	r0, #255	; 0xff
    /* Check for write protected page */
    if (status & MSC_STATUS_LOCKED)
      return mscReturnLocked;
  }
  return mscReturnOk;
}
20000896:	b240      	sxtb	r0, r0
20000898:	4770      	bx	lr
2000089a:	bf00      	nop
2000089c:	400c0000 	.word	0x400c0000

200008a0 <MscLoadData>:
#pragma diag_suppress=Ta022
#pragma diag_suppress=Ta023
#endif

msc_Return_TypeDef MscLoadData(uint32_t* data, int num)
{
200008a0:	b530      	push	{r4, r5, lr}
  int      i;

  /* Wait for the MSC to be ready for a new data word.
   * Due to the timing of this function, the MSC should
   * already by ready */
  timeOut = MSC_PROGRAM_TIMEOUT;
200008a2:	4b12      	ldr	r3, [pc, #72]	; (200008ec <MscLoadData+0x4c>)
  while (((MSC->STATUS & MSC_STATUS_WDATAREADY) == 0) && (timeOut != 0))
200008a4:	4a12      	ldr	r2, [pc, #72]	; (200008f0 <MscLoadData+0x50>)
200008a6:	69d4      	ldr	r4, [r2, #28]
200008a8:	0724      	lsls	r4, r4, #28
200008aa:	d40d      	bmi.n	200008c8 <MscLoadData+0x28>
200008ac:	b153      	cbz	r3, 200008c4 <MscLoadData+0x24>
  {
    timeOut--;
200008ae:	3b01      	subs	r3, #1
200008b0:	e7f8      	b.n	200008a4 <MscLoadData+0x4>
  /* Load 'num' 32-bit words into write data register. */
  for (i=0; i<num; i++, data++)
    MSC->WDATA = *data;

  /* Trigger write once */
  MSC->WRITECMD = MSC_WRITECMD_WRITEONCE;
200008b2:	2308      	movs	r3, #8
200008b4:	60d3      	str	r3, [r2, #12]

  /* Wait for the write to complete */
  timeOut = MSC_PROGRAM_TIMEOUT;
200008b6:	4b0d      	ldr	r3, [pc, #52]	; (200008ec <MscLoadData+0x4c>)
  while ((MSC->STATUS & MSC_STATUS_BUSY) && (timeOut != 0))
200008b8:	4a0d      	ldr	r2, [pc, #52]	; (200008f0 <MscLoadData+0x50>)
200008ba:	69d0      	ldr	r0, [r2, #28]
200008bc:	f010 0001 	ands.w	r0, r0, #1
200008c0:	d10d      	bne.n	200008de <MscLoadData+0x3e>
  {
    timeOut--;
  }

  /* Check for timeout */
  if (timeOut == 0) return mscReturnTimeOut;
200008c2:	b983      	cbnz	r3, 200008e6 <MscLoadData+0x46>
    timeOut--;
  }

  /* Check for timeout */
  if (timeOut == 0)
    return mscReturnTimeOut;
200008c4:	20fd      	movs	r0, #253	; 0xfd
200008c6:	e00e      	b.n	200008e6 <MscLoadData+0x46>
  {
    timeOut--;
  }

  /* Check for timeout */
  if (timeOut == 0)
200008c8:	2b00      	cmp	r3, #0
200008ca:	d0fb      	beq.n	200008c4 <MscLoadData+0x24>
200008cc:	2300      	movs	r3, #0
    return mscReturnTimeOut;

  /* Load 'num' 32-bit words into write data register. */
  for (i=0; i<num; i++, data++)
200008ce:	428b      	cmp	r3, r1
200008d0:	daef      	bge.n	200008b2 <MscLoadData+0x12>
    MSC->WDATA = *data;
200008d2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
200008d6:	4d06      	ldr	r5, [pc, #24]	; (200008f0 <MscLoadData+0x50>)
  /* Check for timeout */
  if (timeOut == 0)
    return mscReturnTimeOut;

  /* Load 'num' 32-bit words into write data register. */
  for (i=0; i<num; i++, data++)
200008d8:	3301      	adds	r3, #1
    MSC->WDATA = *data;
200008da:	61ac      	str	r4, [r5, #24]
200008dc:	e7f7      	b.n	200008ce <MscLoadData+0x2e>
  /* Trigger write once */
  MSC->WRITECMD = MSC_WRITECMD_WRITEONCE;

  /* Wait for the write to complete */
  timeOut = MSC_PROGRAM_TIMEOUT;
  while ((MSC->STATUS & MSC_STATUS_BUSY) && (timeOut != 0))
200008de:	2b00      	cmp	r3, #0
200008e0:	d0f0      	beq.n	200008c4 <MscLoadData+0x24>
  {
    timeOut--;
200008e2:	3b01      	subs	r3, #1
200008e4:	e7e8      	b.n	200008b8 <MscLoadData+0x18>

  /* Check for timeout */
  if (timeOut == 0) return mscReturnTimeOut;

  return mscReturnOk;
}
200008e6:	b240      	sxtb	r0, r0
200008e8:	bd30      	pop	{r4, r5, pc}
200008ea:	bf00      	nop
200008ec:	00989680 	.word	0x00989680
200008f0:	400c0000 	.word	0x400c0000

200008f4 <MSC_ErasePage>:
msc_Return_TypeDef MSC_ErasePage(uint32_t *startAddress)
{
  int      timeOut  = MSC_PROGRAM_TIMEOUT;

  /* Address must be aligned to pages */
  EFM_ASSERT((((uint32_t) startAddress) & (FLASH_PAGE_SIZE - 1)) == 0);
200008f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
/* "Possible rom access from within a __ramfunc function"               */
#pragma diag_suppress=Ta022
#pragma diag_suppress=Ta023
#endif
msc_Return_TypeDef MSC_ErasePage(uint32_t *startAddress)
{
200008f8:	b510      	push	{r4, lr}
200008fa:	4604      	mov	r4, r0
  int      timeOut  = MSC_PROGRAM_TIMEOUT;

  /* Address must be aligned to pages */
  EFM_ASSERT((((uint32_t) startAddress) & (FLASH_PAGE_SIZE - 1)) == 0);
200008fc:	b123      	cbz	r3, 20000908 <MSC_ErasePage+0x14>
200008fe:	481c      	ldr	r0, [pc, #112]	; (20000970 <MSC_ErasePage+0x7c>)
20000900:	f44f 71a8 	mov.w	r1, #336	; 0x150
20000904:	f000 f870 	bl	200009e8 <__assertEFM_veneer>

  /* Enable writing to the MSC */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
20000908:	4b1a      	ldr	r3, [pc, #104]	; (20000974 <MSC_ErasePage+0x80>)
2000090a:	689a      	ldr	r2, [r3, #8]
2000090c:	f042 0201 	orr.w	r2, r2, #1
20000910:	609a      	str	r2, [r3, #8]

  /* Load address */
  MSC->ADDRB    = (uint32_t) startAddress;
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
20000912:	2201      	movs	r2, #1

  /* Enable writing to the MSC */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;

  /* Load address */
  MSC->ADDRB    = (uint32_t) startAddress;
20000914:	611c      	str	r4, [r3, #16]
  MSC->WRITECMD = MSC_WRITECMD_LADDRIM;
20000916:	60da      	str	r2, [r3, #12]

  /* Check for invalid address */
  if (MSC->STATUS & MSC_STATUS_INVADDR)
20000918:	69da      	ldr	r2, [r3, #28]
2000091a:	0751      	lsls	r1, r2, #29
2000091c:	d505      	bpl.n	2000092a <MSC_ErasePage+0x36>
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
2000091e:	689a      	ldr	r2, [r3, #8]
    return mscReturnInvalidAddr;
20000920:	20ff      	movs	r0, #255	; 0xff

  /* Check for invalid address */
  if (MSC->STATUS & MSC_STATUS_INVADDR)
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
20000922:	f022 0201 	bic.w	r2, r2, #1
20000926:	609a      	str	r2, [r3, #8]
    return mscReturnInvalidAddr;
20000928:	e01f      	b.n	2000096a <MSC_ErasePage+0x76>
  }

  /* Check for write protected page */
  if (MSC->STATUS & MSC_STATUS_LOCKED)
2000092a:	69da      	ldr	r2, [r3, #28]
2000092c:	0792      	lsls	r2, r2, #30
2000092e:	d505      	bpl.n	2000093c <MSC_ErasePage+0x48>
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
20000930:	689a      	ldr	r2, [r3, #8]
    return mscReturnLocked;
20000932:	20fe      	movs	r0, #254	; 0xfe

  /* Check for write protected page */
  if (MSC->STATUS & MSC_STATUS_LOCKED)
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
20000934:	f022 0201 	bic.w	r2, r2, #1
20000938:	609a      	str	r2, [r3, #8]
    return mscReturnLocked;
2000093a:	e016      	b.n	2000096a <MSC_ErasePage+0x76>
  }

  /* Send erase page command */
  MSC->WRITECMD = MSC_WRITECMD_ERASEPAGE;
2000093c:	2202      	movs	r2, #2
2000093e:	60da      	str	r2, [r3, #12]
#pragma diag_suppress=Ta022
#pragma diag_suppress=Ta023
#endif
msc_Return_TypeDef MSC_ErasePage(uint32_t *startAddress)
{
  int      timeOut  = MSC_PROGRAM_TIMEOUT;
20000940:	4a0d      	ldr	r2, [pc, #52]	; (20000978 <MSC_ErasePage+0x84>)

  /* Send erase page command */
  MSC->WRITECMD = MSC_WRITECMD_ERASEPAGE;

  /* Wait for the erase to complete */
  while ((MSC->STATUS & MSC_STATUS_BUSY) && (timeOut != 0))
20000942:	4b0c      	ldr	r3, [pc, #48]	; (20000974 <MSC_ErasePage+0x80>)
20000944:	69d8      	ldr	r0, [r3, #28]
20000946:	4619      	mov	r1, r3
20000948:	f010 0001 	ands.w	r0, r0, #1
2000094c:	d002      	beq.n	20000954 <MSC_ErasePage+0x60>
2000094e:	b112      	cbz	r2, 20000956 <MSC_ErasePage+0x62>
  {
    timeOut--;
20000950:	3a01      	subs	r2, #1
20000952:	e7f6      	b.n	20000942 <MSC_ErasePage+0x4e>
  }

  if (timeOut == 0)
20000954:	b92a      	cbnz	r2, 20000962 <MSC_ErasePage+0x6e>
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
20000956:	688b      	ldr	r3, [r1, #8]
    return mscReturnTimeOut;
20000958:	20fd      	movs	r0, #253	; 0xfd
  }

  if (timeOut == 0)
  {
    /* Disable writing to the MSC */
    MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
2000095a:	f023 0301 	bic.w	r3, r3, #1
2000095e:	608b      	str	r3, [r1, #8]
    return mscReturnTimeOut;
20000960:	e003      	b.n	2000096a <MSC_ErasePage+0x76>
  }

  /* Disable writing to the MSC */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
20000962:	689a      	ldr	r2, [r3, #8]
20000964:	f022 0201 	bic.w	r2, r2, #1
20000968:	609a      	str	r2, [r3, #8]
  return mscReturnOk;
}
2000096a:	b240      	sxtb	r0, r0
2000096c:	bd10      	pop	{r4, pc}
2000096e:	bf00      	nop
20000970:	00006210 	.word	0x00006210
20000974:	400c0000 	.word	0x400c0000
20000978:	00989680 	.word	0x00989680

2000097c <MSC_WriteWord>:
#pragma diag_suppress=Ta022
#pragma diag_suppress=Ta023
#endif

msc_Return_TypeDef MSC_WriteWord(uint32_t *address, void const *data, int numBytes)
{
2000097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000980:	4614      	mov	r4, r2
  uint32_t* pData;
#endif
  msc_Return_TypeDef retval = mscReturnOk;

  /* Check alignment (Must be aligned to words) */
  EFM_ASSERT(((uint32_t) address & 0x3) == 0);
20000982:	0782      	lsls	r2, r0, #30
#pragma diag_suppress=Ta022
#pragma diag_suppress=Ta023
#endif

msc_Return_TypeDef MSC_WriteWord(uint32_t *address, void const *data, int numBytes)
{
20000984:	4605      	mov	r5, r0
20000986:	4688      	mov	r8, r1
  uint32_t* pData;
#endif
  msc_Return_TypeDef retval = mscReturnOk;

  /* Check alignment (Must be aligned to words) */
  EFM_ASSERT(((uint32_t) address & 0x3) == 0);
20000988:	d004      	beq.n	20000994 <MSC_WriteWord+0x18>
2000098a:	4815      	ldr	r0, [pc, #84]	; (200009e0 <MSC_WriteWord+0x64>)
2000098c:	f240 11b9 	movw	r1, #441	; 0x1b9
20000990:	f000 f82a 	bl	200009e8 <__assertEFM_veneer>

  /* Check number of bytes. Must be divisable by four */
  EFM_ASSERT((numBytes & 0x3) == 0);
20000994:	07a3      	lsls	r3, r4, #30
20000996:	d004      	beq.n	200009a2 <MSC_WriteWord+0x26>
20000998:	4811      	ldr	r0, [pc, #68]	; (200009e0 <MSC_WriteWord+0x64>)
2000099a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
2000099e:	f000 f823 	bl	200009e8 <__assertEFM_veneer>

  /* Enable writing to the MSC */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
200009a2:	4b10      	ldr	r3, [pc, #64]	; (200009e4 <MSC_WriteWord+0x68>)

  /* Convert bytes to words */
  numWords = numBytes >> 2;
200009a4:	10a7      	asrs	r7, r4, #2

  /* Check number of bytes. Must be divisable by four */
  EFM_ASSERT((numBytes & 0x3) == 0);

  /* Enable writing to the MSC */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
200009a6:	689a      	ldr	r2, [r3, #8]
    }
  }

#else /* _EFM32_GECKO_FAMILY  */

  for (wordCount = 0; wordCount < numWords; wordCount++)
200009a8:	2400      	movs	r4, #0

  /* Check number of bytes. Must be divisable by four */
  EFM_ASSERT((numBytes & 0x3) == 0);

  /* Enable writing to the MSC */
  MSC->WRITECTRL |= MSC_WRITECTRL_WREN;
200009aa:	f042 0201 	orr.w	r2, r2, #1
200009ae:	609a      	str	r2, [r3, #8]
    }
  }

#else /* _EFM32_GECKO_FAMILY  */

  for (wordCount = 0; wordCount < numWords; wordCount++)
200009b0:	42bc      	cmp	r4, r7
200009b2:	da0c      	bge.n	200009ce <MSC_WriteWord+0x52>
200009b4:	00a6      	lsls	r6, r4, #2
  {
    retval = MscLoadAddress(address + wordCount);
200009b6:	19a8      	adds	r0, r5, r6
200009b8:	f7ff ff5c 	bl	20000874 <MscLoadAddress>
    if (mscReturnOk != retval)
200009bc:	b940      	cbnz	r0, 200009d0 <MSC_WriteWord+0x54>
      goto msc_write_word_exit;
    retval = MscLoadData(((uint32_t *) data) + wordCount, 1);
200009be:	eb08 0006 	add.w	r0, r8, r6
200009c2:	2101      	movs	r1, #1
200009c4:	f7ff ff6c 	bl	200008a0 <MscLoadData>
    if (mscReturnOk != retval)
200009c8:	b910      	cbnz	r0, 200009d0 <MSC_WriteWord+0x54>
    }
  }

#else /* _EFM32_GECKO_FAMILY  */

  for (wordCount = 0; wordCount < numWords; wordCount++)
200009ca:	3401      	adds	r4, #1
200009cc:	e7f0      	b.n	200009b0 <MSC_WriteWord+0x34>
200009ce:	2000      	movs	r0, #0
#endif

 msc_write_word_exit:

  /* Disable writing to the MSC */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
200009d0:	4b04      	ldr	r3, [pc, #16]	; (200009e4 <MSC_WriteWord+0x68>)
  /* Turn off double word write cycle support. */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WDOUBLE;
#endif

  return retval;
}
200009d2:	b240      	sxtb	r0, r0
#endif

 msc_write_word_exit:

  /* Disable writing to the MSC */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WREN;
200009d4:	689a      	ldr	r2, [r3, #8]
200009d6:	f022 0201 	bic.w	r2, r2, #1
200009da:	609a      	str	r2, [r3, #8]
  /* Turn off double word write cycle support. */
  MSC->WRITECTRL &= ~MSC_WRITECTRL_WDOUBLE;
#endif

  return retval;
}
200009dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
200009e0:	00006210 	.word	0x00006210
200009e4:	400c0000 	.word	0x400c0000

200009e8 <__assertEFM_veneer>:
200009e8:	b401      	push	{r0}
200009ea:	4802      	ldr	r0, [pc, #8]	; (200009f4 <__assertEFM_veneer+0xc>)
200009ec:	4684      	mov	ip, r0
200009ee:	bc01      	pop	{r0}
200009f0:	4760      	bx	ip
200009f2:	bf00      	nop
200009f4:	000002b1 	.word	0x000002b1

200009f8 <__init_array_start>:
200009f8:	00004bb5 	.word	0x00004bb5

200009fc <__frame_dummy_init_array_entry>:
200009fc:	00000125                                %...

20000a00 <__do_global_dtors_aux_fini_array_entry>:
20000a00:	00000101                                ....
