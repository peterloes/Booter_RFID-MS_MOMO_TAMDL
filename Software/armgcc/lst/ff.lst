ARM GAS  /tmp/ccOwSZ6Y.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.mem_cpy,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	mem_cpy:
  24              	.LFB0:
  25              		.file 1 "../fatfs/src/ff.c"
   1:../fatfs/src/ff.c **** /*----------------------------------------------------------------------------/
   2:../fatfs/src/ff.c **** /  FatFs - FAT file system module  R0.09                  (C)ChaN, 2011
   3:../fatfs/src/ff.c **** /-----------------------------------------------------------------------------/
   4:../fatfs/src/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../fatfs/src/ff.c **** / This is a free software that opened for education, research and commercial
   6:../fatfs/src/ff.c **** / developments under license policy of following terms.
   7:../fatfs/src/ff.c **** /
   8:../fatfs/src/ff.c **** /  Copyright (C) 2011, ChaN, all right reserved.
   9:../fatfs/src/ff.c **** /
  10:../fatfs/src/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../fatfs/src/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../fatfs/src/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../fatfs/src/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../fatfs/src/ff.c **** /
  15:../fatfs/src/ff.c **** /-----------------------------------------------------------------------------/
  16:../fatfs/src/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../fatfs/src/ff.c **** /
  18:../fatfs/src/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../fatfs/src/ff.c **** /
  20:../fatfs/src/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../fatfs/src/ff.c **** /                   Removed unbuffered mode.
  22:../fatfs/src/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../fatfs/src/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../fatfs/src/ff.c **** /
  25:../fatfs/src/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../fatfs/src/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../fatfs/src/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../fatfs/src/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../fatfs/src/ff.c **** /
  30:../fatfs/src/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../fatfs/src/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../fatfs/src/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../fatfs/src/ff.c **** /                   Added f_mkfs().
ARM GAS  /tmp/ccOwSZ6Y.s 			page 2


  34:../fatfs/src/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../fatfs/src/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../fatfs/src/ff.c **** /                   Added minimization level 3.
  37:../fatfs/src/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../fatfs/src/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../fatfs/src/ff.c **** /                   Added FSInfo support.
  40:../fatfs/src/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../fatfs/src/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../fatfs/src/ff.c **** /
  43:../fatfs/src/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../fatfs/src/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:../fatfs/src/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../fatfs/src/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../fatfs/src/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../fatfs/src/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../fatfs/src/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:../fatfs/src/ff.c **** /
  51:../fatfs/src/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:../fatfs/src/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:../fatfs/src/ff.c **** /
  54:../fatfs/src/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:../fatfs/src/ff.c **** /                   Added long file name feature.
  56:../fatfs/src/ff.c **** /                   Added multiple code page feature.
  57:../fatfs/src/ff.c **** /                   Added re-entrancy for multitask operation.
  58:../fatfs/src/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:../fatfs/src/ff.c **** /                   Added rewind option to f_readdir().
  60:../fatfs/src/ff.c **** /                   Changed result code of critical errors.
  61:../fatfs/src/ff.c **** /                   Renamed string functions to avoid name collision.
  62:../fatfs/src/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:../fatfs/src/ff.c **** /                   Added multiple sector size feature.
  64:../fatfs/src/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:../fatfs/src/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:../fatfs/src/ff.c **** /                   Added relative path feature.
  67:../fatfs/src/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:../fatfs/src/ff.c **** /                   Added proper case conversion to extended char.
  69:../fatfs/src/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:../fatfs/src/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:../fatfs/src/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  72:../fatfs/src/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:../fatfs/src/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:../fatfs/src/ff.c **** /
  75:../fatfs/src/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:../fatfs/src/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:../fatfs/src/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:../fatfs/src/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:../fatfs/src/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:../fatfs/src/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:../fatfs/src/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:../fatfs/src/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:../fatfs/src/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:../fatfs/src/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:../fatfs/src/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:../fatfs/src/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:../fatfs/src/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:../fatfs/src/ff.c **** /                   Extended format syntax of f_printf function.
  89:../fatfs/src/ff.c **** /                   Ignores duplicated directory separators in given path names.
  90:../fatfs/src/ff.c **** /
ARM GAS  /tmp/ccOwSZ6Y.s 			page 3


  91:../fatfs/src/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to finish the multiple partition feature.
  92:../fatfs/src/ff.c **** /                   Added f_fdisk(). (_MULTI_PARTITION = 2)
  93:../fatfs/src/ff.c **** /---------------------------------------------------------------------------*/
  94:../fatfs/src/ff.c **** 
  95:../fatfs/src/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  96:../fatfs/src/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  97:../fatfs/src/ff.c **** 
  98:../fatfs/src/ff.c **** 
  99:../fatfs/src/ff.c **** /*--------------------------------------------------------------------------
 100:../fatfs/src/ff.c **** 
 101:../fatfs/src/ff.c ****    Module Private Definitions
 102:../fatfs/src/ff.c **** 
 103:../fatfs/src/ff.c **** ---------------------------------------------------------------------------*/
 104:../fatfs/src/ff.c **** 
 105:../fatfs/src/ff.c **** #if _FATFS != 6502	/* Revision ID */
 106:../fatfs/src/ff.c **** #error Wrong include file (ff.h).
 107:../fatfs/src/ff.c **** #endif
 108:../fatfs/src/ff.c **** 
 109:../fatfs/src/ff.c **** 
 110:../fatfs/src/ff.c **** /* Definitions on sector size */
 111:../fatfs/src/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 112:../fatfs/src/ff.c **** #error Wrong sector size.
 113:../fatfs/src/ff.c **** #endif
 114:../fatfs/src/ff.c **** #if _MAX_SS != 512
 115:../fatfs/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 116:../fatfs/src/ff.c **** #else
 117:../fatfs/src/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 118:../fatfs/src/ff.c **** #endif
 119:../fatfs/src/ff.c **** 
 120:../fatfs/src/ff.c **** 
 121:../fatfs/src/ff.c **** /* Reentrancy related */
 122:../fatfs/src/ff.c **** #if _FS_REENTRANT
 123:../fatfs/src/ff.c **** #if _USE_LFN == 1
 124:../fatfs/src/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 125:../fatfs/src/ff.c **** #endif
 126:../fatfs/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 127:../fatfs/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 128:../fatfs/src/ff.c **** #else
 129:../fatfs/src/ff.c **** #define	ENTER_FF(fs)
 130:../fatfs/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 131:../fatfs/src/ff.c **** #endif
 132:../fatfs/src/ff.c **** 
 133:../fatfs/src/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 134:../fatfs/src/ff.c **** 
 135:../fatfs/src/ff.c **** 
 136:../fatfs/src/ff.c **** /* File shareing feature */
 137:../fatfs/src/ff.c **** #if _FS_SHARE
 138:../fatfs/src/ff.c **** #if _FS_READONLY
 139:../fatfs/src/ff.c **** #error _FS_SHARE must be 0 on read-only cfg.
 140:../fatfs/src/ff.c **** #endif
 141:../fatfs/src/ff.c **** typedef struct {
 142:../fatfs/src/ff.c **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 143:../fatfs/src/ff.c **** 	DWORD clu;				/* File ID 2, directory */
 144:../fatfs/src/ff.c **** 	WORD idx;				/* File ID 3, directory index */
 145:../fatfs/src/ff.c **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 146:../fatfs/src/ff.c **** } FILESEM;
 147:../fatfs/src/ff.c **** #endif
ARM GAS  /tmp/ccOwSZ6Y.s 			page 4


 148:../fatfs/src/ff.c **** 
 149:../fatfs/src/ff.c **** 
 150:../fatfs/src/ff.c **** /* Misc definitions */
 151:../fatfs/src/ff.c **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 152:../fatfs/src/ff.c **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 153:../fatfs/src/ff.c **** 
 154:../fatfs/src/ff.c **** 
 155:../fatfs/src/ff.c **** /* DBCS code ranges and SBCS extend char conversion table */
 156:../fatfs/src/ff.c **** 
 157:../fatfs/src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 158:../fatfs/src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 159:../fatfs/src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 160:../fatfs/src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 161:../fatfs/src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 162:../fatfs/src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 163:../fatfs/src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 164:../fatfs/src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 165:../fatfs/src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 166:../fatfs/src/ff.c **** 
 167:../fatfs/src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 168:../fatfs/src/ff.c **** #define _DF1S	0x81
 169:../fatfs/src/ff.c **** #define _DF1E	0xFE
 170:../fatfs/src/ff.c **** #define _DS1S	0x40
 171:../fatfs/src/ff.c **** #define _DS1E	0x7E
 172:../fatfs/src/ff.c **** #define _DS2S	0x80
 173:../fatfs/src/ff.c **** #define _DS2E	0xFE
 174:../fatfs/src/ff.c **** 
 175:../fatfs/src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 176:../fatfs/src/ff.c **** #define _DF1S	0x81
 177:../fatfs/src/ff.c **** #define _DF1E	0xFE
 178:../fatfs/src/ff.c **** #define _DS1S	0x41
 179:../fatfs/src/ff.c **** #define _DS1E	0x5A
 180:../fatfs/src/ff.c **** #define _DS2S	0x61
 181:../fatfs/src/ff.c **** #define _DS2E	0x7A
 182:../fatfs/src/ff.c **** #define _DS3S	0x81
 183:../fatfs/src/ff.c **** #define _DS3E	0xFE
 184:../fatfs/src/ff.c **** 
 185:../fatfs/src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 186:../fatfs/src/ff.c **** #define _DF1S	0x81
 187:../fatfs/src/ff.c **** #define _DF1E	0xFE
 188:../fatfs/src/ff.c **** #define _DS1S	0x40
 189:../fatfs/src/ff.c **** #define _DS1E	0x7E
 190:../fatfs/src/ff.c **** #define _DS2S	0xA1
 191:../fatfs/src/ff.c **** #define _DS2E	0xFE
 192:../fatfs/src/ff.c **** 
 193:../fatfs/src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 194:../fatfs/src/ff.c **** #define _DF1S	0
 195:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 196:../fatfs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 197:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 198:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 199:../fatfs/src/ff.c **** 
 200:../fatfs/src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 201:../fatfs/src/ff.c **** #define _DF1S	0
 202:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 203:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 204:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
ARM GAS  /tmp/ccOwSZ6Y.s 			page 5


 205:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 206:../fatfs/src/ff.c **** 
 207:../fatfs/src/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 208:../fatfs/src/ff.c **** #define _DF1S	0
 209:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 210:../fatfs/src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 211:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 212:../fatfs/src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 213:../fatfs/src/ff.c **** 
 214:../fatfs/src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 215:../fatfs/src/ff.c **** #define _DF1S	0
 216:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 217:../fatfs/src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 218:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 219:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 220:../fatfs/src/ff.c **** 
 221:../fatfs/src/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 222:../fatfs/src/ff.c **** #define _DF1S	0
 223:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 224:../fatfs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 225:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 226:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 227:../fatfs/src/ff.c **** 
 228:../fatfs/src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 229:../fatfs/src/ff.c **** #define _DF1S	0
 230:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 231:../fatfs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 232:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 233:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 234:../fatfs/src/ff.c **** 
 235:../fatfs/src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 236:../fatfs/src/ff.c **** #define _DF1S	0
 237:../fatfs/src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 238:../fatfs/src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 239:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 240:../fatfs/src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 241:../fatfs/src/ff.c **** 
 242:../fatfs/src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 243:../fatfs/src/ff.c **** #define _DF1S	0
 244:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 245:../fatfs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 246:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 247:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 248:../fatfs/src/ff.c **** 
 249:../fatfs/src/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 250:../fatfs/src/ff.c **** #define _DF1S	0
 251:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 252:../fatfs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 253:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 254:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 255:../fatfs/src/ff.c **** 
 256:../fatfs/src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 257:../fatfs/src/ff.c **** #define _DF1S	0
 258:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 259:../fatfs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 260:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 261:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
ARM GAS  /tmp/ccOwSZ6Y.s 			page 6


 262:../fatfs/src/ff.c **** 
 263:../fatfs/src/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 264:../fatfs/src/ff.c **** #define _DF1S	0
 265:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 266:../fatfs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 267:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 268:../fatfs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 269:../fatfs/src/ff.c **** 
 270:../fatfs/src/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 271:../fatfs/src/ff.c **** #define _DF1S	0
 272:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 273:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 274:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 275:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 276:../fatfs/src/ff.c **** 
 277:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 278:../fatfs/src/ff.c **** #define _DF1S	0
 279:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 280:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 281:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 282:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 283:../fatfs/src/ff.c **** 
 284:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 285:../fatfs/src/ff.c **** #define _DF1S	0
 286:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 287:../fatfs/src/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 288:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 290:../fatfs/src/ff.c **** 
 291:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 292:../fatfs/src/ff.c **** #define _DF1S	0
 293:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 294:../fatfs/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 295:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 297:../fatfs/src/ff.c **** 
 298:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 299:../fatfs/src/ff.c **** #define _DF1S	0
 300:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 301:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 302:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 303:../fatfs/src/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 304:../fatfs/src/ff.c **** 
 305:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 306:../fatfs/src/ff.c **** #define _DF1S	0
 307:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 308:../fatfs/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 309:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 310:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 311:../fatfs/src/ff.c **** 
 312:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 313:../fatfs/src/ff.c **** #define _DF1S	0
 314:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 315:../fatfs/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 316:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 317:../fatfs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 318:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 7


 319:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 320:../fatfs/src/ff.c **** #define _DF1S	0
 321:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 322:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 323:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 324:../fatfs/src/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 325:../fatfs/src/ff.c **** 
 326:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 327:../fatfs/src/ff.c **** #define _DF1S	0
 328:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 329:../fatfs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 330:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 331:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 332:../fatfs/src/ff.c **** 
 333:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 334:../fatfs/src/ff.c **** #define _DF1S	0
 335:../fatfs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 336:../fatfs/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 337:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 338:../fatfs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 339:../fatfs/src/ff.c **** 
 340:../fatfs/src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 341:../fatfs/src/ff.c **** #if _USE_LFN
 342:../fatfs/src/ff.c **** #error Cannot use LFN feature without valid code page.
 343:../fatfs/src/ff.c **** #endif
 344:../fatfs/src/ff.c **** #define _DF1S	0
 345:../fatfs/src/ff.c **** 
 346:../fatfs/src/ff.c **** #else
 347:../fatfs/src/ff.c **** #error Unknown code page
 348:../fatfs/src/ff.c **** 
 349:../fatfs/src/ff.c **** #endif
 350:../fatfs/src/ff.c **** 
 351:../fatfs/src/ff.c **** 
 352:../fatfs/src/ff.c **** /* Character code support macros */
 353:../fatfs/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 354:../fatfs/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 355:../fatfs/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 356:../fatfs/src/ff.c **** 
 357:../fatfs/src/ff.c **** #if _DF1S		/* Code page is DBCS */
 358:../fatfs/src/ff.c **** 
 359:../fatfs/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 360:../fatfs/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 361:../fatfs/src/ff.c **** #else			/* One 1st byte area */
 362:../fatfs/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 363:../fatfs/src/ff.c **** #endif
 364:../fatfs/src/ff.c **** 
 365:../fatfs/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 366:../fatfs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 367:../fatfs/src/ff.c **** #else			/* Two 2nd byte areas */
 368:../fatfs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 369:../fatfs/src/ff.c **** #endif
 370:../fatfs/src/ff.c **** 
 371:../fatfs/src/ff.c **** #else			/* Code page is SBCS */
 372:../fatfs/src/ff.c **** 
 373:../fatfs/src/ff.c **** #define IsDBCS1(c)	0
 374:../fatfs/src/ff.c **** #define IsDBCS2(c)	0
 375:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 8


 376:../fatfs/src/ff.c **** #endif /* _DF1S */
 377:../fatfs/src/ff.c **** 
 378:../fatfs/src/ff.c **** 
 379:../fatfs/src/ff.c **** /* Name status flags */
 380:../fatfs/src/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 381:../fatfs/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 382:../fatfs/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 383:../fatfs/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 384:../fatfs/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 385:../fatfs/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 386:../fatfs/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 387:../fatfs/src/ff.c **** 
 388:../fatfs/src/ff.c **** 
 389:../fatfs/src/ff.c **** /* FAT sub-type boundaries */
 390:../fatfs/src/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 391:../fatfs/src/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 392:../fatfs/src/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 393:../fatfs/src/ff.c **** 
 394:../fatfs/src/ff.c **** 
 395:../fatfs/src/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 396:../fatfs/src/ff.c **** / structure member because the structure is not binary compatible between
 397:../fatfs/src/ff.c **** / different platforms */
 398:../fatfs/src/ff.c **** 
 399:../fatfs/src/ff.c **** #define BS_jmpBoot			0	/* Jump instruction (3) */
 400:../fatfs/src/ff.c **** #define BS_OEMName			3	/* OEM name (8) */
 401:../fatfs/src/ff.c **** #define BPB_BytsPerSec		11	/* Sector size [byte] (2) */
 402:../fatfs/src/ff.c **** #define BPB_SecPerClus		13	/* Cluster size [sector] (1) */
 403:../fatfs/src/ff.c **** #define BPB_RsvdSecCnt		14	/* Size of reserved area [sector] (2) */
 404:../fatfs/src/ff.c **** #define BPB_NumFATs			16	/* Number of FAT copies (1) */
 405:../fatfs/src/ff.c **** #define BPB_RootEntCnt		17	/* Number of root dir entries for FAT12/16 (2) */
 406:../fatfs/src/ff.c **** #define BPB_TotSec16		19	/* Volume size [sector] (2) */
 407:../fatfs/src/ff.c **** #define BPB_Media			21	/* Media descriptor (1) */
 408:../fatfs/src/ff.c **** #define BPB_FATSz16			22	/* FAT size [sector] (2) */
 409:../fatfs/src/ff.c **** #define BPB_SecPerTrk		24	/* Track size [sector] (2) */
 410:../fatfs/src/ff.c **** #define BPB_NumHeads		26	/* Number of heads (2) */
 411:../fatfs/src/ff.c **** #define BPB_HiddSec			28	/* Number of special hidden sectors (4) */
 412:../fatfs/src/ff.c **** #define BPB_TotSec32		32	/* Volume size [sector] (4) */
 413:../fatfs/src/ff.c **** #define BS_DrvNum			36	/* Physical drive number (2) */
 414:../fatfs/src/ff.c **** #define BS_BootSig			38	/* Extended boot signature (1) */
 415:../fatfs/src/ff.c **** #define BS_VolID			39	/* Volume serial number (4) */
 416:../fatfs/src/ff.c **** #define BS_VolLab			43	/* Volume label (8) */
 417:../fatfs/src/ff.c **** #define BS_FilSysType		54	/* File system type (1) */
 418:../fatfs/src/ff.c **** #define BPB_FATSz32			36	/* FAT size [sector] (4) */
 419:../fatfs/src/ff.c **** #define BPB_ExtFlags		40	/* Extended flags (2) */
 420:../fatfs/src/ff.c **** #define BPB_FSVer			42	/* File system version (2) */
 421:../fatfs/src/ff.c **** #define BPB_RootClus		44	/* Root dir first cluster (4) */
 422:../fatfs/src/ff.c **** #define BPB_FSInfo			48	/* Offset of FSInfo sector (2) */
 423:../fatfs/src/ff.c **** #define BPB_BkBootSec		50	/* Offset of backup boot sectot (2) */
 424:../fatfs/src/ff.c **** #define BS_DrvNum32			64	/* Physical drive number (2) */
 425:../fatfs/src/ff.c **** #define BS_BootSig32		66	/* Extended boot signature (1) */
 426:../fatfs/src/ff.c **** #define BS_VolID32			67	/* Volume serial number (4) */
 427:../fatfs/src/ff.c **** #define BS_VolLab32			71	/* Volume label (8) */
 428:../fatfs/src/ff.c **** #define BS_FilSysType32		82	/* File system type (1) */
 429:../fatfs/src/ff.c **** #define	FSI_LeadSig			0	/* FSI: Leading signature (4) */
 430:../fatfs/src/ff.c **** #define	FSI_StrucSig		484	/* FSI: Structure signature (4) */
 431:../fatfs/src/ff.c **** #define	FSI_Free_Count		488	/* FSI: Number of free clusters (4) */
 432:../fatfs/src/ff.c **** #define	FSI_Nxt_Free		492	/* FSI: Last allocated cluster (4) */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 9


 433:../fatfs/src/ff.c **** #define MBR_Table			446	/* MBR: Partition table offset (2) */
 434:../fatfs/src/ff.c **** #define	SZ_PTE				16	/* MBR: Size of a partition table entry */
 435:../fatfs/src/ff.c **** #define BS_55AA				510	/* Boot sector signature (2) */
 436:../fatfs/src/ff.c **** 
 437:../fatfs/src/ff.c **** #define	DIR_Name			0	/* Short file name (11) */
 438:../fatfs/src/ff.c **** #define	DIR_Attr			11	/* Attribute (1) */
 439:../fatfs/src/ff.c **** #define	DIR_NTres			12	/* NT flag (1) */
 440:../fatfs/src/ff.c **** #define	DIR_CrtTime			14	/* Created time (2) */
 441:../fatfs/src/ff.c **** #define	DIR_CrtDate			16	/* Created date (2) */
 442:../fatfs/src/ff.c **** #define	DIR_FstClusHI		20	/* Higher 16-bit of first cluster (2) */
 443:../fatfs/src/ff.c **** #define	DIR_WrtTime			22	/* Modified time (2) */
 444:../fatfs/src/ff.c **** #define	DIR_WrtDate			24	/* Modified date (2) */
 445:../fatfs/src/ff.c **** #define	DIR_FstClusLO		26	/* Lower 16-bit of first cluster (2) */
 446:../fatfs/src/ff.c **** #define	DIR_FileSize		28	/* File size (4) */
 447:../fatfs/src/ff.c **** #define	LDIR_Ord			0	/* LFN entry order and LLE flag (1) */
 448:../fatfs/src/ff.c **** #define	LDIR_Attr			11	/* LFN attribute (1) */
 449:../fatfs/src/ff.c **** #define	LDIR_Type			12	/* LFN type (1) */
 450:../fatfs/src/ff.c **** #define	LDIR_Chksum			13	/* Sum of corresponding SFN entry */
 451:../fatfs/src/ff.c **** #define	LDIR_FstClusLO		26	/* Filled by zero (0) */
 452:../fatfs/src/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 453:../fatfs/src/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 454:../fatfs/src/ff.c **** #define	DDE					0xE5	/* Deleted directory enrty mark in DIR_Name[0] */
 455:../fatfs/src/ff.c **** #define	NDDE				0x05	/* Replacement of a character collides with DDE */
 456:../fatfs/src/ff.c **** 
 457:../fatfs/src/ff.c **** 
 458:../fatfs/src/ff.c **** /*------------------------------------------------------------*/
 459:../fatfs/src/ff.c **** /* Module private work area                                   */
 460:../fatfs/src/ff.c **** /*------------------------------------------------------------*/
 461:../fatfs/src/ff.c **** /* Note that uninitialized variables with static duration are
 462:../fatfs/src/ff.c **** /  zeroed/nulled at start-up. If not, the compiler or start-up
 463:../fatfs/src/ff.c **** /  routine is out of ANSI-C standard.
 464:../fatfs/src/ff.c **** */
 465:../fatfs/src/ff.c **** 
 466:../fatfs/src/ff.c **** #if _VOLUMES
 467:../fatfs/src/ff.c **** static
 468:../fatfs/src/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 469:../fatfs/src/ff.c **** #else
 470:../fatfs/src/ff.c **** #error Number of volumes must not be 0.
 471:../fatfs/src/ff.c **** #endif
 472:../fatfs/src/ff.c **** 
 473:../fatfs/src/ff.c **** static
 474:../fatfs/src/ff.c **** WORD Fsid;				/* File system mount ID */
 475:../fatfs/src/ff.c **** 
 476:../fatfs/src/ff.c **** #if _FS_RPATH
 477:../fatfs/src/ff.c **** static
 478:../fatfs/src/ff.c **** BYTE CurrVol;			/* Current drive */
 479:../fatfs/src/ff.c **** #endif
 480:../fatfs/src/ff.c **** 
 481:../fatfs/src/ff.c **** #if _FS_SHARE
 482:../fatfs/src/ff.c **** static
 483:../fatfs/src/ff.c **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 484:../fatfs/src/ff.c **** #endif
 485:../fatfs/src/ff.c **** 
 486:../fatfs/src/ff.c **** #if _USE_LFN == 0			/* No LFN feature */
 487:../fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 488:../fatfs/src/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 489:../fatfs/src/ff.c **** #define	FREE_BUF()
ARM GAS  /tmp/ccOwSZ6Y.s 			page 10


 490:../fatfs/src/ff.c **** 
 491:../fatfs/src/ff.c **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 492:../fatfs/src/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];
 493:../fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 494:../fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 495:../fatfs/src/ff.c **** #define	FREE_BUF()
 496:../fatfs/src/ff.c **** 
 497:../fatfs/src/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 498:../fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 499:../fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 500:../fatfs/src/ff.c **** #define	FREE_BUF()
 501:../fatfs/src/ff.c **** 
 502:../fatfs/src/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 503:../fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 504:../fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 505:../fatfs/src/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 506:../fatfs/src/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 507:../fatfs/src/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 508:../fatfs/src/ff.c **** 
 509:../fatfs/src/ff.c **** #else
 510:../fatfs/src/ff.c **** #error Wrong LFN configuration.
 511:../fatfs/src/ff.c **** #endif
 512:../fatfs/src/ff.c **** 
 513:../fatfs/src/ff.c **** 
 514:../fatfs/src/ff.c **** 
 515:../fatfs/src/ff.c **** 
 516:../fatfs/src/ff.c **** /*--------------------------------------------------------------------------
 517:../fatfs/src/ff.c **** 
 518:../fatfs/src/ff.c ****    Module Private Functions
 519:../fatfs/src/ff.c **** 
 520:../fatfs/src/ff.c **** ---------------------------------------------------------------------------*/
 521:../fatfs/src/ff.c **** 
 522:../fatfs/src/ff.c **** 
 523:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 524:../fatfs/src/ff.c **** /* String functions                                                      */
 525:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 526:../fatfs/src/ff.c **** 
 527:../fatfs/src/ff.c **** /* Copy memory to memory */
 528:../fatfs/src/ff.c **** static
 529:../fatfs/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  26              		.loc 1 529 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
 530:../fatfs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 531:../fatfs/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 532:../fatfs/src/ff.c **** 
 533:../fatfs/src/ff.c **** #if _WORD_ACCESS == 1
 534:../fatfs/src/ff.c **** 	while (cnt >= sizeof(int)) {
 535:../fatfs/src/ff.c **** 		*(int*)d = *(int*)s;
 536:../fatfs/src/ff.c **** 		d += sizeof(int); s += sizeof(int);
 537:../fatfs/src/ff.c **** 		cnt -= sizeof(int);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 11


 538:../fatfs/src/ff.c **** 	}
 539:../fatfs/src/ff.c **** #endif
 540:../fatfs/src/ff.c **** 	while (cnt--)
  35              		.loc 1 540 0
  36 0002 0023     		movs	r3, #0
  37              	.LVL1:
  38              	.L2:
  39              		.loc 1 540 0 is_stmt 0 discriminator 1
  40 0004 9CB2     		uxth	r4, r3
  41 0006 A242     		cmp	r2, r4
  42 0008 03D0     		beq	.L5
  43              	.LVL2:
 541:../fatfs/src/ff.c **** 		*d++ = *s++;
  44              		.loc 1 541 0 is_stmt 1
  45 000a CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
  46 000c C454     		strb	r4, [r0, r3]
  47 000e 0133     		adds	r3, r3, #1
  48              	.LVL3:
  49 0010 F8E7     		b	.L2
  50              	.LVL4:
  51              	.L5:
 542:../fatfs/src/ff.c **** }
  52              		.loc 1 542 0
  53 0012 10BD     		pop	{r4, pc}
  54              		.cfi_endproc
  55              	.LFE0:
  57              		.section	.text.get_fileinfo,"ax",%progbits
  58              		.align	1
  59              		.thumb
  60              		.thumb_func
  62              	get_fileinfo:
  63              	.LFB18:
 543:../fatfs/src/ff.c **** 
 544:../fatfs/src/ff.c **** /* Fill memory */
 545:../fatfs/src/ff.c **** static
 546:../fatfs/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 547:../fatfs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 548:../fatfs/src/ff.c **** 
 549:../fatfs/src/ff.c **** 	while (cnt--)
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 551:../fatfs/src/ff.c **** }
 552:../fatfs/src/ff.c **** 
 553:../fatfs/src/ff.c **** /* Compare memory to memory */
 554:../fatfs/src/ff.c **** static
 555:../fatfs/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 556:../fatfs/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 557:../fatfs/src/ff.c **** 	int r = 0;
 558:../fatfs/src/ff.c **** 
 559:../fatfs/src/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 560:../fatfs/src/ff.c **** 	return r;
 561:../fatfs/src/ff.c **** }
 562:../fatfs/src/ff.c **** 
 563:../fatfs/src/ff.c **** /* Check if chr is contained in the string */
 564:../fatfs/src/ff.c **** static
 565:../fatfs/src/ff.c **** int chk_chr (const char* str, int chr) {
 566:../fatfs/src/ff.c **** 	while (*str && *str != chr) str++;
 567:../fatfs/src/ff.c **** 	return *str;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 12


 568:../fatfs/src/ff.c **** }
 569:../fatfs/src/ff.c **** 
 570:../fatfs/src/ff.c **** 
 571:../fatfs/src/ff.c **** 
 572:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 573:../fatfs/src/ff.c **** /* Request/Release grant to access the volume                            */
 574:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 575:../fatfs/src/ff.c **** #if _FS_REENTRANT
 576:../fatfs/src/ff.c **** 
 577:../fatfs/src/ff.c **** static
 578:../fatfs/src/ff.c **** int lock_fs (
 579:../fatfs/src/ff.c **** 	FATFS *fs		/* File system object */
 580:../fatfs/src/ff.c **** )
 581:../fatfs/src/ff.c **** {
 582:../fatfs/src/ff.c **** 	return ff_req_grant(fs->sobj);
 583:../fatfs/src/ff.c **** }
 584:../fatfs/src/ff.c **** 
 585:../fatfs/src/ff.c **** 
 586:../fatfs/src/ff.c **** static
 587:../fatfs/src/ff.c **** void unlock_fs (
 588:../fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 589:../fatfs/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 590:../fatfs/src/ff.c **** )
 591:../fatfs/src/ff.c **** {
 592:../fatfs/src/ff.c **** 	if (res != FR_NOT_ENABLED &&
 593:../fatfs/src/ff.c **** 		res != FR_INVALID_DRIVE &&
 594:../fatfs/src/ff.c **** 		res != FR_INVALID_OBJECT &&
 595:../fatfs/src/ff.c **** 		res != FR_TIMEOUT) {
 596:../fatfs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 597:../fatfs/src/ff.c **** 	}
 598:../fatfs/src/ff.c **** }
 599:../fatfs/src/ff.c **** #endif
 600:../fatfs/src/ff.c **** 
 601:../fatfs/src/ff.c **** 
 602:../fatfs/src/ff.c **** 
 603:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 604:../fatfs/src/ff.c **** /* File shareing control functions                                       */
 605:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 606:../fatfs/src/ff.c **** #if _FS_SHARE
 607:../fatfs/src/ff.c **** 
 608:../fatfs/src/ff.c **** static
 609:../fatfs/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 610:../fatfs/src/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 611:../fatfs/src/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 612:../fatfs/src/ff.c **** )
 613:../fatfs/src/ff.c **** {
 614:../fatfs/src/ff.c **** 	UINT i, be;
 615:../fatfs/src/ff.c **** 
 616:../fatfs/src/ff.c **** 	/* Search file semaphore table */
 617:../fatfs/src/ff.c **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 618:../fatfs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 619:../fatfs/src/ff.c **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 620:../fatfs/src/ff.c **** 				Files[i].clu == dj->sclust &&
 621:../fatfs/src/ff.c **** 				Files[i].idx == dj->index) break;
 622:../fatfs/src/ff.c **** 		} else {			/* Blank entry */
 623:../fatfs/src/ff.c **** 			be++;
 624:../fatfs/src/ff.c **** 		}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 13


 625:../fatfs/src/ff.c **** 	}
 626:../fatfs/src/ff.c **** 	if (i == _FS_SHARE)	/* The file is not opened */
 627:../fatfs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 628:../fatfs/src/ff.c **** 
 629:../fatfs/src/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 630:../fatfs/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 631:../fatfs/src/ff.c **** }
 632:../fatfs/src/ff.c **** 
 633:../fatfs/src/ff.c **** 
 634:../fatfs/src/ff.c **** static
 635:../fatfs/src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new file */
 636:../fatfs/src/ff.c **** {
 637:../fatfs/src/ff.c **** 	UINT i;
 638:../fatfs/src/ff.c **** 
 639:../fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 640:../fatfs/src/ff.c **** 	return (i == _FS_SHARE) ? 0 : 1;
 641:../fatfs/src/ff.c **** }
 642:../fatfs/src/ff.c **** 
 643:../fatfs/src/ff.c **** 
 644:../fatfs/src/ff.c **** static
 645:../fatfs/src/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 646:../fatfs/src/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 647:../fatfs/src/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 648:../fatfs/src/ff.c **** )
 649:../fatfs/src/ff.c **** {
 650:../fatfs/src/ff.c **** 	UINT i;
 651:../fatfs/src/ff.c **** 
 652:../fatfs/src/ff.c **** 
 653:../fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 654:../fatfs/src/ff.c **** 		if (Files[i].fs == dj->fs &&
 655:../fatfs/src/ff.c **** 			Files[i].clu == dj->sclust &&
 656:../fatfs/src/ff.c **** 			Files[i].idx == dj->index) break;
 657:../fatfs/src/ff.c **** 	}
 658:../fatfs/src/ff.c **** 
 659:../fatfs/src/ff.c **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 660:../fatfs/src/ff.c **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 661:../fatfs/src/ff.c **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 662:../fatfs/src/ff.c **** 		Files[i].fs = dj->fs;
 663:../fatfs/src/ff.c **** 		Files[i].clu = dj->sclust;
 664:../fatfs/src/ff.c **** 		Files[i].idx = dj->index;
 665:../fatfs/src/ff.c **** 		Files[i].ctr = 0;
 666:../fatfs/src/ff.c **** 	}
 667:../fatfs/src/ff.c **** 
 668:../fatfs/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 669:../fatfs/src/ff.c **** 
 670:../fatfs/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 671:../fatfs/src/ff.c **** 
 672:../fatfs/src/ff.c **** 	return i + 1;
 673:../fatfs/src/ff.c **** }
 674:../fatfs/src/ff.c **** 
 675:../fatfs/src/ff.c **** 
 676:../fatfs/src/ff.c **** static
 677:../fatfs/src/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 678:../fatfs/src/ff.c **** 	UINT i			/* Semaphore index */
 679:../fatfs/src/ff.c **** )
 680:../fatfs/src/ff.c **** {
 681:../fatfs/src/ff.c **** 	WORD n;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 14


 682:../fatfs/src/ff.c **** 	FRESULT res;
 683:../fatfs/src/ff.c **** 
 684:../fatfs/src/ff.c **** 
 685:../fatfs/src/ff.c **** 	if (--i < _FS_SHARE) {
 686:../fatfs/src/ff.c **** 		n = Files[i].ctr;
 687:../fatfs/src/ff.c **** 		if (n == 0x100) n = 0;
 688:../fatfs/src/ff.c **** 		if (n) n--;
 689:../fatfs/src/ff.c **** 		Files[i].ctr = n;
 690:../fatfs/src/ff.c **** 		if (!n) Files[i].fs = 0;
 691:../fatfs/src/ff.c **** 		res = FR_OK;
 692:../fatfs/src/ff.c **** 	} else {
 693:../fatfs/src/ff.c **** 		res = FR_INT_ERR;
 694:../fatfs/src/ff.c **** 	}
 695:../fatfs/src/ff.c **** 	return res;
 696:../fatfs/src/ff.c **** }
 697:../fatfs/src/ff.c **** 
 698:../fatfs/src/ff.c **** 
 699:../fatfs/src/ff.c **** static
 700:../fatfs/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 701:../fatfs/src/ff.c **** 	FATFS *fs
 702:../fatfs/src/ff.c **** )
 703:../fatfs/src/ff.c **** {
 704:../fatfs/src/ff.c **** 	UINT i;
 705:../fatfs/src/ff.c **** 
 706:../fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {
 707:../fatfs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 708:../fatfs/src/ff.c **** 	}
 709:../fatfs/src/ff.c **** }
 710:../fatfs/src/ff.c **** #endif
 711:../fatfs/src/ff.c **** 
 712:../fatfs/src/ff.c **** 
 713:../fatfs/src/ff.c **** 
 714:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 715:../fatfs/src/ff.c **** /* Change window offset                                                  */
 716:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 717:../fatfs/src/ff.c **** 
 718:../fatfs/src/ff.c **** static
 719:../fatfs/src/ff.c **** FRESULT move_window (
 720:../fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 721:../fatfs/src/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 722:../fatfs/src/ff.c **** )					/* Move to zero only writes back dirty window */
 723:../fatfs/src/ff.c **** {
 724:../fatfs/src/ff.c **** 	DWORD wsect;
 725:../fatfs/src/ff.c **** 
 726:../fatfs/src/ff.c **** 
 727:../fatfs/src/ff.c **** 	wsect = fs->winsect;
 728:../fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 729:../fatfs/src/ff.c **** #if !_FS_READONLY
 730:../fatfs/src/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 731:../fatfs/src/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 732:../fatfs/src/ff.c **** 				return FR_DISK_ERR;
 733:../fatfs/src/ff.c **** 			fs->wflag = 0;
 734:../fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 735:../fatfs/src/ff.c **** 				BYTE nf;
 736:../fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 737:../fatfs/src/ff.c **** 					wsect += fs->fsize;
 738:../fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 15


 739:../fatfs/src/ff.c **** 				}
 740:../fatfs/src/ff.c **** 			}
 741:../fatfs/src/ff.c **** 		}
 742:../fatfs/src/ff.c **** #endif
 743:../fatfs/src/ff.c **** 		if (sector) {
 744:../fatfs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 745:../fatfs/src/ff.c **** 				return FR_DISK_ERR;
 746:../fatfs/src/ff.c **** 			fs->winsect = sector;
 747:../fatfs/src/ff.c **** 		}
 748:../fatfs/src/ff.c **** 	}
 749:../fatfs/src/ff.c **** 
 750:../fatfs/src/ff.c **** 	return FR_OK;
 751:../fatfs/src/ff.c **** }
 752:../fatfs/src/ff.c **** 
 753:../fatfs/src/ff.c **** 
 754:../fatfs/src/ff.c **** 
 755:../fatfs/src/ff.c **** 
 756:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 757:../fatfs/src/ff.c **** /* Clean-up cached data                                                  */
 758:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 759:../fatfs/src/ff.c **** #if !_FS_READONLY
 760:../fatfs/src/ff.c **** static
 761:../fatfs/src/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 762:../fatfs/src/ff.c **** 	FATFS *fs	/* File system object */
 763:../fatfs/src/ff.c **** )
 764:../fatfs/src/ff.c **** {
 765:../fatfs/src/ff.c **** 	FRESULT res;
 766:../fatfs/src/ff.c **** 
 767:../fatfs/src/ff.c **** 
 768:../fatfs/src/ff.c **** 	res = move_window(fs, 0);
 769:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 770:../fatfs/src/ff.c **** 		/* Update FSInfo sector if needed */
 771:../fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 772:../fatfs/src/ff.c **** 			fs->winsect = 0;
 773:../fatfs/src/ff.c **** 			/* Create FSInfo structure */
 774:../fatfs/src/ff.c **** 			mem_set(fs->win, 0, 512);
 775:../fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 776:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 777:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 778:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 779:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 780:../fatfs/src/ff.c **** 			/* Write it into the FSInfo sector */
 781:../fatfs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 782:../fatfs/src/ff.c **** 			fs->fsi_flag = 0;
 783:../fatfs/src/ff.c **** 		}
 784:../fatfs/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 785:../fatfs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 786:../fatfs/src/ff.c **** 			res = FR_DISK_ERR;
 787:../fatfs/src/ff.c **** 	}
 788:../fatfs/src/ff.c **** 
 789:../fatfs/src/ff.c **** 	return res;
 790:../fatfs/src/ff.c **** }
 791:../fatfs/src/ff.c **** #endif
 792:../fatfs/src/ff.c **** 
 793:../fatfs/src/ff.c **** 
 794:../fatfs/src/ff.c **** 
 795:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 16


 796:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 797:../fatfs/src/ff.c **** /* Get sector# from cluster#                                             */
 798:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 799:../fatfs/src/ff.c **** 
 800:../fatfs/src/ff.c **** 
 801:../fatfs/src/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 802:../fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 803:../fatfs/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 804:../fatfs/src/ff.c **** )
 805:../fatfs/src/ff.c **** {
 806:../fatfs/src/ff.c **** 	clst -= 2;
 807:../fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 808:../fatfs/src/ff.c **** 	return clst * fs->csize + fs->database;
 809:../fatfs/src/ff.c **** }
 810:../fatfs/src/ff.c **** 
 811:../fatfs/src/ff.c **** 
 812:../fatfs/src/ff.c **** 
 813:../fatfs/src/ff.c **** 
 814:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 815:../fatfs/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 816:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 817:../fatfs/src/ff.c **** 
 818:../fatfs/src/ff.c **** 
 819:../fatfs/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 820:../fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
 821:../fatfs/src/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 822:../fatfs/src/ff.c **** )
 823:../fatfs/src/ff.c **** {
 824:../fatfs/src/ff.c **** 	UINT wc, bc;
 825:../fatfs/src/ff.c **** 	BYTE *p;
 826:../fatfs/src/ff.c **** 
 827:../fatfs/src/ff.c **** 
 828:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 829:../fatfs/src/ff.c **** 		return 1;
 830:../fatfs/src/ff.c **** 
 831:../fatfs/src/ff.c **** 	switch (fs->fs_type) {
 832:../fatfs/src/ff.c **** 	case FS_FAT12 :
 833:../fatfs/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 834:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 835:../fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 836:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 837:../fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 838:../fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 839:../fatfs/src/ff.c **** 
 840:../fatfs/src/ff.c **** 	case FS_FAT16 :
 841:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 842:../fatfs/src/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 843:../fatfs/src/ff.c **** 		return LD_WORD(p);
 844:../fatfs/src/ff.c **** 
 845:../fatfs/src/ff.c **** 	case FS_FAT32 :
 846:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 847:../fatfs/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 848:../fatfs/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 849:../fatfs/src/ff.c **** 	}
 850:../fatfs/src/ff.c **** 
 851:../fatfs/src/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 852:../fatfs/src/ff.c **** }
ARM GAS  /tmp/ccOwSZ6Y.s 			page 17


 853:../fatfs/src/ff.c **** 
 854:../fatfs/src/ff.c **** 
 855:../fatfs/src/ff.c **** 
 856:../fatfs/src/ff.c **** 
 857:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 858:../fatfs/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
 859:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 860:../fatfs/src/ff.c **** #if !_FS_READONLY
 861:../fatfs/src/ff.c **** 
 862:../fatfs/src/ff.c **** FRESULT put_fat (
 863:../fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
 864:../fatfs/src/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 865:../fatfs/src/ff.c **** 	DWORD val	/* New value to mark the cluster */
 866:../fatfs/src/ff.c **** )
 867:../fatfs/src/ff.c **** {
 868:../fatfs/src/ff.c **** 	UINT bc;
 869:../fatfs/src/ff.c **** 	BYTE *p;
 870:../fatfs/src/ff.c **** 	FRESULT res;
 871:../fatfs/src/ff.c **** 
 872:../fatfs/src/ff.c **** 
 873:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 874:../fatfs/src/ff.c **** 		res = FR_INT_ERR;
 875:../fatfs/src/ff.c **** 
 876:../fatfs/src/ff.c **** 	} else {
 877:../fatfs/src/ff.c **** 		switch (fs->fs_type) {
 878:../fatfs/src/ff.c **** 		case FS_FAT12 :
 879:../fatfs/src/ff.c **** 			bc = clst; bc += bc / 2;
 880:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 881:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 882:../fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 883:../fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 884:../fatfs/src/ff.c **** 			bc++;
 885:../fatfs/src/ff.c **** 			fs->wflag = 1;
 886:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 887:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 888:../fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 889:../fatfs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 890:../fatfs/src/ff.c **** 			break;
 891:../fatfs/src/ff.c **** 
 892:../fatfs/src/ff.c **** 		case FS_FAT16 :
 893:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 894:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 895:../fatfs/src/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 896:../fatfs/src/ff.c **** 			ST_WORD(p, (WORD)val);
 897:../fatfs/src/ff.c **** 			break;
 898:../fatfs/src/ff.c **** 
 899:../fatfs/src/ff.c **** 		case FS_FAT32 :
 900:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 901:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 902:../fatfs/src/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 903:../fatfs/src/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 904:../fatfs/src/ff.c **** 			ST_DWORD(p, val);
 905:../fatfs/src/ff.c **** 			break;
 906:../fatfs/src/ff.c **** 
 907:../fatfs/src/ff.c **** 		default :
 908:../fatfs/src/ff.c **** 			res = FR_INT_ERR;
 909:../fatfs/src/ff.c **** 		}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 18


 910:../fatfs/src/ff.c **** 		fs->wflag = 1;
 911:../fatfs/src/ff.c **** 	}
 912:../fatfs/src/ff.c **** 
 913:../fatfs/src/ff.c **** 	return res;
 914:../fatfs/src/ff.c **** }
 915:../fatfs/src/ff.c **** #endif /* !_FS_READONLY */
 916:../fatfs/src/ff.c **** 
 917:../fatfs/src/ff.c **** 
 918:../fatfs/src/ff.c **** 
 919:../fatfs/src/ff.c **** 
 920:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 921:../fatfs/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 922:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 923:../fatfs/src/ff.c **** #if !_FS_READONLY
 924:../fatfs/src/ff.c **** static
 925:../fatfs/src/ff.c **** FRESULT remove_chain (
 926:../fatfs/src/ff.c **** 	FATFS *fs,			/* File system object */
 927:../fatfs/src/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 928:../fatfs/src/ff.c **** )
 929:../fatfs/src/ff.c **** {
 930:../fatfs/src/ff.c **** 	FRESULT res;
 931:../fatfs/src/ff.c **** 	DWORD nxt;
 932:../fatfs/src/ff.c **** #if _USE_ERASE
 933:../fatfs/src/ff.c **** 	DWORD scl = clst, ecl = clst, resion[2];
 934:../fatfs/src/ff.c **** #endif
 935:../fatfs/src/ff.c **** 
 936:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 937:../fatfs/src/ff.c **** 		res = FR_INT_ERR;
 938:../fatfs/src/ff.c **** 
 939:../fatfs/src/ff.c **** 	} else {
 940:../fatfs/src/ff.c **** 		res = FR_OK;
 941:../fatfs/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 942:../fatfs/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 943:../fatfs/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 944:../fatfs/src/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 945:../fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 946:../fatfs/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 947:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 948:../fatfs/src/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 949:../fatfs/src/ff.c **** 				fs->free_clust++;
 950:../fatfs/src/ff.c **** 				fs->fsi_flag = 1;
 951:../fatfs/src/ff.c **** 			}
 952:../fatfs/src/ff.c **** #if _USE_ERASE
 953:../fatfs/src/ff.c **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 954:../fatfs/src/ff.c **** 				ecl = nxt;
 955:../fatfs/src/ff.c **** 			} else {				/* End of contiguous clusters */
 956:../fatfs/src/ff.c **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 957:../fatfs/src/ff.c **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 958:../fatfs/src/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 959:../fatfs/src/ff.c **** 				scl = ecl = nxt;
 960:../fatfs/src/ff.c **** 			}
 961:../fatfs/src/ff.c **** #endif
 962:../fatfs/src/ff.c **** 			clst = nxt;	/* Next cluster */
 963:../fatfs/src/ff.c **** 		}
 964:../fatfs/src/ff.c **** 	}
 965:../fatfs/src/ff.c **** 
 966:../fatfs/src/ff.c **** 	return res;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 19


 967:../fatfs/src/ff.c **** }
 968:../fatfs/src/ff.c **** #endif
 969:../fatfs/src/ff.c **** 
 970:../fatfs/src/ff.c **** 
 971:../fatfs/src/ff.c **** 
 972:../fatfs/src/ff.c **** 
 973:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 974:../fatfs/src/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 975:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 976:../fatfs/src/ff.c **** #if !_FS_READONLY
 977:../fatfs/src/ff.c **** static
 978:../fatfs/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 979:../fatfs/src/ff.c **** 	FATFS *fs,			/* File system object */
 980:../fatfs/src/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 981:../fatfs/src/ff.c **** )
 982:../fatfs/src/ff.c **** {
 983:../fatfs/src/ff.c **** 	DWORD cs, ncl, scl;
 984:../fatfs/src/ff.c **** 	FRESULT res;
 985:../fatfs/src/ff.c **** 
 986:../fatfs/src/ff.c **** 
 987:../fatfs/src/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 988:../fatfs/src/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 989:../fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 990:../fatfs/src/ff.c **** 	}
 991:../fatfs/src/ff.c **** 	else {					/* Stretch the current chain */
 992:../fatfs/src/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 993:../fatfs/src/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 994:../fatfs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 995:../fatfs/src/ff.c **** 		scl = clst;
 996:../fatfs/src/ff.c **** 	}
 997:../fatfs/src/ff.c **** 
 998:../fatfs/src/ff.c **** 	ncl = scl;				/* Start cluster */
 999:../fatfs/src/ff.c **** 	for (;;) {
1000:../fatfs/src/ff.c **** 		ncl++;							/* Next cluster */
1001:../fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
1002:../fatfs/src/ff.c **** 			ncl = 2;
1003:../fatfs/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
1004:../fatfs/src/ff.c **** 		}
1005:../fatfs/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1006:../fatfs/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1007:../fatfs/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1008:../fatfs/src/ff.c **** 			return cs;
1009:../fatfs/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1010:../fatfs/src/ff.c **** 	}
1011:../fatfs/src/ff.c **** 
1012:../fatfs/src/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
1013:../fatfs/src/ff.c **** 	if (res == FR_OK && clst != 0) {
1014:../fatfs/src/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
1015:../fatfs/src/ff.c **** 	}
1016:../fatfs/src/ff.c **** 	if (res == FR_OK) {
1017:../fatfs/src/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
1018:../fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
1019:../fatfs/src/ff.c **** 			fs->free_clust--;
1020:../fatfs/src/ff.c **** 			fs->fsi_flag = 1;
1021:../fatfs/src/ff.c **** 		}
1022:../fatfs/src/ff.c **** 	} else {
1023:../fatfs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 20


1024:../fatfs/src/ff.c **** 	}
1025:../fatfs/src/ff.c **** 
1026:../fatfs/src/ff.c **** 	return ncl;		/* Return new cluster number or error code */
1027:../fatfs/src/ff.c **** }
1028:../fatfs/src/ff.c **** #endif /* !_FS_READONLY */
1029:../fatfs/src/ff.c **** 
1030:../fatfs/src/ff.c **** 
1031:../fatfs/src/ff.c **** 
1032:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1033:../fatfs/src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1034:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1035:../fatfs/src/ff.c **** 
1036:../fatfs/src/ff.c **** #if _USE_FASTSEEK
1037:../fatfs/src/ff.c **** static
1038:../fatfs/src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1039:../fatfs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1040:../fatfs/src/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1041:../fatfs/src/ff.c **** )
1042:../fatfs/src/ff.c **** {
1043:../fatfs/src/ff.c **** 	DWORD cl, ncl, *tbl;
1044:../fatfs/src/ff.c **** 
1045:../fatfs/src/ff.c **** 
1046:../fatfs/src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1047:../fatfs/src/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1048:../fatfs/src/ff.c **** 	for (;;) {
1049:../fatfs/src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1050:../fatfs/src/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
1051:../fatfs/src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1052:../fatfs/src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1053:../fatfs/src/ff.c **** 	}
1054:../fatfs/src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1055:../fatfs/src/ff.c **** }
1056:../fatfs/src/ff.c **** #endif	/* _USE_FASTSEEK */
1057:../fatfs/src/ff.c **** 
1058:../fatfs/src/ff.c **** 
1059:../fatfs/src/ff.c **** 
1060:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1061:../fatfs/src/ff.c **** /* Directory handling - Set directory index                              */
1062:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1063:../fatfs/src/ff.c **** 
1064:../fatfs/src/ff.c **** static
1065:../fatfs/src/ff.c **** FRESULT dir_sdi (
1066:../fatfs/src/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1067:../fatfs/src/ff.c **** 	WORD idx		/* Directory index number */
1068:../fatfs/src/ff.c **** )
1069:../fatfs/src/ff.c **** {
1070:../fatfs/src/ff.c **** 	DWORD clst;
1071:../fatfs/src/ff.c **** 	WORD ic;
1072:../fatfs/src/ff.c **** 
1073:../fatfs/src/ff.c **** 
1074:../fatfs/src/ff.c **** 	dj->index = idx;
1075:../fatfs/src/ff.c **** 	clst = dj->sclust;
1076:../fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
1077:../fatfs/src/ff.c **** 		return FR_INT_ERR;
1078:../fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
1079:../fatfs/src/ff.c **** 		clst = dj->fs->dirbase;
1080:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 21


1081:../fatfs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
1082:../fatfs/src/ff.c **** 		dj->clust = clst;
1083:../fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
1084:../fatfs/src/ff.c **** 			return FR_INT_ERR;
1085:../fatfs/src/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1086:../fatfs/src/ff.c **** 	}
1087:../fatfs/src/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
1088:../fatfs/src/ff.c **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
1089:../fatfs/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
1090:../fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
1091:../fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1092:../fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
1093:../fatfs/src/ff.c **** 				return FR_INT_ERR;
1094:../fatfs/src/ff.c **** 			idx -= ic;
1095:../fatfs/src/ff.c **** 		}
1096:../fatfs/src/ff.c **** 		dj->clust = clst;
1097:../fatfs/src/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
1098:../fatfs/src/ff.c **** 	}
1099:../fatfs/src/ff.c **** 
1100:../fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
1101:../fatfs/src/ff.c **** 
1102:../fatfs/src/ff.c **** 	return FR_OK;	/* Seek succeeded */
1103:../fatfs/src/ff.c **** }
1104:../fatfs/src/ff.c **** 
1105:../fatfs/src/ff.c **** 
1106:../fatfs/src/ff.c **** 
1107:../fatfs/src/ff.c **** 
1108:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1109:../fatfs/src/ff.c **** /* Directory handling - Move directory index next                        */
1110:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1111:../fatfs/src/ff.c **** 
1112:../fatfs/src/ff.c **** static
1113:../fatfs/src/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
1114:../fatfs/src/ff.c **** 	DIR *dj,		/* Pointer to directory object */
1115:../fatfs/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1116:../fatfs/src/ff.c **** )
1117:../fatfs/src/ff.c **** {
1118:../fatfs/src/ff.c **** 	DWORD clst;
1119:../fatfs/src/ff.c **** 	WORD i;
1120:../fatfs/src/ff.c **** 
1121:../fatfs/src/ff.c **** 
1122:../fatfs/src/ff.c **** 	stretch = stretch;		/* To suppress warning on read-only cfg. */
1123:../fatfs/src/ff.c **** 	i = dj->index + 1;
1124:../fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
1125:../fatfs/src/ff.c **** 		return FR_NO_FILE;
1126:../fatfs/src/ff.c **** 
1127:../fatfs/src/ff.c **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
1128:../fatfs/src/ff.c **** 		dj->sect++;					/* Next sector */
1129:../fatfs/src/ff.c **** 
1130:../fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
1131:../fatfs/src/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
1132:../fatfs/src/ff.c **** 				return FR_NO_FILE;
1133:../fatfs/src/ff.c **** 		}
1134:../fatfs/src/ff.c **** 		else {					/* Dynamic table */
1135:../fatfs/src/ff.c **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
1136:../fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
1137:../fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 22


1138:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1139:../fatfs/src/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
1140:../fatfs/src/ff.c **** #if !_FS_READONLY
1141:../fatfs/src/ff.c **** 					BYTE c;
1142:../fatfs/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
1143:../fatfs/src/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
1144:../fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1145:../fatfs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
1146:../fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
1147:../fatfs/src/ff.c **** 					/* Clean-up stretched table */
1148:../fatfs/src/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
1149:../fatfs/src/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
1150:../fatfs/src/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
1151:../fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
1152:../fatfs/src/ff.c **** 						dj->fs->wflag = 1;
1153:../fatfs/src/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
1154:../fatfs/src/ff.c **** 						dj->fs->winsect++;
1155:../fatfs/src/ff.c **** 					}
1156:../fatfs/src/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
1157:../fatfs/src/ff.c **** #else
1158:../fatfs/src/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
1159:../fatfs/src/ff.c **** #endif
1160:../fatfs/src/ff.c **** 				}
1161:../fatfs/src/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
1162:../fatfs/src/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
1163:../fatfs/src/ff.c **** 			}
1164:../fatfs/src/ff.c **** 		}
1165:../fatfs/src/ff.c **** 	}
1166:../fatfs/src/ff.c **** 
1167:../fatfs/src/ff.c **** 	dj->index = i;
1168:../fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
1169:../fatfs/src/ff.c **** 
1170:../fatfs/src/ff.c **** 	return FR_OK;
1171:../fatfs/src/ff.c **** }
1172:../fatfs/src/ff.c **** 
1173:../fatfs/src/ff.c **** 
1174:../fatfs/src/ff.c **** 
1175:../fatfs/src/ff.c **** 
1176:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1177:../fatfs/src/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1178:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1179:../fatfs/src/ff.c **** #if _USE_LFN
1180:../fatfs/src/ff.c **** static
1181:../fatfs/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
1182:../fatfs/src/ff.c **** 
1183:../fatfs/src/ff.c **** 
1184:../fatfs/src/ff.c **** static
1185:../fatfs/src/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1186:../fatfs/src/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
1187:../fatfs/src/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
1188:../fatfs/src/ff.c **** )
1189:../fatfs/src/ff.c **** {
1190:../fatfs/src/ff.c **** 	UINT i, s;
1191:../fatfs/src/ff.c **** 	WCHAR wc, uc;
1192:../fatfs/src/ff.c **** 
1193:../fatfs/src/ff.c **** 
1194:../fatfs/src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 23


1195:../fatfs/src/ff.c **** 	s = 0; wc = 1;
1196:../fatfs/src/ff.c **** 	do {
1197:../fatfs/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1198:../fatfs/src/ff.c **** 		if (wc) {	/* Last char has not been processed */
1199:../fatfs/src/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1200:../fatfs/src/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1201:../fatfs/src/ff.c **** 				return 0;				/* Not matched */
1202:../fatfs/src/ff.c **** 		} else {
1203:../fatfs/src/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1204:../fatfs/src/ff.c **** 		}
1205:../fatfs/src/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
1206:../fatfs/src/ff.c **** 
1207:../fatfs/src/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1208:../fatfs/src/ff.c **** 		return 0;
1209:../fatfs/src/ff.c **** 
1210:../fatfs/src/ff.c **** 	return 1;						/* The part of LFN matched */
1211:../fatfs/src/ff.c **** }
1212:../fatfs/src/ff.c **** 
1213:../fatfs/src/ff.c **** 
1214:../fatfs/src/ff.c **** 
1215:../fatfs/src/ff.c **** static
1216:../fatfs/src/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1217:../fatfs/src/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1218:../fatfs/src/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
1219:../fatfs/src/ff.c **** )
1220:../fatfs/src/ff.c **** {
1221:../fatfs/src/ff.c **** 	UINT i, s;
1222:../fatfs/src/ff.c **** 	WCHAR wc, uc;
1223:../fatfs/src/ff.c **** 
1224:../fatfs/src/ff.c **** 
1225:../fatfs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1226:../fatfs/src/ff.c **** 
1227:../fatfs/src/ff.c **** 	s = 0; wc = 1;
1228:../fatfs/src/ff.c **** 	do {
1229:../fatfs/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1230:../fatfs/src/ff.c **** 		if (wc) {	/* Last char has not been processed */
1231:../fatfs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1232:../fatfs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1233:../fatfs/src/ff.c **** 		} else {
1234:../fatfs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1235:../fatfs/src/ff.c **** 		}
1236:../fatfs/src/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1237:../fatfs/src/ff.c **** 
1238:../fatfs/src/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1239:../fatfs/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1240:../fatfs/src/ff.c **** 		lfnbuf[i] = 0;
1241:../fatfs/src/ff.c **** 	}
1242:../fatfs/src/ff.c **** 
1243:../fatfs/src/ff.c **** 	return 1;
1244:../fatfs/src/ff.c **** }
1245:../fatfs/src/ff.c **** 
1246:../fatfs/src/ff.c **** 
1247:../fatfs/src/ff.c **** #if !_FS_READONLY
1248:../fatfs/src/ff.c **** static
1249:../fatfs/src/ff.c **** void fit_lfn (
1250:../fatfs/src/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1251:../fatfs/src/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 24


1252:../fatfs/src/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1253:../fatfs/src/ff.c **** 	BYTE sum				/* SFN sum */
1254:../fatfs/src/ff.c **** )
1255:../fatfs/src/ff.c **** {
1256:../fatfs/src/ff.c **** 	UINT i, s;
1257:../fatfs/src/ff.c **** 	WCHAR wc;
1258:../fatfs/src/ff.c **** 
1259:../fatfs/src/ff.c **** 
1260:../fatfs/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1261:../fatfs/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1262:../fatfs/src/ff.c **** 	dir[LDIR_Type] = 0;
1263:../fatfs/src/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1264:../fatfs/src/ff.c **** 
1265:../fatfs/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1266:../fatfs/src/ff.c **** 	s = wc = 0;
1267:../fatfs/src/ff.c **** 	do {
1268:../fatfs/src/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1269:../fatfs/src/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1270:../fatfs/src/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1271:../fatfs/src/ff.c **** 	} while (++s < 13);
1272:../fatfs/src/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1273:../fatfs/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1274:../fatfs/src/ff.c **** }
1275:../fatfs/src/ff.c **** 
1276:../fatfs/src/ff.c **** #endif
1277:../fatfs/src/ff.c **** #endif
1278:../fatfs/src/ff.c **** 
1279:../fatfs/src/ff.c **** 
1280:../fatfs/src/ff.c **** 
1281:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1282:../fatfs/src/ff.c **** /* Create numbered name                                                  */
1283:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1284:../fatfs/src/ff.c **** #if _USE_LFN
1285:../fatfs/src/ff.c **** void gen_numname (
1286:../fatfs/src/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
1287:../fatfs/src/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1288:../fatfs/src/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
1289:../fatfs/src/ff.c **** 	WORD seq			/* Sequence number */
1290:../fatfs/src/ff.c **** )
1291:../fatfs/src/ff.c **** {
1292:../fatfs/src/ff.c **** 	BYTE ns[8], c;
1293:../fatfs/src/ff.c **** 	UINT i, j;
1294:../fatfs/src/ff.c **** 
1295:../fatfs/src/ff.c **** 
1296:../fatfs/src/ff.c **** 	mem_cpy(dst, src, 11);
1297:../fatfs/src/ff.c **** 
1298:../fatfs/src/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1299:../fatfs/src/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1300:../fatfs/src/ff.c **** 	}
1301:../fatfs/src/ff.c **** 
1302:../fatfs/src/ff.c **** 	/* itoa (hexdecimal) */
1303:../fatfs/src/ff.c **** 	i = 7;
1304:../fatfs/src/ff.c **** 	do {
1305:../fatfs/src/ff.c **** 		c = (seq % 16) + '0';
1306:../fatfs/src/ff.c **** 		if (c > '9') c += 7;
1307:../fatfs/src/ff.c **** 		ns[i--] = c;
1308:../fatfs/src/ff.c **** 		seq /= 16;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 25


1309:../fatfs/src/ff.c **** 	} while (seq);
1310:../fatfs/src/ff.c **** 	ns[i] = '~';
1311:../fatfs/src/ff.c **** 
1312:../fatfs/src/ff.c **** 	/* Append the number */
1313:../fatfs/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1314:../fatfs/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1315:../fatfs/src/ff.c **** 			if (j == i - 1) break;
1316:../fatfs/src/ff.c **** 			j++;
1317:../fatfs/src/ff.c **** 		}
1318:../fatfs/src/ff.c **** 	}
1319:../fatfs/src/ff.c **** 	do {
1320:../fatfs/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1321:../fatfs/src/ff.c **** 	} while (j < 8);
1322:../fatfs/src/ff.c **** }
1323:../fatfs/src/ff.c **** #endif
1324:../fatfs/src/ff.c **** 
1325:../fatfs/src/ff.c **** 
1326:../fatfs/src/ff.c **** 
1327:../fatfs/src/ff.c **** 
1328:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1329:../fatfs/src/ff.c **** /* Calculate sum of an SFN                                               */
1330:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1331:../fatfs/src/ff.c **** #if _USE_LFN
1332:../fatfs/src/ff.c **** static
1333:../fatfs/src/ff.c **** BYTE sum_sfn (
1334:../fatfs/src/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
1335:../fatfs/src/ff.c **** )
1336:../fatfs/src/ff.c **** {
1337:../fatfs/src/ff.c **** 	BYTE sum = 0;
1338:../fatfs/src/ff.c **** 	UINT n = 11;
1339:../fatfs/src/ff.c **** 
1340:../fatfs/src/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1341:../fatfs/src/ff.c **** 	return sum;
1342:../fatfs/src/ff.c **** }
1343:../fatfs/src/ff.c **** #endif
1344:../fatfs/src/ff.c **** 
1345:../fatfs/src/ff.c **** 
1346:../fatfs/src/ff.c **** 
1347:../fatfs/src/ff.c **** 
1348:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1349:../fatfs/src/ff.c **** /* Directory handling - Find an object in the directory                  */
1350:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1351:../fatfs/src/ff.c **** 
1352:../fatfs/src/ff.c **** static
1353:../fatfs/src/ff.c **** FRESULT dir_find (
1354:../fatfs/src/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1355:../fatfs/src/ff.c **** )
1356:../fatfs/src/ff.c **** {
1357:../fatfs/src/ff.c **** 	FRESULT res;
1358:../fatfs/src/ff.c **** 	BYTE c, *dir;
1359:../fatfs/src/ff.c **** #if _USE_LFN
1360:../fatfs/src/ff.c **** 	BYTE a, ord, sum;
1361:../fatfs/src/ff.c **** #endif
1362:../fatfs/src/ff.c **** 
1363:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1364:../fatfs/src/ff.c **** 	if (res != FR_OK) return res;
1365:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 26


1366:../fatfs/src/ff.c **** #if _USE_LFN
1367:../fatfs/src/ff.c **** 	ord = sum = 0xFF;
1368:../fatfs/src/ff.c **** #endif
1369:../fatfs/src/ff.c **** 	do {
1370:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1371:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
1372:../fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1373:../fatfs/src/ff.c **** 		c = dir[DIR_Name];
1374:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1375:../fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1376:../fatfs/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1377:../fatfs/src/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1378:../fatfs/src/ff.c **** 			ord = 0xFF;
1379:../fatfs/src/ff.c **** 		} else {
1380:../fatfs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1381:../fatfs/src/ff.c **** 				if (dj->lfn) {
1382:../fatfs/src/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1383:../fatfs/src/ff.c **** 						sum = dir[LDIR_Chksum];
1384:../fatfs/src/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
1385:../fatfs/src/ff.c **** 						dj->lfn_idx = dj->index;
1386:../fatfs/src/ff.c **** 					}
1387:../fatfs/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1388:../fatfs/src/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1389:../fatfs/src/ff.c **** 				}
1390:../fatfs/src/ff.c **** 			} else {					/* An SFN entry is found */
1391:../fatfs/src/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1392:../fatfs/src/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1393:../fatfs/src/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1394:../fatfs/src/ff.c **** 			}
1395:../fatfs/src/ff.c **** 		}
1396:../fatfs/src/ff.c **** #else		/* Non LFN configuration */
1397:../fatfs/src/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1398:../fatfs/src/ff.c **** 			break;
1399:../fatfs/src/ff.c **** #endif
1400:../fatfs/src/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
1401:../fatfs/src/ff.c **** 	} while (res == FR_OK);
1402:../fatfs/src/ff.c **** 
1403:../fatfs/src/ff.c **** 	return res;
1404:../fatfs/src/ff.c **** }
1405:../fatfs/src/ff.c **** 
1406:../fatfs/src/ff.c **** 
1407:../fatfs/src/ff.c **** 
1408:../fatfs/src/ff.c **** 
1409:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1410:../fatfs/src/ff.c **** /* Read an object from the directory                                     */
1411:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1412:../fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
1413:../fatfs/src/ff.c **** static
1414:../fatfs/src/ff.c **** FRESULT dir_read (
1415:../fatfs/src/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1416:../fatfs/src/ff.c **** )
1417:../fatfs/src/ff.c **** {
1418:../fatfs/src/ff.c **** 	FRESULT res;
1419:../fatfs/src/ff.c **** 	BYTE c, *dir;
1420:../fatfs/src/ff.c **** #if _USE_LFN
1421:../fatfs/src/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1422:../fatfs/src/ff.c **** #endif
ARM GAS  /tmp/ccOwSZ6Y.s 			page 27


1423:../fatfs/src/ff.c **** 
1424:../fatfs/src/ff.c **** 	res = FR_NO_FILE;
1425:../fatfs/src/ff.c **** 	while (dj->sect) {
1426:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1427:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
1428:../fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1429:../fatfs/src/ff.c **** 		c = dir[DIR_Name];
1430:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1431:../fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1432:../fatfs/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1433:../fatfs/src/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without 
1434:../fatfs/src/ff.c **** 			ord = 0xFF;
1435:../fatfs/src/ff.c **** 		} else {
1436:../fatfs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1437:../fatfs/src/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1438:../fatfs/src/ff.c **** 					sum = dir[LDIR_Chksum];
1439:../fatfs/src/ff.c **** 					c &= ~LLE; ord = c;
1440:../fatfs/src/ff.c **** 					dj->lfn_idx = dj->index;
1441:../fatfs/src/ff.c **** 				}
1442:../fatfs/src/ff.c **** 				/* Check LFN validity and capture it */
1443:../fatfs/src/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1444:../fatfs/src/ff.c **** 			} else {					/* An SFN entry is found */
1445:../fatfs/src/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1446:../fatfs/src/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1447:../fatfs/src/ff.c **** 				break;
1448:../fatfs/src/ff.c **** 			}
1449:../fatfs/src/ff.c **** 		}
1450:../fatfs/src/ff.c **** #else		/* Non LFN configuration */
1451:../fatfs/src/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1452:../fatfs/src/ff.c **** 			break;
1453:../fatfs/src/ff.c **** #endif
1454:../fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
1455:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
1456:../fatfs/src/ff.c **** 	}
1457:../fatfs/src/ff.c **** 
1458:../fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
1459:../fatfs/src/ff.c **** 
1460:../fatfs/src/ff.c **** 	return res;
1461:../fatfs/src/ff.c **** }
1462:../fatfs/src/ff.c **** #endif
1463:../fatfs/src/ff.c **** 
1464:../fatfs/src/ff.c **** 
1465:../fatfs/src/ff.c **** 
1466:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1467:../fatfs/src/ff.c **** /* Register an object to the directory                                   */
1468:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1469:../fatfs/src/ff.c **** #if !_FS_READONLY
1470:../fatfs/src/ff.c **** static
1471:../fatfs/src/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1472:../fatfs/src/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1473:../fatfs/src/ff.c **** )
1474:../fatfs/src/ff.c **** {
1475:../fatfs/src/ff.c **** 	FRESULT res;
1476:../fatfs/src/ff.c **** 	BYTE c, *dir;
1477:../fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1478:../fatfs/src/ff.c **** 	WORD n, ne, is;
1479:../fatfs/src/ff.c **** 	BYTE sn[12], *fn, sum;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 28


1480:../fatfs/src/ff.c **** 	WCHAR *lfn;
1481:../fatfs/src/ff.c **** 
1482:../fatfs/src/ff.c **** 
1483:../fatfs/src/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
1484:../fatfs/src/ff.c **** 	mem_cpy(sn, fn, 12);
1485:../fatfs/src/ff.c **** 
1486:../fatfs/src/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1487:../fatfs/src/ff.c **** 		return FR_INVALID_NAME;
1488:../fatfs/src/ff.c **** 
1489:../fatfs/src/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1490:../fatfs/src/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1491:../fatfs/src/ff.c **** 		for (n = 1; n < 100; n++) {
1492:../fatfs/src/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1493:../fatfs/src/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1494:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
1495:../fatfs/src/ff.c **** 		}
1496:../fatfs/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1497:../fatfs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1498:../fatfs/src/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1499:../fatfs/src/ff.c **** 	}
1500:../fatfs/src/ff.c **** 
1501:../fatfs/src/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1502:../fatfs/src/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
1503:../fatfs/src/ff.c **** 		ne = (ne + 25) / 13;
1504:../fatfs/src/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
1505:../fatfs/src/ff.c **** 		ne = 1;
1506:../fatfs/src/ff.c **** 	}
1507:../fatfs/src/ff.c **** 
1508:../fatfs/src/ff.c **** 	/* Reserve contiguous entries */
1509:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
1510:../fatfs/src/ff.c **** 	if (res != FR_OK) return res;
1511:../fatfs/src/ff.c **** 	n = is = 0;
1512:../fatfs/src/ff.c **** 	do {
1513:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1514:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
1515:../fatfs/src/ff.c **** 		c = *dj->dir;				/* Check the entry status */
1516:../fatfs/src/ff.c **** 		if (c == DDE || c == 0) {	/* Is it a blank entry? */
1517:../fatfs/src/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1518:../fatfs/src/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1519:../fatfs/src/ff.c **** 		} else {
1520:../fatfs/src/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
1521:../fatfs/src/ff.c **** 		}
1522:../fatfs/src/ff.c **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1523:../fatfs/src/ff.c **** 	} while (res == FR_OK);
1524:../fatfs/src/ff.c **** 
1525:../fatfs/src/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1526:../fatfs/src/ff.c **** 		res = dir_sdi(dj, is);
1527:../fatfs/src/ff.c **** 		if (res == FR_OK) {
1528:../fatfs/src/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1529:../fatfs/src/ff.c **** 			ne--;
1530:../fatfs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
1531:../fatfs/src/ff.c **** 				res = move_window(dj->fs, dj->sect);
1532:../fatfs/src/ff.c **** 				if (res != FR_OK) break;
1533:../fatfs/src/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1534:../fatfs/src/ff.c **** 				dj->fs->wflag = 1;
1535:../fatfs/src/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
1536:../fatfs/src/ff.c **** 			} while (res == FR_OK && --ne);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 29


1537:../fatfs/src/ff.c **** 		}
1538:../fatfs/src/ff.c **** 	}
1539:../fatfs/src/ff.c **** 
1540:../fatfs/src/ff.c **** #else	/* Non LFN configuration */
1541:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
1542:../fatfs/src/ff.c **** 	if (res == FR_OK) {
1543:../fatfs/src/ff.c **** 		do {	/* Find a blank entry for the SFN */
1544:../fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
1545:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
1546:../fatfs/src/ff.c **** 			c = *dj->dir;
1547:../fatfs/src/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
1548:../fatfs/src/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1549:../fatfs/src/ff.c **** 		} while (res == FR_OK);
1550:../fatfs/src/ff.c **** 	}
1551:../fatfs/src/ff.c **** #endif
1552:../fatfs/src/ff.c **** 
1553:../fatfs/src/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1554:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1555:../fatfs/src/ff.c **** 		if (res == FR_OK) {
1556:../fatfs/src/ff.c **** 			dir = dj->dir;
1557:../fatfs/src/ff.c **** 			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
1558:../fatfs/src/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1559:../fatfs/src/ff.c **** #if _USE_LFN
1560:../fatfs/src/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1561:../fatfs/src/ff.c **** #endif
1562:../fatfs/src/ff.c **** 			dj->fs->wflag = 1;
1563:../fatfs/src/ff.c **** 		}
1564:../fatfs/src/ff.c **** 	}
1565:../fatfs/src/ff.c **** 
1566:../fatfs/src/ff.c **** 	return res;
1567:../fatfs/src/ff.c **** }
1568:../fatfs/src/ff.c **** #endif /* !_FS_READONLY */
1569:../fatfs/src/ff.c **** 
1570:../fatfs/src/ff.c **** 
1571:../fatfs/src/ff.c **** 
1572:../fatfs/src/ff.c **** 
1573:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1574:../fatfs/src/ff.c **** /* Remove an object from the directory                                   */
1575:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1576:../fatfs/src/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1577:../fatfs/src/ff.c **** static
1578:../fatfs/src/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1579:../fatfs/src/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1580:../fatfs/src/ff.c **** )
1581:../fatfs/src/ff.c **** {
1582:../fatfs/src/ff.c **** 	FRESULT res;
1583:../fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1584:../fatfs/src/ff.c **** 	WORD i;
1585:../fatfs/src/ff.c **** 
1586:../fatfs/src/ff.c **** 	i = dj->index;	/* SFN index */
1587:../fatfs/src/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1588:../fatfs/src/ff.c **** 	if (res == FR_OK) {
1589:../fatfs/src/ff.c **** 		do {
1590:../fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
1591:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
1592:../fatfs/src/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1593:../fatfs/src/ff.c **** 			dj->fs->wflag = 1;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 30


1594:../fatfs/src/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1595:../fatfs/src/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
1596:../fatfs/src/ff.c **** 		} while (res == FR_OK);
1597:../fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1598:../fatfs/src/ff.c **** 	}
1599:../fatfs/src/ff.c **** 
1600:../fatfs/src/ff.c **** #else			/* Non LFN configuration */
1601:../fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
1602:../fatfs/src/ff.c **** 	if (res == FR_OK) {
1603:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1604:../fatfs/src/ff.c **** 		if (res == FR_OK) {
1605:../fatfs/src/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
1606:../fatfs/src/ff.c **** 			dj->fs->wflag = 1;
1607:../fatfs/src/ff.c **** 		}
1608:../fatfs/src/ff.c **** 	}
1609:../fatfs/src/ff.c **** #endif
1610:../fatfs/src/ff.c **** 
1611:../fatfs/src/ff.c **** 	return res;
1612:../fatfs/src/ff.c **** }
1613:../fatfs/src/ff.c **** #endif /* !_FS_READONLY */
1614:../fatfs/src/ff.c **** 
1615:../fatfs/src/ff.c **** 
1616:../fatfs/src/ff.c **** 
1617:../fatfs/src/ff.c **** 
1618:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1619:../fatfs/src/ff.c **** /* Pick a segment and create the object name in directory form           */
1620:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1621:../fatfs/src/ff.c **** 
1622:../fatfs/src/ff.c **** static
1623:../fatfs/src/ff.c **** FRESULT create_name (
1624:../fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1625:../fatfs/src/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1626:../fatfs/src/ff.c **** )
1627:../fatfs/src/ff.c **** {
1628:../fatfs/src/ff.c **** #ifdef _EXCVT
1629:../fatfs/src/ff.c **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1630:../fatfs/src/ff.c **** #endif
1631:../fatfs/src/ff.c **** 
1632:../fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1633:../fatfs/src/ff.c **** 	BYTE b, cf;
1634:../fatfs/src/ff.c **** 	WCHAR w, *lfn;
1635:../fatfs/src/ff.c **** 	UINT i, ni, si, di;
1636:../fatfs/src/ff.c **** 	const TCHAR *p;
1637:../fatfs/src/ff.c **** 
1638:../fatfs/src/ff.c **** 	/* Create LFN in Unicode */
1639:../fatfs/src/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1640:../fatfs/src/ff.c **** 	lfn = dj->lfn;
1641:../fatfs/src/ff.c **** 	si = di = 0;
1642:../fatfs/src/ff.c **** 	for (;;) {
1643:../fatfs/src/ff.c **** 		w = p[si++];					/* Get a character */
1644:../fatfs/src/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1645:../fatfs/src/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1646:../fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1647:../fatfs/src/ff.c **** #if !_LFN_UNICODE
1648:../fatfs/src/ff.c **** 		w &= 0xFF;
1649:../fatfs/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1650:../fatfs/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 31


1651:../fatfs/src/ff.c **** 			if (!IsDBCS2(b))
1652:../fatfs/src/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1653:../fatfs/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1654:../fatfs/src/ff.c **** 		}
1655:../fatfs/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1656:../fatfs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1657:../fatfs/src/ff.c **** #endif
1658:../fatfs/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1659:../fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1660:../fatfs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1661:../fatfs/src/ff.c **** 	}
1662:../fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1663:../fatfs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1664:../fatfs/src/ff.c **** #if _FS_RPATH
1665:../fatfs/src/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1666:../fatfs/src/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1667:../fatfs/src/ff.c **** 		lfn[di] = 0;
1668:../fatfs/src/ff.c **** 		for (i = 0; i < 11; i++)
1669:../fatfs/src/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1670:../fatfs/src/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1671:../fatfs/src/ff.c **** 		return FR_OK;
1672:../fatfs/src/ff.c **** 	}
1673:../fatfs/src/ff.c **** #endif
1674:../fatfs/src/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1675:../fatfs/src/ff.c **** 		w = lfn[di-1];
1676:../fatfs/src/ff.c **** 		if (w != ' ' && w != '.') break;
1677:../fatfs/src/ff.c **** 		di--;
1678:../fatfs/src/ff.c **** 	}
1679:../fatfs/src/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1680:../fatfs/src/ff.c **** 
1681:../fatfs/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1682:../fatfs/src/ff.c **** 
1683:../fatfs/src/ff.c **** 	/* Create SFN in directory form */
1684:../fatfs/src/ff.c **** 	mem_set(dj->fn, ' ', 11);
1685:../fatfs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1686:../fatfs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1687:../fatfs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1688:../fatfs/src/ff.c **** 
1689:../fatfs/src/ff.c **** 	b = i = 0; ni = 8;
1690:../fatfs/src/ff.c **** 	for (;;) {
1691:../fatfs/src/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1692:../fatfs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1693:../fatfs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1694:../fatfs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1695:../fatfs/src/ff.c **** 		}
1696:../fatfs/src/ff.c **** 
1697:../fatfs/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1698:../fatfs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
1699:../fatfs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1700:../fatfs/src/ff.c **** 			}
1701:../fatfs/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1702:../fatfs/src/ff.c **** 			if (si > di) break;			/* No extension */
1703:../fatfs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1704:../fatfs/src/ff.c **** 			b <<= 2; continue;
1705:../fatfs/src/ff.c **** 		}
1706:../fatfs/src/ff.c **** 
1707:../fatfs/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 32


1708:../fatfs/src/ff.c **** #ifdef _EXCVT
1709:../fatfs/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1710:../fatfs/src/ff.c **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1711:../fatfs/src/ff.c **** #else
1712:../fatfs/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1713:../fatfs/src/ff.c **** #endif
1714:../fatfs/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1715:../fatfs/src/ff.c **** 		}
1716:../fatfs/src/ff.c **** 
1717:../fatfs/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1718:../fatfs/src/ff.c **** 			if (i >= ni - 1) {
1719:../fatfs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1720:../fatfs/src/ff.c **** 			}
1721:../fatfs/src/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1722:../fatfs/src/ff.c **** 		} else {						/* Single byte char */
1723:../fatfs/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1724:../fatfs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1725:../fatfs/src/ff.c **** 			} else {
1726:../fatfs/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1727:../fatfs/src/ff.c **** 					b |= 2;
1728:../fatfs/src/ff.c **** 				} else {
1729:../fatfs/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1730:../fatfs/src/ff.c **** 						b |= 1; w -= 0x20;
1731:../fatfs/src/ff.c **** 					}
1732:../fatfs/src/ff.c **** 				}
1733:../fatfs/src/ff.c **** 			}
1734:../fatfs/src/ff.c **** 		}
1735:../fatfs/src/ff.c **** 		dj->fn[i++] = (BYTE)w;
1736:../fatfs/src/ff.c **** 	}
1737:../fatfs/src/ff.c **** 
1738:../fatfs/src/ff.c **** 	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace i
1739:../fatfs/src/ff.c **** 
1740:../fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
1741:../fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1742:../fatfs/src/ff.c **** 		cf |= NS_LFN;
1743:../fatfs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1744:../fatfs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1745:../fatfs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1746:../fatfs/src/ff.c **** 	}
1747:../fatfs/src/ff.c **** 
1748:../fatfs/src/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1749:../fatfs/src/ff.c **** 
1750:../fatfs/src/ff.c **** 	return FR_OK;
1751:../fatfs/src/ff.c **** 
1752:../fatfs/src/ff.c **** 
1753:../fatfs/src/ff.c **** #else	/* Non-LFN configuration */
1754:../fatfs/src/ff.c **** 	BYTE b, c, d, *sfn;
1755:../fatfs/src/ff.c **** 	UINT ni, si, i;
1756:../fatfs/src/ff.c **** 	const char *p;
1757:../fatfs/src/ff.c **** 
1758:../fatfs/src/ff.c **** 	/* Create file name in directory form */
1759:../fatfs/src/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1760:../fatfs/src/ff.c **** 	sfn = dj->fn;
1761:../fatfs/src/ff.c **** 	mem_set(sfn, ' ', 11);
1762:../fatfs/src/ff.c **** 	si = i = b = 0; ni = 8;
1763:../fatfs/src/ff.c **** #if _FS_RPATH
1764:../fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 33


1765:../fatfs/src/ff.c **** 		for (;;) {
1766:../fatfs/src/ff.c **** 			c = (BYTE)p[si++];
1767:../fatfs/src/ff.c **** 			if (c != '.' || si >= 3) break;
1768:../fatfs/src/ff.c **** 			sfn[i++] = c;
1769:../fatfs/src/ff.c **** 		}
1770:../fatfs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1771:../fatfs/src/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1772:../fatfs/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1773:../fatfs/src/ff.c **** 		return FR_OK;
1774:../fatfs/src/ff.c **** 	}
1775:../fatfs/src/ff.c **** #endif
1776:../fatfs/src/ff.c **** 	for (;;) {
1777:../fatfs/src/ff.c **** 		c = (BYTE)p[si++];
1778:../fatfs/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1779:../fatfs/src/ff.c **** 		if (c == '.' || i >= ni) {
1780:../fatfs/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1781:../fatfs/src/ff.c **** 			i = 8; ni = 11;
1782:../fatfs/src/ff.c **** 			b <<= 2; continue;
1783:../fatfs/src/ff.c **** 		}
1784:../fatfs/src/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
1785:../fatfs/src/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1786:../fatfs/src/ff.c **** #ifdef _EXCVT
1787:../fatfs/src/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
1788:../fatfs/src/ff.c **** #else
1789:../fatfs/src/ff.c **** #if !_DF1S	/* ASCII only cfg */
1790:../fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1791:../fatfs/src/ff.c **** #endif
1792:../fatfs/src/ff.c **** #endif
1793:../fatfs/src/ff.c **** 		}
1794:../fatfs/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1795:../fatfs/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1796:../fatfs/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1797:../fatfs/src/ff.c **** 				return FR_INVALID_NAME;
1798:../fatfs/src/ff.c **** 			sfn[i++] = c;
1799:../fatfs/src/ff.c **** 			sfn[i++] = d;
1800:../fatfs/src/ff.c **** 		} else {						/* Single byte code */
1801:../fatfs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1802:../fatfs/src/ff.c **** 				return FR_INVALID_NAME;
1803:../fatfs/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1804:../fatfs/src/ff.c **** 				b |= 2;
1805:../fatfs/src/ff.c **** 			} else {
1806:../fatfs/src/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1807:../fatfs/src/ff.c **** 					b |= 1; c -= 0x20;
1808:../fatfs/src/ff.c **** 				}
1809:../fatfs/src/ff.c **** 			}
1810:../fatfs/src/ff.c **** 			sfn[i++] = c;
1811:../fatfs/src/ff.c **** 		}
1812:../fatfs/src/ff.c **** 	}
1813:../fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1814:../fatfs/src/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1815:../fatfs/src/ff.c **** 
1816:../fatfs/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1817:../fatfs/src/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
1818:../fatfs/src/ff.c **** 
1819:../fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
1820:../fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1821:../fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 34


1822:../fatfs/src/ff.c **** 
1823:../fatfs/src/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1824:../fatfs/src/ff.c **** 
1825:../fatfs/src/ff.c **** 	return FR_OK;
1826:../fatfs/src/ff.c **** #endif
1827:../fatfs/src/ff.c **** }
1828:../fatfs/src/ff.c **** 
1829:../fatfs/src/ff.c **** 
1830:../fatfs/src/ff.c **** 
1831:../fatfs/src/ff.c **** 
1832:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1833:../fatfs/src/ff.c **** /* Get file information from directory entry                             */
1834:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1835:../fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
1836:../fatfs/src/ff.c **** static
1837:../fatfs/src/ff.c **** void get_fileinfo (		/* No return code */
1838:../fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1839:../fatfs/src/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1840:../fatfs/src/ff.c **** )
1841:../fatfs/src/ff.c **** {
  64              		.loc 1 1841 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL5:
1842:../fatfs/src/ff.c **** 	UINT i;
1843:../fatfs/src/ff.c **** 	BYTE nt, *dir;
1844:../fatfs/src/ff.c **** 	TCHAR *p, c;
1845:../fatfs/src/ff.c **** 
1846:../fatfs/src/ff.c **** 
1847:../fatfs/src/ff.c **** 	p = fno->fname;
1848:../fatfs/src/ff.c **** 	if (dj->sect) {
  69              		.loc 1 1848 0
  70 0000 0369     		ldr	r3, [r0, #16]
1841:../fatfs/src/ff.c **** {
  71              		.loc 1 1841 0
  72 0002 30B5     		push	{r4, r5, lr}
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
1847:../fatfs/src/ff.c **** 	p = fno->fname;
  77              		.loc 1 1847 0
  78 0004 01F10902 		add	r2, r1, #9
  79              	.LVL6:
  80              		.loc 1 1848 0
  81 0008 002B     		cmp	r3, #0
  82 000a 35D0     		beq	.L7
1849:../fatfs/src/ff.c **** 		dir = dj->dir;
  83              		.loc 1 1849 0
  84 000c 4369     		ldr	r3, [r0, #20]
  85              	.LVL7:
  86 000e 0024     		movs	r4, #0
  87              	.LVL8:
  88              	.L10:
1850:../fatfs/src/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1851:../fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 35


1852:../fatfs/src/ff.c **** 			c = dir[i];
  89              		.loc 1 1852 0
  90 0010 185D     		ldrb	r0, [r3, r4]	@ zero_extendqisi2
  91              	.LVL9:
1853:../fatfs/src/ff.c **** 			if (c == ' ') break;
  92              		.loc 1 1853 0
  93 0012 2028     		cmp	r0, #32
  94 0014 08D0     		beq	.L8
1854:../fatfs/src/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;
  95              		.loc 1 1854 0
  96 0016 0528     		cmp	r0, #5
  97 0018 04F10104 		add	r4, r4, #1
  98              	.LVL10:
  99 001c 08BF     		it	eq
 100 001e E520     		moveq	r0, #229
 101              	.LVL11:
1851:../fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 102              		.loc 1 1851 0
 103 0020 082C     		cmp	r4, #8
1855:../fatfs/src/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1856:../fatfs/src/ff.c **** #if _LFN_UNICODE
1857:../fatfs/src/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1858:../fatfs/src/ff.c **** 				c = (c << 8) | dir[++i];
1859:../fatfs/src/ff.c **** 			c = ff_convert(c, 1);
1860:../fatfs/src/ff.c **** 			if (!c) c = '?';
1861:../fatfs/src/ff.c **** #endif
1862:../fatfs/src/ff.c **** 			*p++ = c;
 104              		.loc 1 1862 0
 105 0022 02F8010B 		strb	r0, [r2], #1
 106              	.LVL12:
1851:../fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 107              		.loc 1 1851 0
 108 0026 F3D1     		bne	.L10
 109              	.LVL13:
 110              	.L8:
1863:../fatfs/src/ff.c **** 		}
1864:../fatfs/src/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
 111              		.loc 1 1864 0
 112 0028 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 113 002a 2028     		cmp	r0, #32
 114 002c 0DD0     		beq	.L11
 115              	.LVL14:
1865:../fatfs/src/ff.c **** 			*p++ = '.';
 116              		.loc 1 1865 0
 117 002e 1046     		mov	r0, r2
 118 0030 2E24     		movs	r4, #46
 119 0032 00F8044B 		strb	r4, [r0], #4
 120              	.LVL15:
 121 0036 DD1D     		adds	r5, r3, #7
 122 0038 0132     		adds	r2, r2, #1
 123              	.LVL16:
 124              	.L12:
1866:../fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
1867:../fatfs/src/ff.c **** 				c = dir[i];
 125              		.loc 1 1867 0
 126 003a 15F8014F 		ldrb	r4, [r5, #1]!	@ zero_extendqisi2
 127              	.LVL17:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 36


1868:../fatfs/src/ff.c **** 				if (c == ' ') break;
 128              		.loc 1 1868 0
 129 003e 202C     		cmp	r4, #32
 130 0040 03D0     		beq	.L11
1869:../fatfs/src/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1870:../fatfs/src/ff.c **** #if _LFN_UNICODE
1871:../fatfs/src/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1872:../fatfs/src/ff.c **** 					c = (c << 8) | dir[++i];
1873:../fatfs/src/ff.c **** 				c = ff_convert(c, 1);
1874:../fatfs/src/ff.c **** 				if (!c) c = '?';
1875:../fatfs/src/ff.c **** #endif
1876:../fatfs/src/ff.c **** 				*p++ = c;
 131              		.loc 1 1876 0
 132 0042 02F8014B 		strb	r4, [r2], #1
 133              	.LVL18:
1866:../fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
 134              		.loc 1 1866 0
 135 0046 8242     		cmp	r2, r0
 136 0048 F7D1     		bne	.L12
 137              	.LVL19:
 138              	.L11:
1877:../fatfs/src/ff.c **** 			}
1878:../fatfs/src/ff.c **** 		}
1879:../fatfs/src/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 139              		.loc 1 1879 0
 140 004a D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2
 141 004c 0872     		strb	r0, [r1, #8]
1880:../fatfs/src/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 142              		.loc 1 1880 0
 143 004e 987F     		ldrb	r0, [r3, #30]	@ zero_extendqisi2
 144 0050 DC7F     		ldrb	r4, [r3, #31]	@ zero_extendqisi2
 145 0052 0004     		lsls	r0, r0, #16
 146 0054 40EA0460 		orr	r0, r0, r4, lsl #24
 147 0058 1C7F     		ldrb	r4, [r3, #28]	@ zero_extendqisi2
 148 005a 2043     		orrs	r0, r0, r4
 149 005c 5C7F     		ldrb	r4, [r3, #29]	@ zero_extendqisi2
 150 005e 40EA0420 		orr	r0, r0, r4, lsl #8
 151 0062 0860     		str	r0, [r1]
1881:../fatfs/src/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 152              		.loc 1 1881 0
 153 0064 5C7E     		ldrb	r4, [r3, #25]	@ zero_extendqisi2
 154 0066 187E     		ldrb	r0, [r3, #24]	@ zero_extendqisi2
 155 0068 40EA0420 		orr	r0, r0, r4, lsl #8
 156 006c 8880     		strh	r0, [r1, #4]	@ movhi
1882:../fatfs/src/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 157              		.loc 1 1882 0
 158 006e D87D     		ldrb	r0, [r3, #23]	@ zero_extendqisi2
 159 0070 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 160              	.LVL20:
 161 0072 43EA0023 		orr	r3, r3, r0, lsl #8
 162 0076 CB80     		strh	r3, [r1, #6]	@ movhi
 163              	.L7:
1883:../fatfs/src/ff.c **** 	}
1884:../fatfs/src/ff.c **** 	*p = 0;		/* Terminate SFN str by a \0 */
 164              		.loc 1 1884 0
 165 0078 0023     		movs	r3, #0
 166 007a 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 37


 167 007c 30BD     		pop	{r4, r5, pc}
 168              		.cfi_endproc
 169              	.LFE18:
 171              		.section	.text.move_window,"ax",%progbits
 172              		.align	1
 173              		.thumb
 174              		.thumb_func
 176              	move_window:
 177              	.LFB4:
 723:../fatfs/src/ff.c **** {
 178              		.loc 1 723 0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL21:
 183 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 184              		.cfi_def_cfa_offset 24
 185              		.cfi_offset 4, -24
 186              		.cfi_offset 5, -20
 187              		.cfi_offset 6, -16
 188              		.cfi_offset 7, -12
 189              		.cfi_offset 8, -8
 190              		.cfi_offset 14, -4
 727:../fatfs/src/ff.c **** 	wsect = fs->winsect;
 191              		.loc 1 727 0
 192 0004 056B     		ldr	r5, [r0, #48]
 193              	.LVL22:
 723:../fatfs/src/ff.c **** {
 194              		.loc 1 723 0
 195 0006 0446     		mov	r4, r0
 728:../fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 196              		.loc 1 728 0
 197 0008 8D42     		cmp	r5, r1
 723:../fatfs/src/ff.c **** {
 198              		.loc 1 723 0
 199 000a 0E46     		mov	r6, r1
 728:../fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 200              		.loc 1 728 0
 201 000c 02D1     		bne	.L31
 202              	.LVL23:
 203              	.L35:
 750:../fatfs/src/ff.c **** 	return FR_OK;
 204              		.loc 1 750 0
 205 000e 0020     		movs	r0, #0
 206 0010 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 207              	.LVL24:
 208              	.L31:
 730:../fatfs/src/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 209              		.loc 1 730 0
 210 0014 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 211 0016 13B9     		cbnz	r3, .L33
 212              	.LVL25:
 213              	.L37:
 743:../fatfs/src/ff.c **** 		if (sector) {
 214              		.loc 1 743 0
 215 0018 002E     		cmp	r6, #0
 216 001a F8D0     		beq	.L35
ARM GAS  /tmp/ccOwSZ6Y.s 			page 38


 217 001c 1FE0     		b	.L41
 218              	.LVL26:
 219              	.L33:
 731:../fatfs/src/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 220              		.loc 1 731 0
 221 001e 00F13408 		add	r8, r0, #52
 222 0022 4146     		mov	r1, r8
 223              	.LVL27:
 224 0024 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 225              	.LVL28:
 226 0026 2A46     		mov	r2, r5
 227 0028 0123     		movs	r3, #1
 228 002a FFF7FEFF 		bl	disk_write
 229              	.LVL29:
 230 002e 10B1     		cbz	r0, .L36
 231              	.L40:
 732:../fatfs/src/ff.c **** 				return FR_DISK_ERR;
 232              		.loc 1 732 0
 233 0030 0120     		movs	r0, #1
 234 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 235              	.LVL30:
 236              	.L36:
 734:../fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 237              		.loc 1 734 0
 238 0036 226A     		ldr	r2, [r4, #32]
 239 0038 636A     		ldr	r3, [r4, #36]
 733:../fatfs/src/ff.c **** 			fs->wflag = 0;
 240              		.loc 1 733 0
 241 003a 2071     		strb	r0, [r4, #4]
 734:../fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 242              		.loc 1 734 0
 243 003c 1344     		add	r3, r3, r2
 244 003e 9D42     		cmp	r5, r3
 245 0040 EAD2     		bcs	.L37
 246              	.LBB2:
 736:../fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 247              		.loc 1 736 0
 248 0042 E778     		ldrb	r7, [r4, #3]	@ zero_extendqisi2
 249              	.LVL31:
 250              	.L38:
 736:../fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 251              		.loc 1 736 0 is_stmt 0 discriminator 1
 252 0044 012F     		cmp	r7, #1
 253 0046 E7D9     		bls	.L37
 737:../fatfs/src/ff.c **** 					wsect += fs->fsize;
 254              		.loc 1 737 0 is_stmt 1 discriminator 2
 255 0048 236A     		ldr	r3, [r4, #32]
 738:../fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 256              		.loc 1 738 0 discriminator 2
 257 004a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 737:../fatfs/src/ff.c **** 					wsect += fs->fsize;
 258              		.loc 1 737 0 discriminator 2
 259 004c 1D44     		add	r5, r5, r3
 260              	.LVL32:
 738:../fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 261              		.loc 1 738 0 discriminator 2
 262 004e 4146     		mov	r1, r8
ARM GAS  /tmp/ccOwSZ6Y.s 			page 39


 263 0050 2A46     		mov	r2, r5
 264 0052 0123     		movs	r3, #1
 736:../fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 265              		.loc 1 736 0 discriminator 2
 266 0054 013F     		subs	r7, r7, #1
 267              	.LVL33:
 738:../fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 268              		.loc 1 738 0 discriminator 2
 269 0056 FFF7FEFF 		bl	disk_write
 270              	.LVL34:
 736:../fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 271              		.loc 1 736 0 discriminator 2
 272 005a FFB2     		uxtb	r7, r7
 273              	.LVL35:
 274 005c F2E7     		b	.L38
 275              	.LVL36:
 276              	.L41:
 277              	.LBE2:
 744:../fatfs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 278              		.loc 1 744 0
 279 005e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 280 0060 04F13401 		add	r1, r4, #52
 281 0064 3246     		mov	r2, r6
 282 0066 0123     		movs	r3, #1
 283 0068 FFF7FEFF 		bl	disk_read
 284              	.LVL37:
 285 006c 0028     		cmp	r0, #0
 286 006e DFD1     		bne	.L40
 746:../fatfs/src/ff.c **** 			fs->winsect = sector;
 287              		.loc 1 746 0
 288 0070 2663     		str	r6, [r4, #48]
 751:../fatfs/src/ff.c **** }
 289              		.loc 1 751 0
 290 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 291              		.cfi_endproc
 292              	.LFE4:
 294              		.section	.text.check_fs,"ax",%progbits
 295              		.align	1
 296              		.thumb
 297              		.thumb_func
 299              	check_fs:
 300              	.LFB20:
1885:../fatfs/src/ff.c **** 
1886:../fatfs/src/ff.c **** #if _USE_LFN
1887:../fatfs/src/ff.c **** 	if (fno->lfname && fno->lfsize) {
1888:../fatfs/src/ff.c **** 		TCHAR *tp = fno->lfname;
1889:../fatfs/src/ff.c **** 		WCHAR w, *lfn;
1890:../fatfs/src/ff.c **** 
1891:../fatfs/src/ff.c **** 		i = 0;
1892:../fatfs/src/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1893:../fatfs/src/ff.c **** 			lfn = dj->lfn;
1894:../fatfs/src/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1895:../fatfs/src/ff.c **** #if !_LFN_UNICODE
1896:../fatfs/src/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1897:../fatfs/src/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1898:../fatfs/src/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1899:../fatfs/src/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 40


1900:../fatfs/src/ff.c **** #endif
1901:../fatfs/src/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1902:../fatfs/src/ff.c **** 				tp[i++] = (TCHAR)w;
1903:../fatfs/src/ff.c **** 			}
1904:../fatfs/src/ff.c **** 		}
1905:../fatfs/src/ff.c **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1906:../fatfs/src/ff.c **** 	}
1907:../fatfs/src/ff.c **** #endif
1908:../fatfs/src/ff.c **** }
1909:../fatfs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1910:../fatfs/src/ff.c **** 
1911:../fatfs/src/ff.c **** 
1912:../fatfs/src/ff.c **** 
1913:../fatfs/src/ff.c **** 
1914:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1915:../fatfs/src/ff.c **** /* Follow a file path                                                    */
1916:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1917:../fatfs/src/ff.c **** 
1918:../fatfs/src/ff.c **** static
1919:../fatfs/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1920:../fatfs/src/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1921:../fatfs/src/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1922:../fatfs/src/ff.c **** )
1923:../fatfs/src/ff.c **** {
1924:../fatfs/src/ff.c **** 	FRESULT res;
1925:../fatfs/src/ff.c **** 	BYTE *dir, ns;
1926:../fatfs/src/ff.c **** 
1927:../fatfs/src/ff.c **** 
1928:../fatfs/src/ff.c **** #if _FS_RPATH
1929:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1930:../fatfs/src/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1931:../fatfs/src/ff.c **** 	} else {							/* No heading separator */
1932:../fatfs/src/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1933:../fatfs/src/ff.c **** 	}
1934:../fatfs/src/ff.c **** #else
1935:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1936:../fatfs/src/ff.c **** 		path++;
1937:../fatfs/src/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1938:../fatfs/src/ff.c **** #endif
1939:../fatfs/src/ff.c **** 
1940:../fatfs/src/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1941:../fatfs/src/ff.c **** 		res = dir_sdi(dj, 0);
1942:../fatfs/src/ff.c **** 		dj->dir = 0;
1943:../fatfs/src/ff.c **** 
1944:../fatfs/src/ff.c **** 	} else {							/* Follow path */
1945:../fatfs/src/ff.c **** 		for (;;) {
1946:../fatfs/src/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1947:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
1948:../fatfs/src/ff.c **** 			res = dir_find(dj);				/* Find it */
1949:../fatfs/src/ff.c **** 			ns = *(dj->fn+NS);
1950:../fatfs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
1951:../fatfs/src/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1952:../fatfs/src/ff.c **** 				/* Object not found */
1953:../fatfs/src/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1954:../fatfs/src/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1955:../fatfs/src/ff.c **** 					res = FR_OK;
1956:../fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) continue;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 41


1957:../fatfs/src/ff.c **** 				} else {							/* Could not find the object */
1958:../fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1959:../fatfs/src/ff.c **** 				}
1960:../fatfs/src/ff.c **** 				break;
1961:../fatfs/src/ff.c **** 			}
1962:../fatfs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1963:../fatfs/src/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1964:../fatfs/src/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1965:../fatfs/src/ff.c **** 				res = FR_NO_PATH; break;
1966:../fatfs/src/ff.c **** 			}
1967:../fatfs/src/ff.c **** 			dj->sclust = LD_CLUST(dir);
1968:../fatfs/src/ff.c **** 		}
1969:../fatfs/src/ff.c **** 	}
1970:../fatfs/src/ff.c **** 
1971:../fatfs/src/ff.c **** 	return res;
1972:../fatfs/src/ff.c **** }
1973:../fatfs/src/ff.c **** 
1974:../fatfs/src/ff.c **** 
1975:../fatfs/src/ff.c **** 
1976:../fatfs/src/ff.c **** 
1977:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1978:../fatfs/src/ff.c **** /* Load a sector and check if it is an FAT Volume Boot Record            */
1979:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1980:../fatfs/src/ff.c **** 
1981:../fatfs/src/ff.c **** static
1982:../fatfs/src/ff.c **** BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
1983:../fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
1984:../fatfs/src/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1985:../fatfs/src/ff.c **** )
1986:../fatfs/src/ff.c **** {
 301              		.loc 1 1986 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              	.LVL38:
 306 0000 10B5     		push	{r4, lr}
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 4, -8
 309              		.cfi_offset 14, -4
 310              		.loc 1 1986 0
 311 0002 0446     		mov	r4, r0
 312 0004 0A46     		mov	r2, r1
1987:../fatfs/src/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 313              		.loc 1 1987 0
 314 0006 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 315              	.LVL39:
 316 0008 04F13401 		add	r1, r4, #52
 317              	.LVL40:
 318 000c 0123     		movs	r3, #1
 319 000e FFF7FEFF 		bl	disk_read
 320              	.LVL41:
 321 0012 80BB     		cbnz	r0, .L44
1988:../fatfs/src/ff.c **** 		return 3;
1989:../fatfs/src/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 322              		.loc 1 1989 0
 323 0014 94F83232 		ldrb	r3, [r4, #562]	@ zero_extendqisi2
 324 0018 94F83322 		ldrb	r2, [r4, #563]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 42


 325 001c 43EA0222 		orr	r2, r3, r2, lsl #8
 326 0020 174B     		ldr	r3, .L47
 327 0022 12B2     		sxth	r2, r2
 328 0024 9A42     		cmp	r2, r3
 329 0026 28D1     		bne	.L45
1990:../fatfs/src/ff.c **** 		return 2;
1991:../fatfs/src/ff.c **** 
1992:../fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 330              		.loc 1 1992 0
 331 0028 94F86C20 		ldrb	r2, [r4, #108]	@ zero_extendqisi2
 332 002c 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 333 0030 1204     		lsls	r2, r2, #16
 334 0032 42EA0362 		orr	r2, r2, r3, lsl #24
 335 0036 94F86A30 		ldrb	r3, [r4, #106]	@ zero_extendqisi2
 336 003a 1A43     		orrs	r2, r2, r3
 337 003c 94F86B30 		ldrb	r3, [r4, #107]	@ zero_extendqisi2
 338 0040 42EA0322 		orr	r2, r2, r3, lsl #8
 339 0044 0F4B     		ldr	r3, .L47+4
 340 0046 22F07F42 		bic	r2, r2, #-16777216
 341 004a 9A42     		cmp	r2, r3
 342 004c 16D0     		beq	.L43
 343              	.LVL42:
 344              	.LBB5:
 345              	.LBB6:
1993:../fatfs/src/ff.c **** 		return 0;
1994:../fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 346              		.loc 1 1994 0
 347 004e 94F88800 		ldrb	r0, [r4, #136]	@ zero_extendqisi2
 348 0052 94F88920 		ldrb	r2, [r4, #137]	@ zero_extendqisi2
 349 0056 0004     		lsls	r0, r0, #16
 350 0058 40EA0260 		orr	r0, r0, r2, lsl #24
 351 005c 94F88620 		ldrb	r2, [r4, #134]	@ zero_extendqisi2
 352 0060 1043     		orrs	r0, r0, r2
 353 0062 94F88720 		ldrb	r2, [r4, #135]	@ zero_extendqisi2
 354 0066 40EA0220 		orr	r0, r0, r2, lsl #8
 355 006a 20F07F40 		bic	r0, r0, #-16777216
1995:../fatfs/src/ff.c **** 		return 0;
 356              		.loc 1 1995 0
 357 006e C01A     		subs	r0, r0, r3
 358 0070 18BF     		it	ne
 359 0072 0120     		movne	r0, #1
 360 0074 10BD     		pop	{r4, pc}
 361              	.LVL43:
 362              	.L44:
 363              	.LBE6:
 364              	.LBE5:
1988:../fatfs/src/ff.c **** 		return 3;
 365              		.loc 1 1988 0
 366 0076 0320     		movs	r0, #3
 367 0078 10BD     		pop	{r4, pc}
 368              	.LVL44:
 369              	.L45:
1990:../fatfs/src/ff.c **** 		return 2;
 370              		.loc 1 1990 0
 371 007a 0220     		movs	r0, #2
 372              	.L43:
1996:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 43


1997:../fatfs/src/ff.c **** 	return 1;
1998:../fatfs/src/ff.c **** }
 373              		.loc 1 1998 0
 374 007c 10BD     		pop	{r4, pc}
 375              	.LVL45:
 376              	.L48:
 377 007e 00BF     		.align	2
 378              	.L47:
 379 0080 55AAFFFF 		.word	-21931
 380 0084 46415400 		.word	5521734
 381              		.cfi_endproc
 382              	.LFE20:
 384              		.section	.text.chk_mounted,"ax",%progbits
 385              		.align	1
 386              		.thumb
 387              		.thumb_func
 389              	chk_mounted:
 390              	.LFB21:
1999:../fatfs/src/ff.c **** 
2000:../fatfs/src/ff.c **** 
2001:../fatfs/src/ff.c **** 
2002:../fatfs/src/ff.c **** 
2003:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2004:../fatfs/src/ff.c **** /* Check if the file system object is valid or not                       */
2005:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2006:../fatfs/src/ff.c **** 
2007:../fatfs/src/ff.c **** static
2008:../fatfs/src/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
2009:../fatfs/src/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
2010:../fatfs/src/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
2011:../fatfs/src/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
2012:../fatfs/src/ff.c **** )
2013:../fatfs/src/ff.c **** {
 391              		.loc 1 2013 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              	.LVL46:
 396 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 397              		.cfi_def_cfa_offset 24
 398              		.cfi_offset 4, -24
 399              		.cfi_offset 5, -20
 400              		.cfi_offset 6, -16
 401              		.cfi_offset 7, -12
 402              		.cfi_offset 8, -8
 403              		.cfi_offset 14, -4
 404              		.loc 1 2013 0
 405 0004 1546     		mov	r5, r2
2014:../fatfs/src/ff.c **** 	BYTE fmt, b, pi, *tbl;
2015:../fatfs/src/ff.c **** 	UINT vol;
2016:../fatfs/src/ff.c **** 	DSTATUS stat;
2017:../fatfs/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2018:../fatfs/src/ff.c **** 	WORD nrsv;
2019:../fatfs/src/ff.c **** 	const TCHAR *p = *path;
 406              		.loc 1 2019 0
 407 0006 0268     		ldr	r2, [r0]
 408              	.LVL47:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 44


2020:../fatfs/src/ff.c **** 	FATFS *fs;
2021:../fatfs/src/ff.c **** 
2022:../fatfs/src/ff.c **** 	/* Get logical drive number from the path name */
2023:../fatfs/src/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
 409              		.loc 1 2023 0
 410 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 411 000a 303B     		subs	r3, r3, #48
 412 000c 9BB2     		uxth	r3, r3
 413              	.LVL48:
2024:../fatfs/src/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 414              		.loc 1 2024 0
 415 000e 092B     		cmp	r3, #9
 416 0010 05D8     		bhi	.L50
 417              		.loc 1 2024 0 is_stmt 0 discriminator 1
 418 0012 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 419 0014 3A2C     		cmp	r4, #58
 420 0016 02D1     		bne	.L50
 421              	.LVL49:
2025:../fatfs/src/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
 422              		.loc 1 2025 0 is_stmt 1
 423 0018 0232     		adds	r2, r2, #2
 424              	.LVL50:
 425 001a 0260     		str	r2, [r0]
 426 001c 01E0     		b	.L51
 427              	.L50:
2026:../fatfs/src/ff.c **** 	} else {							/* No drive number is given */
2027:../fatfs/src/ff.c **** #if _FS_RPATH
2028:../fatfs/src/ff.c **** 		vol = CurrVol;					/* Use current drive */
 428              		.loc 1 2028 0
 429 001e B64B     		ldr	r3, .L96
 430              	.LVL51:
 431 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 432              	.LVL52:
 433              	.L51:
2029:../fatfs/src/ff.c **** #else
2030:../fatfs/src/ff.c **** 		vol = 0;						/* Use drive 0 */
2031:../fatfs/src/ff.c **** #endif
2032:../fatfs/src/ff.c **** 	}
2033:../fatfs/src/ff.c **** 
2034:../fatfs/src/ff.c **** 	/* Check if the file system object is valid or not */
2035:../fatfs/src/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 434              		.loc 1 2035 0
 435 0022 002B     		cmp	r3, #0
 436 0024 40F05681 		bne	.L68
2036:../fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
2037:../fatfs/src/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 437              		.loc 1 2037 0
 438 0028 B44B     		ldr	r3, .L96+4
 439              	.LVL53:
 440 002a 1C68     		ldr	r4, [r3]
 441              	.LVL54:
 442 002c 0C60     		str	r4, [r1]
2038:../fatfs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 443              		.loc 1 2038 0
 444 002e 002C     		cmp	r4, #0
 445 0030 00F05381 		beq	.L69
2039:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 45


2040:../fatfs/src/ff.c **** 	ENTER_FF(fs);						/* Lock file system */
2041:../fatfs/src/ff.c **** 
2042:../fatfs/src/ff.c **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
 446              		.loc 1 2042 0
 447 0034 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 448 0036 73B1     		cbz	r3, .L53
2043:../fatfs/src/ff.c **** 		stat = disk_status(fs->drv);
 449              		.loc 1 2043 0
 450 0038 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 451              	.LVL55:
 452 003a FFF7FEFF 		bl	disk_status
 453              	.LVL56:
2044:../fatfs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 454              		.loc 1 2044 0
 455 003e C607     		lsls	r6, r0, #31
 456 0040 09D4     		bmi	.L53
2045:../fatfs/src/ff.c **** 			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 457              		.loc 1 2045 0
 458 0042 002D     		cmp	r5, #0
 459 0044 00F04C81 		beq	.L70
2046:../fatfs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 460              		.loc 1 2046 0 discriminator 1
 461 0048 10F0040F 		tst	r0, #4
 462 004c 0CBF     		ite	eq
 463 004e 0020     		moveq	r0, #0
 464 0050 0A20     		movne	r0, #10
 465              	.LVL57:
 466 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 467              	.LVL58:
 468              	.L53:
2047:../fatfs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
2048:../fatfs/src/ff.c **** 		}
2049:../fatfs/src/ff.c **** 	}
2050:../fatfs/src/ff.c **** 
2051:../fatfs/src/ff.c **** 	/* The file system object is not valid. */
2052:../fatfs/src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2053:../fatfs/src/ff.c **** 
2054:../fatfs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 469              		.loc 1 2054 0
 470 0056 0020     		movs	r0, #0
 471 0058 2070     		strb	r0, [r4]
2055:../fatfs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 472              		.loc 1 2055 0
 473 005a 6070     		strb	r0, [r4, #1]
2056:../fatfs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 474              		.loc 1 2056 0
 475 005c FFF7FEFF 		bl	disk_initialize
 476              	.LVL59:
2057:../fatfs/src/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 477              		.loc 1 2057 0
 478 0060 C107     		lsls	r1, r0, #31
 479 0062 00F14081 		bmi	.L72
2058:../fatfs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
2059:../fatfs/src/ff.c **** 	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 480              		.loc 1 2059 0
 481 0066 15B1     		cbz	r5, .L54
 482              		.loc 1 2059 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 46


 483 0068 4207     		lsls	r2, r0, #29
 484 006a 00F13F81 		bmi	.L73
 485              	.L54:
 486              	.LVL60:
2060:../fatfs/src/ff.c **** 		return FR_WRITE_PROTECTED;
2061:../fatfs/src/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
2062:../fatfs/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
2063:../fatfs/src/ff.c **** 		return FR_DISK_ERR;
2064:../fatfs/src/ff.c **** #endif
2065:../fatfs/src/ff.c **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
2066:../fatfs/src/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 487              		.loc 1 2066 0 is_stmt 1
 488 006e 2046     		mov	r0, r4
 489              	.LVL61:
 490 0070 0021     		movs	r1, #0
 491 0072 FFF7FEFF 		bl	check_fs
 492              	.LVL62:
2067:../fatfs/src/ff.c **** 	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
2068:../fatfs/src/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
 493              		.loc 1 2068 0
 494 0076 0128     		cmp	r0, #1
 495 0078 18D1     		bne	.L74
 496              	.LVL63:
2069:../fatfs/src/ff.c **** 		/* Check the partition listed in the partition table */
2070:../fatfs/src/ff.c **** 		pi = LD2PT(vol);
2071:../fatfs/src/ff.c **** 		if (pi) pi--;
2072:../fatfs/src/ff.c **** 		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
2073:../fatfs/src/ff.c **** 		if (tbl[4]) {						/* Is the partition existing? */
 497              		.loc 1 2073 0
 498 007a 94F8F631 		ldrb	r3, [r4, #502]	@ zero_extendqisi2
 499 007e 13B9     		cbnz	r3, .L56
 500              	.LVL64:
 501              	.L57:
2074:../fatfs/src/ff.c **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
2075:../fatfs/src/ff.c **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
2076:../fatfs/src/ff.c **** 		}
2077:../fatfs/src/ff.c **** 	}
2078:../fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
2079:../fatfs/src/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 502              		.loc 1 2079 0
 503 0080 0D20     		movs	r0, #13
 504 0082 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 505              	.LVL65:
 506              	.L56:
2074:../fatfs/src/ff.c **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 507              		.loc 1 2074 0
 508 0086 94F8FC61 		ldrb	r6, [r4, #508]	@ zero_extendqisi2
 509 008a 94F8FD31 		ldrb	r3, [r4, #509]	@ zero_extendqisi2
 510 008e 3604     		lsls	r6, r6, #16
 511 0090 46EA0366 		orr	r6, r6, r3, lsl #24
 512 0094 94F8FA31 		ldrb	r3, [r4, #506]	@ zero_extendqisi2
2075:../fatfs/src/ff.c **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 513              		.loc 1 2075 0
 514 0098 2046     		mov	r0, r4
 515              	.LVL66:
2074:../fatfs/src/ff.c **** 			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
 516              		.loc 1 2074 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 47


 517 009a 1E43     		orrs	r6, r6, r3
 518 009c 94F8FB31 		ldrb	r3, [r4, #507]	@ zero_extendqisi2
 519 00a0 46EA0326 		orr	r6, r6, r3, lsl #8
 520              	.LVL67:
2075:../fatfs/src/ff.c **** 			fmt = check_fs(fs, bsect);		/* Check the partition */
 521              		.loc 1 2075 0
 522 00a4 3146     		mov	r1, r6
 523 00a6 FFF7FEFF 		bl	check_fs
 524              	.LVL68:
 525 00aa 00E0     		b	.L55
 526              	.LVL69:
 527              	.L74:
2066:../fatfs/src/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
 528              		.loc 1 2066 0
 529 00ac 0026     		movs	r6, #0
 530              	.LVL70:
 531              	.L55:
2078:../fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 532              		.loc 1 2078 0
 533 00ae 0328     		cmp	r0, #3
 534 00b0 00F01F81 		beq	.L75
 535              		.loc 1 2079 0
 536 00b4 0028     		cmp	r0, #0
 537 00b6 E3D1     		bne	.L57
2080:../fatfs/src/ff.c **** 
2081:../fatfs/src/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2082:../fatfs/src/ff.c **** 
2083:../fatfs/src/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
 538              		.loc 1 2083 0
 539 00b8 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 540 00bc 94F83F30 		ldrb	r3, [r4, #63]	@ zero_extendqisi2
 541 00c0 43EA0223 		orr	r3, r3, r2, lsl #8
 542 00c4 B3F5007F 		cmp	r3, #512
 543 00c8 DAD1     		bne	.L57
2084:../fatfs/src/ff.c **** 		return FR_NO_FILESYSTEM;
2085:../fatfs/src/ff.c **** 
2086:../fatfs/src/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 544              		.loc 1 2086 0
 545 00ca 94F84B00 		ldrb	r0, [r4, #75]	@ zero_extendqisi2
 546              	.LVL71:
 547 00ce 94F84A30 		ldrb	r3, [r4, #74]	@ zero_extendqisi2
 548              	.LVL72:
2087:../fatfs/src/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 549              		.loc 1 2087 0
 550 00d2 53EA0020 		orrs	r0, r3, r0, lsl #8
 551              	.LVL73:
 552 00d6 0DD1     		bne	.L58
 553              		.loc 1 2087 0 is_stmt 0 discriminator 1
 554 00d8 94F85A00 		ldrb	r0, [r4, #90]	@ zero_extendqisi2
 555              	.LVL74:
 556 00dc 94F85B30 		ldrb	r3, [r4, #91]	@ zero_extendqisi2
 557              	.LVL75:
 558 00e0 0004     		lsls	r0, r0, #16
 559 00e2 40EA0360 		orr	r0, r0, r3, lsl #24
 560 00e6 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 561 00ea 1843     		orrs	r0, r0, r3
 562 00ec 94F85930 		ldrb	r3, [r4, #89]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 48


 563 00f0 40EA0320 		orr	r0, r0, r3, lsl #8
 564              	.LVL76:
 565              	.L58:
2088:../fatfs/src/ff.c **** 	fs->fsize = fasize;
2089:../fatfs/src/ff.c **** 
2090:../fatfs/src/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 566              		.loc 1 2090 0 is_stmt 1
 567 00f4 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 568              	.LVL77:
2088:../fatfs/src/ff.c **** 	fs->fsize = fasize;
 569              		.loc 1 2088 0
 570 00f8 2062     		str	r0, [r4, #32]
2091:../fatfs/src/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 571              		.loc 1 2091 0
 572 00fa 6B1E     		subs	r3, r5, #1
 573 00fc 012B     		cmp	r3, #1
2090:../fatfs/src/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 574              		.loc 1 2090 0
 575 00fe E570     		strb	r5, [r4, #3]
 576              		.loc 1 2091 0
 577 0100 BED8     		bhi	.L57
 578              	.LVL78:
2092:../fatfs/src/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
2093:../fatfs/src/ff.c **** 
2094:../fatfs/src/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 579              		.loc 1 2094 0
 580 0102 94F84110 		ldrb	r1, [r4, #65]	@ zero_extendqisi2
 581              	.LVL79:
 582 0106 A170     		strb	r1, [r4, #2]
2095:../fatfs/src/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 583              		.loc 1 2095 0
 584 0108 0029     		cmp	r1, #0
 585 010a B9D0     		beq	.L57
 586              		.loc 1 2095 0 is_stmt 0 discriminator 2
 587 010c 4B1E     		subs	r3, r1, #1
 588 010e 0B42     		tst	r3, r1
 589 0110 B6D1     		bne	.L57
2096:../fatfs/src/ff.c **** 
2097:../fatfs/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 590              		.loc 1 2097 0 is_stmt 1
 591 0112 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 592 0116 94F84620 		ldrb	r2, [r4, #70]	@ zero_extendqisi2
 593 011a 43EA0222 		orr	r2, r3, r2, lsl #8
2098:../fatfs/src/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector 
 594              		.loc 1 2098 0
 595 011e 1307     		lsls	r3, r2, #28
2097:../fatfs/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 596              		.loc 1 2097 0
 597 0120 2281     		strh	r2, [r4, #8]	@ movhi
 598              		.loc 1 2098 0
 599 0122 ADD1     		bne	.L57
2099:../fatfs/src/ff.c **** 
2100:../fatfs/src/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 600              		.loc 1 2100 0
 601 0124 94F84870 		ldrb	r7, [r4, #72]	@ zero_extendqisi2
 602 0128 94F84730 		ldrb	r3, [r4, #71]	@ zero_extendqisi2
 603              	.LVL80:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 49


2101:../fatfs/src/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 604              		.loc 1 2101 0
 605 012c 53EA0723 		orrs	r3, r3, r7, lsl #8
 606              	.LVL81:
 607 0130 0DD1     		bne	.L59
 608              		.loc 1 2101 0 is_stmt 0 discriminator 1
 609 0132 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 610              	.LVL82:
 611 0136 94F85770 		ldrb	r7, [r4, #87]	@ zero_extendqisi2
 612              	.LVL83:
 613 013a 1B04     		lsls	r3, r3, #16
 614 013c 43EA0763 		orr	r3, r3, r7, lsl #24
 615 0140 94F85470 		ldrb	r7, [r4, #84]	@ zero_extendqisi2
 616 0144 3B43     		orrs	r3, r3, r7
 617 0146 94F85570 		ldrb	r7, [r4, #85]	@ zero_extendqisi2
 618 014a 43EA0723 		orr	r3, r3, r7, lsl #8
 619              	.LVL84:
 620              	.L59:
2102:../fatfs/src/ff.c **** 
2103:../fatfs/src/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 621              		.loc 1 2103 0 is_stmt 1
 622 014e 94F84380 		ldrb	r8, [r4, #67]	@ zero_extendqisi2
 623 0152 94F84270 		ldrb	r7, [r4, #66]	@ zero_extendqisi2
 624              	.LVL85:
2104:../fatfs/src/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 625              		.loc 1 2104 0
 626 0156 57EA0828 		orrs	r8, r7, r8, lsl #8
 627              	.LVL86:
 628 015a 91D0     		beq	.L57
2092:../fatfs/src/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
 629              		.loc 1 2092 0
 630 015c 05FB00FC 		mul	ip, r5, r0
2105:../fatfs/src/ff.c **** 
2106:../fatfs/src/ff.c **** 	/* Determine the FAT sub type */
2107:../fatfs/src/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 631              		.loc 1 2107 0
 632 0160 08EB1217 		add	r7, r8, r2, lsr #4
 633              	.LVL87:
 634 0164 6744     		add	r7, r7, ip
 635              	.LVL88:
2108:../fatfs/src/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 636              		.loc 1 2108 0
 637 0166 BB42     		cmp	r3, r7
 638 0168 8AD3     		bcc	.L57
2109:../fatfs/src/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 639              		.loc 1 2109 0
 640 016a DB1B     		subs	r3, r3, r7
 641              	.LVL89:
 642 016c B3FBF1F3 		udiv	r3, r3, r1
 643              	.LVL90:
2110:../fatfs/src/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 644              		.loc 1 2110 0
 645 0170 002B     		cmp	r3, #0
 646 0172 85D0     		beq	.L57
 647              	.LVL91:
2111:../fatfs/src/ff.c **** 	fmt = FS_FAT12;
2112:../fatfs/src/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 50


 648              		.loc 1 2112 0
 649 0174 40F6F571 		movw	r1, #4085
 650 0178 8B42     		cmp	r3, r1
 651 017a 06D9     		bls	.L76
 652              	.LVL92:
 653 017c 4FF6F575 		movw	r5, #65525
 654              	.LVL93:
 655 0180 AB42     		cmp	r3, r5
 656 0182 8CBF     		ite	hi
 657 0184 0325     		movhi	r5, #3
 658 0186 0225     		movls	r5, #2
 659 0188 00E0     		b	.L61
 660              	.LVL94:
 661              	.L76:
2111:../fatfs/src/ff.c **** 	fmt = FS_FAT12;
 662              		.loc 1 2111 0
 663 018a 0125     		movs	r5, #1
 664              	.LVL95:
 665              	.L61:
2113:../fatfs/src/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
2114:../fatfs/src/ff.c **** 
2115:../fatfs/src/ff.c **** 	/* Boundaries and Limits */
2116:../fatfs/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 666              		.loc 1 2116 0
 667 018c 0233     		adds	r3, r3, #2
 668              	.LVL96:
2117:../fatfs/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 669              		.loc 1 2117 0
 670 018e 3744     		add	r7, r7, r6
 671              	.LVL97:
2118:../fatfs/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 672              		.loc 1 2118 0
 673 0190 06EB0801 		add	r1, r6, r8
2119:../fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 674              		.loc 1 2119 0
 675 0194 032D     		cmp	r5, #3
2116:../fatfs/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 676              		.loc 1 2116 0
 677 0196 E361     		str	r3, [r4, #28]
2117:../fatfs/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 678              		.loc 1 2117 0
 679 0198 E762     		str	r7, [r4, #44]
2118:../fatfs/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 680              		.loc 1 2118 0
 681 019a 6162     		str	r1, [r4, #36]
 682              		.loc 1 2119 0
 683 019c 13D1     		bne	.L62
 684              	.LVL98:
2120:../fatfs/src/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 685              		.loc 1 2120 0
 686 019e 002A     		cmp	r2, #0
 687 01a0 7FF46EAF 		bne	.L57
2121:../fatfs/src/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 688              		.loc 1 2121 0
 689 01a4 94F86220 		ldrb	r2, [r4, #98]	@ zero_extendqisi2
 690              	.LVL99:
 691 01a8 94F86310 		ldrb	r1, [r4, #99]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 51


 692 01ac 1204     		lsls	r2, r2, #16
 693 01ae 42EA0162 		orr	r2, r2, r1, lsl #24
 694 01b2 94F86010 		ldrb	r1, [r4, #96]	@ zero_extendqisi2
2122:../fatfs/src/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 695              		.loc 1 2122 0
 696 01b6 9B00     		lsls	r3, r3, #2
 697              	.LVL100:
2121:../fatfs/src/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 698              		.loc 1 2121 0
 699 01b8 0A43     		orrs	r2, r2, r1
 700 01ba 94F86110 		ldrb	r1, [r4, #97]	@ zero_extendqisi2
 701 01be 42EA0122 		orr	r2, r2, r1, lsl #8
 702 01c2 A262     		str	r2, [r4, #40]
 703 01c4 10E0     		b	.L63
 704              	.LVL101:
 705              	.L62:
2123:../fatfs/src/ff.c **** 	} else {
2124:../fatfs/src/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 706              		.loc 1 2124 0
 707 01c6 002A     		cmp	r2, #0
 708 01c8 3FF45AAF 		beq	.L57
2125:../fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
2126:../fatfs/src/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
2127:../fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 709              		.loc 1 2127 0
 710 01cc 022D     		cmp	r5, #2
 711 01ce 4FEA4302 		lsl	r2, r3, #1
 712              	.LVL102:
 713 01d2 18BF     		it	ne
 714 01d4 D218     		addne	r2, r2, r3
2125:../fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 715              		.loc 1 2125 0
 716 01d6 6144     		add	r1, r1, ip
 717              		.loc 1 2127 0
 718 01d8 18BF     		it	ne
 719 01da 03F00103 		andne	r3, r3, #1
 720              	.LVL103:
2125:../fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 721              		.loc 1 2125 0
 722 01de A162     		str	r1, [r4, #40]
 723              		.loc 1 2127 0
 724 01e0 0CBF     		ite	eq
 725 01e2 1346     		moveq	r3, r2
 726 01e4 03EB5203 		addne	r3, r3, r2, lsr #1
 727              	.LVL104:
 728              	.L63:
2128:../fatfs/src/ff.c **** 	}
2129:../fatfs/src/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
 729              		.loc 1 2129 0
 730 01e8 03F2FF13 		addw	r3, r3, #511
 731              	.LVL105:
 732 01ec B0EB532F 		cmp	r0, r3, lsr #9
 733 01f0 FFF446AF 		bcc	.L57
2130:../fatfs/src/ff.c **** 		return FR_NO_FILESYSTEM;
2131:../fatfs/src/ff.c **** 
2132:../fatfs/src/ff.c **** #if !_FS_READONLY
2133:../fatfs/src/ff.c **** 	/* Initialize cluster allocation information */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 52


2134:../fatfs/src/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 734              		.loc 1 2134 0
 735 01f4 4FF0FF33 		mov	r3, #-1
 736              	.LVL106:
 737 01f8 2361     		str	r3, [r4, #16]
2135:../fatfs/src/ff.c **** 	fs->last_clust = 0;
2136:../fatfs/src/ff.c **** 
2137:../fatfs/src/ff.c **** 	/* Get fsinfo if available */
2138:../fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 738              		.loc 1 2138 0
 739 01fa 032D     		cmp	r5, #3
2135:../fatfs/src/ff.c **** 	fs->last_clust = 0;
 740              		.loc 1 2135 0
 741 01fc 4FF00003 		mov	r3, #0
 742 0200 E360     		str	r3, [r4, #12]
 743              		.loc 1 2138 0
 744 0202 5AD1     		bne	.L66
2139:../fatfs/src/ff.c **** 	 	fs->fsi_flag = 0;
 745              		.loc 1 2139 0
 746 0204 6371     		strb	r3, [r4, #5]
2140:../fatfs/src/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 747              		.loc 1 2140 0
 748 0206 94F86520 		ldrb	r2, [r4, #101]	@ zero_extendqisi2
 749 020a 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
2141:../fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 750              		.loc 1 2141 0
 751 020e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 752              	.LVL107:
2140:../fatfs/src/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 753              		.loc 1 2140 0
 754 0210 43EA0222 		orr	r2, r3, r2, lsl #8
 755 0214 3244     		add	r2, r2, r6
 756 0216 6261     		str	r2, [r4, #20]
 757              		.loc 1 2141 0
 758 0218 04F13401 		add	r1, r4, #52
 759 021c 0123     		movs	r3, #1
 760 021e FFF7FEFF 		bl	disk_read
 761              	.LVL108:
 762 0222 0028     		cmp	r0, #0
 763 0224 49D1     		bne	.L66
2142:../fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 764              		.loc 1 2142 0 discriminator 1
 765 0226 94F83232 		ldrb	r3, [r4, #562]	@ zero_extendqisi2
 766 022a 94F83322 		ldrb	r2, [r4, #563]	@ zero_extendqisi2
 767 022e 43EA0222 		orr	r2, r3, r2, lsl #8
2141:../fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 768              		.loc 1 2141 0 discriminator 1
 769 0232 334B     		ldr	r3, .L96+8
 770 0234 12B2     		sxth	r2, r2
 771 0236 9A42     		cmp	r2, r3
 772 0238 3FD1     		bne	.L66
2143:../fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 773              		.loc 1 2143 0
 774 023a 94F83620 		ldrb	r2, [r4, #54]	@ zero_extendqisi2
 775 023e 94F83730 		ldrb	r3, [r4, #55]	@ zero_extendqisi2
 776 0242 1204     		lsls	r2, r2, #16
 777 0244 42EA0362 		orr	r2, r2, r3, lsl #24
ARM GAS  /tmp/ccOwSZ6Y.s 			page 53


 778 0248 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 779 024c 1A43     		orrs	r2, r2, r3
 780 024e 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 781 0252 42EA0322 		orr	r2, r2, r3, lsl #8
2142:../fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 782              		.loc 1 2142 0
 783 0256 2B4B     		ldr	r3, .L96+12
 784 0258 9A42     		cmp	r2, r3
 785 025a 2ED1     		bne	.L66
2144:../fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 786              		.loc 1 2144 0
 787 025c 94F81A22 		ldrb	r2, [r4, #538]	@ zero_extendqisi2
 788 0260 94F81B32 		ldrb	r3, [r4, #539]	@ zero_extendqisi2
 789 0264 1204     		lsls	r2, r2, #16
 790 0266 42EA0362 		orr	r2, r2, r3, lsl #24
 791 026a 94F81832 		ldrb	r3, [r4, #536]	@ zero_extendqisi2
 792 026e 1A43     		orrs	r2, r2, r3
 793 0270 94F81932 		ldrb	r3, [r4, #537]	@ zero_extendqisi2
 794 0274 42EA0322 		orr	r2, r2, r3, lsl #8
2143:../fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 795              		.loc 1 2143 0
 796 0278 234B     		ldr	r3, .L96+16
 797 027a 9A42     		cmp	r2, r3
 798 027c 1DD1     		bne	.L66
2145:../fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 799              		.loc 1 2145 0
 800 027e 94F82232 		ldrb	r3, [r4, #546]	@ zero_extendqisi2
 801 0282 94F82322 		ldrb	r2, [r4, #547]	@ zero_extendqisi2
 802 0286 1B04     		lsls	r3, r3, #16
 803 0288 43EA0263 		orr	r3, r3, r2, lsl #24
 804 028c 94F82022 		ldrb	r2, [r4, #544]	@ zero_extendqisi2
 805 0290 1343     		orrs	r3, r3, r2
 806 0292 94F82122 		ldrb	r2, [r4, #545]	@ zero_extendqisi2
 807 0296 43EA0223 		orr	r3, r3, r2, lsl #8
 808 029a E360     		str	r3, [r4, #12]
2146:../fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 809              		.loc 1 2146 0
 810 029c 94F81E32 		ldrb	r3, [r4, #542]	@ zero_extendqisi2
 811 02a0 94F81F22 		ldrb	r2, [r4, #543]	@ zero_extendqisi2
 812 02a4 1B04     		lsls	r3, r3, #16
 813 02a6 43EA0263 		orr	r3, r3, r2, lsl #24
 814 02aa 94F81C22 		ldrb	r2, [r4, #540]	@ zero_extendqisi2
 815 02ae 1343     		orrs	r3, r3, r2
 816 02b0 94F81D22 		ldrb	r2, [r4, #541]	@ zero_extendqisi2
 817 02b4 43EA0223 		orr	r3, r3, r2, lsl #8
 818 02b8 2361     		str	r3, [r4, #16]
 819              	.L66:
2147:../fatfs/src/ff.c **** 		}
2148:../fatfs/src/ff.c **** 	}
2149:../fatfs/src/ff.c **** #endif
2150:../fatfs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
2151:../fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 820              		.loc 1 2151 0
 821 02ba 144A     		ldr	r2, .L96+20
2152:../fatfs/src/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 822              		.loc 1 2152 0
 823 02bc 0020     		movs	r0, #0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 54


2151:../fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 824              		.loc 1 2151 0
 825 02be 1388     		ldrh	r3, [r2]
2150:../fatfs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 826              		.loc 1 2150 0
 827 02c0 2570     		strb	r5, [r4]
2151:../fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 828              		.loc 1 2151 0
 829 02c2 0133     		adds	r3, r3, #1
 830 02c4 9BB2     		uxth	r3, r3
2153:../fatfs/src/ff.c **** 	fs->wflag = 0;
 831              		.loc 1 2153 0
 832 02c6 2071     		strb	r0, [r4, #4]
2151:../fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 833              		.loc 1 2151 0
 834 02c8 1380     		strh	r3, [r2]	@ movhi
 835 02ca E380     		strh	r3, [r4, #6]	@ movhi
2152:../fatfs/src/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 836              		.loc 1 2152 0
 837 02cc 2063     		str	r0, [r4, #48]
2154:../fatfs/src/ff.c **** #if _FS_RPATH
2155:../fatfs/src/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
 838              		.loc 1 2155 0
 839 02ce A061     		str	r0, [r4, #24]
2156:../fatfs/src/ff.c **** #endif
2157:../fatfs/src/ff.c **** #if _FS_SHARE				/* Clear file lock semaphores */
2158:../fatfs/src/ff.c **** 	clear_lock(fs);
2159:../fatfs/src/ff.c **** #endif
2160:../fatfs/src/ff.c **** 
2161:../fatfs/src/ff.c **** 	return FR_OK;
 840              		.loc 1 2161 0
 841 02d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 842              	.LVL109:
 843              	.L68:
2036:../fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
 844              		.loc 1 2036 0
 845 02d4 0B20     		movs	r0, #11
 846              	.LVL110:
 847 02d6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 848              	.LVL111:
 849              	.L69:
2038:../fatfs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 850              		.loc 1 2038 0
 851 02da 0C20     		movs	r0, #12
 852              	.LVL112:
 853 02dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 854              	.LVL113:
 855              	.L70:
2047:../fatfs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
 856              		.loc 1 2047 0
 857 02e0 2846     		mov	r0, r5
 858              	.LVL114:
 859 02e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 860              	.LVL115:
 861              	.L72:
2058:../fatfs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 862              		.loc 1 2058 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 55


 863 02e6 0320     		movs	r0, #3
 864              	.LVL116:
 865 02e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 866              	.LVL117:
 867              	.L73:
2060:../fatfs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 868              		.loc 1 2060 0
 869 02ec 0A20     		movs	r0, #10
 870              	.LVL118:
 871 02ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 872              	.LVL119:
 873              	.L75:
2078:../fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 874              		.loc 1 2078 0
 875 02f2 0120     		movs	r0, #1
 876              	.LVL120:
2162:../fatfs/src/ff.c **** }
 877              		.loc 1 2162 0
 878 02f4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 879              	.LVL121:
 880              	.L97:
 881              		.align	2
 882              	.L96:
 883 02f8 00000000 		.word	.LANCHOR0
 884 02fc 00000000 		.word	.LANCHOR1
 885 0300 55AAFFFF 		.word	-21931
 886 0304 52526141 		.word	1096897106
 887 0308 72724161 		.word	1631679090
 888 030c 00000000 		.word	.LANCHOR2
 889              		.cfi_endproc
 890              	.LFE21:
 892              		.section	.text.validate,"ax",%progbits
 893              		.align	1
 894              		.thumb
 895              		.thumb_func
 897              	validate:
 898              	.LFB22:
2163:../fatfs/src/ff.c **** 
2164:../fatfs/src/ff.c **** 
2165:../fatfs/src/ff.c **** 
2166:../fatfs/src/ff.c **** 
2167:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2168:../fatfs/src/ff.c **** /* Check if the file/dir object is valid or not                          */
2169:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2170:../fatfs/src/ff.c **** 
2171:../fatfs/src/ff.c **** static
2172:../fatfs/src/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2173:../fatfs/src/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
2174:../fatfs/src/ff.c **** 	WORD id			/* Member id of the target object to be checked */
2175:../fatfs/src/ff.c **** )
2176:../fatfs/src/ff.c **** {
 899              		.loc 1 2176 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL122:
 904 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 56


 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 3, -8
 907              		.cfi_offset 14, -4
2177:../fatfs/src/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 908              		.loc 1 2177 0
 909 0002 68B1     		cbz	r0, .L103
 910              		.loc 1 2177 0 is_stmt 0 discriminator 1
 911 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 912 0006 5BB1     		cbz	r3, .L103
 913 0008 C388     		ldrh	r3, [r0, #6]
 914 000a 8B42     		cmp	r3, r1
 915 000c 08D1     		bne	.L103
 916              	.LVL123:
 917              	.LBB9:
 918              	.LBB10:
2178:../fatfs/src/ff.c **** 		return FR_INVALID_OBJECT;
2179:../fatfs/src/ff.c **** 
2180:../fatfs/src/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
2181:../fatfs/src/ff.c **** 
2182:../fatfs/src/ff.c **** 	if (disk_status(fs->drv) & STA_NOINIT)
 919              		.loc 1 2182 0 is_stmt 1
 920 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 921              	.LVL124:
 922 0010 FFF7FEFF 		bl	disk_status
 923              	.LVL125:
 924 0014 10F0010F 		tst	r0, #1
2183:../fatfs/src/ff.c **** 		return FR_NOT_READY;
 925              		.loc 1 2183 0
 926 0018 0CBF     		ite	eq
 927 001a 0020     		moveq	r0, #0
 928 001c 0320     		movne	r0, #3
 929 001e 08BD     		pop	{r3, pc}
 930              	.LVL126:
 931              	.L103:
 932              	.LBE10:
 933              	.LBE9:
2178:../fatfs/src/ff.c **** 		return FR_INVALID_OBJECT;
 934              		.loc 1 2178 0
 935 0020 0920     		movs	r0, #9
 936              	.LVL127:
2184:../fatfs/src/ff.c **** 
2185:../fatfs/src/ff.c **** 	return FR_OK;
2186:../fatfs/src/ff.c **** }
 937              		.loc 1 2186 0
 938 0022 08BD     		pop	{r3, pc}
 939              		.cfi_endproc
 940              	.LFE22:
 942              		.section	.text.sync,"ax",%progbits
 943              		.align	1
 944              		.thumb
 945              		.thumb_func
 947              	sync:
 948              	.LFB5:
 764:../fatfs/src/ff.c **** {
 949              		.loc 1 764 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 57


 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              	.LVL128:
 954 0000 38B5     		push	{r3, r4, r5, lr}
 955              		.cfi_def_cfa_offset 16
 956              		.cfi_offset 3, -16
 957              		.cfi_offset 4, -12
 958              		.cfi_offset 5, -8
 959              		.cfi_offset 14, -4
 768:../fatfs/src/ff.c **** 	res = move_window(fs, 0);
 960              		.loc 1 768 0
 961 0002 0021     		movs	r1, #0
 764:../fatfs/src/ff.c **** {
 962              		.loc 1 764 0
 963 0004 0446     		mov	r4, r0
 768:../fatfs/src/ff.c **** 	res = move_window(fs, 0);
 964              		.loc 1 768 0
 965 0006 FFF7FEFF 		bl	move_window
 966              	.LVL129:
 967 000a 0346     		mov	r3, r0
 968              	.LVL130:
 769:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 969              		.loc 1 769 0
 970 000c 002B     		cmp	r3, #0
 971 000e 50D1     		bne	.L106
 771:../fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 972              		.loc 1 771 0
 973 0010 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 974 0012 032A     		cmp	r2, #3
 975 0014 45D1     		bne	.L107
 771:../fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 976              		.loc 1 771 0 is_stmt 0 discriminator 1
 977 0016 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 978 0018 002A     		cmp	r2, #0
 979 001a 42D0     		beq	.L107
 772:../fatfs/src/ff.c **** 			fs->winsect = 0;
 980              		.loc 1 772 0 is_stmt 1
 981 001c 2363     		str	r3, [r4, #48]
 774:../fatfs/src/ff.c **** 			mem_set(fs->win, 0, 512);
 982              		.loc 1 774 0
 983 001e 04F13401 		add	r1, r4, #52
 984              	.LVL131:
 985              	.L108:
 986              	.LBB13:
 987              	.LBB14:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 988              		.loc 1 550 0
 989 0022 0025     		movs	r5, #0
 990 0024 CD54     		strb	r5, [r1, r3]
 991 0026 0133     		adds	r3, r3, #1
 992              	.LVL132:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 993              		.loc 1 549 0
 994 0028 B3F5007F 		cmp	r3, #512
 995 002c F9D1     		bne	.L108
 996              	.LBE14:
 997              	.LBE13:
 775:../fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 58


 998              		.loc 1 775 0
 999 002e 5523     		movs	r3, #85
 1000              	.LVL133:
 1001 0030 84F83232 		strb	r3, [r4, #562]
 1002 0034 AA23     		movs	r3, #170
 1003 0036 84F83332 		strb	r3, [r4, #563]
 776:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1004              		.loc 1 776 0
 1005 003a 5223     		movs	r3, #82
 1006 003c 84F83430 		strb	r3, [r4, #52]
 1007 0040 84F83530 		strb	r3, [r4, #53]
 1008 0044 6123     		movs	r3, #97
 1009 0046 84F83630 		strb	r3, [r4, #54]
 777:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1010              		.loc 1 777 0
 1011 004a 84F81B32 		strb	r3, [r4, #539]
 778:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1012              		.loc 1 778 0
 1013 004e 2369     		ldr	r3, [r4, #16]
 776:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1014              		.loc 1 776 0
 1015 0050 4122     		movs	r2, #65
 1016 0052 84F83720 		strb	r2, [r4, #55]
 777:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1017              		.loc 1 777 0
 1018 0056 84F81A22 		strb	r2, [r4, #538]
 778:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1019              		.loc 1 778 0
 1020 005a C3F30722 		ubfx	r2, r3, #8, #8
 1021 005e 84F81C32 		strb	r3, [r4, #540]
 1022 0062 84F81D22 		strb	r2, [r4, #541]
 1023 0066 1A0C     		lsrs	r2, r3, #16
 1024 0068 1B0E     		lsrs	r3, r3, #24
 1025 006a 84F81F32 		strb	r3, [r4, #543]
 779:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1026              		.loc 1 779 0
 1027 006e E368     		ldr	r3, [r4, #12]
 778:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1028              		.loc 1 778 0
 1029 0070 84F81E22 		strb	r2, [r4, #542]
 779:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1030              		.loc 1 779 0
 1031 0074 C3F30722 		ubfx	r2, r3, #8, #8
 777:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1032              		.loc 1 777 0
 1033 0078 7220     		movs	r0, #114
 1034              	.LVL134:
 779:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1035              		.loc 1 779 0
 1036 007a 84F82032 		strb	r3, [r4, #544]
 1037 007e 84F82122 		strb	r2, [r4, #545]
 1038 0082 1A0C     		lsrs	r2, r3, #16
 1039 0084 1B0E     		lsrs	r3, r3, #24
 777:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1040              		.loc 1 777 0
 1041 0086 84F81802 		strb	r0, [r4, #536]
 1042 008a 84F81902 		strb	r0, [r4, #537]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 59


 779:../fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1043              		.loc 1 779 0
 1044 008e 84F82222 		strb	r2, [r4, #546]
 1045 0092 84F82332 		strb	r3, [r4, #547]
 781:../fatfs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 1046              		.loc 1 781 0
 1047 0096 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1048 0098 6269     		ldr	r2, [r4, #20]
 1049 009a 0123     		movs	r3, #1
 1050 009c FFF7FEFF 		bl	disk_write
 1051              	.LVL135:
 782:../fatfs/src/ff.c **** 			fs->fsi_flag = 0;
 1052              		.loc 1 782 0
 1053 00a0 6571     		strb	r5, [r4, #5]
 1054              	.LVL136:
 1055              	.L107:
 785:../fatfs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 1056              		.loc 1 785 0
 1057 00a2 0021     		movs	r1, #0
 1058 00a4 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1059 00a6 0A46     		mov	r2, r1
 1060 00a8 FFF7FEFF 		bl	disk_ioctl
 1061              	.LVL137:
 1062 00ac 0030     		adds	r0, r0, #0
 1063 00ae 18BF     		it	ne
 1064 00b0 0120     		movne	r0, #1
 1065              	.L106:
 1066              	.LVL138:
 790:../fatfs/src/ff.c **** }
 1067              		.loc 1 790 0
 1068 00b2 38BD     		pop	{r3, r4, r5, pc}
 1069              		.cfi_endproc
 1070              	.LFE5:
 1072              		.section	.text.clust2sect,"ax",%progbits
 1073              		.align	1
 1074              		.global	clust2sect
 1075              		.thumb
 1076              		.thumb_func
 1078              	clust2sect:
 1079              	.LFB6:
 805:../fatfs/src/ff.c **** {
 1080              		.loc 1 805 0
 1081              		.cfi_startproc
 1082              		@ args = 0, pretend = 0, frame = 0
 1083              		@ frame_needed = 0, uses_anonymous_args = 0
 1084              		@ link register save eliminated.
 1085              	.LVL139:
 807:../fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1086              		.loc 1 807 0
 1087 0000 C369     		ldr	r3, [r0, #28]
 806:../fatfs/src/ff.c **** 	clst -= 2;
 1088              		.loc 1 806 0
 1089 0002 0239     		subs	r1, r1, #2
 1090              	.LVL140:
 807:../fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1091              		.loc 1 807 0
 1092 0004 023B     		subs	r3, r3, #2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 60


 1093 0006 9942     		cmp	r1, r3
 808:../fatfs/src/ff.c **** 	return clst * fs->csize + fs->database;
 1094              		.loc 1 808 0
 1095 0008 3DBF     		ittte	cc
 1096 000a 8278     		ldrbcc	r2, [r0, #2]	@ zero_extendqisi2
 1097 000c C36A     		ldrcc	r3, [r0, #44]
 1098 000e 02FB0130 		mlacc	r0, r2, r1, r3
 1099              	.LVL141:
 807:../fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 1100              		.loc 1 807 0
 1101 0012 0020     		movcs	r0, #0
 809:../fatfs/src/ff.c **** }
 1102              		.loc 1 809 0
 1103 0014 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE6:
 1107              		.section	.text.get_fat,"ax",%progbits
 1108              		.align	1
 1109              		.global	get_fat
 1110              		.thumb
 1111              		.thumb_func
 1113              	get_fat:
 1114              	.LFB7:
 823:../fatfs/src/ff.c **** {
 1115              		.loc 1 823 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              	.LVL142:
 828:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1120              		.loc 1 828 0
 1121 0000 0129     		cmp	r1, #1
 823:../fatfs/src/ff.c **** {
 1122              		.loc 1 823 0
 1123 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1124              		.cfi_def_cfa_offset 24
 1125              		.cfi_offset 3, -24
 1126              		.cfi_offset 4, -20
 1127              		.cfi_offset 5, -16
 1128              		.cfi_offset 6, -12
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 823:../fatfs/src/ff.c **** {
 1131              		.loc 1 823 0
 1132 0004 0446     		mov	r4, r0
 1133 0006 0D46     		mov	r5, r1
 828:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1134              		.loc 1 828 0
 1135 0008 61D9     		bls	.L126
 828:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 1136              		.loc 1 828 0 is_stmt 0 discriminator 1
 1137 000a C369     		ldr	r3, [r0, #28]
 1138 000c 9942     		cmp	r1, r3
 1139 000e 5ED2     		bcs	.L126
 1140              	.LVL143:
 1141              	.LBB17:
 1142              	.LBB18:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 61


 831:../fatfs/src/ff.c **** 	switch (fs->fs_type) {
 1143              		.loc 1 831 0 is_stmt 1
 1144 0010 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1145 0012 022B     		cmp	r3, #2
 1146 0014 2AD0     		beq	.L119
 1147 0016 032B     		cmp	r3, #3
 1148 0018 3AD0     		beq	.L120
 1149 001a 012B     		cmp	r3, #1
 1150 001c 54D1     		bne	.L128
 833:../fatfs/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 1151              		.loc 1 833 0
 1152 001e 8EB2     		uxth	r6, r1
 1153              	.LVL144:
 1154 0020 06EB5606 		add	r6, r6, r6, lsr #1
 834:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1155              		.loc 1 834 0
 1156 0024 416A     		ldr	r1, [r0, #36]
 1157              	.LVL145:
 833:../fatfs/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 1158              		.loc 1 833 0
 1159 0026 B6B2     		uxth	r6, r6
 1160              	.LVL146:
 834:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1161              		.loc 1 834 0
 1162 0028 01EB5621 		add	r1, r1, r6, lsr #9
 1163 002c FFF7FEFF 		bl	move_window
 1164              	.LVL147:
 1165 0030 0028     		cmp	r0, #0
 1166 0032 49D1     		bne	.L128
 835:../fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1167              		.loc 1 835 0
 1168 0034 C6F30803 		ubfx	r3, r6, #0, #9
 836:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1169              		.loc 1 836 0
 1170 0038 616A     		ldr	r1, [r4, #36]
 835:../fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1171              		.loc 1 835 0
 1172 003a 0136     		adds	r6, r6, #1
 1173              	.LVL148:
 1174 003c B6B2     		uxth	r6, r6
 1175              	.LVL149:
 1176 003e 2344     		add	r3, r3, r4
 836:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1177              		.loc 1 836 0
 1178 0040 2046     		mov	r0, r4
 1179 0042 01EB5621 		add	r1, r1, r6, lsr #9
 835:../fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 1180              		.loc 1 835 0
 1181 0046 93F83470 		ldrb	r7, [r3, #52]	@ zero_extendqisi2
 1182              	.LVL150:
 836:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 1183              		.loc 1 836 0
 1184 004a FFF7FEFF 		bl	move_window
 1185              	.LVL151:
 1186 004e 0028     		cmp	r0, #0
 1187 0050 3AD1     		bne	.L128
 837:../fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 62


 1188              		.loc 1 837 0
 1189 0052 C6F30806 		ubfx	r6, r6, #0, #9
 1190              	.LVL152:
 1191 0056 3444     		add	r4, r4, r6
 1192              	.LVL153:
 1193 0058 94F83400 		ldrb	r0, [r4, #52]	@ zero_extendqisi2
 838:../fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1194              		.loc 1 838 0
 1195 005c EB07     		lsls	r3, r5, #31
 837:../fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 1196              		.loc 1 837 0
 1197 005e 47EA0020 		orr	r0, r7, r0, lsl #8
 1198              	.LVL154:
 838:../fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 1199              		.loc 1 838 0
 1200 0062 4CBF     		ite	mi
 1201 0064 0009     		lsrmi	r0, r0, #4
 1202              	.LVL155:
 1203 0066 C0F30B00 		ubfxpl	r0, r0, #0, #12
 1204 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1205              	.LVL156:
 1206              	.L119:
 841:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 1207              		.loc 1 841 0
 1208 006c 416A     		ldr	r1, [r0, #36]
 1209              	.LVL157:
 1210 006e 01EB1521 		add	r1, r1, r5, lsr #8
 1211 0072 FFF7FEFF 		bl	move_window
 1212              	.LVL158:
 1213 0076 38BB     		cbnz	r0, .L128
 842:../fatfs/src/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 1214              		.loc 1 842 0
 1215 0078 6D00     		lsls	r5, r5, #1
 1216              	.LVL159:
 1217 007a 05F4FF75 		and	r5, r5, #510
 1218              	.LVL160:
 843:../fatfs/src/ff.c **** 		return LD_WORD(p);
 1219              		.loc 1 843 0
 1220 007e 6319     		adds	r3, r4, r5
 1221 0080 2C44     		add	r4, r4, r5
 1222              	.LVL161:
 1223 0082 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1224 0086 94F83500 		ldrb	r0, [r4, #53]	@ zero_extendqisi2
 1225 008a 43EA0020 		orr	r0, r3, r0, lsl #8
 1226 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1227              	.LVL162:
 1228              	.L120:
 846:../fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 1229              		.loc 1 846 0
 1230 0090 416A     		ldr	r1, [r0, #36]
 1231              	.LVL163:
 1232 0092 01EBD511 		add	r1, r1, r5, lsr #7
 1233 0096 FFF7FEFF 		bl	move_window
 1234              	.LVL164:
 1235 009a A8B9     		cbnz	r0, .L128
 847:../fatfs/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 1236              		.loc 1 847 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 63


 1237 009c AD00     		lsls	r5, r5, #2
 1238              	.LVL165:
 1239 009e 05F4FE75 		and	r5, r5, #508
 1240 00a2 6319     		adds	r3, r4, r5
 1241              	.LVL166:
 848:../fatfs/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1242              		.loc 1 848 0
 1243 00a4 93F83700 		ldrb	r0, [r3, #55]	@ zero_extendqisi2
 1244 00a8 93F83620 		ldrb	r2, [r3, #54]	@ zero_extendqisi2
 847:../fatfs/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 1245              		.loc 1 847 0
 1246 00ac 3433     		adds	r3, r3, #52
 1247              	.LVL167:
 848:../fatfs/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 1248              		.loc 1 848 0
 1249 00ae 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1250              	.LVL168:
 1251 00b0 0006     		lsls	r0, r0, #24
 1252 00b2 40EA0240 		orr	r0, r0, r2, lsl #16
 1253 00b6 2C44     		add	r4, r4, r5
 1254              	.LVL169:
 1255 00b8 40EA0320 		orr	r0, r0, r3, lsl #8
 1256 00bc 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1257 00c0 1843     		orrs	r0, r0, r3
 1258 00c2 20F07040 		bic	r0, r0, #-268435456
 1259 00c6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1260              	.LVL170:
 1261              	.L128:
 851:../fatfs/src/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 1262              		.loc 1 851 0
 1263 00c8 4FF0FF30 		mov	r0, #-1
 1264 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1265              	.LVL171:
 1266              	.L126:
 1267              	.LBE18:
 1268              	.LBE17:
 829:../fatfs/src/ff.c **** 		return 1;
 1269              		.loc 1 829 0
 1270 00ce 0120     		movs	r0, #1
 1271              	.LVL172:
 852:../fatfs/src/ff.c **** }
 1272              		.loc 1 852 0
 1273 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1274              		.cfi_endproc
 1275              	.LFE7:
 1277              		.section	.text.dir_sdi,"ax",%progbits
 1278              		.align	1
 1279              		.thumb
 1280              		.thumb_func
 1282              	dir_sdi:
 1283              	.LFB11:
1069:../fatfs/src/ff.c **** {
 1284              		.loc 1 1069 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              	.LVL173:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 64


 1289 0000 70B5     		push	{r4, r5, r6, lr}
 1290              		.cfi_def_cfa_offset 16
 1291              		.cfi_offset 4, -16
 1292              		.cfi_offset 5, -12
 1293              		.cfi_offset 6, -8
 1294              		.cfi_offset 14, -4
1069:../fatfs/src/ff.c **** {
 1295              		.loc 1 1069 0
 1296 0002 0446     		mov	r4, r0
 1297 0004 0D46     		mov	r5, r1
1074:../fatfs/src/ff.c **** 	dj->index = idx;
 1298              		.loc 1 1074 0
 1299 0006 E180     		strh	r1, [r4, #6]	@ movhi
1075:../fatfs/src/ff.c **** 	clst = dj->sclust;
 1300              		.loc 1 1075 0
 1301 0008 8168     		ldr	r1, [r0, #8]
 1302              	.LVL174:
1076:../fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1303              		.loc 1 1076 0
 1304 000a 0129     		cmp	r1, #1
 1305 000c 01D1     		bne	.L130
 1306              	.LVL175:
 1307              	.L132:
1077:../fatfs/src/ff.c **** 		return FR_INT_ERR;
 1308              		.loc 1 1077 0
 1309 000e 0220     		movs	r0, #2
 1310 0010 70BD     		pop	{r4, r5, r6, pc}
 1311              	.LVL176:
 1312              	.L130:
1076:../fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 1313              		.loc 1 1076 0 discriminator 1
 1314 0012 0368     		ldr	r3, [r0]
 1315 0014 DA69     		ldr	r2, [r3, #28]
 1316 0016 9142     		cmp	r1, r2
 1317 0018 F9D2     		bcs	.L132
1078:../fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1318              		.loc 1 1078 0
 1319 001a 71B9     		cbnz	r1, .L133
1078:../fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1320              		.loc 1 1078 0 is_stmt 0 discriminator 1
 1321 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1322 001e 032A     		cmp	r2, #3
 1323 0020 01D1     		bne	.L134
1079:../fatfs/src/ff.c **** 		clst = dj->fs->dirbase;
 1324              		.loc 1 1079 0 is_stmt 1
 1325 0022 996A     		ldr	r1, [r3, #40]
 1326              	.LVL177:
1081:../fatfs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 1327              		.loc 1 1081 0
 1328 0024 49B9     		cbnz	r1, .L133
 1329              	.L134:
 1330              	.LVL178:
1082:../fatfs/src/ff.c **** 		dj->clust = clst;
 1331              		.loc 1 1082 0
 1332 0026 0022     		movs	r2, #0
 1333 0028 E260     		str	r2, [r4, #12]
1083:../fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 65


 1334              		.loc 1 1083 0
 1335 002a 1A89     		ldrh	r2, [r3, #8]
 1336 002c AA42     		cmp	r2, r5
 1337 002e EED9     		bls	.L132
1085:../fatfs/src/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 1338              		.loc 1 1085 0
 1339 0030 9B6A     		ldr	r3, [r3, #40]
 1340 0032 03EB1513 		add	r3, r3, r5, lsr #4
 1341 0036 2361     		str	r3, [r4, #16]
 1342 0038 19E0     		b	.L135
 1343              	.LVL179:
 1344              	.L133:
1088:../fatfs/src/ff.c **** 		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
 1345              		.loc 1 1088 0
 1346 003a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 1347 003c 3601     		lsls	r6, r6, #4
 1348              	.LVL180:
 1349              	.L136:
1089:../fatfs/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 1350              		.loc 1 1089 0 discriminator 1
 1351 003e B542     		cmp	r5, r6
 1352 0040 0ED3     		bcc	.L139
1090:../fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1353              		.loc 1 1090 0
 1354 0042 2068     		ldr	r0, [r4]
 1355 0044 FFF7FEFF 		bl	get_fat
 1356              	.LVL181:
1091:../fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1357              		.loc 1 1091 0
 1358 0048 431C     		adds	r3, r0, #1
1090:../fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 1359              		.loc 1 1090 0
 1360 004a 0146     		mov	r1, r0
 1361              	.LVL182:
1091:../fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1362              		.loc 1 1091 0
 1363 004c 18D0     		beq	.L138
1092:../fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1364              		.loc 1 1092 0
 1365 004e 0128     		cmp	r0, #1
 1366 0050 DDD9     		bls	.L132
1092:../fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 1367              		.loc 1 1092 0 is_stmt 0 discriminator 1
 1368 0052 2368     		ldr	r3, [r4]
 1369 0054 DB69     		ldr	r3, [r3, #28]
 1370 0056 9842     		cmp	r0, r3
 1371 0058 D9D2     		bcs	.L132
1094:../fatfs/src/ff.c **** 			idx -= ic;
 1372              		.loc 1 1094 0 is_stmt 1
 1373 005a AD1B     		subs	r5, r5, r6
 1374              	.LVL183:
 1375 005c ADB2     		uxth	r5, r5
 1376              	.LVL184:
 1377 005e EEE7     		b	.L136
 1378              	.LVL185:
 1379              	.L139:
1096:../fatfs/src/ff.c **** 		dj->clust = clst;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 66


 1380              		.loc 1 1096 0
 1381 0060 E160     		str	r1, [r4, #12]
1097:../fatfs/src/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
 1382              		.loc 1 1097 0
 1383 0062 2068     		ldr	r0, [r4]
 1384 0064 FFF7FEFF 		bl	clust2sect
 1385              	.LVL186:
 1386 0068 00EB1510 		add	r0, r0, r5, lsr #4
 1387 006c 2061     		str	r0, [r4, #16]
 1388              	.LVL187:
 1389              	.L135:
1100:../fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
 1390              		.loc 1 1100 0
 1391 006e 2368     		ldr	r3, [r4]
 1392 0070 05F00F05 		and	r5, r5, #15
 1393              	.LVL188:
 1394 0074 03EB4513 		add	r3, r3, r5, lsl #5
 1395 0078 3433     		adds	r3, r3, #52
 1396 007a 6361     		str	r3, [r4, #20]
1102:../fatfs/src/ff.c **** 	return FR_OK;	/* Seek succeeded */
 1397              		.loc 1 1102 0
 1398 007c 0020     		movs	r0, #0
 1399 007e 70BD     		pop	{r4, r5, r6, pc}
 1400              	.LVL189:
 1401              	.L138:
1091:../fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1402              		.loc 1 1091 0
 1403 0080 0120     		movs	r0, #1
 1404              	.LVL190:
1103:../fatfs/src/ff.c **** }
 1405              		.loc 1 1103 0
 1406 0082 70BD     		pop	{r4, r5, r6, pc}
 1407              		.cfi_endproc
 1408              	.LFE11:
 1410              		.section	.text.dir_remove,"ax",%progbits
 1411              		.align	1
 1412              		.thumb
 1413              		.thumb_func
 1415              	dir_remove:
 1416              	.LFB16:
1581:../fatfs/src/ff.c **** {
 1417              		.loc 1 1581 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 0
 1420              		@ frame_needed = 0, uses_anonymous_args = 0
 1421              	.LVL191:
 1422 0000 10B5     		push	{r4, lr}
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 4, -8
 1425              		.cfi_offset 14, -4
1601:../fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
 1426              		.loc 1 1601 0
 1427 0002 C188     		ldrh	r1, [r0, #6]
1581:../fatfs/src/ff.c **** {
 1428              		.loc 1 1581 0
 1429 0004 0446     		mov	r4, r0
1601:../fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 67


 1430              		.loc 1 1601 0
 1431 0006 FFF7FEFF 		bl	dir_sdi
 1432              	.LVL192:
1602:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 1433              		.loc 1 1602 0
 1434 000a 50B9     		cbnz	r0, .L141
 1435              	.LVL193:
 1436              	.LBB21:
 1437              	.LBB22:
1603:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 1438              		.loc 1 1603 0
 1439 000c 2068     		ldr	r0, [r4]
 1440              	.LVL194:
 1441 000e 2169     		ldr	r1, [r4, #16]
 1442 0010 FFF7FEFF 		bl	move_window
 1443              	.LVL195:
1604:../fatfs/src/ff.c **** 		if (res == FR_OK) {
 1444              		.loc 1 1604 0
 1445 0014 28B9     		cbnz	r0, .L141
1605:../fatfs/src/ff.c **** 			*dj->dir = DDE;			/* Mark the entry "deleted" */
 1446              		.loc 1 1605 0
 1447 0016 6369     		ldr	r3, [r4, #20]
 1448 0018 E522     		movs	r2, #229
 1449 001a 1A70     		strb	r2, [r3]
1606:../fatfs/src/ff.c **** 			dj->fs->wflag = 1;
 1450              		.loc 1 1606 0
 1451 001c 2368     		ldr	r3, [r4]
 1452 001e 0122     		movs	r2, #1
 1453 0020 1A71     		strb	r2, [r3, #4]
 1454              	.LVL196:
 1455              	.L141:
 1456              	.LBE22:
 1457              	.LBE21:
1612:../fatfs/src/ff.c **** }
 1458              		.loc 1 1612 0
 1459 0022 10BD     		pop	{r4, pc}
 1460              		.cfi_endproc
 1461              	.LFE16:
 1463              		.section	.text.put_fat,"ax",%progbits
 1464              		.align	1
 1465              		.global	put_fat
 1466              		.thumb
 1467              		.thumb_func
 1469              	put_fat:
 1470              	.LFB8:
 867:../fatfs/src/ff.c **** {
 1471              		.loc 1 867 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 0
 1474              		@ frame_needed = 0, uses_anonymous_args = 0
 1475              	.LVL197:
 873:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1476              		.loc 1 873 0
 1477 0000 0129     		cmp	r1, #1
 867:../fatfs/src/ff.c **** {
 1478              		.loc 1 867 0
 1479 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 68


 1480              		.cfi_def_cfa_offset 24
 1481              		.cfi_offset 3, -24
 1482              		.cfi_offset 4, -20
 1483              		.cfi_offset 5, -16
 1484              		.cfi_offset 6, -12
 1485              		.cfi_offset 7, -8
 1486              		.cfi_offset 14, -4
 867:../fatfs/src/ff.c **** {
 1487              		.loc 1 867 0
 1488 0004 0446     		mov	r4, r0
 1489 0006 0D46     		mov	r5, r1
 1490 0008 1646     		mov	r6, r2
 873:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1491              		.loc 1 873 0
 1492 000a 73D9     		bls	.L154
 873:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1493              		.loc 1 873 0 is_stmt 0 discriminator 1
 1494 000c C369     		ldr	r3, [r0, #28]
 1495 000e 9942     		cmp	r1, r3
 1496 0010 70D2     		bcs	.L154
 1497              	.LVL198:
 1498              	.LBB25:
 1499              	.LBB26:
 877:../fatfs/src/ff.c **** 		switch (fs->fs_type) {
 1500              		.loc 1 877 0 is_stmt 1
 1501 0012 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1502 0014 022B     		cmp	r3, #2
 1503 0016 3BD0     		beq	.L146
 1504 0018 032B     		cmp	r3, #3
 1505 001a 4AD0     		beq	.L147
 1506 001c 012B     		cmp	r3, #1
 1507 001e 65D1     		bne	.L156
 879:../fatfs/src/ff.c **** 			bc = clst; bc += bc / 2;
 1508              		.loc 1 879 0
 1509 0020 8FB2     		uxth	r7, r1
 1510              	.LVL199:
 1511 0022 07EB5707 		add	r7, r7, r7, lsr #1
 880:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1512              		.loc 1 880 0
 1513 0026 416A     		ldr	r1, [r0, #36]
 1514              	.LVL200:
 879:../fatfs/src/ff.c **** 			bc = clst; bc += bc / 2;
 1515              		.loc 1 879 0
 1516 0028 BFB2     		uxth	r7, r7
 1517              	.LVL201:
 880:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1518              		.loc 1 880 0
 1519 002a 01EB5721 		add	r1, r1, r7, lsr #9
 1520 002e FFF7FEFF 		bl	move_window
 1521              	.LVL202:
 881:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 1522              		.loc 1 881 0
 1523 0032 0028     		cmp	r0, #0
 1524 0034 5BD1     		bne	.L145
 882:../fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1525              		.loc 1 882 0
 1526 0036 C7F30803 		ubfx	r3, r7, #0, #9
ARM GAS  /tmp/ccOwSZ6Y.s 			page 69


 1527              	.LVL203:
 883:../fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1528              		.loc 1 883 0
 1529 003a 15F00105 		ands	r5, r5, #1
 1530              	.LVL204:
 1531 003e 2344     		add	r3, r3, r4
 1532 0040 F2B2     		uxtb	r2, r6
 1533 0042 06D0     		beq	.L150
 1534 0044 93F83410 		ldrb	r1, [r3, #52]	@ zero_extendqisi2
 1535 0048 01F00F01 		and	r1, r1, #15
 1536 004c 41EA0212 		orr	r2, r1, r2, lsl #4
 1537 0050 D2B2     		uxtb	r2, r2
 1538              	.L150:
 884:../fatfs/src/ff.c **** 			bc++;
 1539              		.loc 1 884 0
 1540 0052 0137     		adds	r7, r7, #1
 1541              	.LVL205:
 886:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1542              		.loc 1 886 0
 1543 0054 616A     		ldr	r1, [r4, #36]
 883:../fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1544              		.loc 1 883 0
 1545 0056 83F83420 		strb	r2, [r3, #52]
 884:../fatfs/src/ff.c **** 			bc++;
 1546              		.loc 1 884 0
 1547 005a BFB2     		uxth	r7, r7
 1548              	.LVL206:
 885:../fatfs/src/ff.c **** 			fs->wflag = 1;
 1549              		.loc 1 885 0
 1550 005c 0123     		movs	r3, #1
 1551 005e 2371     		strb	r3, [r4, #4]
 886:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1552              		.loc 1 886 0
 1553 0060 2046     		mov	r0, r4
 1554              	.LVL207:
 1555 0062 01EB5721 		add	r1, r1, r7, lsr #9
 1556 0066 FFF7FEFF 		bl	move_window
 1557              	.LVL208:
 887:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 1558              		.loc 1 887 0
 1559 006a 0028     		cmp	r0, #0
 1560 006c 3FD1     		bne	.L145
 888:../fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1561              		.loc 1 888 0
 1562 006e C7F30807 		ubfx	r7, r7, #0, #9
 1563              	.LVL209:
 1564 0072 2744     		add	r7, r7, r4
 1565              	.LVL210:
 889:../fatfs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1566              		.loc 1 889 0
 1567 0074 15B1     		cbz	r5, .L151
 1568 0076 C6F30716 		ubfx	r6, r6, #4, #8
 1569              	.LVL211:
 1570 007a 06E0     		b	.L152
 1571              	.LVL212:
 1572              	.L151:
 1573 007c 97F83430 		ldrb	r3, [r7, #52]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 70


 1574 0080 C6F30326 		ubfx	r6, r6, #8, #4
 1575              	.LVL213:
 1576 0084 23F00F03 		bic	r3, r3, #15
 1577 0088 1E43     		orrs	r6, r6, r3
 1578              	.L152:
 1579 008a 87F83460 		strb	r6, [r7, #52]
 1580 008e 2EE0     		b	.L145
 1581              	.LVL214:
 1582              	.L146:
 893:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 1583              		.loc 1 893 0
 1584 0090 416A     		ldr	r1, [r0, #36]
 1585              	.LVL215:
 1586 0092 01EB1521 		add	r1, r1, r5, lsr #8
 1587 0096 FFF7FEFF 		bl	move_window
 1588              	.LVL216:
 894:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 1589              		.loc 1 894 0
 1590 009a 40BB     		cbnz	r0, .L145
 895:../fatfs/src/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 1591              		.loc 1 895 0
 1592 009c 6D00     		lsls	r5, r5, #1
 1593              	.LVL217:
 1594 009e 05F4FF75 		and	r5, r5, #510
 1595              	.LVL218:
 896:../fatfs/src/ff.c **** 			ST_WORD(p, (WORD)val);
 1596              		.loc 1 896 0
 1597 00a2 6319     		adds	r3, r4, r5
 1598 00a4 83F83460 		strb	r6, [r3, #52]
 1599 00a8 C6F30726 		ubfx	r6, r6, #8, #8
 1600              	.LVL219:
 1601 00ac 83F83560 		strb	r6, [r3, #53]
 1602 00b0 1DE0     		b	.L145
 1603              	.LVL220:
 1604              	.L147:
 900:../fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 1605              		.loc 1 900 0
 1606 00b2 416A     		ldr	r1, [r0, #36]
 1607              	.LVL221:
 1608 00b4 01EBD511 		add	r1, r1, r5, lsr #7
 1609 00b8 FFF7FEFF 		bl	move_window
 1610              	.LVL222:
 901:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 1611              		.loc 1 901 0
 1612 00bc B8B9     		cbnz	r0, .L145
 902:../fatfs/src/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 1613              		.loc 1 902 0
 1614 00be AD00     		lsls	r5, r5, #2
 1615              	.LVL223:
 1616 00c0 05F4FE75 		and	r5, r5, #508
 1617 00c4 6319     		adds	r3, r4, r5
 1618              	.LVL224:
 903:../fatfs/src/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 1619              		.loc 1 903 0
 1620 00c6 93F83720 		ldrb	r2, [r3, #55]	@ zero_extendqisi2
 1621 00ca 1206     		lsls	r2, r2, #24
 1622 00cc 02F07042 		and	r2, r2, #-268435456
ARM GAS  /tmp/ccOwSZ6Y.s 			page 71


 1623 00d0 1643     		orrs	r6, r6, r2
 1624              	.LVL225:
 904:../fatfs/src/ff.c **** 			ST_DWORD(p, val);
 1625              		.loc 1 904 0
 1626 00d2 C6F30722 		ubfx	r2, r6, #8, #8
 1627 00d6 83F83460 		strb	r6, [r3, #52]
 1628 00da 83F83520 		strb	r2, [r3, #53]
 1629 00de 320C     		lsrs	r2, r6, #16
 1630 00e0 360E     		lsrs	r6, r6, #24
 1631              	.LVL226:
 1632 00e2 83F83620 		strb	r2, [r3, #54]
 1633 00e6 83F83760 		strb	r6, [r3, #55]
 1634              	.LVL227:
 1635 00ea 00E0     		b	.L145
 1636              	.LVL228:
 1637              	.L156:
 908:../fatfs/src/ff.c **** 			res = FR_INT_ERR;
 1638              		.loc 1 908 0
 1639 00ec 0220     		movs	r0, #2
 1640              	.LVL229:
 1641              	.L145:
 910:../fatfs/src/ff.c **** 		fs->wflag = 1;
 1642              		.loc 1 910 0
 1643 00ee 0123     		movs	r3, #1
 1644 00f0 2371     		strb	r3, [r4, #4]
 1645 00f2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1646              	.LVL230:
 1647              	.L154:
 1648              	.LBE26:
 1649              	.LBE25:
 874:../fatfs/src/ff.c **** 		res = FR_INT_ERR;
 1650              		.loc 1 874 0
 1651 00f4 0220     		movs	r0, #2
 1652              	.LVL231:
 914:../fatfs/src/ff.c **** }
 1653              		.loc 1 914 0
 1654 00f6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1655              		.cfi_endproc
 1656              	.LFE8:
 1658              		.section	.text.create_chain,"ax",%progbits
 1659              		.align	1
 1660              		.thumb
 1661              		.thumb_func
 1663              	create_chain:
 1664              	.LFB10:
 982:../fatfs/src/ff.c **** {
 1665              		.loc 1 982 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              	.LVL232:
 1670 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1671              		.cfi_def_cfa_offset 24
 1672              		.cfi_offset 3, -24
 1673              		.cfi_offset 4, -20
 1674              		.cfi_offset 5, -16
 1675              		.cfi_offset 6, -12
ARM GAS  /tmp/ccOwSZ6Y.s 			page 72


 1676              		.cfi_offset 7, -8
 1677              		.cfi_offset 14, -4
 982:../fatfs/src/ff.c **** {
 1678              		.loc 1 982 0
 1679 0002 0546     		mov	r5, r0
 987:../fatfs/src/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 1680              		.loc 1 987 0
 1681 0004 0F46     		mov	r7, r1
 1682 0006 31B9     		cbnz	r1, .L158
 988:../fatfs/src/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 1683              		.loc 1 988 0
 1684 0008 C668     		ldr	r6, [r0, #12]
 1685              	.LVL233:
 989:../fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1686              		.loc 1 989 0
 1687 000a 6EB1     		cbz	r6, .L173
 989:../fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1688              		.loc 1 989 0 is_stmt 0 discriminator 2
 1689 000c C369     		ldr	r3, [r0, #28]
 1690 000e 9E42     		cmp	r6, r3
 1691 0010 28BF     		it	cs
 1692 0012 0126     		movcs	r6, #1
 1693              	.LVL234:
 1694 0014 09E0     		b	.L159
 1695              	.LVL235:
 1696              	.L158:
 992:../fatfs/src/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 1697              		.loc 1 992 0 is_stmt 1
 1698 0016 FFF7FEFF 		bl	get_fat
 1699              	.LVL236:
 993:../fatfs/src/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 1700              		.loc 1 993 0
 1701 001a 0128     		cmp	r0, #1
 1702 001c 3BD9     		bls	.L186
 994:../fatfs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1703              		.loc 1 994 0
 1704 001e EB69     		ldr	r3, [r5, #28]
 1705 0020 9842     		cmp	r0, r3
 1706 0022 39D3     		bcc	.L161
 1707 0024 3E46     		mov	r6, r7
 1708 0026 00E0     		b	.L159
 1709              	.LVL237:
 1710              	.L173:
 989:../fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1711              		.loc 1 989 0
 1712 0028 0126     		movs	r6, #1
 1713              	.LVL238:
 1714              	.L159:
 1715 002a 3446     		mov	r4, r6
 1716              	.LVL239:
 1717              	.L167:
1001:../fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 1718              		.loc 1 1001 0
 1719 002c EB69     		ldr	r3, [r5, #28]
1000:../fatfs/src/ff.c **** 		ncl++;							/* Next cluster */
 1720              		.loc 1 1000 0
 1721 002e 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 73


 1722              	.LVL240:
1001:../fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 1723              		.loc 1 1001 0
 1724 0030 9C42     		cmp	r4, r3
 1725 0032 04D3     		bcc	.L162
 1726              	.LVL241:
1003:../fatfs/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1727              		.loc 1 1003 0
 1728 0034 012E     		cmp	r6, #1
 1729 0036 01D8     		bhi	.L176
 1730              	.LVL242:
 1731              	.L166:
 1732 0038 0020     		movs	r0, #0
 1733 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1734              	.LVL243:
 1735              	.L176:
1002:../fatfs/src/ff.c **** 			ncl = 2;
 1736              		.loc 1 1002 0
 1737 003c 0224     		movs	r4, #2
 1738              	.LVL244:
 1739              	.L162:
1005:../fatfs/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 1740              		.loc 1 1005 0
 1741 003e 2846     		mov	r0, r5
 1742 0040 2146     		mov	r1, r4
 1743 0042 FFF7FEFF 		bl	get_fat
 1744              	.LVL245:
1006:../fatfs/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 1745              		.loc 1 1006 0
 1746 0046 48B1     		cbz	r0, .L163
1007:../fatfs/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1747              		.loc 1 1007 0
 1748 0048 411C     		adds	r1, r0, #1
 1749 004a 02D1     		bne	.L164
 1750              	.LVL246:
 1751              	.L172:
1023:../fatfs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 1752              		.loc 1 1023 0
 1753 004c 4FF0FF30 		mov	r0, #-1
 1754 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1755              	.LVL247:
 1756              	.L164:
1007:../fatfs/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1757              		.loc 1 1007 0 discriminator 1
 1758 0052 0128     		cmp	r0, #1
 1759 0054 1FD0     		beq	.L186
1009:../fatfs/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 1760              		.loc 1 1009 0
 1761 0056 B442     		cmp	r4, r6
 1762 0058 E8D1     		bne	.L167
 1763 005a EDE7     		b	.L166
 1764              	.L163:
1012:../fatfs/src/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 1765              		.loc 1 1012 0
 1766 005c 2846     		mov	r0, r5
 1767              	.LVL248:
 1768 005e 2146     		mov	r1, r4
ARM GAS  /tmp/ccOwSZ6Y.s 			page 74


 1769 0060 6FF07042 		mvn	r2, #-268435456
 1770 0064 FFF7FEFF 		bl	put_fat
 1771              	.LVL249:
1013:../fatfs/src/ff.c **** 	if (res == FR_OK && clst != 0) {
 1772              		.loc 1 1013 0
 1773 0068 98B9     		cbnz	r0, .L168
1013:../fatfs/src/ff.c **** 	if (res == FR_OK && clst != 0) {
 1774              		.loc 1 1013 0 is_stmt 0 discriminator 1
 1775 006a 47B9     		cbnz	r7, .L169
 1776              	.L171:
 1777              	.LVL250:
1018:../fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1778              		.loc 1 1018 0 is_stmt 1
 1779 006c 2B69     		ldr	r3, [r5, #16]
1017:../fatfs/src/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 1780              		.loc 1 1017 0
 1781 006e EC60     		str	r4, [r5, #12]
1018:../fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1782              		.loc 1 1018 0
 1783 0070 5A1C     		adds	r2, r3, #1
 1784 0072 0CD0     		beq	.L187
1019:../fatfs/src/ff.c **** 			fs->free_clust--;
 1785              		.loc 1 1019 0
 1786 0074 013B     		subs	r3, r3, #1
 1787 0076 2B61     		str	r3, [r5, #16]
1020:../fatfs/src/ff.c **** 			fs->fsi_flag = 1;
 1788              		.loc 1 1020 0
 1789 0078 0123     		movs	r3, #1
 1790 007a 6B71     		strb	r3, [r5, #5]
 1791 007c 07E0     		b	.L187
 1792              	.LVL251:
 1793              	.L169:
1014:../fatfs/src/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1794              		.loc 1 1014 0
 1795 007e 2846     		mov	r0, r5
 1796              	.LVL252:
 1797 0080 3946     		mov	r1, r7
 1798 0082 2246     		mov	r2, r4
 1799 0084 FFF7FEFF 		bl	put_fat
 1800              	.LVL253:
1016:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 1801              		.loc 1 1016 0
 1802 0088 0028     		cmp	r0, #0
 1803 008a EFD0     		beq	.L171
 1804 008c 01E0     		b	.L168
 1805              	.LVL254:
 1806              	.L187:
1020:../fatfs/src/ff.c **** 			fs->fsi_flag = 1;
 1807              		.loc 1 1020 0
 1808 008e 2046     		mov	r0, r4
 1809 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1810              	.LVL255:
 1811              	.L168:
1023:../fatfs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 1812              		.loc 1 1023 0
 1813 0092 0128     		cmp	r0, #1
 1814 0094 DAD0     		beq	.L172
ARM GAS  /tmp/ccOwSZ6Y.s 			page 75


 1815              	.LVL256:
 1816              	.L186:
 1817 0096 0120     		movs	r0, #1
 1818              	.L161:
1027:../fatfs/src/ff.c **** }
 1819              		.loc 1 1027 0
 1820 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1821              		.cfi_endproc
 1822              	.LFE10:
 1824              		.section	.text.dir_next,"ax",%progbits
 1825              		.align	1
 1826              		.thumb
 1827              		.thumb_func
 1829              	dir_next:
 1830              	.LFB12:
1117:../fatfs/src/ff.c **** {
 1831              		.loc 1 1117 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              	.LVL257:
 1836 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1837              		.cfi_def_cfa_offset 32
 1838              		.cfi_offset 3, -32
 1839              		.cfi_offset 4, -28
 1840              		.cfi_offset 5, -24
 1841              		.cfi_offset 6, -20
 1842              		.cfi_offset 7, -16
 1843              		.cfi_offset 8, -12
 1844              		.cfi_offset 9, -8
 1845              		.cfi_offset 14, -4
1123:../fatfs/src/ff.c **** 	i = dj->index + 1;
 1846              		.loc 1 1123 0
 1847 0004 C688     		ldrh	r6, [r0, #6]
1117:../fatfs/src/ff.c **** {
 1848              		.loc 1 1117 0
 1849 0006 0446     		mov	r4, r0
1123:../fatfs/src/ff.c **** 	i = dj->index + 1;
 1850              		.loc 1 1123 0
 1851 0008 0136     		adds	r6, r6, #1
 1852 000a B6B2     		uxth	r6, r6
1117:../fatfs/src/ff.c **** {
 1853              		.loc 1 1117 0
 1854 000c 0F46     		mov	r7, r1
 1855              	.LVL258:
1124:../fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 1856              		.loc 1 1124 0
 1857 000e 16B9     		cbnz	r6, .L189
 1858              	.LVL259:
 1859              	.L191:
1125:../fatfs/src/ff.c **** 		return FR_NO_FILE;
 1860              		.loc 1 1125 0
 1861 0010 0420     		movs	r0, #4
 1862 0012 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1863              	.LVL260:
 1864              	.L189:
1124:../fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 76


 1865              		.loc 1 1124 0 discriminator 1
 1866 0016 0369     		ldr	r3, [r0, #16]
 1867 0018 002B     		cmp	r3, #0
 1868 001a F9D0     		beq	.L191
1127:../fatfs/src/ff.c **** 	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
 1869              		.loc 1 1127 0
 1870 001c 16F00F08 		ands	r8, r6, #15
 1871 0020 5CD1     		bne	.L193
1130:../fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 1872              		.loc 1 1130 0
 1873 0022 C168     		ldr	r1, [r0, #12]
 1874              	.LVL261:
1128:../fatfs/src/ff.c **** 		dj->sect++;					/* Next sector */
 1875              		.loc 1 1128 0
 1876 0024 0133     		adds	r3, r3, #1
 1877 0026 0361     		str	r3, [r0, #16]
 1878 0028 0068     		ldr	r0, [r0]
 1879              	.LVL262:
1130:../fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 1880              		.loc 1 1130 0
 1881 002a 19B9     		cbnz	r1, .L194
1131:../fatfs/src/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 1882              		.loc 1 1131 0
 1883 002c 0389     		ldrh	r3, [r0, #8]
 1884 002e B342     		cmp	r3, r6
 1885 0030 EED9     		bls	.L191
 1886 0032 53E0     		b	.L193
 1887              	.L194:
1135:../fatfs/src/ff.c **** 			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 1888              		.loc 1 1135 0
 1889 0034 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 1890 0036 013A     		subs	r2, r2, #1
 1891 0038 12EA1612 		ands	r2, r2, r6, lsr #4
 1892 003c 4ED1     		bne	.L193
1136:../fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 1893              		.loc 1 1136 0
 1894 003e FFF7FEFF 		bl	get_fat
 1895              	.LVL263:
1137:../fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 1896              		.loc 1 1137 0
 1897 0042 0128     		cmp	r0, #1
1136:../fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 1898              		.loc 1 1136 0
 1899 0044 0546     		mov	r5, r0
 1900              	.LVL264:
1137:../fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 1901              		.loc 1 1137 0
 1902 0046 02D8     		bhi	.L196
 1903              	.L199:
 1904 0048 0220     		movs	r0, #2
 1905              	.LVL265:
 1906 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1907              	.LVL266:
 1908              	.L196:
1138:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1909              		.loc 1 1138 0
 1910 004e 421C     		adds	r2, r0, #1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 77


 1911 0050 02D1     		bne	.L197
 1912              	.LVL267:
 1913              	.L200:
 1914 0052 0120     		movs	r0, #1
 1915 0054 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1916              	.LVL268:
 1917              	.L197:
1139:../fatfs/src/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 1918              		.loc 1 1139 0
 1919 0058 2068     		ldr	r0, [r4]
 1920              	.LVL269:
 1921 005a C369     		ldr	r3, [r0, #28]
 1922 005c 9D42     		cmp	r5, r3
 1923 005e 37D3     		bcc	.L198
 1924              	.LBB30:
1142:../fatfs/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 1925              		.loc 1 1142 0
 1926 0060 002F     		cmp	r7, #0
 1927 0062 D5D0     		beq	.L191
1143:../fatfs/src/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 1928              		.loc 1 1143 0
 1929 0064 E168     		ldr	r1, [r4, #12]
 1930 0066 FFF7FEFF 		bl	create_chain
 1931              	.LVL270:
1144:../fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 1932              		.loc 1 1144 0
 1933 006a 0546     		mov	r5, r0
 1934 006c 0028     		cmp	r0, #0
 1935 006e 3ED0     		beq	.L205
1145:../fatfs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 1936              		.loc 1 1145 0
 1937 0070 0128     		cmp	r0, #1
 1938 0072 E9D0     		beq	.L199
1146:../fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1939              		.loc 1 1146 0
 1940 0074 431C     		adds	r3, r0, #1
 1941 0076 ECD0     		beq	.L200
1148:../fatfs/src/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 1942              		.loc 1 1148 0
 1943 0078 2068     		ldr	r0, [r4]
 1944              	.LVL271:
 1945 007a 0021     		movs	r1, #0
 1946 007c FFF7FEFF 		bl	move_window
 1947              	.LVL272:
 1948 0080 0028     		cmp	r0, #0
 1949 0082 E6D1     		bne	.L200
1149:../fatfs/src/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 1950              		.loc 1 1149 0
 1951 0084 2368     		ldr	r3, [r4]
 1952 0086 3433     		adds	r3, r3, #52
 1953              	.LVL273:
 1954              	.L201:
 1955              	.LBB31:
 1956              	.LBB32:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 1957              		.loc 1 550 0
 1958 0088 0027     		movs	r7, #0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 78


 1959 008a 1F54     		strb	r7, [r3, r0]
 1960 008c 0130     		adds	r0, r0, #1
 1961              	.LVL274:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 1962              		.loc 1 549 0
 1963 008e B0F5007F 		cmp	r0, #512
 1964 0092 F9D1     		bne	.L201
 1965              	.LBE32:
 1966              	.LBE31:
1150:../fatfs/src/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 1967              		.loc 1 1150 0
 1968 0094 D4F80090 		ldr	r9, [r4]
 1969 0098 2946     		mov	r1, r5
 1970 009a 4846     		mov	r0, r9
 1971              	.LVL275:
 1972 009c FFF7FEFF 		bl	clust2sect
 1973              	.LVL276:
 1974 00a0 C9F83000 		str	r0, [r9, #48]
 1975              	.LVL277:
 1976              	.L203:
1151:../fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 1977              		.loc 1 1151 0 discriminator 1
 1978 00a4 2368     		ldr	r3, [r4]
 1979 00a6 FAB2     		uxtb	r2, r7
 1980              	.LVL278:
 1981 00a8 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 1982 00aa 9142     		cmp	r1, r2
 1983 00ac 0DD9     		bls	.L218
1152:../fatfs/src/ff.c **** 						dj->fs->wflag = 1;
 1984              		.loc 1 1152 0
 1985 00ae 0122     		movs	r2, #1
 1986 00b0 1A71     		strb	r2, [r3, #4]
1153:../fatfs/src/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 1987              		.loc 1 1153 0
 1988 00b2 2068     		ldr	r0, [r4]
 1989 00b4 0021     		movs	r1, #0
 1990 00b6 FFF7FEFF 		bl	move_window
 1991              	.LVL279:
 1992 00ba 0137     		adds	r7, r7, #1
 1993              	.LVL280:
 1994 00bc 0028     		cmp	r0, #0
 1995 00be C8D1     		bne	.L200
1154:../fatfs/src/ff.c **** 						dj->fs->winsect++;
 1996              		.loc 1 1154 0
 1997 00c0 2368     		ldr	r3, [r4]
 1998 00c2 1A6B     		ldr	r2, [r3, #48]
 1999 00c4 0132     		adds	r2, r2, #1
 2000 00c6 1A63     		str	r2, [r3, #48]
 2001              	.LVL281:
 2002 00c8 ECE7     		b	.L203
 2003              	.L218:
1156:../fatfs/src/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 2004              		.loc 1 1156 0
 2005 00ca 196B     		ldr	r1, [r3, #48]
 2006 00cc 8A1A     		subs	r2, r1, r2
 2007 00ce 1A63     		str	r2, [r3, #48]
 2008              	.LVL282:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 79


 2009              	.L198:
 2010              	.LBE30:
1161:../fatfs/src/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 2011              		.loc 1 1161 0
 2012 00d0 E560     		str	r5, [r4, #12]
1162:../fatfs/src/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 2013              		.loc 1 1162 0
 2014 00d2 2068     		ldr	r0, [r4]
 2015 00d4 2946     		mov	r1, r5
 2016 00d6 FFF7FEFF 		bl	clust2sect
 2017              	.LVL283:
 2018 00da 2061     		str	r0, [r4, #16]
 2019              	.LVL284:
 2020              	.L193:
1168:../fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2021              		.loc 1 1168 0
 2022 00dc 2368     		ldr	r3, [r4]
1167:../fatfs/src/ff.c **** 	dj->index = i;
 2023              		.loc 1 1167 0
 2024 00de E680     		strh	r6, [r4, #6]	@ movhi
1168:../fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
 2025              		.loc 1 1168 0
 2026 00e0 03EB4813 		add	r3, r3, r8, lsl #5
 2027 00e4 3433     		adds	r3, r3, #52
 2028 00e6 6361     		str	r3, [r4, #20]
1170:../fatfs/src/ff.c **** 	return FR_OK;
 2029              		.loc 1 1170 0
 2030 00e8 0020     		movs	r0, #0
 2031 00ea BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2032              	.LVL285:
 2033              	.L205:
 2034              	.LBB33:
1144:../fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 2035              		.loc 1 1144 0
 2036 00ee 0720     		movs	r0, #7
 2037              	.LVL286:
 2038              	.LBE33:
1171:../fatfs/src/ff.c **** }
 2039              		.loc 1 1171 0
 2040 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2041              		.cfi_endproc
 2042              	.LFE12:
 2044              		.section	.text.follow_path,"ax",%progbits
 2045              		.align	1
 2046              		.thumb
 2047              		.thumb_func
 2049              	follow_path:
 2050              	.LFB19:
1923:../fatfs/src/ff.c **** {
 2051              		.loc 1 1923 0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 2055              	.LVL287:
 2056 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2057              		.cfi_def_cfa_offset 24
 2058              		.cfi_offset 4, -24
ARM GAS  /tmp/ccOwSZ6Y.s 			page 80


 2059              		.cfi_offset 5, -20
 2060              		.cfi_offset 6, -16
 2061              		.cfi_offset 7, -12
 2062              		.cfi_offset 8, -8
 2063              		.cfi_offset 14, -4
1929:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 2064              		.loc 1 1929 0
 2065 0004 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
1923:../fatfs/src/ff.c **** {
 2066              		.loc 1 1923 0
 2067 0006 0446     		mov	r4, r0
1929:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 2068              		.loc 1 1929 0
 2069 0008 2F2B     		cmp	r3, #47
1923:../fatfs/src/ff.c **** {
 2070              		.loc 1 1923 0
 2071 000a 0D46     		mov	r5, r1
1929:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 2072              		.loc 1 1929 0
 2073 000c 01D0     		beq	.L220
1929:../fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 2074              		.loc 1 1929 0 is_stmt 0 discriminator 1
 2075 000e 5C2B     		cmp	r3, #92
 2076 0010 02D1     		bne	.L221
 2077              	.L220:
1930:../fatfs/src/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 2078              		.loc 1 1930 0 is_stmt 1
 2079 0012 0135     		adds	r5, r5, #1
 2080              	.LVL288:
 2081 0014 0023     		movs	r3, #0
 2082 0016 01E0     		b	.L305
 2083              	.LVL289:
 2084              	.L221:
1932:../fatfs/src/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 2085              		.loc 1 1932 0
 2086 0018 0368     		ldr	r3, [r0]
 2087 001a 9B69     		ldr	r3, [r3, #24]
 2088              	.LVL290:
 2089              	.L305:
 2090 001c A360     		str	r3, [r4, #8]
1940:../fatfs/src/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 2091              		.loc 1 1940 0
 2092 001e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2093 0020 1F2B     		cmp	r3, #31
 2094 0022 35D8     		bhi	.L226
1941:../fatfs/src/ff.c **** 		res = dir_sdi(dj, 0);
 2095              		.loc 1 1941 0
 2096 0024 2046     		mov	r0, r4
 2097              	.LVL291:
 2098 0026 0021     		movs	r1, #0
 2099 0028 FFF7FEFF 		bl	dir_sdi
 2100              	.LVL292:
1942:../fatfs/src/ff.c **** 		dj->dir = 0;
 2101              		.loc 1 1942 0
 2102 002c 0023     		movs	r3, #0
 2103 002e 6361     		str	r3, [r4, #20]
 2104 0030 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 81


 2105              	.LVL293:
 2106              	.L230:
 2107              	.LBB44:
 2108              	.LBB45:
1764:../fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 2109              		.loc 1 1764 0
 2110 0034 0022     		movs	r2, #0
 2111              	.LVL294:
 2112              	.L234:
1766:../fatfs/src/ff.c **** 			c = (BYTE)p[si++];
 2113              		.loc 1 1766 0
 2114 0036 8B5C     		ldrb	r3, [r1, r2]	@ zero_extendqisi2
 2115 0038 501C     		adds	r0, r2, #1
1767:../fatfs/src/ff.c **** 			if (c != '.' || si >= 3) break;
 2116              		.loc 1 1767 0
 2117 003a 2E2B     		cmp	r3, #46
 2118 003c 85B2     		uxth	r5, r0
 2119              	.LVL295:
 2120 003e 3ED0     		beq	.L308
1770:../fatfs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 2121              		.loc 1 1770 0
 2122 0040 2F2B     		cmp	r3, #47
 2123 0042 41D1     		bne	.L309
 2124              	.L235:
1772:../fatfs/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 2125              		.loc 1 1772 0
 2126 0044 202B     		cmp	r3, #32
1771:../fatfs/src/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
 2127              		.loc 1 1771 0
 2128 0046 0D44     		add	r5, r5, r1
 2129              	.LVL296:
1772:../fatfs/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 2130              		.loc 1 1772 0
 2131 0048 8CBF     		ite	hi
 2132 004a 2023     		movhi	r3, #32
 2133 004c 2423     		movls	r3, #36
 2134              	.LVL297:
 2135              	.L307:
1823:../fatfs/src/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
 2136              		.loc 1 1823 0
 2137 004e F372     		strb	r3, [r6, #11]
 2138              	.LVL298:
 2139              	.LBE45:
 2140              	.LBE44:
 2141              	.LBB51:
 2142              	.LBB52:
1363:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
 2143              		.loc 1 1363 0
 2144 0050 2046     		mov	r0, r4
 2145 0052 0021     		movs	r1, #0
 2146              	.LVL299:
 2147 0054 FFF7FEFF 		bl	dir_sdi
 2148              	.LVL300:
 2149              	.L306:
1364:../fatfs/src/ff.c **** 	if (res != FR_OK) return res;
 2150              		.loc 1 1364 0
 2151 0058 30B9     		cbnz	r0, .L251
ARM GAS  /tmp/ccOwSZ6Y.s 			page 82


1370:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 2152              		.loc 1 1370 0
 2153 005a 2068     		ldr	r0, [r4]
 2154              	.LVL301:
 2155 005c 2169     		ldr	r1, [r4, #16]
 2156 005e FFF7FEFF 		bl	move_window
 2157              	.LVL302:
1371:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
 2158              		.loc 1 1371 0
 2159 0062 0028     		cmp	r0, #0
 2160 0064 00F09380 		beq	.L310
 2161              	.LVL303:
 2162              	.L251:
 2163              	.LBE52:
 2164              	.LBE51:
1949:../fatfs/src/ff.c **** 			ns = *(dj->fn+NS);
 2165              		.loc 1 1949 0
 2166 0068 A369     		ldr	r3, [r4, #24]
 2167 006a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 2168              	.LVL304:
1950:../fatfs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 2169              		.loc 1 1950 0
 2170 006c 0028     		cmp	r0, #0
 2171 006e 00F0A780 		beq	.L256
1951:../fatfs/src/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 2172              		.loc 1 1951 0
 2173 0072 0428     		cmp	r0, #4
 2174 0074 40F0C280 		bne	.L282
1953:../fatfs/src/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 2175              		.loc 1 1953 0
 2176 0078 13F0200F 		tst	r3, #32
 2177 007c 03F00403 		and	r3, r3, #4
 2178 0080 00F0A380 		beq	.L257
1954:../fatfs/src/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 2179              		.loc 1 1954 0
 2180 0084 0022     		movs	r2, #0
 2181 0086 A260     		str	r2, [r4, #8]
 2182              	.LVL305:
 2183 0088 6261     		str	r2, [r4, #20]
 2184              	.LVL306:
1956:../fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) continue;
 2185              		.loc 1 1956 0
 2186 008a 002B     		cmp	r3, #0
 2187 008c 40F09A80 		bne	.L259
 2188              	.LVL307:
 2189              	.L226:
 2190              	.LBB56:
 2191              	.LBB50:
1759:../fatfs/src/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 2192              		.loc 1 1759 0
 2193 0090 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2194 0092 2946     		mov	r1, r5
 2195              	.LVL308:
 2196 0094 2F2B     		cmp	r3, #47
 2197 0096 05F10105 		add	r5, r5, #1
 2198 009a F9D0     		beq	.L226
 2199 009c 5C2B     		cmp	r3, #92
ARM GAS  /tmp/ccOwSZ6Y.s 			page 83


 2200 009e F7D0     		beq	.L226
1760:../fatfs/src/ff.c **** 	sfn = dj->fn;
 2201              		.loc 1 1760 0
 2202 00a0 A669     		ldr	r6, [r4, #24]
 2203              	.LVL309:
 2204 00a2 0023     		movs	r3, #0
 2205              	.LVL310:
 2206              	.L228:
 2207              	.LBB46:
 2208              	.LBB47:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 2209              		.loc 1 550 0
 2210 00a4 2022     		movs	r2, #32
 2211 00a6 F254     		strb	r2, [r6, r3]
 2212 00a8 0133     		adds	r3, r3, #1
 2213              	.LVL311:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 2214              		.loc 1 549 0
 2215 00aa 0B2B     		cmp	r3, #11
 2216 00ac FAD1     		bne	.L228
 2217              	.LVL312:
 2218              	.LBE47:
 2219              	.LBE46:
1764:../fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 2220              		.loc 1 1764 0
 2221 00ae 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 2222              	.LVL313:
 2223 00b0 2E2B     		cmp	r3, #46
 2224 00b2 BFD0     		beq	.L230
 2225 00b4 0020     		movs	r0, #0
 2226 00b6 0346     		mov	r3, r0
 2227 00b8 0827     		movs	r7, #8
 2228 00ba 0246     		mov	r2, r0
 2229 00bc 16E0     		b	.L231
 2230              	.LVL314:
 2231              	.L308:
1767:../fatfs/src/ff.c **** 			if (c != '.' || si >= 3) break;
 2232              		.loc 1 1767 0
 2233 00be 022A     		cmp	r2, #2
 2234 00c0 62D0     		beq	.L233
 2235              	.LVL315:
1768:../fatfs/src/ff.c **** 			sfn[i++] = c;
 2236              		.loc 1 1768 0
 2237 00c2 B354     		strb	r3, [r6, r2]
 2238              	.LVL316:
 2239 00c4 0246     		mov	r2, r0
 2240              	.LVL317:
 2241 00c6 B6E7     		b	.L234
 2242              	.LVL318:
 2243              	.L309:
1770:../fatfs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 2244              		.loc 1 1770 0
 2245 00c8 5C2B     		cmp	r3, #92
 2246 00ca BBD0     		beq	.L235
 2247 00cc 202B     		cmp	r3, #32
 2248 00ce 5BD8     		bhi	.L233
 2249 00d0 B8E7     		b	.L235
ARM GAS  /tmp/ccOwSZ6Y.s 			page 84


 2250              	.LVL319:
 2251              	.L312:
1778:../fatfs/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 2252              		.loc 1 1778 0
 2253 00d2 2F2B     		cmp	r3, #47
 2254 00d4 28D0     		beq	.L267
 2255 00d6 5C2B     		cmp	r3, #92
 2256 00d8 26D0     		beq	.L267
1779:../fatfs/src/ff.c **** 		if (c == '.' || i >= ni) {
 2257              		.loc 1 1779 0
 2258 00da 2E2B     		cmp	r3, #46
 2259 00dc 0CD1     		bne	.L311
1780:../fatfs/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 2260              		.loc 1 1780 0
 2261 00de 082F     		cmp	r7, #8
 2262 00e0 52D1     		bne	.L233
 2263              	.LVL320:
1782:../fatfs/src/ff.c **** 			b <<= 2; continue;
 2264              		.loc 1 1782 0
 2265 00e2 9200     		lsls	r2, r2, #2
 2266              	.LVL321:
1781:../fatfs/src/ff.c **** 			i = 8; ni = 11;
 2267              		.loc 1 1781 0
 2268 00e4 3846     		mov	r0, r7
1782:../fatfs/src/ff.c **** 			b <<= 2; continue;
 2269              		.loc 1 1782 0
 2270 00e6 D2B2     		uxtb	r2, r2
 2271              	.LVL322:
1781:../fatfs/src/ff.c **** 			i = 8; ni = 11;
 2272              		.loc 1 1781 0
 2273 00e8 0B27     		movs	r7, #11
 2274              	.LVL323:
 2275              	.L241:
1777:../fatfs/src/ff.c **** 		c = (BYTE)p[si++];
 2276              		.loc 1 1777 0
 2277 00ea 2B46     		mov	r3, r5
 2278              	.LVL324:
 2279              	.L231:
 2280 00ec 5D1C     		adds	r5, r3, #1
 2281 00ee CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2282              	.LVL325:
 2283 00f0 ADB2     		uxth	r5, r5
 2284              	.LVL326:
1778:../fatfs/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 2285              		.loc 1 1778 0
 2286 00f2 202B     		cmp	r3, #32
 2287 00f4 EDD8     		bhi	.L312
 2288 00f6 15E0     		b	.L265
 2289              	.L311:
1779:../fatfs/src/ff.c **** 		if (c == '.' || i >= ni) {
 2290              		.loc 1 1779 0
 2291 00f8 B842     		cmp	r0, r7
 2292 00fa 45D2     		bcs	.L233
1784:../fatfs/src/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
 2293              		.loc 1 1784 0
 2294 00fc 13F0800F 		tst	r3, #128
 2295 0100 06D0     		beq	.L242
ARM GAS  /tmp/ccOwSZ6Y.s 			page 85


1787:../fatfs/src/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 2296              		.loc 1 1787 0
 2297 0102 DFF8FCC0 		ldr	ip, .L315
 2298 0106 803B     		subs	r3, r3, #128
 2299              	.LVL327:
 2300 0108 1CF80330 		ldrb	r3, [ip, r3]	@ zero_extendqisi2
 2301              	.LVL328:
1785:../fatfs/src/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 2302              		.loc 1 1785 0
 2303 010c 42F00302 		orr	r2, r2, #3
 2304              	.LVL329:
 2305              	.L242:
 2306 0110 DFF8F080 		ldr	r8, .L315+4
 2307              	.LVL330:
 2308              	.L243:
 2309              	.LBB48:
 2310              	.LBB49:
 566:../fatfs/src/ff.c **** 	while (*str && *str != chr) str++;
 2311              		.loc 1 566 0
 2312 0114 18F801CF 		ldrb	ip, [r8, #1]!	@ zero_extendqisi2
 2313              	.LVL331:
 2314 0118 BCF1000F 		cmp	ip, #0
 2315 011c 1DD0     		beq	.L244
 2316 011e 9C45     		cmp	ip, r3
 2317 0120 F8D1     		bne	.L243
 2318 0122 31E0     		b	.L233
 2319              	.LVL332:
 2320              	.L265:
 2321              	.LBE49:
 2322              	.LBE48:
1814:../fatfs/src/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 2323              		.loc 1 1814 0
 2324 0124 0423     		movs	r3, #4
 2325              	.LVL333:
 2326 0126 00E0     		b	.L238
 2327              	.LVL334:
 2328              	.L267:
 2329 0128 0023     		movs	r3, #0
 2330              	.LVL335:
 2331              	.L238:
1816:../fatfs/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 2332              		.loc 1 1816 0
 2333 012a 68B3     		cbz	r0, .L233
1817:../fatfs/src/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 2334              		.loc 1 1817 0
 2335 012c 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
 2336              	.LVL336:
1813:../fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
 2337              		.loc 1 1813 0
 2338 012e 0D44     		add	r5, r5, r1
 2339              	.LVL337:
1817:../fatfs/src/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
 2340              		.loc 1 1817 0
 2341 0130 E528     		cmp	r0, #229
 2342 0132 04BF     		itt	eq
 2343 0134 0520     		moveq	r0, #5
 2344 0136 3070     		strbeq	r0, [r6]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 86


1819:../fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
 2345              		.loc 1 1819 0
 2346 0138 082F     		cmp	r7, #8
 2347 013a 04BF     		itt	eq
 2348 013c 9200     		lsleq	r2, r2, #2
 2349              	.LVL338:
 2350 013e D2B2     		uxtbeq	r2, r2
 2351              	.LVL339:
1820:../fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 2352              		.loc 1 1820 0
 2353 0140 02F00300 		and	r0, r2, #3
 2354 0144 0128     		cmp	r0, #1
1821:../fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 2355              		.loc 1 1821 0
 2356 0146 02F00C02 		and	r2, r2, #12
 2357              	.LVL340:
1820:../fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 2358              		.loc 1 1820 0
 2359 014a 08BF     		it	eq
 2360 014c 43F01003 		orreq	r3, r3, #16
 2361              	.LVL341:
1821:../fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 2362              		.loc 1 1821 0
 2363 0150 042A     		cmp	r2, #4
 2364 0152 08BF     		it	eq
 2365 0154 43F00803 		orreq	r3, r3, #8
 2366              	.LVL342:
 2367 0158 79E7     		b	.L307
 2368              	.LVL343:
 2369              	.L244:
1803:../fatfs/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 2370              		.loc 1 1803 0
 2371 015a A3F1410C 		sub	ip, r3, #65
 2372 015e BCF1190F 		cmp	ip, #25
 2373 0162 02D8     		bhi	.L313
1804:../fatfs/src/ff.c **** 				b |= 2;
 2374              		.loc 1 1804 0
 2375 0164 42F00202 		orr	r2, r2, #2
 2376              	.LVL344:
 2377 0168 08E0     		b	.L246
 2378              	.L313:
1806:../fatfs/src/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
 2379              		.loc 1 1806 0
 2380 016a A3F1610C 		sub	ip, r3, #97
 2381 016e BCF1190F 		cmp	ip, #25
 2382 0172 03D8     		bhi	.L246
1807:../fatfs/src/ff.c **** 					b |= 1; c -= 0x20;
 2383              		.loc 1 1807 0
 2384 0174 203B     		subs	r3, r3, #32
 2385              	.LVL345:
 2386 0176 42F00102 		orr	r2, r2, #1
 2387              	.LVL346:
 2388 017a DBB2     		uxtb	r3, r3
 2389              	.LVL347:
 2390              	.L246:
1810:../fatfs/src/ff.c **** 			sfn[i++] = c;
 2391              		.loc 1 1810 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 87


 2392 017c 00F1010C 		add	ip, r0, #1
 2393              	.LVL348:
 2394 0180 3354     		strb	r3, [r6, r0]
 2395 0182 1FFA8CF0 		uxth	r0, ip
 2396 0186 B0E7     		b	.L241
 2397              	.LVL349:
 2398              	.L233:
1780:../fatfs/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 2399              		.loc 1 1780 0
 2400 0188 0620     		movs	r0, #6
 2401              	.LVL350:
 2402 018a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2403              	.LVL351:
 2404              	.L310:
 2405              	.LBE50:
 2406              	.LBE56:
 2407              	.LBB57:
 2408              	.LBB55:
1372:../fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2409              		.loc 1 1372 0
 2410 018e 6269     		ldr	r2, [r4, #20]
 2411              	.LVL352:
1374:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2412              		.loc 1 1374 0
 2413 0190 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 2414 0192 9BB1     		cbz	r3, .L269
1397:../fatfs/src/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 2415              		.loc 1 1397 0
 2416 0194 D37A     		ldrb	r3, [r2, #11]	@ zero_extendqisi2
 2417 0196 1E07     		lsls	r6, r3, #28
 2418 0198 0BD4     		bmi	.L252
 2419 019a A769     		ldr	r7, [r4, #24]
 2420              	.LVL353:
 2421 019c 0346     		mov	r3, r0
 2422              	.LVL354:
 2423              	.L253:
 2424              	.LBB53:
 2425              	.LBB54:
 559:../fatfs/src/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 2426              		.loc 1 559 0
 2427 019e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 2428              	.LVL355:
 2429 01a0 0133     		adds	r3, r3, #1
 2430              	.LVL356:
 2431 01a2 FE18     		adds	r6, r7, r3
 2432 01a4 16F8016C 		ldrb	r6, [r6, #-1]	@ zero_extendqisi2
 2433              	.LVL357:
 2434 01a8 8E42     		cmp	r6, r1
 2435 01aa 02D1     		bne	.L252
 2436              	.LVL358:
 2437 01ac 0B2B     		cmp	r3, #11
 2438 01ae F6D1     		bne	.L253
 2439 01b0 5AE7     		b	.L251
 2440              	.LVL359:
 2441              	.L252:
 2442              	.LBE54:
 2443              	.LBE53:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 88


1400:../fatfs/src/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
 2444              		.loc 1 1400 0
 2445 01b2 2046     		mov	r0, r4
 2446              	.LVL360:
 2447 01b4 0021     		movs	r1, #0
 2448 01b6 FFF7FEFF 		bl	dir_next
 2449              	.LVL361:
 2450 01ba 4DE7     		b	.L306
 2451              	.LVL362:
 2452              	.L269:
1374:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2453              		.loc 1 1374 0
 2454 01bc 0420     		movs	r0, #4
 2455              	.LVL363:
 2456 01be 53E7     		b	.L251
 2457              	.LVL364:
 2458              	.L256:
 2459              	.LBE55:
 2460              	.LBE57:
1962:../fatfs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 2461              		.loc 1 1962 0
 2462 01c0 5907     		lsls	r1, r3, #29
 2463 01c2 08D5     		bpl	.L314
 2464              	.LVL365:
 2465              	.L259:
1955:../fatfs/src/ff.c **** 					res = FR_OK;
 2466              		.loc 1 1955 0
 2467 01c4 0020     		movs	r0, #0
 2468 01c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2469              	.LVL366:
 2470              	.L257:
1958:../fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 2471              		.loc 1 1958 0
 2472 01ca 002B     		cmp	r3, #0
 2473 01cc 14BF     		ite	ne
 2474 01ce 0420     		movne	r0, #4
 2475 01d0 0520     		moveq	r0, #5
 2476 01d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2477              	.LVL367:
 2478              	.L314:
1963:../fatfs/src/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 2479              		.loc 1 1963 0
 2480 01d6 6369     		ldr	r3, [r4, #20]
 2481              	.LVL368:
1964:../fatfs/src/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 2482              		.loc 1 1964 0
 2483 01d8 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 2484 01da D206     		lsls	r2, r2, #27
 2485 01dc 0BD5     		bpl	.L271
1967:../fatfs/src/ff.c **** 			dj->sclust = LD_CLUST(dir);
 2486              		.loc 1 1967 0
 2487 01de 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 2488 01e0 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 2489 01e2 42EA0122 		orr	r2, r2, r1, lsl #8
 2490 01e6 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 2491 01e8 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 2492              	.LVL369:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 89


 2493 01ea 43EA0123 		orr	r3, r3, r1, lsl #8
 2494 01ee 43EA0243 		orr	r3, r3, r2, lsl #16
 2495 01f2 A360     		str	r3, [r4, #8]
 2496              	.LVL370:
 2497 01f4 4CE7     		b	.L226
 2498              	.LVL371:
 2499              	.L271:
1965:../fatfs/src/ff.c **** 				res = FR_NO_PATH; break;
 2500              		.loc 1 1965 0
 2501 01f6 0520     		movs	r0, #5
 2502 01f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2503              	.LVL372:
 2504              	.L282:
1972:../fatfs/src/ff.c **** }
 2505              		.loc 1 1972 0
 2506 01fc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2507              	.LVL373:
 2508              	.L316:
 2509              		.align	2
 2510              	.L315:
 2511 0200 00000000 		.word	.LANCHOR3
 2512 0204 FFFFFFFF 		.word	.LC0-1
 2513              		.cfi_endproc
 2514              	.LFE19:
 2516              		.section	.text.dir_register,"ax",%progbits
 2517              		.align	1
 2518              		.thumb
 2519              		.thumb_func
 2521              	dir_register:
 2522              	.LFB15:
1474:../fatfs/src/ff.c **** {
 2523              		.loc 1 1474 0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 0
 2526              		@ frame_needed = 0, uses_anonymous_args = 0
 2527              	.LVL374:
 2528 0000 38B5     		push	{r3, r4, r5, lr}
 2529              		.cfi_def_cfa_offset 16
 2530              		.cfi_offset 3, -16
 2531              		.cfi_offset 4, -12
 2532              		.cfi_offset 5, -8
 2533              		.cfi_offset 14, -4
1541:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
 2534              		.loc 1 1541 0
 2535 0002 0021     		movs	r1, #0
1474:../fatfs/src/ff.c **** {
 2536              		.loc 1 1474 0
 2537 0004 0446     		mov	r4, r0
1541:../fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
 2538              		.loc 1 1541 0
 2539 0006 FFF7FEFF 		bl	dir_sdi
 2540              	.LVL375:
 2541              	.L333:
1542:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 2542              		.loc 1 1542 0
 2543 000a 0546     		mov	r5, r0
 2544 000c 18BB     		cbnz	r0, .L328
ARM GAS  /tmp/ccOwSZ6Y.s 			page 90


1544:../fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
 2545              		.loc 1 1544 0
 2546 000e 2068     		ldr	r0, [r4]
 2547              	.LVL376:
 2548 0010 2169     		ldr	r1, [r4, #16]
 2549 0012 FFF7FEFF 		bl	move_window
 2550              	.LVL377:
1545:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2551              		.loc 1 1545 0
 2552 0016 0546     		mov	r5, r0
 2553 0018 E8B9     		cbnz	r0, .L328
1546:../fatfs/src/ff.c **** 			c = *dj->dir;
 2554              		.loc 1 1546 0
 2555 001a 6369     		ldr	r3, [r4, #20]
 2556 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2557              	.LVL378:
1547:../fatfs/src/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 2558              		.loc 1 1547 0
 2559 001e E52B     		cmp	r3, #229
 2560 0020 05D0     		beq	.L319
1547:../fatfs/src/ff.c **** 			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
 2561              		.loc 1 1547 0 is_stmt 0 discriminator 1
 2562 0022 23B1     		cbz	r3, .L319
1548:../fatfs/src/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 2563              		.loc 1 1548 0 is_stmt 1
 2564 0024 2046     		mov	r0, r4
 2565              	.LVL379:
 2566 0026 0121     		movs	r1, #1
 2567 0028 FFF7FEFF 		bl	dir_next
 2568              	.LVL380:
 2569 002c EDE7     		b	.L333
 2570              	.LVL381:
 2571              	.L319:
 2572              	.LBB62:
 2573              	.LBB63:
1554:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 2574              		.loc 1 1554 0
 2575 002e 2068     		ldr	r0, [r4]
 2576 0030 2169     		ldr	r1, [r4, #16]
 2577 0032 FFF7FEFF 		bl	move_window
 2578              	.LVL382:
1555:../fatfs/src/ff.c **** 		if (res == FR_OK) {
 2579              		.loc 1 1555 0
 2580 0036 0546     		mov	r5, r0
 2581 0038 68B9     		cbnz	r0, .L328
1556:../fatfs/src/ff.c **** 			dir = dj->dir;
 2582              		.loc 1 1556 0
 2583 003a 6069     		ldr	r0, [r4, #20]
 2584              	.LVL383:
 2585 003c 2B46     		mov	r3, r5
 2586              	.LVL384:
 2587              	.L321:
 2588              	.LBB64:
 2589              	.LBB65:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 2590              		.loc 1 550 0
 2591 003e 0022     		movs	r2, #0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 91


 2592 0040 C254     		strb	r2, [r0, r3]
 2593 0042 0133     		adds	r3, r3, #1
 2594              	.LVL385:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 2595              		.loc 1 549 0
 2596 0044 202B     		cmp	r3, #32
 2597 0046 FAD1     		bne	.L321
 2598              	.LBE65:
 2599              	.LBE64:
1558:../fatfs/src/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 2600              		.loc 1 1558 0
 2601 0048 0B22     		movs	r2, #11
 2602 004a A169     		ldr	r1, [r4, #24]
 2603 004c FFF7FEFF 		bl	mem_cpy
 2604              	.LVL386:
1562:../fatfs/src/ff.c **** 			dj->fs->wflag = 1;
 2605              		.loc 1 1562 0
 2606 0050 2368     		ldr	r3, [r4]
 2607 0052 0122     		movs	r2, #1
 2608 0054 1A71     		strb	r2, [r3, #4]
 2609              	.LVL387:
 2610              	.L328:
 2611              	.LBE63:
 2612              	.LBE62:
1567:../fatfs/src/ff.c **** }
 2613              		.loc 1 1567 0
 2614 0056 2846     		mov	r0, r5
 2615 0058 38BD     		pop	{r3, r4, r5, pc}
 2616              		.cfi_endproc
 2617              	.LFE15:
 2619              		.section	.text.dir_read,"ax",%progbits
 2620              		.align	1
 2621              		.thumb
 2622              		.thumb_func
 2624              	dir_read:
 2625              	.LFB14:
1417:../fatfs/src/ff.c **** {
 2626              		.loc 1 1417 0
 2627              		.cfi_startproc
 2628              		@ args = 0, pretend = 0, frame = 0
 2629              		@ frame_needed = 0, uses_anonymous_args = 0
 2630              	.LVL388:
 2631 0000 10B5     		push	{r4, lr}
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 4, -8
 2634              		.cfi_offset 14, -4
1424:../fatfs/src/ff.c **** 	res = FR_NO_FILE;
 2635              		.loc 1 1424 0
 2636 0002 0423     		movs	r3, #4
1417:../fatfs/src/ff.c **** {
 2637              		.loc 1 1417 0
 2638 0004 0446     		mov	r4, r0
 2639              	.LVL389:
 2640              	.L335:
1425:../fatfs/src/ff.c **** 	while (dj->sect) {
 2641              		.loc 1 1425 0 discriminator 1
 2642 0006 2169     		ldr	r1, [r4, #16]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 92


 2643 0008 91B1     		cbz	r1, .L352
1426:../fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 2644              		.loc 1 1426 0
 2645 000a 2068     		ldr	r0, [r4]
 2646 000c FFF7FEFF 		bl	move_window
 2647              	.LVL390:
1427:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
 2648              		.loc 1 1427 0
 2649 0010 A8B9     		cbnz	r0, .L336
1428:../fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 2650              		.loc 1 1428 0
 2651 0012 6369     		ldr	r3, [r4, #20]
 2652              	.LVL391:
1429:../fatfs/src/ff.c **** 		c = dir[DIR_Name];
 2653              		.loc 1 1429 0
 2654 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2655              	.LVL392:
1430:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2656              		.loc 1 1430 0
 2657 0016 8AB1     		cbz	r2, .L341
1451:../fatfs/src/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 2658              		.loc 1 1451 0
 2659 0018 E52A     		cmp	r2, #229
 2660 001a 02D0     		beq	.L337
1451:../fatfs/src/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 2661              		.loc 1 1451 0 is_stmt 0 discriminator 1
 2662 001c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 2663              	.LVL393:
 2664 001e 1B07     		lsls	r3, r3, #28
 2665 0020 0FD5     		bpl	.L345
 2666              	.L337:
1454:../fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
 2667              		.loc 1 1454 0 is_stmt 1
 2668 0022 2046     		mov	r0, r4
 2669              	.LVL394:
 2670 0024 0021     		movs	r1, #0
 2671 0026 FFF7FEFF 		bl	dir_next
 2672              	.LVL395:
1455:../fatfs/src/ff.c **** 		if (res != FR_OK) break;
 2673              		.loc 1 1455 0
 2674 002a 40B9     		cbnz	r0, .L336
1454:../fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
 2675              		.loc 1 1454 0
 2676 002c 0346     		mov	r3, r0
 2677 002e EAE7     		b	.L335
 2678              	.LVL396:
 2679              	.L352:
 2680 0030 1846     		mov	r0, r3
 2681              	.LVL397:
1458:../fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 2682              		.loc 1 1458 0
 2683 0032 33B1     		cbz	r3, .L345
 2684              	.LVL398:
 2685              	.L340:
1458:../fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 2686              		.loc 1 1458 0 is_stmt 0 discriminator 1
 2687 0034 0022     		movs	r2, #0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 93


 2688 0036 2261     		str	r2, [r4, #16]
 2689 0038 1846     		mov	r0, r3
 2690 003a 10BD     		pop	{r4, pc}
 2691              	.LVL399:
 2692              	.L341:
1430:../fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2693              		.loc 1 1430 0 is_stmt 1
 2694 003c 0420     		movs	r0, #4
 2695              	.LVL400:
 2696              	.L336:
 2697 003e 0346     		mov	r3, r0
 2698 0040 F8E7     		b	.L340
 2699              	.LVL401:
 2700              	.L345:
1461:../fatfs/src/ff.c **** }
 2701              		.loc 1 1461 0
 2702 0042 10BD     		pop	{r4, pc}
 2703              		.cfi_endproc
 2704              	.LFE14:
 2706              		.section	.text.remove_chain,"ax",%progbits
 2707              		.align	1
 2708              		.thumb
 2709              		.thumb_func
 2711              	remove_chain:
 2712              	.LFB9:
 929:../fatfs/src/ff.c **** {
 2713              		.loc 1 929 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL402:
 936:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2718              		.loc 1 936 0
 2719 0000 0129     		cmp	r1, #1
 929:../fatfs/src/ff.c **** {
 2720              		.loc 1 929 0
 2721 0002 70B5     		push	{r4, r5, r6, lr}
 2722              		.cfi_def_cfa_offset 16
 2723              		.cfi_offset 4, -16
 2724              		.cfi_offset 5, -12
 2725              		.cfi_offset 6, -8
 2726              		.cfi_offset 14, -4
 929:../fatfs/src/ff.c **** {
 2727              		.loc 1 929 0
 2728 0004 0446     		mov	r4, r0
 2729 0006 0D46     		mov	r5, r1
 936:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2730              		.loc 1 936 0
 2731 0008 22D9     		bls	.L362
 936:../fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2732              		.loc 1 936 0 is_stmt 0 discriminator 1
 2733 000a C369     		ldr	r3, [r0, #28]
 2734 000c 9942     		cmp	r1, r3
 2735 000e 1FD2     		bcs	.L362
 2736              	.LVL403:
 2737              	.L355:
 2738              	.LBB68:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 94


 2739              	.LBB69:
 941:../fatfs/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 2740              		.loc 1 941 0 is_stmt 1
 2741 0010 E369     		ldr	r3, [r4, #28]
 2742 0012 9D42     		cmp	r5, r3
 2743 0014 05D2     		bcs	.L360
 942:../fatfs/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 2744              		.loc 1 942 0
 2745 0016 2046     		mov	r0, r4
 2746 0018 2946     		mov	r1, r5
 2747 001a FFF7FEFF 		bl	get_fat
 2748              	.LVL404:
 943:../fatfs/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 2749              		.loc 1 943 0
 2750 001e 0646     		mov	r6, r0
 2751 0020 08B9     		cbnz	r0, .L356
 2752              	.LVL405:
 2753              	.L360:
 2754              	.LBE69:
 2755              	.LBE68:
 929:../fatfs/src/ff.c **** {
 2756              		.loc 1 929 0
 2757 0022 0020     		movs	r0, #0
 2758 0024 70BD     		pop	{r4, r5, r6, pc}
 2759              	.LVL406:
 2760              	.L356:
 2761              	.LBB72:
 2762              	.LBB70:
 944:../fatfs/src/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 2763              		.loc 1 944 0
 2764 0026 0128     		cmp	r0, #1
 2765 0028 12D0     		beq	.L362
 945:../fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 2766              		.loc 1 945 0
 2767 002a 411C     		adds	r1, r0, #1
 2768 002c 0ED0     		beq	.L364
 946:../fatfs/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 2769              		.loc 1 946 0
 2770 002e 2046     		mov	r0, r4
 2771              	.LVL407:
 2772 0030 2946     		mov	r1, r5
 2773 0032 0022     		movs	r2, #0
 2774 0034 FFF7FEFF 		bl	put_fat
 2775              	.LVL408:
 947:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2776              		.loc 1 947 0
 2777 0038 58B9     		cbnz	r0, .L354
 948:../fatfs/src/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 2778              		.loc 1 948 0
 2779 003a 2369     		ldr	r3, [r4, #16]
 2780 003c 5A1C     		adds	r2, r3, #1
 2781 003e 03D0     		beq	.L358
 949:../fatfs/src/ff.c **** 				fs->free_clust++;
 2782              		.loc 1 949 0
 2783 0040 0133     		adds	r3, r3, #1
 2784 0042 2361     		str	r3, [r4, #16]
 950:../fatfs/src/ff.c **** 				fs->fsi_flag = 1;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 95


 2785              		.loc 1 950 0
 2786 0044 0123     		movs	r3, #1
 2787 0046 6371     		strb	r3, [r4, #5]
 2788              	.L358:
 2789              	.LBE70:
 2790              	.LBE72:
 929:../fatfs/src/ff.c **** {
 2791              		.loc 1 929 0
 2792 0048 3546     		mov	r5, r6
 2793              	.LVL409:
 2794 004a E1E7     		b	.L355
 2795              	.LVL410:
 2796              	.L364:
 2797              	.LBB73:
 2798              	.LBB71:
 945:../fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 2799              		.loc 1 945 0
 2800 004c 0120     		movs	r0, #1
 2801              	.LVL411:
 2802 004e 70BD     		pop	{r4, r5, r6, pc}
 2803              	.LVL412:
 2804              	.L362:
 2805              	.LBE71:
 2806              	.LBE73:
 937:../fatfs/src/ff.c **** 		res = FR_INT_ERR;
 2807              		.loc 1 937 0
 2808 0050 0220     		movs	r0, #2
 2809              	.L354:
 2810              	.LVL413:
 967:../fatfs/src/ff.c **** }
 2811              		.loc 1 967 0
 2812 0052 70BD     		pop	{r4, r5, r6, pc}
 2813              		.cfi_endproc
 2814              	.LFE9:
 2816              		.section	.text.f_mount,"ax",%progbits
 2817              		.align	1
 2818              		.global	f_mount
 2819              		.thumb
 2820              		.thumb_func
 2822              	f_mount:
 2823              	.LFB23:
2187:../fatfs/src/ff.c **** 
2188:../fatfs/src/ff.c **** 
2189:../fatfs/src/ff.c **** 
2190:../fatfs/src/ff.c **** 
2191:../fatfs/src/ff.c **** /*--------------------------------------------------------------------------
2192:../fatfs/src/ff.c **** 
2193:../fatfs/src/ff.c ****    Public Functions
2194:../fatfs/src/ff.c **** 
2195:../fatfs/src/ff.c **** --------------------------------------------------------------------------*/
2196:../fatfs/src/ff.c **** 
2197:../fatfs/src/ff.c **** 
2198:../fatfs/src/ff.c **** 
2199:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2200:../fatfs/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2201:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2202:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 96


2203:../fatfs/src/ff.c **** FRESULT f_mount (
2204:../fatfs/src/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
2205:../fatfs/src/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
2206:../fatfs/src/ff.c **** )
2207:../fatfs/src/ff.c **** {
 2824              		.loc 1 2207 0
 2825              		.cfi_startproc
 2826              		@ args = 0, pretend = 0, frame = 0
 2827              		@ frame_needed = 0, uses_anonymous_args = 0
 2828              	.LVL414:
 2829 0000 38B5     		push	{r3, r4, r5, lr}
 2830              		.cfi_def_cfa_offset 16
 2831              		.cfi_offset 3, -16
 2832              		.cfi_offset 4, -12
 2833              		.cfi_offset 5, -8
 2834              		.cfi_offset 14, -4
 2835              		.loc 1 2207 0
 2836 0002 0C46     		mov	r4, r1
2208:../fatfs/src/ff.c **** 	FATFS *rfs;
2209:../fatfs/src/ff.c **** 
2210:../fatfs/src/ff.c **** 
2211:../fatfs/src/ff.c **** 	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
 2837              		.loc 1 2211 0
 2838 0004 80B9     		cbnz	r0, .L373
2212:../fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
2213:../fatfs/src/ff.c **** 	rfs = FatFs[vol];			/* Get current fs object */
 2839              		.loc 1 2213 0
 2840 0006 094A     		ldr	r2, .L377
 2841 0008 1368     		ldr	r3, [r2]
 2842              	.LVL415:
 2843 000a 1546     		mov	r5, r2
2214:../fatfs/src/ff.c **** 
2215:../fatfs/src/ff.c **** 	if (rfs) {
 2844              		.loc 1 2215 0
 2845 000c 03B1     		cbz	r3, .L370
2216:../fatfs/src/ff.c **** #if _FS_SHARE
2217:../fatfs/src/ff.c **** 		clear_lock(rfs);
2218:../fatfs/src/ff.c **** #endif
2219:../fatfs/src/ff.c **** #if _FS_REENTRANT				/* Discard sync object of the current volume */
2220:../fatfs/src/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
2221:../fatfs/src/ff.c **** #endif
2222:../fatfs/src/ff.c **** 		rfs->fs_type = 0;		/* Clear old fs object */
 2846              		.loc 1 2222 0
 2847 000e 1870     		strb	r0, [r3]
 2848              	.L370:
2223:../fatfs/src/ff.c **** 	}
2224:../fatfs/src/ff.c **** 
2225:../fatfs/src/ff.c **** 	if (fs) {
 2849              		.loc 1 2225 0
 2850 0010 14B1     		cbz	r4, .L371
2226:../fatfs/src/ff.c **** 		fs->fs_type = 0;		/* Clear new fs object */
 2851              		.loc 1 2226 0
 2852 0012 0023     		movs	r3, #0
 2853              	.LVL416:
 2854 0014 2370     		strb	r3, [r4]
 2855 0016 04E0     		b	.L372
 2856              	.LVL417:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 97


 2857              	.L371:
2227:../fatfs/src/ff.c **** #if _FS_REENTRANT				/* Create sync object for the new volume */
2228:../fatfs/src/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
2229:../fatfs/src/ff.c **** #endif
2230:../fatfs/src/ff.c **** 	}
2231:../fatfs/src/ff.c **** 	else /* Unmount, Added by Energy Micro AS. */
2232:../fatfs/src/ff.c **** 	{
2233:../fatfs/src/ff.c **** 	  disk_ioctl(fs->drv, CTRL_INVALIDATE, (void*)0);
 2858              		.loc 1 2233 0
 2859 0018 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2860              	.LVL418:
 2861 001a 0821     		movs	r1, #8
 2862              	.LVL419:
 2863 001c 2246     		mov	r2, r4
 2864 001e FFF7FEFF 		bl	disk_ioctl
 2865              	.LVL420:
 2866              	.L372:
2234:../fatfs/src/ff.c **** 	}
2235:../fatfs/src/ff.c **** 	FatFs[vol] = fs;			/* Register new fs object */
 2867              		.loc 1 2235 0
 2868 0022 2C60     		str	r4, [r5]
2236:../fatfs/src/ff.c **** 
2237:../fatfs/src/ff.c **** 	return FR_OK;
 2869              		.loc 1 2237 0
 2870 0024 0020     		movs	r0, #0
 2871 0026 38BD     		pop	{r3, r4, r5, pc}
 2872              	.LVL421:
 2873              	.L373:
2212:../fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
 2874              		.loc 1 2212 0
 2875 0028 0B20     		movs	r0, #11
 2876              	.LVL422:
2238:../fatfs/src/ff.c **** }
 2877              		.loc 1 2238 0
 2878 002a 38BD     		pop	{r3, r4, r5, pc}
 2879              	.L378:
 2880              		.align	2
 2881              	.L377:
 2882 002c 00000000 		.word	.LANCHOR1
 2883              		.cfi_endproc
 2884              	.LFE23:
 2886              		.section	.text.f_open,"ax",%progbits
 2887              		.align	1
 2888              		.global	f_open
 2889              		.thumb
 2890              		.thumb_func
 2892              	f_open:
 2893              	.LFB24:
2239:../fatfs/src/ff.c **** 
2240:../fatfs/src/ff.c **** 
2241:../fatfs/src/ff.c **** 
2242:../fatfs/src/ff.c **** 
2243:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2244:../fatfs/src/ff.c **** /* Open or Create a File                                                 */
2245:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2246:../fatfs/src/ff.c **** 
2247:../fatfs/src/ff.c **** FRESULT f_open (
ARM GAS  /tmp/ccOwSZ6Y.s 			page 98


2248:../fatfs/src/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
2249:../fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
2250:../fatfs/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2251:../fatfs/src/ff.c **** )
2252:../fatfs/src/ff.c **** {
 2894              		.loc 1 2252 0
 2895              		.cfi_startproc
 2896              		@ args = 0, pretend = 0, frame = 48
 2897              		@ frame_needed = 0, uses_anonymous_args = 0
 2898              	.LVL423:
 2899 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2900              		.cfi_def_cfa_offset 24
 2901              		.cfi_offset 4, -24
 2902              		.cfi_offset 5, -20
 2903              		.cfi_offset 6, -16
 2904              		.cfi_offset 7, -12
 2905              		.cfi_offset 8, -8
 2906              		.cfi_offset 14, -4
 2907 0004 8CB0     		sub	sp, sp, #48
 2908              		.cfi_def_cfa_offset 72
2253:../fatfs/src/ff.c **** 	FRESULT res;
2254:../fatfs/src/ff.c **** 	DIR dj;
2255:../fatfs/src/ff.c **** 	BYTE *dir;
2256:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
2257:../fatfs/src/ff.c **** 
2258:../fatfs/src/ff.c **** 
2259:../fatfs/src/ff.c **** 	fp->fs = 0;			/* Clear file object */
 2909              		.loc 1 2259 0
 2910 0006 0023     		movs	r3, #0
2252:../fatfs/src/ff.c **** {
 2911              		.loc 1 2252 0
 2912 0008 0546     		mov	r5, r0
 2913 000a 0CA8     		add	r0, sp, #48
 2914              	.LVL424:
 2915 000c 40F82C1D 		str	r1, [r0, #-44]!
 2916              		.loc 1 2259 0
 2917 0010 2B60     		str	r3, [r5]
2252:../fatfs/src/ff.c **** {
 2918              		.loc 1 2252 0
 2919 0012 1746     		mov	r7, r2
2260:../fatfs/src/ff.c **** 
2261:../fatfs/src/ff.c **** #if !_FS_READONLY
2262:../fatfs/src/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 2920              		.loc 1 2262 0
 2921 0014 02F01F06 		and	r6, r2, #31
 2922              	.LVL425:
2263:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 2923              		.loc 1 2263 0
 2924 0018 05A9     		add	r1, sp, #20
 2925              	.LVL426:
 2926 001a 02F01E02 		and	r2, r2, #30
 2927              	.LVL427:
 2928 001e FFF7FEFF 		bl	chk_mounted
 2929              	.LVL428:
2264:../fatfs/src/ff.c **** #else
2265:../fatfs/src/ff.c **** 	mode &= FA_READ;
2266:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 99


2267:../fatfs/src/ff.c **** #endif
2268:../fatfs/src/ff.c **** 	INIT_BUF(dj);
 2930              		.loc 1 2268 0
 2931 0022 02AB     		add	r3, sp, #8
 2932 0024 0B93     		str	r3, [sp, #44]
2269:../fatfs/src/ff.c **** 	if (res == FR_OK)
 2933              		.loc 1 2269 0
 2934 0026 18B9     		cbnz	r0, .L380
2270:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 2935              		.loc 1 2270 0
 2936 0028 05A8     		add	r0, sp, #20
 2937              	.LVL429:
 2938 002a 0199     		ldr	r1, [sp, #4]
 2939 002c FFF7FEFF 		bl	follow_path
 2940              	.LVL430:
 2941              	.L380:
2271:../fatfs/src/ff.c **** 	dir = dj.dir;
 2942              		.loc 1 2271 0
 2943 0030 0A9C     		ldr	r4, [sp, #40]
 2944              	.LVL431:
2272:../fatfs/src/ff.c **** 
2273:../fatfs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2274:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 2945              		.loc 1 2274 0
 2946 0032 10B9     		cbnz	r0, .L381
2275:../fatfs/src/ff.c **** 		if (!dir)	/* Current dir itself */
2276:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 2947              		.loc 1 2276 0
 2948 0034 002C     		cmp	r4, #0
 2949 0036 08BF     		it	eq
 2950 0038 0620     		moveq	r0, #6
 2951              	.LVL432:
 2952              	.L381:
2277:../fatfs/src/ff.c **** #if _FS_SHARE
2278:../fatfs/src/ff.c **** 		else
2279:../fatfs/src/ff.c **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2280:../fatfs/src/ff.c **** #endif
2281:../fatfs/src/ff.c **** 	}
2282:../fatfs/src/ff.c **** 	/* Create or Open a file */
2283:../fatfs/src/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 2953              		.loc 1 2283 0
 2954 003a 17F01C0F 		tst	r7, #28
 2955 003e 44D0     		beq	.L382
 2956              	.LBB74:
2284:../fatfs/src/ff.c **** 		DWORD dw, cl;
2285:../fatfs/src/ff.c **** 
2286:../fatfs/src/ff.c **** 		if (res != FR_OK) {					/* No file, create new */
 2957              		.loc 1 2286 0
 2958 0040 48B1     		cbz	r0, .L383
2287:../fatfs/src/ff.c **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 2959              		.loc 1 2287 0
 2960 0042 0428     		cmp	r0, #4
 2961 0044 02D1     		bne	.L384
2288:../fatfs/src/ff.c **** #if _FS_SHARE
2289:../fatfs/src/ff.c **** 				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2290:../fatfs/src/ff.c **** #else
2291:../fatfs/src/ff.c **** 				res = dir_register(&dj);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 100


 2962              		.loc 1 2291 0
 2963 0046 05A8     		add	r0, sp, #20
 2964              	.LVL433:
 2965 0048 FFF7FEFF 		bl	dir_register
 2966              	.LVL434:
 2967              	.L384:
2292:../fatfs/src/ff.c **** #endif
2293:../fatfs/src/ff.c **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
 2968              		.loc 1 2293 0
 2969 004c 46F00806 		orr	r6, r6, #8
 2970              	.LVL435:
2294:../fatfs/src/ff.c **** 			dir = dj.dir;					/* New entry */
 2971              		.loc 1 2294 0
 2972 0050 0A9C     		ldr	r4, [sp, #40]
2295:../fatfs/src/ff.c **** 		}
2296:../fatfs/src/ff.c **** 		else {								/* Any object is already existing */
2297:../fatfs/src/ff.c **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2298:../fatfs/src/ff.c **** 				res = FR_DENIED;
2299:../fatfs/src/ff.c **** 			} else {
2300:../fatfs/src/ff.c **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
2301:../fatfs/src/ff.c **** 					res = FR_EXIST;
2302:../fatfs/src/ff.c **** 			}
2303:../fatfs/src/ff.c **** 		}
2304:../fatfs/src/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 2973              		.loc 1 2304 0
 2974 0052 30B1     		cbz	r0, .L385
 2975 0054 6DE0     		b	.L404
 2976              	.LVL436:
 2977              	.L383:
2297:../fatfs/src/ff.c **** 			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 2978              		.loc 1 2297 0
 2979 0056 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 2980 0058 13F0110F 		tst	r3, #17
 2981 005c 68D1     		bne	.L397
2300:../fatfs/src/ff.c **** 				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 2982              		.loc 1 2300 0
 2983 005e 7B07     		lsls	r3, r7, #29
 2984 0060 62D4     		bmi	.L395
 2985              	.LVL437:
 2986              	.L385:
 2987              		.loc 1 2304 0 discriminator 1
 2988 0062 3707     		lsls	r7, r6, #28
 2989 0064 3AD5     		bpl	.L389
2305:../fatfs/src/ff.c **** 			dw = get_fattime();					/* Created time */
 2990              		.loc 1 2305 0
 2991 0066 FFF7FEFF 		bl	get_fattime
 2992              	.LVL438:
2306:../fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
2307:../fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
2308:../fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
2309:../fatfs/src/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 2993              		.loc 1 2309 0
 2994 006a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 2995 006c 677D     		ldrb	r7, [r4, #21]	@ zero_extendqisi2
2306:../fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 2996              		.loc 1 2306 0
 2997 006e C0F30723 		ubfx	r3, r0, #8, #8
ARM GAS  /tmp/ccOwSZ6Y.s 			page 101


 2998              		.loc 1 2309 0
 2999 0072 E17E     		ldrb	r1, [r4, #27]	@ zero_extendqisi2
 3000 0074 42EA0727 		orr	r7, r2, r7, lsl #8
 3001 0078 A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2
2306:../fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 3002              		.loc 1 2306 0
 3003 007a A073     		strb	r0, [r4, #14]
 3004 007c E373     		strb	r3, [r4, #15]
 3005 007e 030C     		lsrs	r3, r0, #16
 3006 0080 000E     		lsrs	r0, r0, #24
 3007              	.LVL439:
 3008 0082 2374     		strb	r3, [r4, #16]
 3009 0084 6074     		strb	r0, [r4, #17]
2307:../fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 3010              		.loc 1 2307 0
 3011 0086 0023     		movs	r3, #0
 3012              		.loc 1 2309 0
 3013 0088 42EA0122 		orr	r2, r2, r1, lsl #8
 3014              	.LVL440:
2310:../fatfs/src/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
2311:../fatfs/src/ff.c **** 			dj.fs->wflag = 1;
 3015              		.loc 1 2311 0
 3016 008c 0598     		ldr	r0, [sp, #20]
2307:../fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 3017              		.loc 1 2307 0
 3018 008e E372     		strb	r3, [r4, #11]
2308:../fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 3019              		.loc 1 2308 0
 3020 0090 2377     		strb	r3, [r4, #28]
 3021 0092 6377     		strb	r3, [r4, #29]
 3022 0094 A377     		strb	r3, [r4, #30]
 3023 0096 E377     		strb	r3, [r4, #31]
2310:../fatfs/src/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
 3024              		.loc 1 2310 0
 3025 0098 A376     		strb	r3, [r4, #26]
 3026 009a E376     		strb	r3, [r4, #27]
 3027 009c 2375     		strb	r3, [r4, #20]
 3028 009e 6375     		strb	r3, [r4, #21]
2312:../fatfs/src/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
 3029              		.loc 1 2312 0
 3030 00a0 52EA0747 		orrs	r7, r2, r7, lsl #16
 3031              	.LVL441:
2311:../fatfs/src/ff.c **** 			dj.fs->wflag = 1;
 3032              		.loc 1 2311 0
 3033 00a4 4FF00103 		mov	r3, #1
 3034 00a8 0371     		strb	r3, [r0, #4]
 3035              		.loc 1 2312 0
 3036 00aa 17D0     		beq	.L389
2313:../fatfs/src/ff.c **** 				dw = dj.fs->winsect;
2314:../fatfs/src/ff.c **** 				res = remove_chain(dj.fs, cl);
 3037              		.loc 1 2314 0
 3038 00ac 3946     		mov	r1, r7
2313:../fatfs/src/ff.c **** 				dw = dj.fs->winsect;
 3039              		.loc 1 2313 0
 3040 00ae D0F83080 		ldr	r8, [r0, #48]
 3041              	.LVL442:
 3042              		.loc 1 2314 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 102


 3043 00b2 FFF7FEFF 		bl	remove_chain
 3044              	.LVL443:
2315:../fatfs/src/ff.c **** 				if (res == FR_OK) {
 3045              		.loc 1 2315 0
 3046 00b6 0028     		cmp	r0, #0
 3047 00b8 3BD1     		bne	.L404
2316:../fatfs/src/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 3048              		.loc 1 2316 0
 3049 00ba 0598     		ldr	r0, [sp, #20]
 3050              	.LVL444:
 3051 00bc 013F     		subs	r7, r7, #1
 3052              	.LVL445:
 3053 00be C760     		str	r7, [r0, #12]
2317:../fatfs/src/ff.c **** 					res = move_window(dj.fs, dw);
 3054              		.loc 1 2317 0
 3055 00c0 4146     		mov	r1, r8
 3056 00c2 FFF7FEFF 		bl	move_window
 3057              	.LVL446:
 3058              	.LBE74:
2318:../fatfs/src/ff.c **** 				}
2319:../fatfs/src/ff.c **** 			}
2320:../fatfs/src/ff.c **** 		}
2321:../fatfs/src/ff.c **** 	}
2322:../fatfs/src/ff.c **** 	else {	/* Open an existing file */
2323:../fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
2324:../fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
2325:../fatfs/src/ff.c **** 				res = FR_NO_FILE;
2326:../fatfs/src/ff.c **** 			} else {
2327:../fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2328:../fatfs/src/ff.c **** 					res = FR_DENIED;
2329:../fatfs/src/ff.c **** 			}
2330:../fatfs/src/ff.c **** 		}
2331:../fatfs/src/ff.c **** 	}
2332:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 3059              		.loc 1 2332 0
 3060 00c6 48B1     		cbz	r0, .L389
 3061 00c8 33E0     		b	.L404
 3062              	.LVL447:
 3063              	.L382:
2323:../fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
 3064              		.loc 1 2323 0
 3065 00ca 0028     		cmp	r0, #0
 3066 00cc 31D1     		bne	.L404
2324:../fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 3067              		.loc 1 2324 0
 3068 00ce E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 3069 00d0 D806     		lsls	r0, r3, #27
 3070              	.LVL448:
 3071 00d2 2BD4     		bmi	.L396
2327:../fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 3072              		.loc 1 2327 0
 3073 00d4 B907     		lsls	r1, r7, #30
 3074 00d6 01D5     		bpl	.L389
2327:../fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 3075              		.loc 1 2327 0 is_stmt 0 discriminator 1
 3076 00d8 DA07     		lsls	r2, r3, #31
 3077 00da 29D4     		bmi	.L397
ARM GAS  /tmp/ccOwSZ6Y.s 			page 103


 3078              	.LVL449:
 3079              	.L389:
2333:../fatfs/src/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 3080              		.loc 1 2333 0 is_stmt 1
 3081 00dc 3307     		lsls	r3, r6, #28
 3082              	.LVL450:
2334:../fatfs/src/ff.c **** 			mode |= FA__WRITTEN;
2335:../fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3083              		.loc 1 2335 0
 3084 00de 059B     		ldr	r3, [sp, #20]
2334:../fatfs/src/ff.c **** 			mode |= FA__WRITTEN;
 3085              		.loc 1 2334 0
 3086 00e0 48BF     		it	mi
 3087 00e2 46F02006 		orrmi	r6, r6, #32
 3088              	.LVL451:
 3089              		.loc 1 2335 0
 3090 00e6 1A6B     		ldr	r2, [r3, #48]
2336:../fatfs/src/ff.c **** 		fp->dir_ptr = dir;
2337:../fatfs/src/ff.c **** #if _FS_SHARE
2338:../fatfs/src/ff.c **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2339:../fatfs/src/ff.c **** 		if (!fp->lockid) res = FR_INT_ERR;
2340:../fatfs/src/ff.c **** #endif
2341:../fatfs/src/ff.c **** 	}
2342:../fatfs/src/ff.c **** 
2343:../fatfs/src/ff.c **** #else				/* R/O configuration */
2344:../fatfs/src/ff.c **** 	if (res == FR_OK) {					/* Follow succeeded */
2345:../fatfs/src/ff.c **** 		if (!dir) {						/* Current dir itself */
2346:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
2347:../fatfs/src/ff.c **** 		} else {
2348:../fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2349:../fatfs/src/ff.c **** 				res = FR_NO_FILE;
2350:../fatfs/src/ff.c **** 		}
2351:../fatfs/src/ff.c **** 	}
2352:../fatfs/src/ff.c **** #endif
2353:../fatfs/src/ff.c **** 	FREE_BUF();
2354:../fatfs/src/ff.c **** 
2355:../fatfs/src/ff.c **** 	if (res == FR_OK) {
2356:../fatfs/src/ff.c **** 		fp->flag = mode;					/* File access mode */
 3091              		.loc 1 2356 0
 3092 00e8 AE71     		strb	r6, [r5, #6]
2335:../fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 3093              		.loc 1 2335 0
 3094 00ea EA61     		str	r2, [r5, #28]
2336:../fatfs/src/ff.c **** 		fp->dir_ptr = dir;
 3095              		.loc 1 2336 0
 3096 00ec 2C62     		str	r4, [r5, #32]
2357:../fatfs/src/ff.c **** 		fp->sclust = LD_CLUST(dir);			/* File start cluster */
 3097              		.loc 1 2357 0
 3098 00ee 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 3099 00f0 617D     		ldrb	r1, [r4, #21]	@ zero_extendqisi2
 3100 00f2 E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2
 3101 00f4 42EA0121 		orr	r1, r2, r1, lsl #8
 3102 00f8 A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2
 3103 00fa 42EA0022 		orr	r2, r2, r0, lsl #8
 3104 00fe 42EA0142 		orr	r2, r2, r1, lsl #16
 3105 0102 2A61     		str	r2, [r5, #16]
2358:../fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 104


 3106              		.loc 1 2358 0
 3107 0104 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 3108 0106 E17F     		ldrb	r1, [r4, #31]	@ zero_extendqisi2
 3109 0108 1204     		lsls	r2, r2, #16
 3110 010a 42EA0162 		orr	r2, r2, r1, lsl #24
 3111 010e 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
2359:../fatfs/src/ff.c **** 		fp->fptr = 0;						/* File pointer */
 3112              		.loc 1 2359 0
 3113 0110 0020     		movs	r0, #0
2358:../fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3114              		.loc 1 2358 0
 3115 0112 0A43     		orrs	r2, r2, r1
 3116 0114 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
2360:../fatfs/src/ff.c **** 		fp->dsect = 0;
2361:../fatfs/src/ff.c **** #if _USE_FASTSEEK
2362:../fatfs/src/ff.c **** 		fp->cltbl = 0;						/* Normal seek mode */
2363:../fatfs/src/ff.c **** #endif
2364:../fatfs/src/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 3117              		.loc 1 2364 0
 3118 0116 2B60     		str	r3, [r5]
 3119 0118 DB88     		ldrh	r3, [r3, #6]
2358:../fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 3120              		.loc 1 2358 0
 3121 011a 42EA0122 		orr	r2, r2, r1, lsl #8
 3122 011e EA60     		str	r2, [r5, #12]
2359:../fatfs/src/ff.c **** 		fp->fptr = 0;						/* File pointer */
 3123              		.loc 1 2359 0
 3124 0120 A860     		str	r0, [r5, #8]
2360:../fatfs/src/ff.c **** 		fp->dsect = 0;
 3125              		.loc 1 2360 0
 3126 0122 A861     		str	r0, [r5, #24]
 3127              		.loc 1 2364 0
 3128 0124 AB80     		strh	r3, [r5, #4]	@ movhi
 3129 0126 04E0     		b	.L404
 3130              	.LVL452:
 3131              	.L395:
 3132              	.LBB75:
2301:../fatfs/src/ff.c **** 					res = FR_EXIST;
 3133              		.loc 1 2301 0
 3134 0128 0820     		movs	r0, #8
 3135              	.LVL453:
 3136 012a 02E0     		b	.L404
 3137              	.LVL454:
 3138              	.L396:
 3139              	.LBE75:
2325:../fatfs/src/ff.c **** 				res = FR_NO_FILE;
 3140              		.loc 1 2325 0
 3141 012c 0420     		movs	r0, #4
 3142 012e 00E0     		b	.L404
 3143              	.L397:
2328:../fatfs/src/ff.c **** 					res = FR_DENIED;
 3144              		.loc 1 2328 0
 3145 0130 0720     		movs	r0, #7
 3146              	.LVL455:
 3147              	.L404:
2365:../fatfs/src/ff.c **** 	}
2366:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 105


2367:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2368:../fatfs/src/ff.c **** }
 3148              		.loc 1 2368 0
 3149 0132 0CB0     		add	sp, sp, #48
 3150              	.LVL456:
 3151              		@ sp needed
 3152 0134 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3153              		.cfi_endproc
 3154              	.LFE24:
 3156              		.section	.text.f_read,"ax",%progbits
 3157              		.align	1
 3158              		.global	f_read
 3159              		.thumb
 3160              		.thumb_func
 3162              	f_read:
 3163              	.LFB25:
2369:../fatfs/src/ff.c **** 
2370:../fatfs/src/ff.c **** 
2371:../fatfs/src/ff.c **** 
2372:../fatfs/src/ff.c **** 
2373:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2374:../fatfs/src/ff.c **** /* Read File                                                             */
2375:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2376:../fatfs/src/ff.c **** 
2377:../fatfs/src/ff.c **** FRESULT f_read (
2378:../fatfs/src/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2379:../fatfs/src/ff.c **** 	void *buff,		/* Pointer to data buffer */
2380:../fatfs/src/ff.c **** 	UINT btr,		/* Number of bytes to read */
2381:../fatfs/src/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2382:../fatfs/src/ff.c **** )
2383:../fatfs/src/ff.c **** {
 3164              		.loc 1 2383 0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 0
 3167              		@ frame_needed = 0, uses_anonymous_args = 0
 3168              	.LVL457:
 3169 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3170              		.cfi_def_cfa_offset 40
 3171              		.cfi_offset 3, -40
 3172              		.cfi_offset 4, -36
 3173              		.cfi_offset 5, -32
 3174              		.cfi_offset 6, -28
 3175              		.cfi_offset 7, -24
 3176              		.cfi_offset 8, -20
 3177              		.cfi_offset 9, -16
 3178              		.cfi_offset 10, -12
 3179              		.cfi_offset 11, -8
 3180              		.cfi_offset 14, -4
 3181              		.loc 1 2383 0
 3182 0004 9A46     		mov	r10, r3
2384:../fatfs/src/ff.c **** 	FRESULT res;
2385:../fatfs/src/ff.c **** 	DWORD clst, sect, remain;
2386:../fatfs/src/ff.c **** 	UINT rcnt, cc;
2387:../fatfs/src/ff.c **** 	BYTE csect, *rbuff = buff;
2388:../fatfs/src/ff.c **** 
2389:../fatfs/src/ff.c **** 
2390:../fatfs/src/ff.c **** 	*br = 0;	/* Initialize byte counter */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 106


 3183              		.loc 1 2390 0
 3184 0006 0023     		movs	r3, #0
 3185              	.LVL458:
2383:../fatfs/src/ff.c **** {
 3186              		.loc 1 2383 0
 3187 0008 0446     		mov	r4, r0
 3188              		.loc 1 2390 0
 3189 000a AAF80030 		strh	r3, [r10]	@ movhi
2383:../fatfs/src/ff.c **** {
 3190              		.loc 1 2383 0
 3191 000e 0F46     		mov	r7, r1
 3192              	.LVL459:
2391:../fatfs/src/ff.c **** 
2392:../fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);				/* Check validity */
 3193              		.loc 1 2392 0
 3194 0010 0068     		ldr	r0, [r0]
 3195              	.LVL460:
 3196 0012 A188     		ldrh	r1, [r4, #4]
 3197              	.LVL461:
2383:../fatfs/src/ff.c **** {
 3198              		.loc 1 2383 0
 3199 0014 1546     		mov	r5, r2
 3200              		.loc 1 2392 0
 3201 0016 FFF7FEFF 		bl	validate
 3202              	.LVL462:
2393:../fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3203              		.loc 1 2393 0
 3204 001a 0028     		cmp	r0, #0
 3205 001c 40F0AC80 		bne	.L418
2394:../fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)					/* Aborted file? */
 3206              		.loc 1 2394 0
 3207 0020 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3208 0022 1806     		lsls	r0, r3, #24
 3209              	.LVL463:
 3210 0024 00F1A480 		bmi	.L438
2395:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2396:../fatfs/src/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 3211              		.loc 1 2396 0
 3212 0028 D907     		lsls	r1, r3, #31
 3213 002a 40F1A480 		bpl	.L439
2397:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2398:../fatfs/src/ff.c **** 	remain = fp->fsize - fp->fptr;
 3214              		.loc 1 2398 0
 3215 002e E268     		ldr	r2, [r4, #12]
 3216 0030 A368     		ldr	r3, [r4, #8]
 3217 0032 D31A     		subs	r3, r2, r3
 3218              	.LVL464:
2399:../fatfs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 3219              		.loc 1 2399 0
 3220 0034 9D42     		cmp	r5, r3
 3221 0036 43D9     		bls	.L420
 3222              		.loc 1 2399 0 is_stmt 0 discriminator 1
 3223 0038 9DB2     		uxth	r5, r3
 3224              	.LVL465:
 3225 003a 41E0     		b	.L420
 3226              	.LVL466:
 3227              	.L436:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 107


2400:../fatfs/src/ff.c **** 
2401:../fatfs/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
2402:../fatfs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2403:../fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 3228              		.loc 1 2403 0 is_stmt 1
 3229 003c A368     		ldr	r3, [r4, #8]
 3230 003e C3F30802 		ubfx	r2, r3, #0, #9
 3231 0042 002A     		cmp	r2, #0
 3232 0044 40F08180 		bne	.L421
2404:../fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3233              		.loc 1 2404 0
 3234 0048 2068     		ldr	r0, [r4]
 3235 004a 90F802B0 		ldrb	fp, [r0, #2]	@ zero_extendqisi2
 3236 004e 0BF1FF3B 		add	fp, fp, #-1
 3237 0052 0BEA532B 		and	fp, fp, r3, lsr #9
 3238              	.LVL467:
2405:../fatfs/src/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 3239              		.loc 1 2405 0
 3240 0056 1BF0FF0B 		ands	fp, fp, #255
 3241              	.LVL468:
 3242 005a 34D0     		beq	.L452
 3243              	.LVL469:
 3244              	.L422:
2406:../fatfs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
2407:../fatfs/src/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
2408:../fatfs/src/ff.c **** 				} else {						/* Middle or end of the file */
2409:../fatfs/src/ff.c **** #if _USE_FASTSEEK
2410:../fatfs/src/ff.c **** 					if (fp->cltbl)
2411:../fatfs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2412:../fatfs/src/ff.c **** 					else
2413:../fatfs/src/ff.c **** #endif
2414:../fatfs/src/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
2415:../fatfs/src/ff.c **** 				}
2416:../fatfs/src/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
2417:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2418:../fatfs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
2419:../fatfs/src/ff.c **** 			}
2420:../fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 3245              		.loc 1 2420 0
 3246 005c D4F80090 		ldr	r9, [r4]
 3247 0060 6169     		ldr	r1, [r4, #20]
 3248 0062 4846     		mov	r0, r9
 3249 0064 FFF7FEFF 		bl	clust2sect
 3250              	.LVL470:
2421:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3251              		.loc 1 2421 0
 3252 0068 0028     		cmp	r0, #0
 3253 006a 38D0     		beq	.L449
2422:../fatfs/src/ff.c **** 			sect += csect;
2423:../fatfs/src/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
2424:../fatfs/src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 3254              		.loc 1 2424 0
 3255 006c 5FEA5528 		lsrs	r8, r5, #9
2422:../fatfs/src/ff.c **** 			sect += csect;
 3256              		.loc 1 2422 0
 3257 0070 00EB0B06 		add	r6, r0, fp
 3258              	.LVL471:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 108


 3259              		.loc 1 2424 0
 3260 0074 45D0     		beq	.L428
2425:../fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3261              		.loc 1 2425 0
 3262 0076 99F80230 		ldrb	r3, [r9, #2]	@ zero_extendqisi2
 3263 007a 0BEB0802 		add	r2, fp, r8
 3264 007e 9A42     		cmp	r2, r3
2426:../fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
 3265              		.loc 1 2426 0
 3266 0080 C4BF     		itt	gt
 3267 0082 CBEB0308 		rsbgt	r8, fp, r3
 3268 0086 1FFA88F8 		uxthgt	r8, r8
 3269              	.LVL472:
2427:../fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 3270              		.loc 1 2427 0
 3271 008a 5FFA88F3 		uxtb	r3, r8
 3272 008e 99F80100 		ldrb	r0, [r9, #1]	@ zero_extendqisi2
 3273 0092 3946     		mov	r1, r7
 3274 0094 3246     		mov	r2, r6
 3275 0096 FFF7FEFF 		bl	disk_read
 3276              	.LVL473:
 3277 009a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3278 009c 0028     		cmp	r0, #0
 3279 009e 4DD1     		bne	.L451
2428:../fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2429:../fatfs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2430:../fatfs/src/ff.c **** #if _FS_TINY
2431:../fatfs/src/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2432:../fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2433:../fatfs/src/ff.c **** #else
2434:../fatfs/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 3280              		.loc 1 2434 0
 3281 00a0 5B06     		lsls	r3, r3, #25
 3282 00a2 21D4     		bmi	.L453
 3283              	.L431:
2435:../fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2436:../fatfs/src/ff.c **** #endif
2437:../fatfs/src/ff.c **** #endif
2438:../fatfs/src/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 3284              		.loc 1 2438 0
 3285 00a4 4FEA4826 		lsl	r6, r8, #9
 3286              	.LVL474:
 3287 00a8 B6B2     		uxth	r6, r6
 3288              	.LVL475:
 3289              	.L432:
2402:../fatfs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 3290              		.loc 1 2402 0
 3291 00aa A368     		ldr	r3, [r4, #8]
 3292 00ac AD1B     		subs	r5, r5, r6
 3293              	.LVL476:
 3294 00ae 3344     		add	r3, r3, r6
 3295 00b0 A360     		str	r3, [r4, #8]
 3296 00b2 BAF80030 		ldrh	r3, [r10]
 3297 00b6 3744     		add	r7, r7, r6
 3298              	.LVL477:
 3299 00b8 3344     		add	r3, r3, r6
 3300 00ba AAF80030 		strh	r3, [r10]	@ movhi
ARM GAS  /tmp/ccOwSZ6Y.s 			page 109


 3301 00be ADB2     		uxth	r5, r5
 3302              	.LVL478:
 3303              	.L420:
2401:../fatfs/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 3304              		.loc 1 2401 0 discriminator 1
 3305 00c0 002D     		cmp	r5, #0
 3306 00c2 BBD1     		bne	.L436
 3307 00c4 51E0     		b	.L454
 3308              	.LVL479:
 3309              	.L452:
2406:../fatfs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 3310              		.loc 1 2406 0
 3311 00c6 0BB9     		cbnz	r3, .L423
2407:../fatfs/src/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 3312              		.loc 1 2407 0
 3313 00c8 2069     		ldr	r0, [r4, #16]
 3314              	.LVL480:
 3315 00ca 02E0     		b	.L424
 3316              	.LVL481:
 3317              	.L423:
2414:../fatfs/src/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 3318              		.loc 1 2414 0
 3319 00cc 6169     		ldr	r1, [r4, #20]
 3320 00ce FFF7FEFF 		bl	get_fat
 3321              	.LVL482:
 3322              	.L424:
2416:../fatfs/src/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 3323              		.loc 1 2416 0
 3324 00d2 0128     		cmp	r0, #1
 3325 00d4 03D9     		bls	.L449
2417:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3326              		.loc 1 2417 0
 3327 00d6 421C     		adds	r2, r0, #1
 3328 00d8 2FD0     		beq	.L450
2418:../fatfs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 3329              		.loc 1 2418 0
 3330 00da 6061     		str	r0, [r4, #20]
 3331 00dc BEE7     		b	.L422
 3332              	.LVL483:
 3333              	.L449:
2421:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3334              		.loc 1 2421 0 discriminator 1
 3335 00de A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3336 00e0 63F07F03 		orn	r3, r3, #127
 3337 00e4 A371     		strb	r3, [r4, #6]
 3338 00e6 43E0     		b	.L438
 3339              	.LVL484:
 3340              	.L453:
2434:../fatfs/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 3341              		.loc 1 2434 0 discriminator 1
 3342 00e8 A369     		ldr	r3, [r4, #24]
 3343 00ea 981B     		subs	r0, r3, r6
 3344 00ec 4045     		cmp	r0, r8
 3345 00ee D9D2     		bcs	.L431
2435:../fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 3346              		.loc 1 2435 0
 3347 00f0 07EB4020 		add	r0, r7, r0, lsl #9
ARM GAS  /tmp/ccOwSZ6Y.s 			page 110


 3348 00f4 04F12401 		add	r1, r4, #36
 3349 00f8 4FF40072 		mov	r2, #512
 3350 00fc FFF7FEFF 		bl	mem_cpy
 3351              	.LVL485:
 3352 0100 D0E7     		b	.L431
 3353              	.LVL486:
 3354              	.L428:
2439:../fatfs/src/ff.c **** 				continue;
2440:../fatfs/src/ff.c **** 			}
2441:../fatfs/src/ff.c **** #if !_FS_TINY
2442:../fatfs/src/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 3355              		.loc 1 2442 0
 3356 0102 A269     		ldr	r2, [r4, #24]
 3357 0104 B242     		cmp	r2, r6
 3358 0106 1FD0     		beq	.L433
2443:../fatfs/src/ff.c **** #if !_FS_READONLY
2444:../fatfs/src/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 3359              		.loc 1 2444 0
 3360 0108 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3361 010a 04F12408 		add	r8, r4, #36
 3362 010e 13F0400F 		tst	r3, #64
 3363 0112 0AD0     		beq	.L434
2445:../fatfs/src/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3364              		.loc 1 2445 0
 3365 0114 0123     		movs	r3, #1
 3366 0116 99F80100 		ldrb	r0, [r9, #1]	@ zero_extendqisi2
 3367 011a 4146     		mov	r1, r8
 3368 011c FFF7FEFF 		bl	disk_write
 3369              	.LVL487:
 3370 0120 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3371 0122 58B9     		cbnz	r0, .L451
2446:../fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2447:../fatfs/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 3372              		.loc 1 2447 0
 3373 0124 23F04003 		bic	r3, r3, #64
 3374 0128 A371     		strb	r3, [r4, #6]
 3375              	.L434:
2448:../fatfs/src/ff.c **** 				}
2449:../fatfs/src/ff.c **** #endif
2450:../fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 3376              		.loc 1 2450 0
 3377 012a 2368     		ldr	r3, [r4]
 3378 012c 4146     		mov	r1, r8
 3379 012e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3380 0130 3246     		mov	r2, r6
 3381 0132 0123     		movs	r3, #1
 3382 0134 FFF7FEFF 		bl	disk_read
 3383              	.LVL488:
 3384 0138 30B1     		cbz	r0, .L433
 3385              	.LVL489:
 3386              	.L450:
2451:../fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 3387              		.loc 1 2451 0
 3388 013a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3389              	.L451:
 3390 013c 63F07F03 		orn	r3, r3, #127
 3391 0140 A371     		strb	r3, [r4, #6]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 111


 3392 0142 0120     		movs	r0, #1
 3393 0144 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3394              	.LVL490:
 3395              	.L433:
2452:../fatfs/src/ff.c **** 			}
2453:../fatfs/src/ff.c **** #endif
2454:../fatfs/src/ff.c **** 			fp->dsect = sect;
 3396              		.loc 1 2454 0
 3397 0148 A661     		str	r6, [r4, #24]
 3398              	.LVL491:
 3399              	.L421:
2455:../fatfs/src/ff.c **** 		}
2456:../fatfs/src/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 3400              		.loc 1 2456 0
 3401 014a A168     		ldr	r1, [r4, #8]
2457:../fatfs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;
2458:../fatfs/src/ff.c **** #if _FS_TINY
2459:../fatfs/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
2460:../fatfs/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2461:../fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2462:../fatfs/src/ff.c **** #else
2463:../fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 3402              		.loc 1 2463 0
 3403 014c 3846     		mov	r0, r7
2456:../fatfs/src/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 3404              		.loc 1 2456 0
 3405 014e C1F30801 		ubfx	r1, r1, #0, #9
 3406 0152 C1F50076 		rsb	r6, r1, #512
 3407 0156 B6B2     		uxth	r6, r6
 3408              	.LVL492:
 3409 0158 B542     		cmp	r5, r6
 3410 015a 38BF     		it	cc
 3411 015c 2E46     		movcc	r6, r5
 3412              	.LVL493:
 3413              		.loc 1 2463 0
 3414 015e 2144     		add	r1, r1, r4
 3415 0160 2431     		adds	r1, r1, #36
 3416 0162 3246     		mov	r2, r6
 3417 0164 FFF7FEFF 		bl	mem_cpy
 3418              	.LVL494:
 3419 0168 9FE7     		b	.L432
 3420              	.LVL495:
 3421              	.L454:
2464:../fatfs/src/ff.c **** #endif
2465:../fatfs/src/ff.c **** 	}
2466:../fatfs/src/ff.c **** 
2467:../fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 3422              		.loc 1 2467 0
 3423 016a 2846     		mov	r0, r5
 3424 016c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3425              	.LVL496:
 3426              	.L438:
2395:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 3427              		.loc 1 2395 0
 3428 0170 0220     		movs	r0, #2
 3429 0172 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3430              	.LVL497:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 112


 3431              	.L439:
2397:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 3432              		.loc 1 2397 0
 3433 0176 0720     		movs	r0, #7
 3434              	.L418:
2468:../fatfs/src/ff.c **** }
 3435              		.loc 1 2468 0
 3436 0178 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3437              		.cfi_endproc
 3438              	.LFE25:
 3440              		.section	.text.f_write,"ax",%progbits
 3441              		.align	1
 3442              		.global	f_write
 3443              		.thumb
 3444              		.thumb_func
 3446              	f_write:
 3447              	.LFB26:
2469:../fatfs/src/ff.c **** 
2470:../fatfs/src/ff.c **** 
2471:../fatfs/src/ff.c **** 
2472:../fatfs/src/ff.c **** 
2473:../fatfs/src/ff.c **** #if !_FS_READONLY
2474:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2475:../fatfs/src/ff.c **** /* Write File                                                            */
2476:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2477:../fatfs/src/ff.c **** 
2478:../fatfs/src/ff.c **** FRESULT f_write (
2479:../fatfs/src/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2480:../fatfs/src/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2481:../fatfs/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
2482:../fatfs/src/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2483:../fatfs/src/ff.c **** )
2484:../fatfs/src/ff.c **** {
 3448              		.loc 1 2484 0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 0
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 3452              	.LVL498:
 3453 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3454              		.cfi_def_cfa_offset 40
 3455              		.cfi_offset 3, -40
 3456              		.cfi_offset 4, -36
 3457              		.cfi_offset 5, -32
 3458              		.cfi_offset 6, -28
 3459              		.cfi_offset 7, -24
 3460              		.cfi_offset 8, -20
 3461              		.cfi_offset 9, -16
 3462              		.cfi_offset 10, -12
 3463              		.cfi_offset 11, -8
 3464              		.cfi_offset 14, -4
 3465              		.loc 1 2484 0
 3466 0004 9946     		mov	r9, r3
2485:../fatfs/src/ff.c **** 	FRESULT res;
2486:../fatfs/src/ff.c **** 	DWORD clst, sect;
2487:../fatfs/src/ff.c **** 	UINT wcnt, cc;
2488:../fatfs/src/ff.c **** 	const BYTE *wbuff = buff;
2489:../fatfs/src/ff.c **** 	BYTE csect;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 113


2490:../fatfs/src/ff.c **** 
2491:../fatfs/src/ff.c **** 
2492:../fatfs/src/ff.c **** 	*bw = 0;	/* Initialize byte counter */
 3467              		.loc 1 2492 0
 3468 0006 0023     		movs	r3, #0
 3469              	.LVL499:
2484:../fatfs/src/ff.c **** {
 3470              		.loc 1 2484 0
 3471 0008 0446     		mov	r4, r0
 3472              		.loc 1 2492 0
 3473 000a A9F80030 		strh	r3, [r9]	@ movhi
2484:../fatfs/src/ff.c **** {
 3474              		.loc 1 2484 0
 3475 000e 0F46     		mov	r7, r1
 3476              	.LVL500:
2493:../fatfs/src/ff.c **** 
2494:../fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);			/* Check validity */
 3477              		.loc 1 2494 0
 3478 0010 0068     		ldr	r0, [r0]
 3479              	.LVL501:
 3480 0012 A188     		ldrh	r1, [r4, #4]
 3481              	.LVL502:
2484:../fatfs/src/ff.c **** {
 3482              		.loc 1 2484 0
 3483 0014 1546     		mov	r5, r2
 3484              		.loc 1 2494 0
 3485 0016 FFF7FEFF 		bl	validate
 3486              	.LVL503:
2495:../fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 3487              		.loc 1 2495 0
 3488 001a 0028     		cmp	r0, #0
 3489 001c 40F0BF80 		bne	.L456
2496:../fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)				/* Aborted file? */
 3490              		.loc 1 2496 0
 3491 0020 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3492 0022 1806     		lsls	r0, r3, #24
 3493              	.LVL504:
 3494 0024 5CD4     		bmi	.L490
2497:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2498:../fatfs/src/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 3495              		.loc 1 2498 0
 3496 0026 9907     		lsls	r1, r3, #30
 3497 0028 40F1B880 		bpl	.L481
2499:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2500:../fatfs/src/ff.c **** 	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
 3498              		.loc 1 2500 0
 3499 002c E368     		ldr	r3, [r4, #12]
 3500 002e DD42     		cmn	r5, r3
 3501 0030 28BF     		it	cs
 3502 0032 0025     		movcs	r5, #0
 3503 0034 36E0     		b	.L458
 3504              	.LVL505:
 3505              	.L470:
2501:../fatfs/src/ff.c **** 
2502:../fatfs/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
2503:../fatfs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2504:../fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 114


2505:../fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2506:../fatfs/src/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
2507:../fatfs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
2508:../fatfs/src/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
2509:../fatfs/src/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
2510:../fatfs/src/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2511:../fatfs/src/ff.c **** 				} else {					/* Middle or end of the file */
2512:../fatfs/src/ff.c **** #if _USE_FASTSEEK
2513:../fatfs/src/ff.c **** 					if (fp->cltbl)
2514:../fatfs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2515:../fatfs/src/ff.c **** 					else
2516:../fatfs/src/ff.c **** #endif
2517:../fatfs/src/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2518:../fatfs/src/ff.c **** 				}
2519:../fatfs/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2520:../fatfs/src/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2521:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2522:../fatfs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
2523:../fatfs/src/ff.c **** 			}
2524:../fatfs/src/ff.c **** #if _FS_TINY
2525:../fatfs/src/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
2526:../fatfs/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2527:../fatfs/src/ff.c **** #else
2528:../fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
2529:../fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2530:../fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2531:../fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
2532:../fatfs/src/ff.c **** 			}
2533:../fatfs/src/ff.c **** #endif
2534:../fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
2535:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2536:../fatfs/src/ff.c **** 			sect += csect;
2537:../fatfs/src/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
2538:../fatfs/src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 3506              		.loc 1 2538 0
 3507 0036 5FEA5528 		lsrs	r8, r5, #9
2536:../fatfs/src/ff.c **** 			sect += csect;
 3508              		.loc 1 2536 0
 3509 003a 00EB0A06 		add	r6, r0, r10
 3510              	.LVL506:
 3511              		.loc 1 2538 0
 3512 003e 7AD0     		beq	.L471
2539:../fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 3513              		.loc 1 2539 0
 3514 0040 9BF80230 		ldrb	r3, [fp, #2]	@ zero_extendqisi2
 3515 0044 0AEB0802 		add	r2, r10, r8
 3516 0048 9A42     		cmp	r2, r3
2540:../fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
 3517              		.loc 1 2540 0
 3518 004a C4BF     		itt	gt
 3519 004c CAEB0308 		rsbgt	r8, r10, r3
 3520 0050 1FFA88F8 		uxthgt	r8, r8
 3521              	.LVL507:
2541:../fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 3522              		.loc 1 2541 0
 3523 0054 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 3524 0058 3946     		mov	r1, r7
ARM GAS  /tmp/ccOwSZ6Y.s 			page 115


 3525 005a 3246     		mov	r2, r6
 3526 005c 5FFA88F3 		uxtb	r3, r8
 3527 0060 FFF7FEFF 		bl	disk_write
 3528              	.LVL508:
 3529 0064 0028     		cmp	r0, #0
 3530 0066 76D1     		bne	.L491
2542:../fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2543:../fatfs/src/ff.c **** #if _FS_TINY
2544:../fatfs/src/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2545:../fatfs/src/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2546:../fatfs/src/ff.c **** 					fp->fs->wflag = 0;
2547:../fatfs/src/ff.c **** 				}
2548:../fatfs/src/ff.c **** #else
2549:../fatfs/src/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
 3531              		.loc 1 2549 0
 3532 0068 A369     		ldr	r3, [r4, #24]
 3533 006a 991B     		subs	r1, r3, r6
 3534 006c 4145     		cmp	r1, r8
 3535 006e 0BD2     		bcs	.L474
2550:../fatfs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 3536              		.loc 1 2550 0
 3537 0070 04F12400 		add	r0, r4, #36
 3538 0074 07EB4121 		add	r1, r7, r1, lsl #9
 3539 0078 4FF40072 		mov	r2, #512
 3540 007c FFF7FEFF 		bl	mem_cpy
 3541              	.LVL509:
2551:../fatfs/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 3542              		.loc 1 2551 0
 3543 0080 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3544 0082 23F04003 		bic	r3, r3, #64
 3545 0086 A371     		strb	r3, [r4, #6]
 3546              	.L474:
2552:../fatfs/src/ff.c **** 				}
2553:../fatfs/src/ff.c **** #endif
2554:../fatfs/src/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 3547              		.loc 1 2554 0
 3548 0088 4FEA4826 		lsl	r6, r8, #9
 3549              	.LVL510:
 3550 008c B6B2     		uxth	r6, r6
 3551              	.LVL511:
 3552              	.L475:
2503:../fatfs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 3553              		.loc 1 2503 0
 3554 008e A368     		ldr	r3, [r4, #8]
 3555 0090 AD1B     		subs	r5, r5, r6
 3556              	.LVL512:
 3557 0092 3344     		add	r3, r3, r6
 3558 0094 A360     		str	r3, [r4, #8]
 3559 0096 B9F80030 		ldrh	r3, [r9]
 3560 009a 3744     		add	r7, r7, r6
 3561              	.LVL513:
 3562 009c 3344     		add	r3, r3, r6
 3563 009e A9F80030 		strh	r3, [r9]	@ movhi
 3564 00a2 ADB2     		uxth	r5, r5
 3565              	.LVL514:
 3566              	.L458:
2502:../fatfs/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 116


 3567              		.loc 1 2502 0 discriminator 1
 3568 00a4 25B3     		cbz	r5, .L478
2504:../fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 3569              		.loc 1 2504 0
 3570 00a6 A368     		ldr	r3, [r4, #8]
 3571 00a8 C3F30802 		ubfx	r2, r3, #0, #9
 3572 00ac 002A     		cmp	r2, #0
 3573 00ae 5AD1     		bne	.L459
2505:../fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 3574              		.loc 1 2505 0
 3575 00b0 2068     		ldr	r0, [r4]
 3576 00b2 90F802A0 		ldrb	r10, [r0, #2]	@ zero_extendqisi2
 3577 00b6 0AF1FF3A 		add	r10, r10, #-1
 3578 00ba 0AEA532A 		and	r10, r10, r3, lsr #9
 3579              	.LVL515:
2506:../fatfs/src/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 3580              		.loc 1 2506 0
 3581 00be 1AF0FF0A 		ands	r10, r10, #255
 3582              	.LVL516:
 3583 00c2 1ED1     		bne	.L460
2507:../fatfs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 3584              		.loc 1 2507 0
 3585 00c4 7BB9     		cbnz	r3, .L461
2508:../fatfs/src/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 3586              		.loc 1 2508 0
 3587 00c6 2169     		ldr	r1, [r4, #16]
 3588              	.LVL517:
2509:../fatfs/src/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 3589              		.loc 1 2509 0
 3590 00c8 21B9     		cbnz	r1, .L462
2510:../fatfs/src/ff.c **** 						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 3591              		.loc 1 2510 0
 3592 00ca FFF7FEFF 		bl	create_chain
 3593              	.LVL518:
 3594 00ce 0146     		mov	r1, r0
 3595              	.LVL519:
 3596 00d0 2061     		str	r0, [r4, #16]
 3597              	.L463:
2519:../fatfs/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 3598              		.loc 1 2519 0
 3599 00d2 69B1     		cbz	r1, .L478
 3600              	.LVL520:
 3601              	.L462:
2520:../fatfs/src/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 3602              		.loc 1 2520 0
 3603 00d4 0129     		cmp	r1, #1
 3604 00d6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3605 00d8 10D1     		bne	.L466
 3606              	.LVL521:
 3607              	.L489:
2535:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3608              		.loc 1 2535 0 discriminator 1
 3609 00da 63F07F03 		orn	r3, r3, #127
 3610 00de A371     		strb	r3, [r4, #6]
 3611              	.LVL522:
 3612              	.L490:
 3613 00e0 0220     		movs	r0, #2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 117


 3614 00e2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3615              	.LVL523:
 3616              	.L461:
2517:../fatfs/src/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 3617              		.loc 1 2517 0
 3618 00e6 6169     		ldr	r1, [r4, #20]
 3619 00e8 FFF7FEFF 		bl	create_chain
 3620              	.LVL524:
 3621 00ec 0146     		mov	r1, r0
 3622              	.LVL525:
 3623 00ee F0E7     		b	.L463
 3624              	.LVL526:
 3625              	.L478:
2555:../fatfs/src/ff.c **** 				continue;
2556:../fatfs/src/ff.c **** 			}
2557:../fatfs/src/ff.c **** #if _FS_TINY
2558:../fatfs/src/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2559:../fatfs/src/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2560:../fatfs/src/ff.c **** 				fp->fs->winsect = sect;
2561:../fatfs/src/ff.c **** 			}
2562:../fatfs/src/ff.c **** #else
2563:../fatfs/src/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
2564:../fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
2565:../fatfs/src/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2566:../fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2567:../fatfs/src/ff.c **** 			}
2568:../fatfs/src/ff.c **** #endif
2569:../fatfs/src/ff.c **** 			fp->dsect = sect;
2570:../fatfs/src/ff.c **** 		}
2571:../fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2572:../fatfs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;
2573:../fatfs/src/ff.c **** #if _FS_TINY
2574:../fatfs/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2575:../fatfs/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2576:../fatfs/src/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2577:../fatfs/src/ff.c **** 		fp->fs->wflag = 1;
2578:../fatfs/src/ff.c **** #else
2579:../fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2580:../fatfs/src/ff.c **** 		fp->flag |= FA__DIRTY;
2581:../fatfs/src/ff.c **** #endif
2582:../fatfs/src/ff.c **** 	}
2583:../fatfs/src/ff.c **** 
2584:../fatfs/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 3626              		.loc 1 2584 0
 3627 00f0 A368     		ldr	r3, [r4, #8]
 3628 00f2 E268     		ldr	r2, [r4, #12]
 3629 00f4 9342     		cmp	r3, r2
 3630 00f6 4AD9     		bls	.L465
 3631              		.loc 1 2584 0 is_stmt 0 discriminator 1
 3632 00f8 E360     		str	r3, [r4, #12]
 3633 00fa 48E0     		b	.L465
 3634              	.LVL527:
 3635              	.L466:
2521:../fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 3636              		.loc 1 2521 0 is_stmt 1
 3637 00fc 4A1C     		adds	r2, r1, #1
 3638 00fe 2BD0     		beq	.L492
ARM GAS  /tmp/ccOwSZ6Y.s 			page 118


2522:../fatfs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 3639              		.loc 1 2522 0
 3640 0100 6161     		str	r1, [r4, #20]
 3641              	.LVL528:
 3642              	.L460:
2528:../fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 3643              		.loc 1 2528 0
 3644 0102 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3645 0104 5B06     		lsls	r3, r3, #25
 3646 0106 0CD5     		bpl	.L468
2529:../fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3647              		.loc 1 2529 0
 3648 0108 2146     		mov	r1, r4
 3649 010a 51F8243B 		ldr	r3, [r1], #36
 3650 010e A269     		ldr	r2, [r4, #24]
 3651 0110 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3652 0112 0123     		movs	r3, #1
 3653 0114 FFF7FEFF 		bl	disk_write
 3654              	.LVL529:
 3655 0118 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3656 011a E8B9     		cbnz	r0, .L492
2531:../fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 3657              		.loc 1 2531 0
 3658 011c 23F04003 		bic	r3, r3, #64
 3659 0120 A371     		strb	r3, [r4, #6]
 3660              	.L468:
2534:../fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 3661              		.loc 1 2534 0
 3662 0122 D4F800B0 		ldr	fp, [r4]
 3663 0126 6169     		ldr	r1, [r4, #20]
 3664 0128 5846     		mov	r0, fp
 3665 012a FFF7FEFF 		bl	clust2sect
 3666              	.LVL530:
2535:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3667              		.loc 1 2535 0
 3668 012e 0028     		cmp	r0, #0
 3669 0130 81D1     		bne	.L470
2535:../fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 3670              		.loc 1 2535 0 is_stmt 0 discriminator 1
 3671 0132 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3672 0134 D1E7     		b	.L489
 3673              	.LVL531:
 3674              	.L471:
2563:../fatfs/src/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 3675              		.loc 1 2563 0 is_stmt 1
 3676 0136 A369     		ldr	r3, [r4, #24]
 3677 0138 B342     		cmp	r3, r6
 3678 013a 13D0     		beq	.L476
2564:../fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 3679              		.loc 1 2564 0
 3680 013c A268     		ldr	r2, [r4, #8]
 3681 013e E368     		ldr	r3, [r4, #12]
 3682 0140 9A42     		cmp	r2, r3
 3683 0142 0FD2     		bcs	.L476
2565:../fatfs/src/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 3684              		.loc 1 2565 0 discriminator 1
 3685 0144 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 119


 3686 0148 04F12401 		add	r1, r4, #36
 3687 014c 3246     		mov	r2, r6
 3688 014e 0123     		movs	r3, #1
 3689 0150 FFF7FEFF 		bl	disk_read
 3690              	.LVL532:
2564:../fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 3691              		.loc 1 2564 0 discriminator 1
 3692 0154 30B1     		cbz	r0, .L476
 3693              	.LVL533:
 3694              	.L491:
2566:../fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 3695              		.loc 1 2566 0
 3696 0156 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3697              	.LVL534:
 3698              	.L492:
 3699 0158 63F07F03 		orn	r3, r3, #127
 3700 015c A371     		strb	r3, [r4, #6]
 3701 015e 0120     		movs	r0, #1
 3702 0160 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3703              	.LVL535:
 3704              	.L476:
2569:../fatfs/src/ff.c **** 			fp->dsect = sect;
 3705              		.loc 1 2569 0
 3706 0164 A661     		str	r6, [r4, #24]
 3707              	.LVL536:
 3708              	.L459:
2571:../fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 3709              		.loc 1 2571 0
 3710 0166 A068     		ldr	r0, [r4, #8]
2579:../fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 3711              		.loc 1 2579 0
 3712 0168 3946     		mov	r1, r7
2571:../fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 3713              		.loc 1 2571 0
 3714 016a C0F30800 		ubfx	r0, r0, #0, #9
 3715 016e C0F50076 		rsb	r6, r0, #512
 3716 0172 B6B2     		uxth	r6, r6
 3717              	.LVL537:
 3718 0174 B542     		cmp	r5, r6
 3719 0176 38BF     		it	cc
 3720 0178 2E46     		movcc	r6, r5
 3721              	.LVL538:
2579:../fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 3722              		.loc 1 2579 0
 3723 017a 2044     		add	r0, r0, r4
 3724 017c 2430     		adds	r0, r0, #36
 3725 017e 3246     		mov	r2, r6
 3726 0180 FFF7FEFF 		bl	mem_cpy
 3727              	.LVL539:
2580:../fatfs/src/ff.c **** 		fp->flag |= FA__DIRTY;
 3728              		.loc 1 2580 0
 3729 0184 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3730 0186 43F04003 		orr	r3, r3, #64
 3731 018a A371     		strb	r3, [r4, #6]
 3732 018c 7FE7     		b	.L475
 3733              	.LVL540:
 3734              	.L465:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 120


2585:../fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 3735              		.loc 1 2585 0
 3736 018e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
2586:../fatfs/src/ff.c **** 
2587:../fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 3737              		.loc 1 2587 0
 3738 0190 0020     		movs	r0, #0
2585:../fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 3739              		.loc 1 2585 0
 3740 0192 43F02003 		orr	r3, r3, #32
 3741 0196 A371     		strb	r3, [r4, #6]
 3742              		.loc 1 2587 0
 3743 0198 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3744              	.LVL541:
 3745              	.L481:
2499:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 3746              		.loc 1 2499 0
 3747 019c 0720     		movs	r0, #7
 3748              	.L456:
2588:../fatfs/src/ff.c **** }
 3749              		.loc 1 2588 0
 3750 019e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3751              		.cfi_endproc
 3752              	.LFE26:
 3754              		.section	.text.f_sync,"ax",%progbits
 3755              		.align	1
 3756              		.global	f_sync
 3757              		.thumb
 3758              		.thumb_func
 3760              	f_sync:
 3761              	.LFB27:
2589:../fatfs/src/ff.c **** 
2590:../fatfs/src/ff.c **** 
2591:../fatfs/src/ff.c **** 
2592:../fatfs/src/ff.c **** 
2593:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2594:../fatfs/src/ff.c **** /* Synchronize the File Object                                           */
2595:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2596:../fatfs/src/ff.c **** 
2597:../fatfs/src/ff.c **** FRESULT f_sync (
2598:../fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object */
2599:../fatfs/src/ff.c **** )
2600:../fatfs/src/ff.c **** {
 3762              		.loc 1 2600 0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 0
 3765              		@ frame_needed = 0, uses_anonymous_args = 0
 3766              	.LVL542:
 3767 0000 38B5     		push	{r3, r4, r5, lr}
 3768              		.cfi_def_cfa_offset 16
 3769              		.cfi_offset 3, -16
 3770              		.cfi_offset 4, -12
 3771              		.cfi_offset 5, -8
 3772              		.cfi_offset 14, -4
 3773              		.loc 1 2600 0
 3774 0002 0446     		mov	r4, r0
2601:../fatfs/src/ff.c **** 	FRESULT res;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 121


2602:../fatfs/src/ff.c **** 	DWORD tim;
2603:../fatfs/src/ff.c **** 	BYTE *dir;
2604:../fatfs/src/ff.c **** 
2605:../fatfs/src/ff.c **** 
2606:../fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 3775              		.loc 1 2606 0
 3776 0004 A188     		ldrh	r1, [r4, #4]
 3777 0006 0068     		ldr	r0, [r0]
 3778              	.LVL543:
 3779 0008 FFF7FEFF 		bl	validate
 3780              	.LVL544:
2607:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 3781              		.loc 1 2607 0
 3782 000c 0028     		cmp	r0, #0
 3783 000e 4AD1     		bne	.L494
2608:../fatfs/src/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 3784              		.loc 1 2608 0
 3785 0010 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3786 0012 03F02002 		and	r2, r3, #32
 3787 0016 02F0FF00 		and	r0, r2, #255
 3788              	.LVL545:
 3789 001a 002A     		cmp	r2, #0
 3790 001c 43D0     		beq	.L494
2609:../fatfs/src/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2610:../fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {
 3791              		.loc 1 2610 0
 3792 001e 5B06     		lsls	r3, r3, #25
 3793 0020 0DD5     		bpl	.L495
2611:../fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 3794              		.loc 1 2611 0
 3795 0022 2146     		mov	r1, r4
 3796 0024 51F8243B 		ldr	r3, [r1], #36
 3797 0028 A269     		ldr	r2, [r4, #24]
 3798 002a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 3799 002c 0123     		movs	r3, #1
 3800 002e FFF7FEFF 		bl	disk_write
 3801              	.LVL546:
 3802 0032 0028     		cmp	r0, #0
 3803 0034 36D1     		bne	.L498
2612:../fatfs/src/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2613:../fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 3804              		.loc 1 2613 0
 3805 0036 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3806 0038 23F04003 		bic	r3, r3, #64
 3807 003c A371     		strb	r3, [r4, #6]
 3808              	.L495:
2614:../fatfs/src/ff.c **** 			}
2615:../fatfs/src/ff.c **** #endif
2616:../fatfs/src/ff.c **** 			/* Update the directory entry */
2617:../fatfs/src/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 3809              		.loc 1 2617 0
 3810 003e 2068     		ldr	r0, [r4]
 3811 0040 E169     		ldr	r1, [r4, #28]
 3812 0042 FFF7FEFF 		bl	move_window
 3813              	.LVL547:
2618:../fatfs/src/ff.c **** 			if (res == FR_OK) {
 3814              		.loc 1 2618 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 122


 3815 0046 70BB     		cbnz	r0, .L494
2619:../fatfs/src/ff.c **** 				dir = fp->dir_ptr;
 3816              		.loc 1 2619 0
 3817 0048 256A     		ldr	r5, [r4, #32]
 3818              	.LVL548:
2620:../fatfs/src/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 3819              		.loc 1 2620 0
 3820 004a EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 3821 004c 43F02003 		orr	r3, r3, #32
 3822 0050 EB72     		strb	r3, [r5, #11]
2621:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 3823              		.loc 1 2621 0
 3824 0052 E368     		ldr	r3, [r4, #12]
 3825 0054 2B77     		strb	r3, [r5, #28]
 3826 0056 A389     		ldrh	r3, [r4, #12]
 3827 0058 1B0A     		lsrs	r3, r3, #8
 3828 005a 6B77     		strb	r3, [r5, #29]
 3829 005c E389     		ldrh	r3, [r4, #14]
 3830 005e AB77     		strb	r3, [r5, #30]
 3831 0060 E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 3832 0062 EB77     		strb	r3, [r5, #31]
2622:../fatfs/src/ff.c **** 				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
 3833              		.loc 1 2622 0
 3834 0064 2369     		ldr	r3, [r4, #16]
 3835 0066 AB76     		strb	r3, [r5, #26]
 3836 0068 238A     		ldrh	r3, [r4, #16]
 3837 006a 1B0A     		lsrs	r3, r3, #8
 3838 006c EB76     		strb	r3, [r5, #27]
 3839 006e 638A     		ldrh	r3, [r4, #18]
 3840 0070 2B75     		strb	r3, [r5, #20]
 3841 0072 638A     		ldrh	r3, [r4, #18]
 3842 0074 1B0A     		lsrs	r3, r3, #8
 3843 0076 6B75     		strb	r3, [r5, #21]
2623:../fatfs/src/ff.c **** 				tim = get_fattime();						/* Update updated time */
 3844              		.loc 1 2623 0
 3845 0078 FFF7FEFF 		bl	get_fattime
 3846              	.LVL549:
2624:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 3847              		.loc 1 2624 0
 3848 007c C0F30723 		ubfx	r3, r0, #8, #8
 3849 0080 A875     		strb	r0, [r5, #22]
 3850 0082 EB75     		strb	r3, [r5, #23]
 3851 0084 030C     		lsrs	r3, r0, #16
 3852 0086 000E     		lsrs	r0, r0, #24
 3853              	.LVL550:
 3854 0088 2B76     		strb	r3, [r5, #24]
 3855 008a 6876     		strb	r0, [r5, #25]
2625:../fatfs/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 3856              		.loc 1 2625 0
 3857 008c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
2626:../fatfs/src/ff.c **** 				fp->fs->wflag = 1;
 3858              		.loc 1 2626 0
 3859 008e 0122     		movs	r2, #1
2625:../fatfs/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 3860              		.loc 1 2625 0
 3861 0090 23F02003 		bic	r3, r3, #32
 3862 0094 A371     		strb	r3, [r4, #6]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 123


 3863              		.loc 1 2626 0
 3864 0096 2368     		ldr	r3, [r4]
 3865 0098 1A71     		strb	r2, [r3, #4]
2627:../fatfs/src/ff.c **** 				res = sync(fp->fs);
 3866              		.loc 1 2627 0
 3867 009a 2068     		ldr	r0, [r4]
2628:../fatfs/src/ff.c **** 			}
2629:../fatfs/src/ff.c **** 		}
2630:../fatfs/src/ff.c **** 	}
2631:../fatfs/src/ff.c **** 
2632:../fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
2633:../fatfs/src/ff.c **** }
 3868              		.loc 1 2633 0
 3869 009c BDE83840 		pop	{r3, r4, r5, lr}
 3870              	.LVL551:
2627:../fatfs/src/ff.c **** 				res = sync(fp->fs);
 3871              		.loc 1 2627 0
 3872 00a0 FFF7FEBF 		b	sync
 3873              	.LVL552:
 3874              	.L498:
2612:../fatfs/src/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 3875              		.loc 1 2612 0
 3876 00a4 0120     		movs	r0, #1
 3877              	.L494:
 3878              		.loc 1 2633 0
 3879 00a6 38BD     		pop	{r3, r4, r5, pc}
 3880              		.cfi_endproc
 3881              	.LFE27:
 3883              		.section	.text.f_close,"ax",%progbits
 3884              		.align	1
 3885              		.global	f_close
 3886              		.thumb
 3887              		.thumb_func
 3889              	f_close:
 3890              	.LFB28:
2634:../fatfs/src/ff.c **** 
2635:../fatfs/src/ff.c **** #endif /* !_FS_READONLY */
2636:../fatfs/src/ff.c **** 
2637:../fatfs/src/ff.c **** 
2638:../fatfs/src/ff.c **** 
2639:../fatfs/src/ff.c **** 
2640:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2641:../fatfs/src/ff.c **** /* Close File                                                            */
2642:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2643:../fatfs/src/ff.c **** 
2644:../fatfs/src/ff.c **** FRESULT f_close (
2645:../fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2646:../fatfs/src/ff.c **** )
2647:../fatfs/src/ff.c **** {
 3891              		.loc 1 2647 0
 3892              		.cfi_startproc
 3893              		@ args = 0, pretend = 0, frame = 0
 3894              		@ frame_needed = 0, uses_anonymous_args = 0
 3895              	.LVL553:
 3896 0000 10B5     		push	{r4, lr}
 3897              		.cfi_def_cfa_offset 8
 3898              		.cfi_offset 4, -8
ARM GAS  /tmp/ccOwSZ6Y.s 			page 124


 3899              		.cfi_offset 14, -4
 3900              		.loc 1 2647 0
 3901 0002 0446     		mov	r4, r0
2648:../fatfs/src/ff.c **** 	FRESULT res;
2649:../fatfs/src/ff.c **** 
2650:../fatfs/src/ff.c **** #if _FS_READONLY
2651:../fatfs/src/ff.c **** 	FATFS *fs = fp->fs;
2652:../fatfs/src/ff.c **** 	res = validate(fs, fp->id);
2653:../fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2654:../fatfs/src/ff.c **** 	LEAVE_FF(fs, res);
2655:../fatfs/src/ff.c **** 
2656:../fatfs/src/ff.c **** #else
2657:../fatfs/src/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
 3902              		.loc 1 2657 0
 3903 0004 FFF7FEFF 		bl	f_sync
 3904              	.LVL554:
2658:../fatfs/src/ff.c **** #if _FS_SHARE
2659:../fatfs/src/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2660:../fatfs/src/ff.c **** #if _FS_REENTRANT
2661:../fatfs/src/ff.c **** 		res = validate(fp->fs, fp->id);
2662:../fatfs/src/ff.c **** 		if (res == FR_OK) {
2663:../fatfs/src/ff.c **** 			res = dec_lock(fp->lockid);
2664:../fatfs/src/ff.c **** 			unlock_fs(fp->fs, FR_OK);
2665:../fatfs/src/ff.c **** 		}
2666:../fatfs/src/ff.c **** #else
2667:../fatfs/src/ff.c **** 		res = dec_lock(fp->lockid);
2668:../fatfs/src/ff.c **** #endif
2669:../fatfs/src/ff.c **** 	}
2670:../fatfs/src/ff.c **** #endif
2671:../fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 3905              		.loc 1 2671 0
 3906 0008 00B9     		cbnz	r0, .L504
 3907              		.loc 1 2671 0 is_stmt 0 discriminator 1
 3908 000a 2060     		str	r0, [r4]
 3909              	.L504:
2672:../fatfs/src/ff.c **** 	return res;
2673:../fatfs/src/ff.c **** #endif
2674:../fatfs/src/ff.c **** }
 3910              		.loc 1 2674 0 is_stmt 1
 3911 000c 10BD     		pop	{r4, pc}
 3912              		.cfi_endproc
 3913              	.LFE28:
 3915              		.section	.text.f_chdrive,"ax",%progbits
 3916              		.align	1
 3917              		.global	f_chdrive
 3918              		.thumb
 3919              		.thumb_func
 3921              	f_chdrive:
 3922              	.LFB29:
2675:../fatfs/src/ff.c **** 
2676:../fatfs/src/ff.c **** 
2677:../fatfs/src/ff.c **** 
2678:../fatfs/src/ff.c **** 
2679:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2680:../fatfs/src/ff.c **** /* Current Drive/Directory Handlings                                     */
2681:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2682:../fatfs/src/ff.c **** 
ARM GAS  /tmp/ccOwSZ6Y.s 			page 125


2683:../fatfs/src/ff.c **** #if _FS_RPATH >= 1
2684:../fatfs/src/ff.c **** 
2685:../fatfs/src/ff.c **** FRESULT f_chdrive (
2686:../fatfs/src/ff.c **** 	BYTE drv		/* Drive number */
2687:../fatfs/src/ff.c **** )
2688:../fatfs/src/ff.c **** {
 3923              		.loc 1 2688 0
 3924              		.cfi_startproc
 3925              		@ args = 0, pretend = 0, frame = 0
 3926              		@ frame_needed = 0, uses_anonymous_args = 0
 3927              		@ link register save eliminated.
 3928              	.LVL555:
2689:../fatfs/src/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
 3929              		.loc 1 2689 0
 3930 0000 10B9     		cbnz	r0, .L507
2690:../fatfs/src/ff.c **** 
2691:../fatfs/src/ff.c **** 	CurrVol = drv;
 3931              		.loc 1 2691 0
 3932 0002 024B     		ldr	r3, .L508
 3933 0004 1870     		strb	r0, [r3]
2692:../fatfs/src/ff.c **** 
2693:../fatfs/src/ff.c **** 	return FR_OK;
 3934              		.loc 1 2693 0
 3935 0006 7047     		bx	lr
 3936              	.L507:
2689:../fatfs/src/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
 3937              		.loc 1 2689 0
 3938 0008 0B20     		movs	r0, #11
 3939              	.LVL556:
2694:../fatfs/src/ff.c **** }
 3940              		.loc 1 2694 0
 3941 000a 7047     		bx	lr
 3942              	.L509:
 3943              		.align	2
 3944              	.L508:
 3945 000c 00000000 		.word	.LANCHOR0
 3946              		.cfi_endproc
 3947              	.LFE29:
 3949              		.section	.text.f_chdir,"ax",%progbits
 3950              		.align	1
 3951              		.global	f_chdir
 3952              		.thumb
 3953              		.thumb_func
 3955              	f_chdir:
 3956              	.LFB30:
2695:../fatfs/src/ff.c **** 
2696:../fatfs/src/ff.c **** 
2697:../fatfs/src/ff.c **** 
2698:../fatfs/src/ff.c **** FRESULT f_chdir (
2699:../fatfs/src/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2700:../fatfs/src/ff.c **** )
2701:../fatfs/src/ff.c **** {
 3957              		.loc 1 2701 0
 3958              		.cfi_startproc
 3959              		@ args = 0, pretend = 0, frame = 48
 3960              		@ frame_needed = 0, uses_anonymous_args = 0
 3961              	.LVL557:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 126


 3962 0000 00B5     		push	{lr}
 3963              		.cfi_def_cfa_offset 4
 3964              		.cfi_offset 14, -4
 3965 0002 8DB0     		sub	sp, sp, #52
 3966              		.cfi_def_cfa_offset 56
 3967              		.loc 1 2701 0
 3968 0004 0CAB     		add	r3, sp, #48
 3969 0006 43F82C0D 		str	r0, [r3, #-44]!
2702:../fatfs/src/ff.c **** 	FRESULT res;
2703:../fatfs/src/ff.c **** 	DIR dj;
2704:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
2705:../fatfs/src/ff.c **** 
2706:../fatfs/src/ff.c **** 
2707:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 3970              		.loc 1 2707 0
 3971 000a 1846     		mov	r0, r3
 3972              	.LVL558:
 3973 000c 05A9     		add	r1, sp, #20
 3974 000e 0022     		movs	r2, #0
 3975 0010 FFF7FEFF 		bl	chk_mounted
 3976              	.LVL559:
2708:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 3977              		.loc 1 2708 0
 3978 0014 F8B9     		cbnz	r0, .L518
2709:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 3979              		.loc 1 2709 0
 3980 0016 02AB     		add	r3, sp, #8
2710:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 3981              		.loc 1 2710 0
 3982 0018 05A8     		add	r0, sp, #20
 3983              	.LVL560:
 3984 001a 0199     		ldr	r1, [sp, #4]
2709:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 3985              		.loc 1 2709 0
 3986 001c 0B93     		str	r3, [sp, #44]
 3987              		.loc 1 2710 0
 3988 001e FFF7FEFF 		bl	follow_path
 3989              	.LVL561:
2711:../fatfs/src/ff.c **** 		FREE_BUF();
2712:../fatfs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 3990              		.loc 1 2712 0
 3991 0022 98B9     		cbnz	r0, .L512
2713:../fatfs/src/ff.c **** 			if (!dj.dir) {
 3992              		.loc 1 2713 0
 3993 0024 0A9B     		ldr	r3, [sp, #40]
 3994 0026 0BB9     		cbnz	r3, .L513
2714:../fatfs/src/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
 3995              		.loc 1 2714 0
 3996 0028 079A     		ldr	r2, [sp, #28]
 3997 002a 0CE0     		b	.L519
 3998              	.L513:
2715:../fatfs/src/ff.c **** 			} else {
2716:../fatfs/src/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
 3999              		.loc 1 2716 0
 4000 002c DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 4001 002e D206     		lsls	r2, r2, #27
 4002 0030 10D5     		bpl	.L516
ARM GAS  /tmp/ccOwSZ6Y.s 			page 127


2717:../fatfs/src/ff.c **** 					dj.fs->cdir = LD_CLUST(dj.dir);
 4003              		.loc 1 2717 0
 4004 0032 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 4005 0034 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 4006 0036 42EA0122 		orr	r2, r2, r1, lsl #8
 4007 003a D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 4008 003c 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 4009 003e 43EA0123 		orr	r3, r3, r1, lsl #8
 4010 0042 43EA0242 		orr	r2, r3, r2, lsl #16
 4011              	.L519:
 4012 0046 059B     		ldr	r3, [sp, #20]
 4013 0048 9A61     		str	r2, [r3, #24]
 4014 004a 04E0     		b	.L518
 4015              	.L512:
2718:../fatfs/src/ff.c **** 				else
2719:../fatfs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2720:../fatfs/src/ff.c **** 			}
2721:../fatfs/src/ff.c **** 		}
2722:../fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 4016              		.loc 1 2722 0
 4017 004c 0428     		cmp	r0, #4
 4018 004e 08BF     		it	eq
 4019 0050 0520     		moveq	r0, #5
 4020              	.LVL562:
 4021 0052 00E0     		b	.L518
 4022              	.LVL563:
 4023              	.L516:
2719:../fatfs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 4024              		.loc 1 2719 0
 4025 0054 0520     		movs	r0, #5
 4026              	.LVL564:
 4027              	.L518:
2723:../fatfs/src/ff.c **** 	}
2724:../fatfs/src/ff.c **** 
2725:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2726:../fatfs/src/ff.c **** }
 4028              		.loc 1 2726 0
 4029 0056 0DB0     		add	sp, sp, #52
 4030              		@ sp needed
 4031 0058 5DF804FB 		ldr	pc, [sp], #4
 4032              		.cfi_endproc
 4033              	.LFE30:
 4035              		.section	.text.f_lseek,"ax",%progbits
 4036              		.align	1
 4037              		.global	f_lseek
 4038              		.thumb
 4039              		.thumb_func
 4041              	f_lseek:
 4042              	.LFB31:
2727:../fatfs/src/ff.c **** 
2728:../fatfs/src/ff.c **** 
2729:../fatfs/src/ff.c **** #if _FS_RPATH >= 2
2730:../fatfs/src/ff.c **** FRESULT f_getcwd (
2731:../fatfs/src/ff.c **** 	TCHAR *path,	/* Pointer to the directory path */
2732:../fatfs/src/ff.c **** 	UINT sz_path	/* Size of path */
2733:../fatfs/src/ff.c **** )
2734:../fatfs/src/ff.c **** {
ARM GAS  /tmp/ccOwSZ6Y.s 			page 128


2735:../fatfs/src/ff.c **** 	FRESULT res;
2736:../fatfs/src/ff.c **** 	DIR dj;
2737:../fatfs/src/ff.c **** 	UINT i, n;
2738:../fatfs/src/ff.c **** 	DWORD ccl;
2739:../fatfs/src/ff.c **** 	TCHAR *tp;
2740:../fatfs/src/ff.c **** 	FILINFO fno;
2741:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
2742:../fatfs/src/ff.c **** 
2743:../fatfs/src/ff.c **** 
2744:../fatfs/src/ff.c **** 	*path = 0;
2745:../fatfs/src/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2746:../fatfs/src/ff.c **** 	if (res == FR_OK) {
2747:../fatfs/src/ff.c **** 		INIT_BUF(dj);
2748:../fatfs/src/ff.c **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2749:../fatfs/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2750:../fatfs/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2751:../fatfs/src/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2752:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
2753:../fatfs/src/ff.c **** 			res = dir_read(&dj);
2754:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
2755:../fatfs/src/ff.c **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2756:../fatfs/src/ff.c **** 			res = dir_sdi(&dj, 0);
2757:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
2758:../fatfs/src/ff.c **** 			do {							/* Find the entry links to the child dir */
2759:../fatfs/src/ff.c **** 				res = dir_read(&dj);
2760:../fatfs/src/ff.c **** 				if (res != FR_OK) break;
2761:../fatfs/src/ff.c **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2762:../fatfs/src/ff.c **** 				res = dir_next(&dj, 0);
2763:../fatfs/src/ff.c **** 			} while (res == FR_OK);
2764:../fatfs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2765:../fatfs/src/ff.c **** 			if (res != FR_OK) break;
2766:../fatfs/src/ff.c **** #if _USE_LFN
2767:../fatfs/src/ff.c **** 			fno.lfname = path;
2768:../fatfs/src/ff.c **** 			fno.lfsize = i;
2769:../fatfs/src/ff.c **** #endif
2770:../fatfs/src/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2771:../fatfs/src/ff.c **** 			tp = fno.fname;
2772:../fatfs/src/ff.c **** 			if (_USE_LFN && *path) tp = path;
2773:../fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
2774:../fatfs/src/ff.c **** 			if (i < n + 3) {
2775:../fatfs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2776:../fatfs/src/ff.c **** 			}
2777:../fatfs/src/ff.c **** 			while (n) path[--i] = tp[--n];
2778:../fatfs/src/ff.c **** 			path[--i] = '/';
2779:../fatfs/src/ff.c **** 		}
2780:../fatfs/src/ff.c **** 		tp = path;
2781:../fatfs/src/ff.c **** 		if (res == FR_OK) {
2782:../fatfs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2783:../fatfs/src/ff.c **** 			*tp++ = ':';
2784:../fatfs/src/ff.c **** 			if (i == sz_path) {				/* Root-dir */
2785:../fatfs/src/ff.c **** 				*tp++ = '/';
2786:../fatfs/src/ff.c **** 			} else {						/* Sub-dir */
2787:../fatfs/src/ff.c **** 				do		/* Add stacked path str */
2788:../fatfs/src/ff.c **** 					*tp++ = path[i++];
2789:../fatfs/src/ff.c **** 				while (i < sz_path);
2790:../fatfs/src/ff.c **** 			}
2791:../fatfs/src/ff.c **** 		}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 129


2792:../fatfs/src/ff.c **** 		*tp = 0;
2793:../fatfs/src/ff.c **** 		FREE_BUF();
2794:../fatfs/src/ff.c **** 	}
2795:../fatfs/src/ff.c **** 
2796:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2797:../fatfs/src/ff.c **** }
2798:../fatfs/src/ff.c **** #endif /* _FS_RPATH >= 2 */
2799:../fatfs/src/ff.c **** #endif /* _FS_RPATH >= 1 */
2800:../fatfs/src/ff.c **** 
2801:../fatfs/src/ff.c **** 
2802:../fatfs/src/ff.c **** 
2803:../fatfs/src/ff.c **** #if _FS_MINIMIZE <= 2
2804:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2805:../fatfs/src/ff.c **** /* Seek File R/W Pointer                                                 */
2806:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2807:../fatfs/src/ff.c **** 
2808:../fatfs/src/ff.c **** FRESULT f_lseek (
2809:../fatfs/src/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2810:../fatfs/src/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2811:../fatfs/src/ff.c **** )
2812:../fatfs/src/ff.c **** {
 4043              		.loc 1 2812 0
 4044              		.cfi_startproc
 4045              		@ args = 0, pretend = 0, frame = 0
 4046              		@ frame_needed = 0, uses_anonymous_args = 0
 4047              	.LVL565:
 4048 0000 70B5     		push	{r4, r5, r6, lr}
 4049              		.cfi_def_cfa_offset 16
 4050              		.cfi_offset 4, -16
 4051              		.cfi_offset 5, -12
 4052              		.cfi_offset 6, -8
 4053              		.cfi_offset 14, -4
 4054              		.loc 1 2812 0
 4055 0002 0446     		mov	r4, r0
 4056 0004 0D46     		mov	r5, r1
2813:../fatfs/src/ff.c **** 	FRESULT res;
2814:../fatfs/src/ff.c **** 
2815:../fatfs/src/ff.c **** 
2816:../fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 4057              		.loc 1 2816 0
 4058 0006 0068     		ldr	r0, [r0]
 4059              	.LVL566:
 4060 0008 A188     		ldrh	r1, [r4, #4]
 4061              	.LVL567:
 4062 000a FFF7FEFF 		bl	validate
 4063              	.LVL568:
2817:../fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4064              		.loc 1 2817 0
 4065 000e 0028     		cmp	r0, #0
 4066 0010 40F09380 		bne	.L521
2818:../fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 4067              		.loc 1 2818 0
 4068 0014 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 4069 0016 1606     		lsls	r6, r2, #24
 4070 0018 00F18C80 		bmi	.L545
 4071              	.LBB76:
2819:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
ARM GAS  /tmp/ccOwSZ6Y.s 			page 130


2820:../fatfs/src/ff.c **** 
2821:../fatfs/src/ff.c **** #if _USE_FASTSEEK
2822:../fatfs/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2823:../fatfs/src/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
2824:../fatfs/src/ff.c **** 
2825:../fatfs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
2826:../fatfs/src/ff.c **** 			tbl = fp->cltbl;
2827:../fatfs/src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
2828:../fatfs/src/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
2829:../fatfs/src/ff.c **** 			if (cl) {
2830:../fatfs/src/ff.c **** 				do {
2831:../fatfs/src/ff.c **** 					/* Get a fragment */
2832:../fatfs/src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
2833:../fatfs/src/ff.c **** 					do {
2834:../fatfs/src/ff.c **** 						pcl = cl; ncl++;
2835:../fatfs/src/ff.c **** 						cl = get_fat(fp->fs, cl);
2836:../fatfs/src/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2837:../fatfs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2838:../fatfs/src/ff.c **** 					} while (cl == pcl + 1);
2839:../fatfs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
2840:../fatfs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
2841:../fatfs/src/ff.c **** 					}
2842:../fatfs/src/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
2843:../fatfs/src/ff.c **** 			}
2844:../fatfs/src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
2845:../fatfs/src/ff.c **** 			if (ulen <= tlen)
2846:../fatfs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
2847:../fatfs/src/ff.c **** 			else
2848:../fatfs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
2849:../fatfs/src/ff.c **** 
2850:../fatfs/src/ff.c **** 		} else {						/* Fast seek */
2851:../fatfs/src/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2852:../fatfs/src/ff.c **** 				ofs = fp->fsize;
2853:../fatfs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2854:../fatfs/src/ff.c **** 			if (ofs) {
2855:../fatfs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
2856:../fatfs/src/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
2857:../fatfs/src/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2858:../fatfs/src/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
2859:../fatfs/src/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
2860:../fatfs/src/ff.c **** #if !_FS_TINY
2861:../fatfs/src/ff.c **** #if !_FS_READONLY
2862:../fatfs/src/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
2863:../fatfs/src/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2864:../fatfs/src/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
2865:../fatfs/src/ff.c **** 						fp->flag &= ~FA__DIRTY;
2866:../fatfs/src/ff.c **** 					}
2867:../fatfs/src/ff.c **** #endif
2868:../fatfs/src/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
2869:../fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2870:../fatfs/src/ff.c **** #endif
2871:../fatfs/src/ff.c **** 					fp->dsect = dsc;
2872:../fatfs/src/ff.c **** 				}
2873:../fatfs/src/ff.c **** 			}
2874:../fatfs/src/ff.c **** 		}
2875:../fatfs/src/ff.c **** 	} else
2876:../fatfs/src/ff.c **** #endif
ARM GAS  /tmp/ccOwSZ6Y.s 			page 131


2877:../fatfs/src/ff.c **** 
2878:../fatfs/src/ff.c **** 	/* Normal Seek */
2879:../fatfs/src/ff.c **** 	{
2880:../fatfs/src/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2881:../fatfs/src/ff.c **** 
2882:../fatfs/src/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 4072              		.loc 1 2882 0
 4073 001c E368     		ldr	r3, [r4, #12]
 4074 001e 9D42     		cmp	r5, r3
 4075 0020 03D9     		bls	.L522
 4076 0022 12F0020F 		tst	r2, #2
 4077 0026 08BF     		it	eq
 4078 0028 1D46     		moveq	r5, r3
 4079              	.LVL569:
 4080              	.L522:
2883:../fatfs/src/ff.c **** #if !_FS_READONLY
2884:../fatfs/src/ff.c **** 			 && !(fp->flag & FA_WRITE)
2885:../fatfs/src/ff.c **** #endif
2886:../fatfs/src/ff.c **** 			) ofs = fp->fsize;
2887:../fatfs/src/ff.c **** 
2888:../fatfs/src/ff.c **** 		ifptr = fp->fptr;
2889:../fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 4081              		.loc 1 2889 0
 4082 002a 0022     		movs	r2, #0
2888:../fatfs/src/ff.c **** 		ifptr = fp->fptr;
 4083              		.loc 1 2888 0
 4084 002c A368     		ldr	r3, [r4, #8]
 4085              	.LVL570:
 4086              		.loc 1 2889 0
 4087 002e A260     		str	r2, [r4, #8]
2890:../fatfs/src/ff.c **** 		if (ofs) {
 4088              		.loc 1 2890 0
 4089 0030 0DB9     		cbnz	r5, .L523
 4090              	.LVL571:
 4091              	.L530:
2889:../fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 4092              		.loc 1 2889 0
 4093 0032 0025     		movs	r5, #0
 4094              	.LVL572:
 4095 0034 4DE0     		b	.L524
 4096              	.LVL573:
 4097              	.L523:
2891:../fatfs/src/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 4098              		.loc 1 2891 0
 4099 0036 2068     		ldr	r0, [r4]
 4100              	.LVL574:
 4101 0038 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 4102 003a 7602     		lsls	r6, r6, #9
 4103              	.LVL575:
2892:../fatfs/src/ff.c **** 			if (ifptr > 0 &&
 4104              		.loc 1 2892 0
 4105 003c 6BB1     		cbz	r3, .L525
2893:../fatfs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 4106              		.loc 1 2893 0 discriminator 1
 4107 003e 013B     		subs	r3, r3, #1
 4108              	.LVL576:
 4109 0040 691E     		subs	r1, r5, #1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 132


 4110 0042 B1FBF6F1 		udiv	r1, r1, r6
 4111 0046 B3FBF6F2 		udiv	r2, r3, r6
2892:../fatfs/src/ff.c **** 			if (ifptr > 0 &&
 4112              		.loc 1 2892 0 discriminator 1
 4113 004a 9142     		cmp	r1, r2
 4114 004c 05D3     		bcc	.L525
2894:../fatfs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 4115              		.loc 1 2894 0
 4116 004e 7242     		negs	r2, r6
 4117 0050 1340     		ands	r3, r3, r2
 4118              	.LVL577:
 4119 0052 A360     		str	r3, [r4, #8]
2895:../fatfs/src/ff.c **** 				ofs -= fp->fptr;
 4120              		.loc 1 2895 0
 4121 0054 ED1A     		subs	r5, r5, r3
 4122              	.LVL578:
2896:../fatfs/src/ff.c **** 				clst = fp->clust;
 4123              		.loc 1 2896 0
 4124 0056 6169     		ldr	r1, [r4, #20]
 4125              	.LVL579:
 4126 0058 0AE0     		b	.L526
 4127              	.LVL580:
 4128              	.L525:
2897:../fatfs/src/ff.c **** 			} else {									/* When seek to back cluster, */
2898:../fatfs/src/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
 4129              		.loc 1 2898 0
 4130 005a 2169     		ldr	r1, [r4, #16]
 4131              	.LVL581:
2899:../fatfs/src/ff.c **** #if !_FS_READONLY
2900:../fatfs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 4132              		.loc 1 2900 0
 4133 005c 39B9     		cbnz	r1, .L527
2901:../fatfs/src/ff.c **** 					clst = create_chain(fp->fs, 0);
 4134              		.loc 1 2901 0
 4135 005e FFF7FEFF 		bl	create_chain
 4136              	.LVL582:
2902:../fatfs/src/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4137              		.loc 1 2902 0
 4138 0062 0128     		cmp	r0, #1
2901:../fatfs/src/ff.c **** 					clst = create_chain(fp->fs, 0);
 4139              		.loc 1 2901 0
 4140 0064 0146     		mov	r1, r0
 4141              	.LVL583:
 4142              		.loc 1 2902 0
 4143 0066 2DD0     		beq	.L566
2903:../fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4144              		.loc 1 2903 0
 4145 0068 0130     		adds	r0, r0, #1
 4146              	.LVL584:
 4147 006a 52D0     		beq	.L565
2904:../fatfs/src/ff.c **** 					fp->sclust = clst;
 4148              		.loc 1 2904 0
 4149 006c 2161     		str	r1, [r4, #16]
 4150              	.L527:
2905:../fatfs/src/ff.c **** 				}
2906:../fatfs/src/ff.c **** #endif
2907:../fatfs/src/ff.c **** 				fp->clust = clst;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 133


 4151              		.loc 1 2907 0
 4152 006e 6161     		str	r1, [r4, #20]
 4153              	.L526:
2908:../fatfs/src/ff.c **** 			}
2909:../fatfs/src/ff.c **** 			if (clst != 0) {
 4154              		.loc 1 2909 0
 4155 0070 0029     		cmp	r1, #0
 4156 0072 DED0     		beq	.L530
 4157              	.L531:
2910:../fatfs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 4158              		.loc 1 2910 0 discriminator 1
 4159 0074 B542     		cmp	r5, r6
 4160 0076 1AD9     		bls	.L533
2911:../fatfs/src/ff.c **** #if !_FS_READONLY
2912:../fatfs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 4161              		.loc 1 2912 0
 4162 0078 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
2913:../fatfs/src/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 4163              		.loc 1 2913 0
 4164 007a 2068     		ldr	r0, [r4]
2912:../fatfs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 4165              		.loc 1 2912 0
 4166 007c 9A07     		lsls	r2, r3, #30
 4167 007e 04D5     		bpl	.L532
 4168              		.loc 1 2913 0
 4169 0080 FFF7FEFF 		bl	create_chain
 4170              	.LVL585:
2914:../fatfs/src/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 4171              		.loc 1 2914 0
 4172 0084 0146     		mov	r1, r0
 4173 0086 18B9     		cbnz	r0, .L534
 4174 0088 10E0     		b	.L567
 4175              	.LVL586:
 4176              	.L532:
2915:../fatfs/src/ff.c **** 							ofs = bcs; break;
2916:../fatfs/src/ff.c **** 						}
2917:../fatfs/src/ff.c **** 					} else
2918:../fatfs/src/ff.c **** #endif
2919:../fatfs/src/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 4177              		.loc 1 2919 0
 4178 008a FFF7FEFF 		bl	get_fat
 4179              	.LVL587:
 4180 008e 0146     		mov	r1, r0
 4181              	.LVL588:
 4182              	.L534:
2920:../fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4183              		.loc 1 2920 0
 4184 0090 4B1C     		adds	r3, r1, #1
 4185 0092 3ED0     		beq	.L565
2921:../fatfs/src/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 4186              		.loc 1 2921 0
 4187 0094 0129     		cmp	r1, #1
 4188 0096 15D9     		bls	.L566
 4189              		.loc 1 2921 0 is_stmt 0 discriminator 2
 4190 0098 2368     		ldr	r3, [r4]
 4191 009a DB69     		ldr	r3, [r3, #28]
 4192 009c 9942     		cmp	r1, r3
ARM GAS  /tmp/ccOwSZ6Y.s 			page 134


 4193 009e 11D2     		bcs	.L566
2922:../fatfs/src/ff.c **** 					fp->clust = clst;
2923:../fatfs/src/ff.c **** 					fp->fptr += bcs;
 4194              		.loc 1 2923 0 is_stmt 1
 4195 00a0 A368     		ldr	r3, [r4, #8]
2922:../fatfs/src/ff.c **** 					fp->clust = clst;
 4196              		.loc 1 2922 0
 4197 00a2 6161     		str	r1, [r4, #20]
 4198              		.loc 1 2923 0
 4199 00a4 3344     		add	r3, r3, r6
 4200 00a6 A360     		str	r3, [r4, #8]
2924:../fatfs/src/ff.c **** 					ofs -= bcs;
 4201              		.loc 1 2924 0
 4202 00a8 AD1B     		subs	r5, r5, r6
 4203              	.LVL589:
 4204 00aa E3E7     		b	.L531
 4205              	.L567:
 4206 00ac 3546     		mov	r5, r6
 4207              	.LVL590:
 4208              	.L533:
2925:../fatfs/src/ff.c **** 				}
2926:../fatfs/src/ff.c **** 				fp->fptr += ofs;
 4209              		.loc 1 2926 0
 4210 00ae A368     		ldr	r3, [r4, #8]
 4211 00b0 2B44     		add	r3, r3, r5
 4212 00b2 A360     		str	r3, [r4, #8]
2927:../fatfs/src/ff.c **** 				if (ofs % SS(fp->fs)) {
 4213              		.loc 1 2927 0
 4214 00b4 C5F30803 		ubfx	r3, r5, #0, #9
 4215 00b8 002B     		cmp	r3, #0
 4216 00ba BAD0     		beq	.L530
2928:../fatfs/src/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 4217              		.loc 1 2928 0
 4218 00bc 2068     		ldr	r0, [r4]
 4219 00be FFF7FEFF 		bl	clust2sect
 4220              	.LVL591:
2929:../fatfs/src/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 4221              		.loc 1 2929 0
 4222 00c2 20B9     		cbnz	r0, .L539
 4223              	.LVL592:
 4224              	.L566:
 4225              		.loc 1 2929 0 is_stmt 0 discriminator 1
 4226 00c4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4227 00c6 63F07F03 		orn	r3, r3, #127
 4228 00ca A371     		strb	r3, [r4, #6]
 4229 00cc 32E0     		b	.L545
 4230              	.LVL593:
 4231              	.L539:
2930:../fatfs/src/ff.c **** 					nsect += ofs / SS(fp->fs);
 4232              		.loc 1 2930 0 is_stmt 1
 4233 00ce 00EB5525 		add	r5, r0, r5, lsr #9
 4234              	.LVL594:
 4235              	.L524:
2931:../fatfs/src/ff.c **** 				}
2932:../fatfs/src/ff.c **** 			}
2933:../fatfs/src/ff.c **** 		}
2934:../fatfs/src/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 135


 4236              		.loc 1 2934 0
 4237 00d2 A368     		ldr	r3, [r4, #8]
 4238 00d4 C3F30803 		ubfx	r3, r3, #0, #9
 4239 00d8 13B3     		cbz	r3, .L540
 4240              		.loc 1 2934 0 is_stmt 0 discriminator 1
 4241 00da A269     		ldr	r2, [r4, #24]
 4242 00dc 9542     		cmp	r5, r2
 4243 00de 1FD0     		beq	.L540
2935:../fatfs/src/ff.c **** #if !_FS_TINY
2936:../fatfs/src/ff.c **** #if !_FS_READONLY
2937:../fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 4244              		.loc 1 2937 0 is_stmt 1
 4245 00e0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4246 00e2 04F12406 		add	r6, r4, #36
 4247 00e6 13F0400F 		tst	r3, #64
 4248 00ea 0AD0     		beq	.L541
2938:../fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 4249              		.loc 1 2938 0
 4250 00ec 2368     		ldr	r3, [r4]
 4251 00ee 3146     		mov	r1, r6
 4252 00f0 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4253 00f2 0123     		movs	r3, #1
 4254 00f4 FFF7FEFF 		bl	disk_write
 4255              	.LVL595:
 4256 00f8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4257 00fa 58B9     		cbnz	r0, .L564
2939:../fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2940:../fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 4258              		.loc 1 2940 0
 4259 00fc 23F04003 		bic	r3, r3, #64
 4260 0100 A371     		strb	r3, [r4, #6]
 4261              	.L541:
2941:../fatfs/src/ff.c **** 			}
2942:../fatfs/src/ff.c **** #endif
2943:../fatfs/src/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 4262              		.loc 1 2943 0
 4263 0102 2368     		ldr	r3, [r4]
 4264 0104 3146     		mov	r1, r6
 4265 0106 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4266 0108 2A46     		mov	r2, r5
 4267 010a 0123     		movs	r3, #1
 4268 010c FFF7FEFF 		bl	disk_read
 4269              	.LVL596:
 4270 0110 28B1     		cbz	r0, .L543
 4271              	.LVL597:
 4272              	.L565:
2944:../fatfs/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 4273              		.loc 1 2944 0
 4274 0112 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4275              	.L564:
 4276 0114 63F07F03 		orn	r3, r3, #127
 4277 0118 A371     		strb	r3, [r4, #6]
 4278 011a 0120     		movs	r0, #1
 4279 011c 70BD     		pop	{r4, r5, r6, pc}
 4280              	.LVL598:
 4281              	.L543:
2945:../fatfs/src/ff.c **** #endif
ARM GAS  /tmp/ccOwSZ6Y.s 			page 136


2946:../fatfs/src/ff.c **** 			fp->dsect = nsect;
 4282              		.loc 1 2946 0
 4283 011e A561     		str	r5, [r4, #24]
 4284              	.L540:
2947:../fatfs/src/ff.c **** 		}
2948:../fatfs/src/ff.c **** #if !_FS_READONLY
2949:../fatfs/src/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 4285              		.loc 1 2949 0
 4286 0120 A368     		ldr	r3, [r4, #8]
 4287 0122 E268     		ldr	r2, [r4, #12]
 4288 0124 9342     		cmp	r3, r2
 4289 0126 07D9     		bls	.L548
2950:../fatfs/src/ff.c **** 			fp->fsize = fp->fptr;
 4290              		.loc 1 2950 0
 4291 0128 E360     		str	r3, [r4, #12]
2951:../fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 4292              		.loc 1 2951 0
 4293 012a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4294 012c 43F02003 		orr	r3, r3, #32
 4295 0130 A371     		strb	r3, [r4, #6]
 4296 0132 01E0     		b	.L548
 4297              	.LVL599:
 4298              	.L545:
 4299              	.LBE76:
2819:../fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 4300              		.loc 1 2819 0
 4301 0134 0220     		movs	r0, #2
 4302 0136 70BD     		pop	{r4, r5, r6, pc}
 4303              	.LVL600:
 4304              	.L548:
 4305              	.LBB77:
 4306 0138 0020     		movs	r0, #0
 4307              	.LVL601:
 4308              	.L521:
 4309              	.LBE77:
2952:../fatfs/src/ff.c **** 		}
2953:../fatfs/src/ff.c **** #endif
2954:../fatfs/src/ff.c **** 	}
2955:../fatfs/src/ff.c **** 
2956:../fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
2957:../fatfs/src/ff.c **** }
 4310              		.loc 1 2957 0
 4311 013a 70BD     		pop	{r4, r5, r6, pc}
 4312              		.cfi_endproc
 4313              	.LFE31:
 4315              		.section	.text.f_opendir,"ax",%progbits
 4316              		.align	1
 4317              		.global	f_opendir
 4318              		.thumb
 4319              		.thumb_func
 4321              	f_opendir:
 4322              	.LFB32:
2958:../fatfs/src/ff.c **** 
2959:../fatfs/src/ff.c **** 
2960:../fatfs/src/ff.c **** 
2961:../fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
2962:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/ccOwSZ6Y.s 			page 137


2963:../fatfs/src/ff.c **** /* Create a Directroy Object                                             */
2964:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2965:../fatfs/src/ff.c **** 
2966:../fatfs/src/ff.c **** FRESULT f_opendir (
2967:../fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
2968:../fatfs/src/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2969:../fatfs/src/ff.c **** )
2970:../fatfs/src/ff.c **** {
 4323              		.loc 1 2970 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 24
 4326              		@ frame_needed = 0, uses_anonymous_args = 0
 4327              	.LVL602:
 4328 0000 10B5     		push	{r4, lr}
 4329              		.cfi_def_cfa_offset 8
 4330              		.cfi_offset 4, -8
 4331              		.cfi_offset 14, -4
 4332 0002 86B0     		sub	sp, sp, #24
 4333              		.cfi_def_cfa_offset 32
 4334              		.loc 1 2970 0
 4335 0004 0446     		mov	r4, r0
 4336 0006 06A8     		add	r0, sp, #24
 4337              	.LVL603:
 4338 0008 40F8141D 		str	r1, [r0, #-20]!
2971:../fatfs/src/ff.c **** 	FRESULT res;
2972:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
2973:../fatfs/src/ff.c **** 
2974:../fatfs/src/ff.c **** 
2975:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
 4339              		.loc 1 2975 0
 4340 000c 0022     		movs	r2, #0
 4341 000e 2146     		mov	r1, r4
 4342              	.LVL604:
 4343 0010 FFF7FEFF 		bl	chk_mounted
 4344              	.LVL605:
2976:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4345              		.loc 1 2976 0
 4346 0014 10BB     		cbnz	r0, .L576
2977:../fatfs/src/ff.c **** 		INIT_BUF(*dj);
 4347              		.loc 1 2977 0
 4348 0016 03AB     		add	r3, sp, #12
 4349 0018 A361     		str	r3, [r4, #24]
2978:../fatfs/src/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 4350              		.loc 1 2978 0
 4351 001a 2046     		mov	r0, r4
 4352              	.LVL606:
 4353 001c 0199     		ldr	r1, [sp, #4]
 4354 001e FFF7FEFF 		bl	follow_path
 4355              	.LVL607:
2979:../fatfs/src/ff.c **** 		FREE_BUF();
2980:../fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 4356              		.loc 1 2980 0
 4357 0022 B0B9     		cbnz	r0, .L570
2981:../fatfs/src/ff.c **** 			if (dj->dir) {						/* It is not the root dir */
 4358              		.loc 1 2981 0
 4359 0024 6369     		ldr	r3, [r4, #20]
 4360 0026 6BB1     		cbz	r3, .L571
ARM GAS  /tmp/ccOwSZ6Y.s 			page 138


2982:../fatfs/src/ff.c **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 4361              		.loc 1 2982 0
 4362 0028 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 4363 002a D206     		lsls	r2, r2, #27
 4364 002c 15D5     		bpl	.L573
2983:../fatfs/src/ff.c **** 					dj->sclust = LD_CLUST(dj->dir);
 4365              		.loc 1 2983 0
 4366 002e 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 4367 0030 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 4368 0032 42EA0122 		orr	r2, r2, r1, lsl #8
 4369 0036 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 4370 0038 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 4371 003a 43EA0123 		orr	r3, r3, r1, lsl #8
 4372 003e 43EA0243 		orr	r3, r3, r2, lsl #16
 4373 0042 A360     		str	r3, [r4, #8]
 4374              	.L571:
 4375              	.LVL608:
2984:../fatfs/src/ff.c **** 				} else {						/* The object is not a directory */
2985:../fatfs/src/ff.c **** 					res = FR_NO_PATH;
2986:../fatfs/src/ff.c **** 				}
2987:../fatfs/src/ff.c **** 			}
2988:../fatfs/src/ff.c **** 			if (res == FR_OK) {
2989:../fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 4376              		.loc 1 2989 0
 4377 0044 2368     		ldr	r3, [r4]
2990:../fatfs/src/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 4378              		.loc 1 2990 0
 4379 0046 2046     		mov	r0, r4
2989:../fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 4380              		.loc 1 2989 0
 4381 0048 DB88     		ldrh	r3, [r3, #6]
 4382              		.loc 1 2990 0
 4383 004a 0021     		movs	r1, #0
2989:../fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 4384              		.loc 1 2989 0
 4385 004c A380     		strh	r3, [r4, #4]	@ movhi
 4386              		.loc 1 2990 0
 4387 004e FFF7FEFF 		bl	dir_sdi
 4388              	.LVL609:
 4389              	.L570:
2991:../fatfs/src/ff.c **** 			}
2992:../fatfs/src/ff.c **** 		}
2993:../fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 4390              		.loc 1 2993 0
 4391 0052 0428     		cmp	r0, #4
 4392 0054 08BF     		it	eq
 4393 0056 0520     		moveq	r0, #5
 4394              	.LVL610:
 4395 0058 00E0     		b	.L576
 4396              	.LVL611:
 4397              	.L573:
2985:../fatfs/src/ff.c **** 					res = FR_NO_PATH;
 4398              		.loc 1 2985 0
 4399 005a 0520     		movs	r0, #5
 4400              	.LVL612:
 4401              	.L576:
2994:../fatfs/src/ff.c **** 	}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 139


2995:../fatfs/src/ff.c **** 
2996:../fatfs/src/ff.c **** 	LEAVE_FF(dj->fs, res);
2997:../fatfs/src/ff.c **** }
 4402              		.loc 1 2997 0
 4403 005c 06B0     		add	sp, sp, #24
 4404              	.LVL613:
 4405              		@ sp needed
 4406 005e 10BD     		pop	{r4, pc}
 4407              		.cfi_endproc
 4408              	.LFE32:
 4410              		.section	.text.f_readdir,"ax",%progbits
 4411              		.align	1
 4412              		.global	f_readdir
 4413              		.thumb
 4414              		.thumb_func
 4416              	f_readdir:
 4417              	.LFB33:
2998:../fatfs/src/ff.c **** 
2999:../fatfs/src/ff.c **** 
3000:../fatfs/src/ff.c **** 
3001:../fatfs/src/ff.c **** 
3002:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3003:../fatfs/src/ff.c **** /* Read Directory Entry in Sequense                                      */
3004:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3005:../fatfs/src/ff.c **** 
3006:../fatfs/src/ff.c **** FRESULT f_readdir (
3007:../fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
3008:../fatfs/src/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
3009:../fatfs/src/ff.c **** )
3010:../fatfs/src/ff.c **** {
 4418              		.loc 1 3010 0
 4419              		.cfi_startproc
 4420              		@ args = 0, pretend = 0, frame = 16
 4421              		@ frame_needed = 0, uses_anonymous_args = 0
 4422              	.LVL614:
 4423 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 4424              		.cfi_def_cfa_offset 32
 4425              		.cfi_offset 0, -32
 4426              		.cfi_offset 1, -28
 4427              		.cfi_offset 2, -24
 4428              		.cfi_offset 3, -20
 4429              		.cfi_offset 4, -16
 4430              		.cfi_offset 5, -12
 4431              		.cfi_offset 6, -8
 4432              		.cfi_offset 14, -4
 4433              		.loc 1 3010 0
 4434 0002 0446     		mov	r4, r0
 4435 0004 0E46     		mov	r6, r1
3011:../fatfs/src/ff.c **** 	FRESULT res;
3012:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3013:../fatfs/src/ff.c **** 
3014:../fatfs/src/ff.c **** 
3015:../fatfs/src/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 4436              		.loc 1 3015 0
 4437 0006 0068     		ldr	r0, [r0]
 4438              	.LVL615:
 4439 0008 A188     		ldrh	r1, [r4, #4]
ARM GAS  /tmp/ccOwSZ6Y.s 			page 140


 4440              	.LVL616:
 4441 000a FFF7FEFF 		bl	validate
 4442              	.LVL617:
3016:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4443              		.loc 1 3016 0
 4444 000e 0546     		mov	r5, r0
 4445 0010 E8B9     		cbnz	r0, .L580
3017:../fatfs/src/ff.c **** 		if (!fno) {
 4446              		.loc 1 3017 0
 4447 0012 26B9     		cbnz	r6, .L581
3018:../fatfs/src/ff.c **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 4448              		.loc 1 3018 0
 4449 0014 2046     		mov	r0, r4
 4450              	.LVL618:
 4451 0016 2946     		mov	r1, r5
 4452 0018 FFF7FEFF 		bl	dir_sdi
 4453              	.LVL619:
 4454 001c 16E0     		b	.L585
 4455              	.LVL620:
 4456              	.L581:
3019:../fatfs/src/ff.c **** 		} else {
3020:../fatfs/src/ff.c **** 			INIT_BUF(*dj);
 4457              		.loc 1 3020 0
 4458 001e 01AB     		add	r3, sp, #4
 4459 0020 A361     		str	r3, [r4, #24]
3021:../fatfs/src/ff.c **** 			res = dir_read(dj);				/* Read an directory item */
 4460              		.loc 1 3021 0
 4461 0022 2046     		mov	r0, r4
 4462              	.LVL621:
 4463 0024 FFF7FEFF 		bl	dir_read
 4464              	.LVL622:
3022:../fatfs/src/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 4465              		.loc 1 3022 0
 4466 0028 0428     		cmp	r0, #4
 4467 002a 01D1     		bne	.L582
3023:../fatfs/src/ff.c **** 				dj->sect = 0;
 4468              		.loc 1 3023 0
 4469 002c 2561     		str	r5, [r4, #16]
 4470              	.LVL623:
 4471 002e 00E0     		b	.L583
 4472              	.LVL624:
 4473              	.L582:
3024:../fatfs/src/ff.c **** 				res = FR_OK;
3025:../fatfs/src/ff.c **** 			}
3026:../fatfs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 4474              		.loc 1 3026 0
 4475 0030 60B9     		cbnz	r0, .L585
 4476              	.LVL625:
 4477              	.L583:
3027:../fatfs/src/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
 4478              		.loc 1 3027 0
 4479 0032 2046     		mov	r0, r4
 4480 0034 3146     		mov	r1, r6
 4481 0036 FFF7FEFF 		bl	get_fileinfo
 4482              	.LVL626:
3028:../fatfs/src/ff.c **** 				res = dir_next(dj, 0);		/* Increment index for next */
 4483              		.loc 1 3028 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 141


 4484 003a 2046     		mov	r0, r4
 4485 003c 0021     		movs	r1, #0
 4486 003e FFF7FEFF 		bl	dir_next
 4487              	.LVL627:
3029:../fatfs/src/ff.c **** 				if (res == FR_NO_FILE) {
 4488              		.loc 1 3029 0
 4489 0042 0428     		cmp	r0, #4
 4490 0044 02D1     		bne	.L585
3030:../fatfs/src/ff.c **** 					dj->sect = 0;
 4491              		.loc 1 3030 0
 4492 0046 0023     		movs	r3, #0
 4493 0048 2361     		str	r3, [r4, #16]
 4494              	.LVL628:
 4495 004a 00E0     		b	.L580
 4496              	.LVL629:
 4497              	.L585:
 4498 004c 0546     		mov	r5, r0
 4499              	.L580:
 4500              	.LVL630:
3031:../fatfs/src/ff.c **** 					res = FR_OK;
3032:../fatfs/src/ff.c **** 				}
3033:../fatfs/src/ff.c **** 			}
3034:../fatfs/src/ff.c **** 			FREE_BUF();
3035:../fatfs/src/ff.c **** 		}
3036:../fatfs/src/ff.c **** 	}
3037:../fatfs/src/ff.c **** 
3038:../fatfs/src/ff.c **** 	LEAVE_FF(dj->fs, res);
3039:../fatfs/src/ff.c **** }
 4501              		.loc 1 3039 0
 4502 004e 2846     		mov	r0, r5
 4503 0050 04B0     		add	sp, sp, #16
 4504              		@ sp needed
 4505 0052 70BD     		pop	{r4, r5, r6, pc}
 4506              		.cfi_endproc
 4507              	.LFE33:
 4509              		.section	.text.f_stat,"ax",%progbits
 4510              		.align	1
 4511              		.global	f_stat
 4512              		.thumb
 4513              		.thumb_func
 4515              	f_stat:
 4516              	.LFB34:
3040:../fatfs/src/ff.c **** 
3041:../fatfs/src/ff.c **** 
3042:../fatfs/src/ff.c **** 
3043:../fatfs/src/ff.c **** #if _FS_MINIMIZE == 0
3044:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3045:../fatfs/src/ff.c **** /* Get File Status                                                       */
3046:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3047:../fatfs/src/ff.c **** 
3048:../fatfs/src/ff.c **** FRESULT f_stat (
3049:../fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
3050:../fatfs/src/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
3051:../fatfs/src/ff.c **** )
3052:../fatfs/src/ff.c **** {
 4517              		.loc 1 3052 0
 4518              		.cfi_startproc
ARM GAS  /tmp/ccOwSZ6Y.s 			page 142


 4519              		@ args = 0, pretend = 0, frame = 48
 4520              		@ frame_needed = 0, uses_anonymous_args = 0
 4521              	.LVL631:
 4522 0000 30B5     		push	{r4, r5, lr}
 4523              		.cfi_def_cfa_offset 12
 4524              		.cfi_offset 4, -12
 4525              		.cfi_offset 5, -8
 4526              		.cfi_offset 14, -4
 4527 0002 8DB0     		sub	sp, sp, #52
 4528              		.cfi_def_cfa_offset 64
 4529              		.loc 1 3052 0
 4530 0004 0CAB     		add	r3, sp, #48
 4531 0006 43F82C0D 		str	r0, [r3, #-44]!
 4532 000a 0D46     		mov	r5, r1
3053:../fatfs/src/ff.c **** 	FRESULT res;
3054:../fatfs/src/ff.c **** 	DIR dj;
3055:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3056:../fatfs/src/ff.c **** 
3057:../fatfs/src/ff.c **** 
3058:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 4533              		.loc 1 3058 0
 4534 000c 1846     		mov	r0, r3
 4535              	.LVL632:
 4536 000e 05A9     		add	r1, sp, #20
 4537              	.LVL633:
 4538 0010 0022     		movs	r2, #0
 4539 0012 FFF7FEFF 		bl	chk_mounted
 4540              	.LVL634:
3059:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4541              		.loc 1 3059 0
 4542 0016 0446     		mov	r4, r0
 4543 0018 78B9     		cbnz	r0, .L587
3060:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 4544              		.loc 1 3060 0
 4545 001a 02AB     		add	r3, sp, #8
3061:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4546              		.loc 1 3061 0
 4547 001c 05A8     		add	r0, sp, #20
 4548              	.LVL635:
 4549 001e 0199     		ldr	r1, [sp, #4]
3060:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 4550              		.loc 1 3060 0
 4551 0020 0B93     		str	r3, [sp, #44]
 4552              		.loc 1 3061 0
 4553 0022 FFF7FEFF 		bl	follow_path
 4554              	.LVL636:
3062:../fatfs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 4555              		.loc 1 3062 0
 4556 0026 0446     		mov	r4, r0
 4557 0028 38B9     		cbnz	r0, .L587
3063:../fatfs/src/ff.c **** 			if (dj.dir)		/* Found an object */
 4558              		.loc 1 3063 0
 4559 002a 0A9B     		ldr	r3, [sp, #40]
 4560 002c 23B1     		cbz	r3, .L588
3064:../fatfs/src/ff.c **** 				get_fileinfo(&dj, fno);
 4561              		.loc 1 3064 0
 4562 002e 05A8     		add	r0, sp, #20
ARM GAS  /tmp/ccOwSZ6Y.s 			page 143


 4563              	.LVL637:
 4564 0030 2946     		mov	r1, r5
 4565 0032 FFF7FEFF 		bl	get_fileinfo
 4566              	.LVL638:
 4567 0036 00E0     		b	.L587
 4568              	.LVL639:
 4569              	.L588:
3065:../fatfs/src/ff.c **** 			else			/* It is root dir */
3066:../fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
 4570              		.loc 1 3066 0
 4571 0038 0624     		movs	r4, #6
 4572              	.LVL640:
 4573              	.L587:
3067:../fatfs/src/ff.c **** 		}
3068:../fatfs/src/ff.c **** 		FREE_BUF();
3069:../fatfs/src/ff.c **** 	}
3070:../fatfs/src/ff.c **** 
3071:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3072:../fatfs/src/ff.c **** }
 4574              		.loc 1 3072 0
 4575 003a 2046     		mov	r0, r4
 4576 003c 0DB0     		add	sp, sp, #52
 4577              		@ sp needed
 4578 003e 30BD     		pop	{r4, r5, pc}
 4579              		.cfi_endproc
 4580              	.LFE34:
 4582              		.section	.text.f_getfree,"ax",%progbits
 4583              		.align	1
 4584              		.global	f_getfree
 4585              		.thumb
 4586              		.thumb_func
 4588              	f_getfree:
 4589              	.LFB35:
3073:../fatfs/src/ff.c **** 
3074:../fatfs/src/ff.c **** 
3075:../fatfs/src/ff.c **** 
3076:../fatfs/src/ff.c **** #if !_FS_READONLY
3077:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3078:../fatfs/src/ff.c **** /* Get Number of Free Clusters                                           */
3079:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3080:../fatfs/src/ff.c **** 
3081:../fatfs/src/ff.c **** FRESULT f_getfree (
3082:../fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
3083:../fatfs/src/ff.c **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
3084:../fatfs/src/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
3085:../fatfs/src/ff.c **** )
3086:../fatfs/src/ff.c **** {
 4590              		.loc 1 3086 0
 4591              		.cfi_startproc
 4592              		@ args = 0, pretend = 0, frame = 8
 4593              		@ frame_needed = 0, uses_anonymous_args = 0
 4594              	.LVL641:
 4595 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4596              		.cfi_def_cfa_offset 48
 4597              		.cfi_offset 0, -48
 4598              		.cfi_offset 1, -44
 4599              		.cfi_offset 2, -40
ARM GAS  /tmp/ccOwSZ6Y.s 			page 144


 4600              		.cfi_offset 4, -36
 4601              		.cfi_offset 5, -32
 4602              		.cfi_offset 6, -28
 4603              		.cfi_offset 7, -24
 4604              		.cfi_offset 8, -20
 4605              		.cfi_offset 9, -16
 4606              		.cfi_offset 10, -12
 4607              		.cfi_offset 11, -8
 4608              		.cfi_offset 14, -4
 4609              		.loc 1 3086 0
 4610 0004 02AB     		add	r3, sp, #8
 4611 0006 43F8040D 		str	r0, [r3, #-4]!
 4612 000a 8846     		mov	r8, r1
 4613 000c 1646     		mov	r6, r2
3087:../fatfs/src/ff.c **** 	FRESULT res;
3088:../fatfs/src/ff.c **** 	DWORD n, clst, sect, stat;
3089:../fatfs/src/ff.c **** 	UINT i;
3090:../fatfs/src/ff.c **** 	BYTE fat, *p;
3091:../fatfs/src/ff.c **** 
3092:../fatfs/src/ff.c **** 
3093:../fatfs/src/ff.c **** 	/* Get drive number */
3094:../fatfs/src/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
 4614              		.loc 1 3094 0
 4615 000e 1146     		mov	r1, r2
 4616              	.LVL642:
 4617 0010 1846     		mov	r0, r3
 4618              	.LVL643:
 4619 0012 0022     		movs	r2, #0
 4620              	.LVL644:
 4621 0014 FFF7FEFF 		bl	chk_mounted
 4622              	.LVL645:
3095:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4623              		.loc 1 3095 0
 4624 0018 0446     		mov	r4, r0
 4625 001a 0028     		cmp	r0, #0
 4626 001c 61D1     		bne	.L590
3096:../fatfs/src/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3097:../fatfs/src/ff.c **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
 4627              		.loc 1 3097 0
 4628 001e 3368     		ldr	r3, [r6]
 4629 0020 DF69     		ldr	r7, [r3, #28]
 4630 0022 1A69     		ldr	r2, [r3, #16]
 4631 0024 B91E     		subs	r1, r7, #2
 4632 0026 8A42     		cmp	r2, r1
 4633 0028 02D8     		bhi	.L591
3098:../fatfs/src/ff.c **** 			*nclst = (*fatfs)->free_clust;
 4634              		.loc 1 3098 0
 4635 002a C8F80020 		str	r2, [r8]
 4636 002e 58E0     		b	.L590
 4637              	.L591:
3099:../fatfs/src/ff.c **** 		} else {
3100:../fatfs/src/ff.c **** 			/* Get number of free clusters */
3101:../fatfs/src/ff.c **** 			fat = (*fatfs)->fs_type;
 4638              		.loc 1 3101 0
 4639 0030 93F80090 		ldrb	r9, [r3]	@ zero_extendqisi2
 4640              	.LVL646:
3102:../fatfs/src/ff.c **** 			n = 0;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 145


3103:../fatfs/src/ff.c **** 			if (fat == FS_FAT12) {
 4641              		.loc 1 3103 0
 4642 0034 B9F1010F 		cmp	r9, #1
 4643 0038 11D1     		bne	.L592
 4644 003a 0227     		movs	r7, #2
 4645 003c 0546     		mov	r5, r0
 4646              	.LVL647:
 4647              	.L595:
3104:../fatfs/src/ff.c **** 				clst = 2;
3105:../fatfs/src/ff.c **** 				do {
3106:../fatfs/src/ff.c **** 					stat = get_fat(*fatfs, clst);
 4648              		.loc 1 3106 0
 4649 003e 3068     		ldr	r0, [r6]
 4650 0040 3946     		mov	r1, r7
 4651 0042 FFF7FEFF 		bl	get_fat
 4652              	.LVL648:
3107:../fatfs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 4653              		.loc 1 3107 0
 4654 0046 431C     		adds	r3, r0, #1
 4655 0048 3CD0     		beq	.L603
3108:../fatfs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 4656              		.loc 1 3108 0
 4657 004a 0128     		cmp	r0, #1
 4658 004c 3CD0     		beq	.L604
3109:../fatfs/src/ff.c **** 					if (stat == 0) n++;
 4659              		.loc 1 3109 0
 4660 004e 00B9     		cbnz	r0, .L594
 4661              		.loc 1 3109 0 is_stmt 0 discriminator 1
 4662 0050 0135     		adds	r5, r5, #1
 4663              	.LVL649:
 4664              	.L594:
3110:../fatfs/src/ff.c **** 				} while (++clst < (*fatfs)->n_fatent);
 4665              		.loc 1 3110 0 is_stmt 1
 4666 0052 3368     		ldr	r3, [r6]
 4667 0054 0137     		adds	r7, r7, #1
 4668              	.LVL650:
 4669 0056 DB69     		ldr	r3, [r3, #28]
 4670 0058 9F42     		cmp	r7, r3
 4671 005a F0D3     		bcc	.L595
 4672 005c 37E0     		b	.L593
 4673              	.LVL651:
 4674              	.L592:
3111:../fatfs/src/ff.c **** 			} else {
3112:../fatfs/src/ff.c **** 				clst = (*fatfs)->n_fatent;
3113:../fatfs/src/ff.c **** 				sect = (*fatfs)->fatbase;
 4675              		.loc 1 3113 0
 4676 005e 596A     		ldr	r1, [r3, #36]
 4677              	.LVL652:
3114:../fatfs/src/ff.c **** 				i = 0; p = 0;
 4678              		.loc 1 3114 0
 4679 0060 0246     		mov	r2, r0
 4680 0062 0346     		mov	r3, r0
 4681              	.LVL653:
3102:../fatfs/src/ff.c **** 			n = 0;
 4682              		.loc 1 3102 0
 4683 0064 0546     		mov	r5, r0
 4684              	.LVL654:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 146


 4685              	.L601:
3115:../fatfs/src/ff.c **** 				do {
3116:../fatfs/src/ff.c **** 					if (!i) {
 4686              		.loc 1 3116 0
 4687 0066 52B9     		cbnz	r2, .L596
 4688              	.LVL655:
3117:../fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 4689              		.loc 1 3117 0
 4690 0068 3068     		ldr	r0, [r6]
 4691 006a 01F1010A 		add	r10, r1, #1
 4692              	.LVL656:
 4693 006e FFF7FEFF 		bl	move_window
 4694              	.LVL657:
3118:../fatfs/src/ff.c **** 						if (res != FR_OK) break;
 4695              		.loc 1 3118 0
 4696 0072 58BB     		cbnz	r0, .L605
3119:../fatfs/src/ff.c **** 						p = (*fatfs)->win;
 4697              		.loc 1 3119 0
 4698 0074 3368     		ldr	r3, [r6]
 4699              	.LVL658:
3117:../fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 4700              		.loc 1 3117 0
 4701 0076 5146     		mov	r1, r10
 4702              		.loc 1 3119 0
 4703 0078 3433     		adds	r3, r3, #52
 4704              	.LVL659:
3120:../fatfs/src/ff.c **** 						i = SS(*fatfs);
 4705              		.loc 1 3120 0
 4706 007a 4FF40072 		mov	r2, #512
 4707              	.LVL660:
 4708              	.L596:
3121:../fatfs/src/ff.c **** 					}
3122:../fatfs/src/ff.c **** 					if (fat == FS_FAT16) {
 4709              		.loc 1 3122 0
 4710 007e B9F1020F 		cmp	r9, #2
 4711 0082 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4712 0084 93F800C0 		ldrb	ip, [r3]	@ zero_extendqisi2
 4713 0088 06D1     		bne	.L597
3123:../fatfs/src/ff.c **** 						if (LD_WORD(p) == 0) n++;
 4714              		.loc 1 3123 0
 4715 008a 5CEA002C 		orrs	ip, ip, r0, lsl #8
 4716 008e 08BF     		it	eq
 4717 0090 0135     		addeq	r5, r5, #1
 4718              	.LVL661:
3124:../fatfs/src/ff.c **** 						p += 2; i -= 2;
 4719              		.loc 1 3124 0
 4720 0092 0233     		adds	r3, r3, #2
 4721              	.LVL662:
 4722 0094 023A     		subs	r2, r2, #2
 4723              	.LVL663:
 4724 0096 11E0     		b	.L609
 4725              	.LVL664:
 4726              	.L597:
3125:../fatfs/src/ff.c **** 					} else {
3126:../fatfs/src/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 4727              		.loc 1 3126 0
 4728 0098 93F802A0 		ldrb	r10, [r3, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 147


 4729 009c 93F803B0 		ldrb	fp, [r3, #3]	@ zero_extendqisi2
 4730 00a0 4FEA0A4A 		lsl	r10, r10, #16
 4731 00a4 4AEA0B6A 		orr	r10, r10, fp, lsl #24
 4732 00a8 4AEA0C0C 		orr	ip, r10, ip
 4733 00ac 4CEA0020 		orr	r0, ip, r0, lsl #8
 4734 00b0 20F07040 		bic	r0, r0, #-268435456
 4735 00b4 00B9     		cbnz	r0, .L600
 4736              		.loc 1 3126 0 is_stmt 0 discriminator 1
 4737 00b6 0135     		adds	r5, r5, #1
 4738              	.LVL665:
 4739              	.L600:
3127:../fatfs/src/ff.c **** 						p += 4; i -= 4;
 4740              		.loc 1 3127 0 is_stmt 1
 4741 00b8 0433     		adds	r3, r3, #4
 4742              	.LVL666:
 4743 00ba 043A     		subs	r2, r2, #4
 4744              	.LVL667:
 4745              	.L609:
3128:../fatfs/src/ff.c **** 					}
3129:../fatfs/src/ff.c **** 				} while (--clst);
 4746              		.loc 1 3129 0
 4747 00bc 013F     		subs	r7, r7, #1
 4748              	.LVL668:
3127:../fatfs/src/ff.c **** 						p += 4; i -= 4;
 4749              		.loc 1 3127 0
 4750 00be 92B2     		uxth	r2, r2
 4751              	.LVL669:
 4752              		.loc 1 3129 0
 4753 00c0 D1D1     		bne	.L601
 4754 00c2 04E0     		b	.L593
 4755              	.LVL670:
 4756              	.L603:
3107:../fatfs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 4757              		.loc 1 3107 0
 4758 00c4 0124     		movs	r4, #1
 4759 00c6 02E0     		b	.L593
 4760              	.L604:
3108:../fatfs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 4761              		.loc 1 3108 0
 4762 00c8 0224     		movs	r4, #2
 4763 00ca 00E0     		b	.L593
 4764              	.LVL671:
 4765              	.L605:
3117:../fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 4766              		.loc 1 3117 0
 4767 00cc 0446     		mov	r4, r0
 4768              	.LVL672:
 4769              	.L593:
3130:../fatfs/src/ff.c **** 			}
3131:../fatfs/src/ff.c **** 			(*fatfs)->free_clust = n;
 4770              		.loc 1 3131 0
 4771 00ce 3368     		ldr	r3, [r6]
3132:../fatfs/src/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 4772              		.loc 1 3132 0
 4773 00d0 B9F1030F 		cmp	r9, #3
 4774 00d4 08BF     		it	eq
 4775 00d6 0122     		moveq	r2, #1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 148


3131:../fatfs/src/ff.c **** 			(*fatfs)->free_clust = n;
 4776              		.loc 1 3131 0
 4777 00d8 1D61     		str	r5, [r3, #16]
 4778              		.loc 1 3132 0
 4779 00da 08BF     		it	eq
 4780 00dc 5A71     		strbeq	r2, [r3, #5]
3133:../fatfs/src/ff.c **** 			*nclst = n;
 4781              		.loc 1 3133 0
 4782 00de C8F80050 		str	r5, [r8]
 4783              	.LVL673:
 4784              	.L590:
3134:../fatfs/src/ff.c **** 		}
3135:../fatfs/src/ff.c **** 	}
3136:../fatfs/src/ff.c **** 	LEAVE_FF(*fatfs, res);
3137:../fatfs/src/ff.c **** }
 4785              		.loc 1 3137 0
 4786 00e2 2046     		mov	r0, r4
 4787 00e4 03B0     		add	sp, sp, #12
 4788              	.LVL674:
 4789              		@ sp needed
 4790 00e6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4791              		.cfi_endproc
 4792              	.LFE35:
 4794              		.section	.text.f_truncate,"ax",%progbits
 4795              		.align	1
 4796              		.global	f_truncate
 4797              		.thumb
 4798              		.thumb_func
 4800              	f_truncate:
 4801              	.LFB36:
3138:../fatfs/src/ff.c **** 
3139:../fatfs/src/ff.c **** 
3140:../fatfs/src/ff.c **** 
3141:../fatfs/src/ff.c **** 
3142:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3143:../fatfs/src/ff.c **** /* Truncate File                                                         */
3144:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3145:../fatfs/src/ff.c **** 
3146:../fatfs/src/ff.c **** FRESULT f_truncate (
3147:../fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object */
3148:../fatfs/src/ff.c **** )
3149:../fatfs/src/ff.c **** {
 4802              		.loc 1 3149 0
 4803              		.cfi_startproc
 4804              		@ args = 0, pretend = 0, frame = 0
 4805              		@ frame_needed = 0, uses_anonymous_args = 0
 4806              	.LVL675:
 4807 0000 70B5     		push	{r4, r5, r6, lr}
 4808              		.cfi_def_cfa_offset 16
 4809              		.cfi_offset 4, -16
 4810              		.cfi_offset 5, -12
 4811              		.cfi_offset 6, -8
 4812              		.cfi_offset 14, -4
 4813              		.loc 1 3149 0
 4814 0002 0446     		mov	r4, r0
3150:../fatfs/src/ff.c **** 	FRESULT res;
3151:../fatfs/src/ff.c **** 	DWORD ncl;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 149


3152:../fatfs/src/ff.c **** 
3153:../fatfs/src/ff.c **** 
3154:../fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 4815              		.loc 1 3154 0
 4816 0004 A188     		ldrh	r1, [r4, #4]
 4817 0006 0068     		ldr	r0, [r0]
 4818              	.LVL676:
 4819 0008 FFF7FEFF 		bl	validate
 4820              	.LVL677:
3155:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4821              		.loc 1 3155 0
 4822 000c 0546     		mov	r5, r0
 4823 000e 0028     		cmp	r0, #0
 4824 0010 3AD1     		bne	.L627
3156:../fatfs/src/ff.c **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 4825              		.loc 1 3156 0
 4826 0012 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4827 0014 1906     		lsls	r1, r3, #24
 4828 0016 31D4     		bmi	.L622
3157:../fatfs/src/ff.c **** 			res = FR_INT_ERR;
3158:../fatfs/src/ff.c **** 		} else {
3159:../fatfs/src/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 4829              		.loc 1 3159 0
 4830 0018 9A07     		lsls	r2, r3, #30
 4831 001a 31D5     		bpl	.L623
 4832              	.LVL678:
3160:../fatfs/src/ff.c **** 				res = FR_DENIED;
3161:../fatfs/src/ff.c **** 		}
3162:../fatfs/src/ff.c **** 	}
3163:../fatfs/src/ff.c **** 	if (res == FR_OK) {
3164:../fatfs/src/ff.c **** 		if (fp->fsize > fp->fptr) {
 4833              		.loc 1 3164 0
 4834 001c A668     		ldr	r6, [r4, #8]
 4835 001e E268     		ldr	r2, [r4, #12]
 4836 0020 B242     		cmp	r2, r6
 4837 0022 31D9     		bls	.L627
3165:../fatfs/src/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
3166:../fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 4838              		.loc 1 3166 0
 4839 0024 43F02003 		orr	r3, r3, #32
3165:../fatfs/src/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 4840              		.loc 1 3165 0
 4841 0028 E660     		str	r6, [r4, #12]
 4842              		.loc 1 3166 0
 4843 002a A371     		strb	r3, [r4, #6]
3167:../fatfs/src/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
3168:../fatfs/src/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 4844              		.loc 1 3168 0
 4845 002c 2068     		ldr	r0, [r4]
3167:../fatfs/src/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 4846              		.loc 1 3167 0
 4847 002e 2EB9     		cbnz	r6, .L613
 4848              		.loc 1 3168 0
 4849 0030 2169     		ldr	r1, [r4, #16]
 4850 0032 FFF7FEFF 		bl	remove_chain
 4851              	.LVL679:
3169:../fatfs/src/ff.c **** 				fp->sclust = 0;
ARM GAS  /tmp/ccOwSZ6Y.s 			page 150


 4852              		.loc 1 3169 0
 4853 0036 2661     		str	r6, [r4, #16]
3168:../fatfs/src/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 4854              		.loc 1 3168 0
 4855 0038 0546     		mov	r5, r0
 4856              	.LVL680:
 4857 003a 19E0     		b	.L614
 4858              	.LVL681:
 4859              	.L613:
3170:../fatfs/src/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3171:../fatfs/src/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
 4860              		.loc 1 3171 0
 4861 003c 6169     		ldr	r1, [r4, #20]
 4862 003e FFF7FEFF 		bl	get_fat
 4863              	.LVL682:
3172:../fatfs/src/ff.c **** 				res = FR_OK;
3173:../fatfs/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 4864              		.loc 1 3173 0
 4865 0042 431C     		adds	r3, r0, #1
3171:../fatfs/src/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
 4866              		.loc 1 3171 0
 4867 0044 0646     		mov	r6, r0
 4868              	.LVL683:
 4869              		.loc 1 3173 0
 4870 0046 1DD0     		beq	.L624
3174:../fatfs/src/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 4871              		.loc 1 3174 0
 4872 0048 0128     		cmp	r0, #1
 4873 004a 01D1     		bne	.L631
 4874 004c 0225     		movs	r5, #2
 4875 004e 10E0     		b	.L620
 4876              	.L631:
3175:../fatfs/src/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 4877              		.loc 1 3175 0
 4878 0050 2068     		ldr	r0, [r4]
 4879              	.LVL684:
 4880 0052 C369     		ldr	r3, [r0, #28]
 4881 0054 9E42     		cmp	r6, r3
 4882 0056 17D2     		bcs	.L627
3176:../fatfs/src/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 4883              		.loc 1 3176 0
 4884 0058 6169     		ldr	r1, [r4, #20]
 4885 005a 6FF07042 		mvn	r2, #-268435456
 4886 005e FFF7FEFF 		bl	put_fat
 4887              	.LVL685:
3177:../fatfs/src/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 4888              		.loc 1 3177 0
 4889 0062 0546     		mov	r5, r0
 4890 0064 28B9     		cbnz	r0, .L620
 4891              		.loc 1 3177 0 is_stmt 0 discriminator 1
 4892 0066 2068     		ldr	r0, [r4]
 4893              	.LVL686:
 4894 0068 3146     		mov	r1, r6
 4895 006a FFF7FEFF 		bl	remove_chain
 4896              	.LVL687:
 4897 006e 0546     		mov	r5, r0
 4898              	.LVL688:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 151


 4899              	.L614:
3178:../fatfs/src/ff.c **** 				}
3179:../fatfs/src/ff.c **** 			}
3180:../fatfs/src/ff.c **** 		}
3181:../fatfs/src/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 4900              		.loc 1 3181 0 is_stmt 1
 4901 0070 55B1     		cbz	r5, .L627
 4902              	.LVL689:
 4903              	.L620:
 4904              		.loc 1 3181 0 is_stmt 0 discriminator 1
 4905 0072 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4906 0074 63F07F03 		orn	r3, r3, #127
 4907 0078 A371     		strb	r3, [r4, #6]
 4908 007a 05E0     		b	.L627
 4909              	.LVL690:
 4910              	.L622:
3157:../fatfs/src/ff.c **** 			res = FR_INT_ERR;
 4911              		.loc 1 3157 0 is_stmt 1
 4912 007c 0225     		movs	r5, #2
 4913 007e 03E0     		b	.L627
 4914              	.L623:
3160:../fatfs/src/ff.c **** 				res = FR_DENIED;
 4915              		.loc 1 3160 0
 4916 0080 0725     		movs	r5, #7
 4917              	.LVL691:
 4918 0082 01E0     		b	.L627
 4919              	.LVL692:
 4920              	.L624:
3173:../fatfs/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 4921              		.loc 1 3173 0
 4922 0084 0125     		movs	r5, #1
 4923 0086 F4E7     		b	.L620
 4924              	.LVL693:
 4925              	.L627:
3182:../fatfs/src/ff.c **** 	}
3183:../fatfs/src/ff.c **** 
3184:../fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
3185:../fatfs/src/ff.c **** }
 4926              		.loc 1 3185 0
 4927 0088 2846     		mov	r0, r5
 4928 008a 70BD     		pop	{r4, r5, r6, pc}
 4929              		.cfi_endproc
 4930              	.LFE36:
 4932              		.section	.text.f_unlink,"ax",%progbits
 4933              		.align	1
 4934              		.global	f_unlink
 4935              		.thumb
 4936              		.thumb_func
 4938              	f_unlink:
 4939              	.LFB37:
3186:../fatfs/src/ff.c **** 
3187:../fatfs/src/ff.c **** 
3188:../fatfs/src/ff.c **** 
3189:../fatfs/src/ff.c **** 
3190:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3191:../fatfs/src/ff.c **** /* Delete a File or Directory                                            */
3192:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/ccOwSZ6Y.s 			page 152


3193:../fatfs/src/ff.c **** 
3194:../fatfs/src/ff.c **** FRESULT f_unlink (
3195:../fatfs/src/ff.c **** 	const TCHAR *path		/* Pointer to the file or directory path */
3196:../fatfs/src/ff.c **** )
3197:../fatfs/src/ff.c **** {
 4940              		.loc 1 3197 0
 4941              		.cfi_startproc
 4942              		@ args = 0, pretend = 0, frame = 80
 4943              		@ frame_needed = 0, uses_anonymous_args = 0
 4944              	.LVL694:
 4945 0000 30B5     		push	{r4, r5, lr}
 4946              		.cfi_def_cfa_offset 12
 4947              		.cfi_offset 4, -12
 4948              		.cfi_offset 5, -8
 4949              		.cfi_offset 14, -4
 4950 0002 95B0     		sub	sp, sp, #84
 4951              		.cfi_def_cfa_offset 96
 4952              		.loc 1 3197 0
 4953 0004 14AB     		add	r3, sp, #80
 4954 0006 43F84C0D 		str	r0, [r3, #-76]!
3198:../fatfs/src/ff.c **** 	FRESULT res;
3199:../fatfs/src/ff.c **** 	DIR dj, sdj;
3200:../fatfs/src/ff.c **** 	BYTE *dir;
3201:../fatfs/src/ff.c **** 	DWORD dclst;
3202:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3203:../fatfs/src/ff.c **** 
3204:../fatfs/src/ff.c **** 
3205:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 4955              		.loc 1 3205 0
 4956 000a 1846     		mov	r0, r3
 4957              	.LVL695:
 4958 000c 06A9     		add	r1, sp, #24
 4959 000e 0122     		movs	r2, #1
 4960 0010 FFF7FEFF 		bl	chk_mounted
 4961              	.LVL696:
3206:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 4962              		.loc 1 3206 0
 4963 0014 0028     		cmp	r0, #0
 4964 0016 51D1     		bne	.L652
3207:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 4965              		.loc 1 3207 0
 4966 0018 03AB     		add	r3, sp, #12
3208:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 4967              		.loc 1 3208 0
 4968 001a 06A8     		add	r0, sp, #24
 4969              	.LVL697:
 4970 001c 0199     		ldr	r1, [sp, #4]
3207:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 4971              		.loc 1 3207 0
 4972 001e 0C93     		str	r3, [sp, #48]
 4973              		.loc 1 3208 0
 4974 0020 FFF7FEFF 		bl	follow_path
 4975              	.LVL698:
3209:../fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 4976              		.loc 1 3209 0
 4977 0024 0028     		cmp	r0, #0
 4978 0026 49D1     		bne	.L652
ARM GAS  /tmp/ccOwSZ6Y.s 			page 153


 4979              		.loc 1 3209 0 is_stmt 0 discriminator 1
 4980 0028 0C9B     		ldr	r3, [sp, #48]
 4981 002a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4982 002c 9A06     		lsls	r2, r3, #26
 4983 002e 01D5     		bpl	.L661
3210:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 4984              		.loc 1 3210 0 is_stmt 1
 4985 0030 0620     		movs	r0, #6
 4986              	.LVL699:
 4987 0032 43E0     		b	.L652
 4988              	.LVL700:
 4989              	.L661:
3211:../fatfs/src/ff.c **** #if _FS_SHARE
3212:../fatfs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
3213:../fatfs/src/ff.c **** #endif
3214:../fatfs/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
3215:../fatfs/src/ff.c **** 			dir = dj.dir;
 4990              		.loc 1 3215 0
 4991 0034 0B9B     		ldr	r3, [sp, #44]
 4992              	.LVL701:
3216:../fatfs/src/ff.c **** 			if (!dir) {
 4993              		.loc 1 3216 0
 4994 0036 33B1     		cbz	r3, .L662
3217:../fatfs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
3218:../fatfs/src/ff.c **** 			} else {
3219:../fatfs/src/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
 4995              		.loc 1 3219 0
 4996 0038 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
3220:../fatfs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 4997              		.loc 1 3220 0
 4998 003a 12F0010F 		tst	r2, #1
 4999 003e 0CBF     		ite	eq
 5000 0040 0020     		moveq	r0, #0
 5001 0042 0720     		movne	r0, #7
 5002 0044 00E0     		b	.L636
 5003              	.L662:
3217:../fatfs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 5004              		.loc 1 3217 0
 5005 0046 0620     		movs	r0, #6
 5006              	.L636:
 5007              	.LVL702:
3221:../fatfs/src/ff.c **** 			}
3222:../fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
 5008              		.loc 1 3222 0
 5009 0048 5D7D     		ldrb	r5, [r3, #21]	@ zero_extendqisi2
 5010 004a 1C7D     		ldrb	r4, [r3, #20]	@ zero_extendqisi2
 5011 004c D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 5012 004e 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
 5013              	.LVL703:
3223:../fatfs/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 5014              		.loc 1 3223 0
 5015 0050 0028     		cmp	r0, #0
 5016 0052 33D1     		bne	.L652
 5017              	.LVL704:
 5018              		.loc 1 3223 0 is_stmt 0 discriminator 1
 5019 0054 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5020              	.LVL705:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 154


3222:../fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
 5021              		.loc 1 3222 0 is_stmt 1 discriminator 1
 5022 0056 44EA0524 		orr	r4, r4, r5, lsl #8
 5023              	.LVL706:
 5024 005a 42EA0122 		orr	r2, r2, r1, lsl #8
 5025              	.LVL707:
 5026              		.loc 1 3223 0 discriminator 1
 5027 005e DB06     		lsls	r3, r3, #27
3222:../fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
 5028              		.loc 1 3222 0 discriminator 1
 5029 0060 42EA0444 		orr	r4, r2, r4, lsl #16
 5030              		.loc 1 3223 0 discriminator 1
 5031 0064 1BD5     		bpl	.L638
3224:../fatfs/src/ff.c **** 				if (dclst < 2) {
 5032              		.loc 1 3224 0
 5033 0066 012C     		cmp	r4, #1
 5034 0068 15D9     		bls	.L645
3225:../fatfs/src/ff.c **** 					res = FR_INT_ERR;
3226:../fatfs/src/ff.c **** 				} else {
3227:../fatfs/src/ff.c **** 					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 5035              		.loc 1 3227 0
 5036 006a 0DA8     		add	r0, sp, #52
 5037 006c 06A9     		add	r1, sp, #24
 5038              	.LVL708:
 5039 006e 1C22     		movs	r2, #28
 5040 0070 FFF7FEFF 		bl	mem_cpy
 5041              	.LVL709:
3228:../fatfs/src/ff.c **** 					sdj.sclust = dclst;
3229:../fatfs/src/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 5042              		.loc 1 3229 0
 5043 0074 0DA8     		add	r0, sp, #52
 5044 0076 0221     		movs	r1, #2
3228:../fatfs/src/ff.c **** 					sdj.sclust = dclst;
 5045              		.loc 1 3228 0
 5046 0078 0F94     		str	r4, [sp, #60]
 5047              		.loc 1 3229 0
 5048 007a FFF7FEFF 		bl	dir_sdi
 5049              	.LVL710:
3230:../fatfs/src/ff.c **** 					if (res == FR_OK) {
 5050              		.loc 1 3230 0
 5051 007e E8B9     		cbnz	r0, .L652
3231:../fatfs/src/ff.c **** 						res = dir_read(&sdj);
 5052              		.loc 1 3231 0
 5053 0080 0DA8     		add	r0, sp, #52
 5054              	.LVL711:
 5055 0082 FFF7FEFF 		bl	dir_read
 5056              	.LVL712:
3232:../fatfs/src/ff.c **** 						if (res == FR_OK			/* Not empty dir */
 5057              		.loc 1 3232 0
 5058 0086 40B1     		cbz	r0, .L647
3233:../fatfs/src/ff.c **** #if _FS_RPATH
3234:../fatfs/src/ff.c **** 						|| dclst == sdj.fs->cdir	/* Current dir */
 5059              		.loc 1 3234 0
 5060 0088 0D9B     		ldr	r3, [sp, #52]
 5061 008a 9B69     		ldr	r3, [r3, #24]
 5062 008c 9C42     		cmp	r4, r3
 5063 008e 04D0     		beq	.L647
ARM GAS  /tmp/ccOwSZ6Y.s 			page 155


3235:../fatfs/src/ff.c **** #endif
3236:../fatfs/src/ff.c **** 						) res = FR_DENIED;
3237:../fatfs/src/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 5064              		.loc 1 3237 0
 5065 0090 0428     		cmp	r0, #4
 5066 0092 04D0     		beq	.L638
 5067 0094 12E0     		b	.L652
 5068              	.LVL713:
 5069              	.L645:
3225:../fatfs/src/ff.c **** 					res = FR_INT_ERR;
 5070              		.loc 1 3225 0
 5071 0096 0220     		movs	r0, #2
 5072 0098 10E0     		b	.L652
 5073              	.LVL714:
 5074              	.L647:
 5075 009a 0720     		movs	r0, #7
 5076              	.LVL715:
 5077 009c 0EE0     		b	.L652
 5078              	.LVL716:
 5079              	.L638:
3238:../fatfs/src/ff.c **** 					}
3239:../fatfs/src/ff.c **** 				}
3240:../fatfs/src/ff.c **** 			}
3241:../fatfs/src/ff.c **** 			if (res == FR_OK) {
3242:../fatfs/src/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 5080              		.loc 1 3242 0
 5081 009e 06A8     		add	r0, sp, #24
 5082 00a0 FFF7FEFF 		bl	dir_remove
 5083              	.LVL717:
3243:../fatfs/src/ff.c **** 				if (res == FR_OK) {
 5084              		.loc 1 3243 0
 5085 00a4 50B9     		cbnz	r0, .L652
3244:../fatfs/src/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
 5086              		.loc 1 3244 0
 5087 00a6 1CB9     		cbnz	r4, .L639
 5088              	.L640:
 5089              	.LVL718:
3245:../fatfs/src/ff.c **** 						res = remove_chain(dj.fs, dclst);
3246:../fatfs/src/ff.c **** 					if (res == FR_OK) res = sync(dj.fs);
 5090              		.loc 1 3246 0
 5091 00a8 0698     		ldr	r0, [sp, #24]
 5092 00aa FFF7FEFF 		bl	sync
 5093              	.LVL719:
 5094 00ae 05E0     		b	.L652
 5095              	.L639:
3245:../fatfs/src/ff.c **** 						res = remove_chain(dj.fs, dclst);
 5096              		.loc 1 3245 0
 5097 00b0 0698     		ldr	r0, [sp, #24]
 5098              	.LVL720:
 5099 00b2 2146     		mov	r1, r4
 5100 00b4 FFF7FEFF 		bl	remove_chain
 5101              	.LVL721:
 5102              		.loc 1 3246 0
 5103 00b8 0028     		cmp	r0, #0
 5104 00ba F5D0     		beq	.L640
 5105              	.LVL722:
 5106              	.L652:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 156


3247:../fatfs/src/ff.c **** 				}
3248:../fatfs/src/ff.c **** 			}
3249:../fatfs/src/ff.c **** 		}
3250:../fatfs/src/ff.c **** 		FREE_BUF();
3251:../fatfs/src/ff.c **** 	}
3252:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3253:../fatfs/src/ff.c **** }
 5107              		.loc 1 3253 0
 5108 00bc 15B0     		add	sp, sp, #84
 5109              		@ sp needed
 5110 00be 30BD     		pop	{r4, r5, pc}
 5111              		.cfi_endproc
 5112              	.LFE37:
 5114              		.section	.text.f_mkdir,"ax",%progbits
 5115              		.align	1
 5116              		.global	f_mkdir
 5117              		.thumb
 5118              		.thumb_func
 5120              	f_mkdir:
 5121              	.LFB38:
3254:../fatfs/src/ff.c **** 
3255:../fatfs/src/ff.c **** 
3256:../fatfs/src/ff.c **** 
3257:../fatfs/src/ff.c **** 
3258:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3259:../fatfs/src/ff.c **** /* Create a Directory                                                    */
3260:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3261:../fatfs/src/ff.c **** 
3262:../fatfs/src/ff.c **** FRESULT f_mkdir (
3263:../fatfs/src/ff.c **** 	const TCHAR *path		/* Pointer to the directory path */
3264:../fatfs/src/ff.c **** )
3265:../fatfs/src/ff.c **** {
 5122              		.loc 1 3265 0
 5123              		.cfi_startproc
 5124              		@ args = 0, pretend = 0, frame = 64
 5125              		@ frame_needed = 0, uses_anonymous_args = 0
 5126              	.LVL723:
 5127 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5128              		.cfi_def_cfa_offset 36
 5129              		.cfi_offset 4, -36
 5130              		.cfi_offset 5, -32
 5131              		.cfi_offset 6, -28
 5132              		.cfi_offset 7, -24
 5133              		.cfi_offset 8, -20
 5134              		.cfi_offset 9, -16
 5135              		.cfi_offset 10, -12
 5136              		.cfi_offset 11, -8
 5137              		.cfi_offset 14, -4
 5138 0004 91B0     		sub	sp, sp, #68
 5139              		.cfi_def_cfa_offset 104
 5140              		.loc 1 3265 0
 5141 0006 10AC     		add	r4, sp, #64
 5142 0008 44F82C0D 		str	r0, [r4, #-44]!
3266:../fatfs/src/ff.c **** 	FRESULT res;
3267:../fatfs/src/ff.c **** 	DIR dj;
3268:../fatfs/src/ff.c **** 	BYTE *dir, n;
3269:../fatfs/src/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
ARM GAS  /tmp/ccOwSZ6Y.s 			page 157


 5143              		.loc 1 3269 0
 5144 000c FFF7FEFF 		bl	get_fattime
 5145              	.LVL724:
3270:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3271:../fatfs/src/ff.c **** 
3272:../fatfs/src/ff.c **** 
3273:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 5146              		.loc 1 3273 0
 5147 0010 09A9     		add	r1, sp, #36
3269:../fatfs/src/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
 5148              		.loc 1 3269 0
 5149 0012 0746     		mov	r7, r0
 5150              	.LVL725:
 5151              		.loc 1 3273 0
 5152 0014 0122     		movs	r2, #1
 5153 0016 2046     		mov	r0, r4
 5154              	.LVL726:
 5155 0018 FFF7FEFF 		bl	chk_mounted
 5156              	.LVL727:
3274:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 5157              		.loc 1 3274 0
 5158 001c 0446     		mov	r4, r0
 5159              	.LVL728:
 5160 001e 0028     		cmp	r0, #0
 5161 0020 40F0CA80 		bne	.L690
3275:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5162              		.loc 1 3275 0
 5163 0024 06AB     		add	r3, sp, #24
3276:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 5164              		.loc 1 3276 0
 5165 0026 09A8     		add	r0, sp, #36
 5166              	.LVL729:
 5167 0028 0599     		ldr	r1, [sp, #20]
3275:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5168              		.loc 1 3275 0
 5169 002a 0F93     		str	r3, [sp, #60]
 5170              		.loc 1 3276 0
 5171 002c FFF7FEFF 		bl	follow_path
 5172              	.LVL730:
3277:../fatfs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 5173              		.loc 1 3277 0
 5174 0030 0446     		mov	r4, r0
 5175 0032 58B1     		cbz	r0, .L685
3278:../fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 5176              		.loc 1 3278 0
 5177 0034 0428     		cmp	r0, #4
 5178 0036 40F0BF80 		bne	.L690
 5179              		.loc 1 3278 0 is_stmt 0 discriminator 1
 5180 003a 0F9B     		ldr	r3, [sp, #60]
 5181 003c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5182 003e 03F02003 		and	r3, r3, #32
 5183 0042 03F0FF04 		and	r4, r3, #255
 5184 0046 1BB1     		cbz	r3, .L695
3279:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 5185              		.loc 1 3279 0 is_stmt 1
 5186 0048 0624     		movs	r4, #6
 5187 004a B5E0     		b	.L690
ARM GAS  /tmp/ccOwSZ6Y.s 			page 158


 5188              	.L685:
3277:../fatfs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 5189              		.loc 1 3277 0
 5190 004c 0824     		movs	r4, #8
 5191 004e B3E0     		b	.L690
 5192              	.L695:
 5193              	.LVL731:
3280:../fatfs/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
3281:../fatfs/src/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 5194              		.loc 1 3281 0
 5195 0050 0998     		ldr	r0, [sp, #36]
 5196 0052 2146     		mov	r1, r4
 5197 0054 FFF7FEFF 		bl	create_chain
 5198              	.LVL732:
3282:../fatfs/src/ff.c **** 			res = FR_OK;
3283:../fatfs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 5199              		.loc 1 3283 0
 5200 0058 0646     		mov	r6, r0
 5201 005a 0028     		cmp	r0, #0
 5202 005c 7FD0     		beq	.L696
3284:../fatfs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 5203              		.loc 1 3284 0
 5204 005e 012E     		cmp	r6, #1
 5205 0060 7FD0     		beq	.L687
3285:../fatfs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 5206              		.loc 1 3285 0
 5207 0062 731C     		adds	r3, r6, #1
 5208 0064 08BF     		it	eq
 5209 0066 0124     		moveq	r4, #1
 5210 0068 74D0     		beq	.L681
3286:../fatfs/src/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
3287:../fatfs/src/ff.c **** 				res = move_window(dj.fs, 0);
 5211              		.loc 1 3287 0
 5212 006a 2146     		mov	r1, r4
 5213 006c 0998     		ldr	r0, [sp, #36]
 5214              	.LVL733:
 5215 006e FFF7FEFF 		bl	move_window
 5216              	.LVL734:
3288:../fatfs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 5217              		.loc 1 3288 0
 5218 0072 0446     		mov	r4, r0
 5219 0074 0028     		cmp	r0, #0
 5220 0076 6DD1     		bne	.L681
3289:../fatfs/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 5221              		.loc 1 3289 0
 5222 0078 099D     		ldr	r5, [sp, #36]
 5223 007a 3146     		mov	r1, r6
 5224 007c 2846     		mov	r0, r5
 5225              	.LVL735:
 5226 007e FFF7FEFF 		bl	clust2sect
 5227              	.LVL736:
3290:../fatfs/src/ff.c **** 				dir = dj.fs->win;
 5228              		.loc 1 3290 0
 5229 0082 05F13408 		add	r8, r5, #52
3289:../fatfs/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 5230              		.loc 1 3289 0
 5231 0086 8446     		mov	ip, r0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 159


 5232              	.LVL737:
 5233              	.L669:
 5234              	.LBB84:
 5235              	.LBB85:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 5236              		.loc 1 550 0
 5237 0088 0021     		movs	r1, #0
 5238 008a 08F80410 		strb	r1, [r8, r4]
 5239 008e 0134     		adds	r4, r4, #1
 5240              	.LVL738:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 5241              		.loc 1 549 0
 5242 0090 B4F5007F 		cmp	r4, #512
 5243 0094 F8D1     		bne	.L669
 5244              	.L684:
 5245              	.LVL739:
 5246              	.LBE85:
 5247              	.LBE84:
 5248              	.LBB86:
 5249              	.LBB87:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 5250              		.loc 1 550 0
 5251 0096 2022     		movs	r2, #32
 5252 0098 08F80120 		strb	r2, [r8, r1]
 5253 009c 0131     		adds	r1, r1, #1
 5254              	.LVL740:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 5255              		.loc 1 549 0
 5256 009e 0B29     		cmp	r1, #11
 5257 00a0 F9D1     		bne	.L684
 5258              	.LBE87:
 5259              	.LBE86:
3291:../fatfs/src/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
3292:../fatfs/src/ff.c **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
3293:../fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
3294:../fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 5260              		.loc 1 3294 0
 5261 00a2 1021     		movs	r1, #16
 5262              	.LVL741:
3295:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
3296:../fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 5263              		.loc 1 3296 0
 5264 00a4 26FA01FB 		lsr	fp, r6, r1
3295:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5265              		.loc 1 3295 0
 5266 00a8 FBB2     		uxtb	r3, r7
 5267 00aa 85F84A30 		strb	r3, [r5, #74]
 5268 00ae 0193     		str	r3, [sp, #4]
 5269 00b0 C7F30723 		ubfx	r3, r7, #8, #8
 5270 00b4 85F84B30 		strb	r3, [r5, #75]
 5271 00b8 0293     		str	r3, [sp, #8]
 5272 00ba C7F30743 		ubfx	r3, r7, #16, #8
 5273 00be 85F84C30 		strb	r3, [r5, #76]
3293:../fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
 5274              		.loc 1 3293 0
 5275 00c2 2E24     		movs	r4, #46
 5276              	.LVL742:
ARM GAS  /tmp/ccOwSZ6Y.s 			page 160


3295:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5277              		.loc 1 3295 0
 5278 00c4 0393     		str	r3, [sp, #12]
 5279              		.loc 1 3296 0
 5280 00c6 5FFA8BFA 		uxtb	r10, fp
 5281 00ca F3B2     		uxtb	r3, r6
3295:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5282              		.loc 1 3295 0
 5283 00cc 3F0E     		lsrs	r7, r7, #24
 5284              	.LVL743:
 5285              		.loc 1 3296 0
 5286 00ce C6F30729 		ubfx	r9, r6, #8, #8
 5287 00d2 4FEA1B2B 		lsr	fp, fp, #8
3294:../fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 5288              		.loc 1 3294 0
 5289 00d6 85F83F10 		strb	r1, [r5, #63]
3293:../fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
 5290              		.loc 1 3293 0
 5291 00da 85F83440 		strb	r4, [r5, #52]
3295:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5292              		.loc 1 3295 0
 5293 00de 85F84D70 		strb	r7, [r5, #77]
 5294              		.loc 1 3296 0
 5295 00e2 85F84E30 		strb	r3, [r5, #78]
 5296 00e6 85F84F90 		strb	r9, [r5, #79]
 5297 00ea 85F848A0 		strb	r10, [r5, #72]
 5298 00ee 85F849B0 		strb	fp, [r5, #73]
3297:../fatfs/src/ff.c **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 5299              		.loc 1 3297 0
 5300 00f2 05F15400 		add	r0, r5, #84
 5301              	.LVL744:
 5302 00f6 4146     		mov	r1, r8
 5303 00f8 CDF800C0 		str	ip, [sp]
3296:../fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 5304              		.loc 1 3296 0
 5305 00fc 0493     		str	r3, [sp, #16]
 5306              		.loc 1 3297 0
 5307 00fe FFF7FEFF 		bl	mem_cpy
 5308              	.LVL745:
3298:../fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
3299:../fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 5309              		.loc 1 3299 0
 5310 0102 0999     		ldr	r1, [sp, #36]
3298:../fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
 5311              		.loc 1 3298 0
 5312 0104 85F85540 		strb	r4, [r5, #85]
 5313              		.loc 1 3299 0
 5314 0108 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
3298:../fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
 5315              		.loc 1 3298 0
 5316 010a 0B9A     		ldr	r2, [sp, #44]
 5317              	.LVL746:
 5318              		.loc 1 3299 0
 5319 010c 0328     		cmp	r0, #3
 5320 010e DDF800C0 		ldr	ip, [sp]
 5321 0112 03D1     		bne	.L673
 5322              		.loc 1 3299 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccOwSZ6Y.s 			page 161


 5323 0114 886A     		ldr	r0, [r1, #40]
3300:../fatfs/src/ff.c **** 					pcl = 0;
 5324              		.loc 1 3300 0 is_stmt 1 discriminator 1
 5325 0116 8242     		cmp	r2, r0
 5326 0118 08BF     		it	eq
 5327 011a 0022     		moveq	r2, #0
 5328              	.LVL747:
 5329              	.L673:
3301:../fatfs/src/ff.c **** 				ST_CLUST(dir+SZ_DIR, pcl);
 5330              		.loc 1 3301 0
 5331 011c 85F86E20 		strb	r2, [r5, #110]
 5332 0120 C2F30720 		ubfx	r0, r2, #8, #8
 5333 0124 120C     		lsrs	r2, r2, #16
 5334              	.LVL748:
 5335 0126 85F86820 		strb	r2, [r5, #104]
 5336 012a 120A     		lsrs	r2, r2, #8
 5337 012c 85F86F00 		strb	r0, [r5, #111]
 5338 0130 85F86920 		strb	r2, [r5, #105]
3302:../fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 5339              		.loc 1 3302 0
 5340 0134 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 5341              	.LVL749:
 5342              	.L674:
 5343              		.loc 1 3302 0 is_stmt 0 discriminator 1
 5344 0136 0DB3     		cbz	r5, .L697
3303:../fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 5345              		.loc 1 3303 0 is_stmt 1
 5346 0138 0998     		ldr	r0, [sp, #36]
3304:../fatfs/src/ff.c **** 					dj.fs->wflag = 1;
 5347              		.loc 1 3304 0
 5348 013a 0121     		movs	r1, #1
3303:../fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 5349              		.loc 1 3303 0
 5350 013c 0CF10102 		add	r2, ip, #1
 5351              	.LVL750:
 5352              		.loc 1 3304 0
 5353 0140 0171     		strb	r1, [r0, #4]
3303:../fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 5354              		.loc 1 3303 0
 5355 0142 C0F830C0 		str	ip, [r0, #48]
3305:../fatfs/src/ff.c **** 					res = move_window(dj.fs, 0);
 5356              		.loc 1 3305 0
 5357 0146 0021     		movs	r1, #0
 5358 0148 0092     		str	r2, [sp]
 5359 014a FFF7FEFF 		bl	move_window
 5360              	.LVL751:
3306:../fatfs/src/ff.c **** 					if (res != FR_OK) break;
 5361              		.loc 1 3306 0
 5362 014e 009A     		ldr	r2, [sp]
 5363 0150 0446     		mov	r4, r0
 5364 0152 40B1     		cbz	r0, .L683
 5365              	.LVL752:
 5366              	.L681:
3307:../fatfs/src/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
3308:../fatfs/src/ff.c **** 				}
3309:../fatfs/src/ff.c **** 			}
3310:../fatfs/src/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 162


3311:../fatfs/src/ff.c **** 			if (res != FR_OK) {
3312:../fatfs/src/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 5367              		.loc 1 3312 0
 5368 0154 0998     		ldr	r0, [sp, #36]
 5369 0156 3146     		mov	r1, r6
 5370 0158 FFF7FEFF 		bl	remove_chain
 5371              	.LVL753:
 5372 015c 2CE0     		b	.L690
 5373              	.LVL754:
 5374              	.L696:
3283:../fatfs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 5375              		.loc 1 3283 0
 5376 015e 0724     		movs	r4, #7
 5377 0160 F8E7     		b	.L681
 5378              	.L687:
3284:../fatfs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 5379              		.loc 1 3284 0
 5380 0162 0224     		movs	r4, #2
 5381 0164 F6E7     		b	.L681
 5382              	.LVL755:
 5383              	.L683:
 5384              	.LBB88:
 5385              	.LBB89:
 550:../fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 5386              		.loc 1 550 0
 5387 0166 0021     		movs	r1, #0
 5388 0168 08F80410 		strb	r1, [r8, r4]
 5389 016c 0134     		adds	r4, r4, #1
 5390              	.LVL756:
 549:../fatfs/src/ff.c **** 	while (cnt--)
 5391              		.loc 1 549 0
 5392 016e B4F5007F 		cmp	r4, #512
 5393 0172 F8D1     		bne	.L683
 5394              	.LBE89:
 5395              	.LBE88:
3302:../fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 5396              		.loc 1 3302 0
 5397 0174 013D     		subs	r5, r5, #1
 5398              	.LVL757:
 5399 0176 EDB2     		uxtb	r5, r5
 5400              	.LVL758:
3303:../fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 5401              		.loc 1 3303 0
 5402 0178 9446     		mov	ip, r2
 5403 017a DCE7     		b	.L674
 5404              	.LVL759:
 5405              	.L697:
3310:../fatfs/src/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 5406              		.loc 1 3310 0 discriminator 1
 5407 017c 09A8     		add	r0, sp, #36
 5408 017e FFF7FEFF 		bl	dir_register
 5409              	.LVL760:
3311:../fatfs/src/ff.c **** 			if (res != FR_OK) {
 5410              		.loc 1 3311 0 discriminator 1
 5411 0182 0446     		mov	r4, r0
 5412 0184 0028     		cmp	r0, #0
 5413 0186 E5D1     		bne	.L681
ARM GAS  /tmp/ccOwSZ6Y.s 			page 163


3313:../fatfs/src/ff.c **** 			} else {
3314:../fatfs/src/ff.c **** 				dir = dj.dir;
 5414              		.loc 1 3314 0
 5415 0188 0E9B     		ldr	r3, [sp, #56]
 5416              	.LVL761:
3315:../fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 5417              		.loc 1 3315 0
 5418 018a 1022     		movs	r2, #16
 5419 018c DA72     		strb	r2, [r3, #11]
3316:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 5420              		.loc 1 3316 0
 5421 018e 019A     		ldr	r2, [sp, #4]
3317:../fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
3318:../fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 5422              		.loc 1 3318 0
 5423 0190 0998     		ldr	r0, [sp, #36]
 5424              	.LVL762:
3316:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 5425              		.loc 1 3316 0
 5426 0192 9A75     		strb	r2, [r3, #22]
 5427 0194 029A     		ldr	r2, [sp, #8]
 5428 0196 5F76     		strb	r7, [r3, #25]
 5429 0198 DA75     		strb	r2, [r3, #23]
 5430 019a 039A     		ldr	r2, [sp, #12]
3317:../fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 5431              		.loc 1 3317 0
 5432 019c 83F81B90 		strb	r9, [r3, #27]
3316:../fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 5433              		.loc 1 3316 0
 5434 01a0 1A76     		strb	r2, [r3, #24]
3317:../fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 5435              		.loc 1 3317 0
 5436 01a2 049A     		ldr	r2, [sp, #16]
 5437 01a4 83F814A0 		strb	r10, [r3, #20]
 5438 01a8 9A76     		strb	r2, [r3, #26]
 5439 01aa 83F815B0 		strb	fp, [r3, #21]
 5440              		.loc 1 3318 0
 5441 01ae 0123     		movs	r3, #1
 5442              	.LVL763:
 5443 01b0 0371     		strb	r3, [r0, #4]
3319:../fatfs/src/ff.c **** 				res = sync(dj.fs);
 5444              		.loc 1 3319 0
 5445 01b2 FFF7FEFF 		bl	sync
 5446              	.LVL764:
 5447 01b6 0446     		mov	r4, r0
 5448              	.LVL765:
 5449              	.L690:
3320:../fatfs/src/ff.c **** 			}
3321:../fatfs/src/ff.c **** 		}
3322:../fatfs/src/ff.c **** 		FREE_BUF();
3323:../fatfs/src/ff.c **** 	}
3324:../fatfs/src/ff.c **** 
3325:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3326:../fatfs/src/ff.c **** }
 5450              		.loc 1 3326 0
 5451 01b8 2046     		mov	r0, r4
 5452 01ba 11B0     		add	sp, sp, #68
ARM GAS  /tmp/ccOwSZ6Y.s 			page 164


 5453              		@ sp needed
 5454 01bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5455              		.cfi_endproc
 5456              	.LFE38:
 5458              		.section	.text.f_chmod,"ax",%progbits
 5459              		.align	1
 5460              		.global	f_chmod
 5461              		.thumb
 5462              		.thumb_func
 5464              	f_chmod:
 5465              	.LFB39:
3327:../fatfs/src/ff.c **** 
3328:../fatfs/src/ff.c **** 
3329:../fatfs/src/ff.c **** 
3330:../fatfs/src/ff.c **** 
3331:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3332:../fatfs/src/ff.c **** /* Change Attribute                                                      */
3333:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3334:../fatfs/src/ff.c **** 
3335:../fatfs/src/ff.c **** FRESULT f_chmod (
3336:../fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
3337:../fatfs/src/ff.c **** 	BYTE value,			/* Attribute bits */
3338:../fatfs/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
3339:../fatfs/src/ff.c **** )
3340:../fatfs/src/ff.c **** {
 5466              		.loc 1 3340 0
 5467              		.cfi_startproc
 5468              		@ args = 0, pretend = 0, frame = 48
 5469              		@ frame_needed = 0, uses_anonymous_args = 0
 5470              	.LVL766:
 5471 0000 30B5     		push	{r4, r5, lr}
 5472              		.cfi_def_cfa_offset 12
 5473              		.cfi_offset 4, -12
 5474              		.cfi_offset 5, -8
 5475              		.cfi_offset 14, -4
 5476 0002 8DB0     		sub	sp, sp, #52
 5477              		.cfi_def_cfa_offset 64
 5478              		.loc 1 3340 0
 5479 0004 0CAB     		add	r3, sp, #48
 5480 0006 43F82C0D 		str	r0, [r3, #-44]!
 5481 000a 0C46     		mov	r4, r1
 5482 000c 1546     		mov	r5, r2
3341:../fatfs/src/ff.c **** 	FRESULT res;
3342:../fatfs/src/ff.c **** 	DIR dj;
3343:../fatfs/src/ff.c **** 	BYTE *dir;
3344:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3345:../fatfs/src/ff.c **** 
3346:../fatfs/src/ff.c **** 
3347:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 5483              		.loc 1 3347 0
 5484 000e 1846     		mov	r0, r3
 5485              	.LVL767:
 5486 0010 05A9     		add	r1, sp, #20
 5487              	.LVL768:
 5488 0012 0122     		movs	r2, #1
 5489              	.LVL769:
 5490 0014 FFF7FEFF 		bl	chk_mounted
ARM GAS  /tmp/ccOwSZ6Y.s 			page 165


 5491              	.LVL770:
3348:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 5492              		.loc 1 3348 0
 5493 0018 E0B9     		cbnz	r0, .L705
3349:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5494              		.loc 1 3349 0
 5495 001a 02AB     		add	r3, sp, #8
3350:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 5496              		.loc 1 3350 0
 5497 001c 05A8     		add	r0, sp, #20
 5498              	.LVL771:
 5499 001e 0199     		ldr	r1, [sp, #4]
3349:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5500              		.loc 1 3349 0
 5501 0020 0B93     		str	r3, [sp, #44]
 5502              		.loc 1 3350 0
 5503 0022 FFF7FEFF 		bl	follow_path
 5504              	.LVL772:
3351:../fatfs/src/ff.c **** 		FREE_BUF();
3352:../fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 5505              		.loc 1 3352 0
 5506 0026 A8B9     		cbnz	r0, .L705
 5507              		.loc 1 3352 0 is_stmt 0 discriminator 1
 5508 0028 0B9B     		ldr	r3, [sp, #44]
 5509 002a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5510 002c 9B06     		lsls	r3, r3, #26
 5511 002e 10D4     		bmi	.L703
 5512              	.LVL773:
3353:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3354:../fatfs/src/ff.c **** 		if (res == FR_OK) {
3355:../fatfs/src/ff.c **** 			dir = dj.dir;
 5513              		.loc 1 3355 0 is_stmt 1
 5514 0030 0A9B     		ldr	r3, [sp, #40]
 5515              	.LVL774:
3356:../fatfs/src/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 5516              		.loc 1 3356 0
 5517 0032 73B1     		cbz	r3, .L703
3357:../fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
3358:../fatfs/src/ff.c **** 			} else {						/* File or sub directory */
3359:../fatfs/src/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
3360:../fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 5518              		.loc 1 3360 0
 5519 0034 D97A     		ldrb	r1, [r3, #11]	@ zero_extendqisi2
3359:../fatfs/src/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 5520              		.loc 1 3359 0
 5521 0036 05F02702 		and	r2, r5, #39
 5522              	.LVL775:
 5523              		.loc 1 3360 0
 5524 003a 21EA0201 		bic	r1, r1, r2
 5525 003e 1440     		ands	r4, r4, r2
 5526 0040 41EA0402 		orr	r2, r1, r4
 5527              	.LVL776:
3361:../fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 5528              		.loc 1 3361 0
 5529 0044 0598     		ldr	r0, [sp, #20]
3360:../fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 5530              		.loc 1 3360 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 166


 5531 0046 DA72     		strb	r2, [r3, #11]
 5532              		.loc 1 3361 0
 5533 0048 0123     		movs	r3, #1
 5534              	.LVL777:
 5535 004a 0371     		strb	r3, [r0, #4]
3362:../fatfs/src/ff.c **** 				res = sync(dj.fs);
 5536              		.loc 1 3362 0
 5537 004c FFF7FEFF 		bl	sync
 5538              	.LVL778:
 5539 0050 00E0     		b	.L705
 5540              	.LVL779:
 5541              	.L703:
3353:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 5542              		.loc 1 3353 0
 5543 0052 0620     		movs	r0, #6
 5544              	.LVL780:
 5545              	.L705:
3363:../fatfs/src/ff.c **** 			}
3364:../fatfs/src/ff.c **** 		}
3365:../fatfs/src/ff.c **** 	}
3366:../fatfs/src/ff.c **** 
3367:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3368:../fatfs/src/ff.c **** }
 5546              		.loc 1 3368 0
 5547 0054 0DB0     		add	sp, sp, #52
 5548              		@ sp needed
 5549 0056 30BD     		pop	{r4, r5, pc}
 5550              		.cfi_endproc
 5551              	.LFE39:
 5553              		.section	.text.f_utime,"ax",%progbits
 5554              		.align	1
 5555              		.global	f_utime
 5556              		.thumb
 5557              		.thumb_func
 5559              	f_utime:
 5560              	.LFB40:
3369:../fatfs/src/ff.c **** 
3370:../fatfs/src/ff.c **** 
3371:../fatfs/src/ff.c **** 
3372:../fatfs/src/ff.c **** 
3373:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3374:../fatfs/src/ff.c **** /* Change Timestamp                                                      */
3375:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3376:../fatfs/src/ff.c **** 
3377:../fatfs/src/ff.c **** FRESULT f_utime (
3378:../fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file/directory name */
3379:../fatfs/src/ff.c **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
3380:../fatfs/src/ff.c **** )
3381:../fatfs/src/ff.c **** {
 5561              		.loc 1 3381 0
 5562              		.cfi_startproc
 5563              		@ args = 0, pretend = 0, frame = 48
 5564              		@ frame_needed = 0, uses_anonymous_args = 0
 5565              	.LVL781:
 5566 0000 10B5     		push	{r4, lr}
 5567              		.cfi_def_cfa_offset 8
 5568              		.cfi_offset 4, -8
ARM GAS  /tmp/ccOwSZ6Y.s 			page 167


 5569              		.cfi_offset 14, -4
 5570 0002 8CB0     		sub	sp, sp, #48
 5571              		.cfi_def_cfa_offset 56
 5572              		.loc 1 3381 0
 5573 0004 0CAB     		add	r3, sp, #48
 5574 0006 43F82C0D 		str	r0, [r3, #-44]!
 5575 000a 0C46     		mov	r4, r1
3382:../fatfs/src/ff.c **** 	FRESULT res;
3383:../fatfs/src/ff.c **** 	DIR dj;
3384:../fatfs/src/ff.c **** 	BYTE *dir;
3385:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3386:../fatfs/src/ff.c **** 
3387:../fatfs/src/ff.c **** 
3388:../fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 5576              		.loc 1 3388 0
 5577 000c 1846     		mov	r0, r3
 5578              	.LVL782:
 5579 000e 05A9     		add	r1, sp, #20
 5580              	.LVL783:
 5581 0010 0122     		movs	r2, #1
 5582 0012 FFF7FEFF 		bl	chk_mounted
 5583              	.LVL784:
3389:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 5584              		.loc 1 3389 0
 5585 0016 E8B9     		cbnz	r0, .L715
3390:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5586              		.loc 1 3390 0
 5587 0018 02AB     		add	r3, sp, #8
3391:../fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5588              		.loc 1 3391 0
 5589 001a 05A8     		add	r0, sp, #20
 5590              	.LVL785:
 5591 001c 0199     		ldr	r1, [sp, #4]
3390:../fatfs/src/ff.c **** 		INIT_BUF(dj);
 5592              		.loc 1 3390 0
 5593 001e 0B93     		str	r3, [sp, #44]
 5594              		.loc 1 3391 0
 5595 0020 FFF7FEFF 		bl	follow_path
 5596              	.LVL786:
3392:../fatfs/src/ff.c **** 		FREE_BUF();
3393:../fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 5597              		.loc 1 3393 0
 5598 0024 B0B9     		cbnz	r0, .L715
 5599              		.loc 1 3393 0 is_stmt 0 discriminator 1
 5600 0026 0B9B     		ldr	r3, [sp, #44]
 5601 0028 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5602 002a 9B06     		lsls	r3, r3, #26
 5603 002c 11D4     		bmi	.L713
 5604              	.LVL787:
3394:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3395:../fatfs/src/ff.c **** 		if (res == FR_OK) {
3396:../fatfs/src/ff.c **** 			dir = dj.dir;
 5605              		.loc 1 3396 0 is_stmt 1
 5606 002e 0A9B     		ldr	r3, [sp, #40]
 5607              	.LVL788:
3397:../fatfs/src/ff.c **** 			if (!dir) {					/* Root directory */
 5608              		.loc 1 3397 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 168


 5609 0030 7BB1     		cbz	r3, .L713
3398:../fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
3399:../fatfs/src/ff.c **** 			} else {					/* File or sub-directory */
3400:../fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 5610              		.loc 1 3400 0
 5611 0032 E288     		ldrh	r2, [r4, #6]
3401:../fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
3402:../fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 5612              		.loc 1 3402 0
 5613 0034 0598     		ldr	r0, [sp, #20]
3400:../fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 5614              		.loc 1 3400 0
 5615 0036 9A75     		strb	r2, [r3, #22]
 5616 0038 E288     		ldrh	r2, [r4, #6]
 5617 003a 120A     		lsrs	r2, r2, #8
 5618 003c DA75     		strb	r2, [r3, #23]
3401:../fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 5619              		.loc 1 3401 0
 5620 003e A288     		ldrh	r2, [r4, #4]
 5621 0040 1A76     		strb	r2, [r3, #24]
 5622 0042 A288     		ldrh	r2, [r4, #4]
 5623 0044 120A     		lsrs	r2, r2, #8
 5624 0046 5A76     		strb	r2, [r3, #25]
 5625              		.loc 1 3402 0
 5626 0048 0123     		movs	r3, #1
 5627              	.LVL789:
 5628 004a 0371     		strb	r3, [r0, #4]
3403:../fatfs/src/ff.c **** 				res = sync(dj.fs);
 5629              		.loc 1 3403 0
 5630 004c FFF7FEFF 		bl	sync
 5631              	.LVL790:
 5632 0050 00E0     		b	.L715
 5633              	.LVL791:
 5634              	.L713:
3394:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 5635              		.loc 1 3394 0
 5636 0052 0620     		movs	r0, #6
 5637              	.LVL792:
 5638              	.L715:
3404:../fatfs/src/ff.c **** 			}
3405:../fatfs/src/ff.c **** 		}
3406:../fatfs/src/ff.c **** 	}
3407:../fatfs/src/ff.c **** 
3408:../fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3409:../fatfs/src/ff.c **** }
 5639              		.loc 1 3409 0
 5640 0054 0CB0     		add	sp, sp, #48
 5641              	.LVL793:
 5642              		@ sp needed
 5643 0056 10BD     		pop	{r4, pc}
 5644              		.cfi_endproc
 5645              	.LFE40:
 5647              		.section	.text.f_rename,"ax",%progbits
 5648              		.align	1
 5649              		.global	f_rename
 5650              		.thumb
 5651              		.thumb_func
ARM GAS  /tmp/ccOwSZ6Y.s 			page 169


 5653              	f_rename:
 5654              	.LFB41:
3410:../fatfs/src/ff.c **** 
3411:../fatfs/src/ff.c **** 
3412:../fatfs/src/ff.c **** 
3413:../fatfs/src/ff.c **** 
3414:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3415:../fatfs/src/ff.c **** /* Rename File/Directory                                                 */
3416:../fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3417:../fatfs/src/ff.c **** 
3418:../fatfs/src/ff.c **** FRESULT f_rename (
3419:../fatfs/src/ff.c **** 	const TCHAR *path_old,	/* Pointer to the old name */
3420:../fatfs/src/ff.c **** 	const TCHAR *path_new	/* Pointer to the new name */
3421:../fatfs/src/ff.c **** )
3422:../fatfs/src/ff.c **** {
 5655              		.loc 1 3422 0
 5656              		.cfi_startproc
 5657              		@ args = 0, pretend = 0, frame = 104
 5658              		@ frame_needed = 0, uses_anonymous_args = 0
 5659              	.LVL794:
 5660 0000 30B5     		push	{r4, r5, lr}
 5661              		.cfi_def_cfa_offset 12
 5662              		.cfi_offset 4, -12
 5663              		.cfi_offset 5, -8
 5664              		.cfi_offset 14, -4
 5665 0002 9BB0     		sub	sp, sp, #108
 5666              		.cfi_def_cfa_offset 120
 5667              		.loc 1 3422 0
 5668 0004 1AAB     		add	r3, sp, #104
 5669 0006 43F8640D 		str	r0, [r3, #-100]!
 5670 000a 0C46     		mov	r4, r1
3423:../fatfs/src/ff.c **** 	FRESULT res;
3424:../fatfs/src/ff.c **** 	DIR djo, djn;
3425:../fatfs/src/ff.c **** 	BYTE buf[21], *dir;
3426:../fatfs/src/ff.c **** 	DWORD dw;
3427:../fatfs/src/ff.c **** 	DEF_NAMEBUF;
3428:../fatfs/src/ff.c **** 
3429:../fatfs/src/ff.c **** 
3430:../fatfs/src/ff.c **** 	res = chk_mounted(&path_old, &djo.fs, 1);
 5671              		.loc 1 3430 0
 5672 000c 1846     		mov	r0, r3
 5673              	.LVL795:
 5674 000e 0CA9     		add	r1, sp, #48
 5675              	.LVL796:
 5676 0010 0122     		movs	r2, #1
 5677 0012 FFF7FEFF 		bl	chk_mounted
 5678              	.LVL797:
3431:../fatfs/src/ff.c **** 	if (res == FR_OK) {
 5679              		.loc 1 3431 0
 5680 0016 0028     		cmp	r0, #0
 5681 0018 7DD1     		bne	.L735
3432:../fatfs/src/ff.c **** 		djn.fs = djo.fs;
 5682              		.loc 1 3432 0
 5683 001a 0C9B     		ldr	r3, [sp, #48]
3433:../fatfs/src/ff.c **** 		INIT_BUF(djo);
3434:../fatfs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 5684              		.loc 1 3434 0
ARM GAS  /tmp/ccOwSZ6Y.s 			page 170


 5685 001c 0CA8     		add	r0, sp, #48
 5686              	.LVL798:
3432:../fatfs/src/ff.c **** 		djn.fs = djo.fs;
 5687              		.loc 1 3432 0
 5688 001e 1393     		str	r3, [sp, #76]
 5689              		.loc 1 3434 0
 5690 0020 0199     		ldr	r1, [sp, #4]
3433:../fatfs/src/ff.c **** 		INIT_BUF(djo);
 5691              		.loc 1 3433 0
 5692 0022 03AB     		add	r3, sp, #12
 5693 0024 1293     		str	r3, [sp, #72]
 5694              		.loc 1 3434 0
 5695 0026 FFF7FEFF 		bl	follow_path
 5696              	.LVL799:
3435:../fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 5697              		.loc 1 3435 0
 5698 002a 0028     		cmp	r0, #0
 5699 002c 73D1     		bne	.L735
 5700              		.loc 1 3435 0 is_stmt 0 discriminator 1
 5701 002e 129B     		ldr	r3, [sp, #72]
 5702 0030 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 5703 0032 9A06     		lsls	r2, r3, #26
 5704 0034 64D4     		bmi	.L729
 5705              	.LVL800:
3436:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3437:../fatfs/src/ff.c **** #if _FS_SHARE
3438:../fatfs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3439:../fatfs/src/ff.c **** #endif
3440:../fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
3441:../fatfs/src/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 5706              		.loc 1 3441 0 is_stmt 1
 5707 0036 1199     		ldr	r1, [sp, #68]
 5708 0038 0029     		cmp	r1, #0
 5709 003a 5FD0     		beq	.L740
3442:../fatfs/src/ff.c **** 				res = FR_NO_FILE;
3443:../fatfs/src/ff.c **** 			} else {
3444:../fatfs/src/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 5710              		.loc 1 3444 0
 5711 003c 06A8     		add	r0, sp, #24
 5712 003e 0B31     		adds	r1, r1, #11
 5713 0040 1522     		movs	r2, #21
 5714 0042 FFF7FEFF 		bl	mem_cpy
 5715              	.LVL801:
3445:../fatfs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
 5716              		.loc 1 3445 0
 5717 0046 13A8     		add	r0, sp, #76
 5718 0048 0CA9     		add	r1, sp, #48
 5719 004a 1C22     		movs	r2, #28
 5720 004c FFF7FEFF 		bl	mem_cpy
 5721              	.LVL802:
3446:../fatfs/src/ff.c **** 				res = follow_path(&djn, path_new);
 5722              		.loc 1 3446 0
 5723 0050 13A8     		add	r0, sp, #76
 5724 0052 2146     		mov	r1, r4
 5725 0054 FFF7FEFF 		bl	follow_path
 5726              	.LVL803:
3447:../fatfs/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
ARM GAS  /tmp/ccOwSZ6Y.s 			page 171


 5727              		.loc 1 3447 0
 5728 0058 0028     		cmp	r0, #0
 5729 005a 4DD0     		beq	.L730
3448:../fatfs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 5730              		.loc 1 3448 0
 5731 005c 0428     		cmp	r0, #4
 5732 005e 5AD1     		bne	.L735
3449:../fatfs/src/ff.c **** /* Start critical section that any interruption or error can cause cross-link */
3450:../fatfs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 5733              		.loc 1 3450 0
 5734 0060 13A8     		add	r0, sp, #76
 5735              	.LVL804:
 5736 0062 FFF7FEFF 		bl	dir_register
 5737              	.LVL805:
3451:../fatfs/src/ff.c **** 					if (res == FR_OK) {
 5738              		.loc 1 3451 0
 5739 0066 0028     		cmp	r0, #0
 5740 0068 55D1     		bne	.L735
3452:../fatfs/src/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
 5741              		.loc 1 3452 0
 5742 006a 189C     		ldr	r4, [sp, #96]
 5743              	.LVL806:
3453:../fatfs/src/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
 5744              		.loc 1 3453 0
 5745 006c 1322     		movs	r2, #19
 5746 006e 04F10D00 		add	r0, r4, #13
 5747              	.LVL807:
 5748 0072 0DF11A01 		add	r1, sp, #26
 5749 0076 FFF7FEFF 		bl	mem_cpy
 5750              	.LVL808:
3454:../fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 5751              		.loc 1 3454 0
 5752 007a 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
3455:../fatfs/src/ff.c **** 						djo.fs->wflag = 1;
 5753              		.loc 1 3455 0
 5754 007e 0122     		movs	r2, #1
3454:../fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 5755              		.loc 1 3454 0
 5756 0080 43F02003 		orr	r3, r3, #32
 5757 0084 E372     		strb	r3, [r4, #11]
 5758              		.loc 1 3455 0
 5759 0086 0C9B     		ldr	r3, [sp, #48]
 5760 0088 1A71     		strb	r2, [r3, #4]
3456:../fatfs/src/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 5761              		.loc 1 3456 0
 5762 008a 159B     		ldr	r3, [sp, #84]
 5763 008c 0E9A     		ldr	r2, [sp, #56]
 5764 008e 9A42     		cmp	r2, r3
 5765 0090 38D0     		beq	.L726
 5766              		.loc 1 3456 0 is_stmt 0 discriminator 1
 5767 0092 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 5768 0094 DB06     		lsls	r3, r3, #27
 5769 0096 35D5     		bpl	.L726
3457:../fatfs/src/ff.c **** 							dw = clust2sect(djn.fs, LD_CLUST(dir));
 5770              		.loc 1 3457 0 is_stmt 1
 5771 0098 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5772 009a 617D     		ldrb	r1, [r4, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccOwSZ6Y.s 			page 172


 5773 009c E27E     		ldrb	r2, [r4, #27]	@ zero_extendqisi2
 5774 009e 43EA0121 		orr	r1, r3, r1, lsl #8
 5775 00a2 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 5776 00a4 139D     		ldr	r5, [sp, #76]
 5777 00a6 43EA0223 		orr	r3, r3, r2, lsl #8
 5778 00aa 43EA0141 		orr	r1, r3, r1, lsl #16
 5779 00ae 2846     		mov	r0, r5
 5780 00b0 FFF7FEFF 		bl	clust2sect
 5781              	.LVL809:
3458:../fatfs/src/ff.c **** 							if (!dw) {
 5782              		.loc 1 3458 0
 5783 00b4 0146     		mov	r1, r0
 5784 00b6 68B3     		cbz	r0, .L731
3459:../fatfs/src/ff.c **** 								res = FR_INT_ERR;
3460:../fatfs/src/ff.c **** 							} else {
3461:../fatfs/src/ff.c **** 								res = move_window(djn.fs, dw);
 5785              		.loc 1 3461 0
 5786 00b8 2846     		mov	r0, r5
 5787              	.LVL810:
 5788 00ba FFF7FEFF 		bl	move_window
 5789              	.LVL811:
3462:../fatfs/src/ff.c **** 								dir = djn.fs->win+SZ_DIR;	/* .. entry */
 5790              		.loc 1 3462 0
 5791 00be 139B     		ldr	r3, [sp, #76]
 5792              	.LVL812:
3463:../fatfs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 5793              		.loc 1 3463 0
 5794 00c0 48BB     		cbnz	r0, .L735
 5795              		.loc 1 3463 0 is_stmt 0 discriminator 1
 5796 00c2 93F85520 		ldrb	r2, [r3, #85]	@ zero_extendqisi2
 5797 00c6 2E2A     		cmp	r2, #46
 5798 00c8 1CD1     		bne	.L726
3464:../fatfs/src/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 5799              		.loc 1 3464 0 is_stmt 1
 5800 00ca 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 5801 00cc 032A     		cmp	r2, #3
 5802 00ce 159A     		ldr	r2, [sp, #84]
 5803 00d0 02D1     		bne	.L724
 5804              		.loc 1 3464 0 is_stmt 0 discriminator 2
 5805 00d2 996A     		ldr	r1, [r3, #40]
 5806 00d4 8A42     		cmp	r2, r1
 5807 00d6 00D0     		beq	.L725
 5808              	.L724:
 5809              		.loc 1 3464 0 discriminator 1
 5810 00d8 1046     		mov	r0, r2
 5811              	.LVL813:
 5812              	.L725:
3465:../fatfs/src/ff.c **** 									ST_CLUST(dir, dw);
 5813              		.loc 1 3465 0 is_stmt 1 discriminator 3
 5814 00da C0F30722 		ubfx	r2, r0, #8, #8
 5815 00de 83F86E00 		strb	r0, [r3, #110]
 5816 00e2 000C     		lsrs	r0, r0, #16
 5817              	.LVL814:
 5818 00e4 83F86F20 		strb	r2, [r3, #111]
 5819 00e8 83F86800 		strb	r0, [r3, #104]
3466:../fatfs/src/ff.c **** 									djn.fs->wflag = 1;
 5820              		.loc 1 3466 0 discriminator 3
ARM GAS  /tmp/ccOwSZ6Y.s 			page 173


 5821 00ec 0122     		movs	r2, #1
3465:../fatfs/src/ff.c **** 									ST_CLUST(dir, dw);
 5822              		.loc 1 3465 0 discriminator 3
 5823 00ee 000A     		lsrs	r0, r0, #8
 5824 00f0 83F86900 		strb	r0, [r3, #105]
 5825              		.loc 1 3466 0 discriminator 3
 5826 00f4 1A71     		strb	r2, [r3, #4]
 5827 00f6 05E0     		b	.L726
 5828              	.LVL815:
 5829              	.L730:
3447:../fatfs/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 5830              		.loc 1 3447 0
 5831 00f8 0820     		movs	r0, #8
 5832              	.LVL816:
 5833 00fa 0CE0     		b	.L735
 5834              	.LVL817:
 5835              	.L740:
3442:../fatfs/src/ff.c **** 				res = FR_NO_FILE;
 5836              		.loc 1 3442 0
 5837 00fc 0420     		movs	r0, #4
 5838 00fe 0AE0     		b	.L735
 5839              	.LVL818:
 5840              	.L729:
3436:../fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 5841              		.loc 1 3436 0
 5842 0100 0620     		movs	r0, #6
 5843              	.LVL819:
 5844 0102 08E0     		b	.L735
 5845              	.LVL820:
 5846              	.L726:
3467:../fatfs/src/ff.c **** 								}
3468:../fatfs/src/ff.c **** 							}
3469:../fatfs/src/ff.c **** 						}
3470:../fatfs/src/ff.c **** 						if (res == FR_OK) {
3471:../fatfs/src/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 5847              		.loc 1 3471 0
 5848 0104 0CA8     		add	r0, sp, #48
 5849 0106 FFF7FEFF 		bl	dir_remove
 5850              	.LVL821:
3472:../fatfs/src/ff.c **** 							if (res == FR_OK)
 5851              		.loc 1 3472 0
 5852 010a 20B9     		cbnz	r0, .L735
3473:../fatfs/src/ff.c **** 								res = sync(djo.fs);
 5853              		.loc 1 3473 0
 5854 010c 0C98     		ldr	r0, [sp, #48]
 5855              	.LVL822:
 5856 010e FFF7FEFF 		bl	sync
 5857              	.LVL823:
 5858 0112 00E0     		b	.L735
 5859              	.LVL824:
 5860              	.L731:
3459:../fatfs/src/ff.c **** 								res = FR_INT_ERR;
 5861              		.loc 1 3459 0
 5862 0114 0220     		movs	r0, #2
 5863              	.LVL825:
 5864              	.L735:
3474:../fatfs/src/ff.c **** 						}
ARM GAS  /tmp/ccOwSZ6Y.s 			page 174


3475:../fatfs/src/ff.c **** 					}
3476:../fatfs/src/ff.c **** /* End critical section */
3477:../fatfs/src/ff.c **** 				}
3478:../fatfs/src/ff.c **** 			}
3479:../fatfs/src/ff.c **** 		}
3480:../fatfs/src/ff.c **** 		FREE_BUF();
3481:../fatfs/src/ff.c **** 	}
3482:../fatfs/src/ff.c **** 	LEAVE_FF(djo.fs, res);
3483:../fatfs/src/ff.c **** }
 5865              		.loc 1 3483 0
 5866 0116 1BB0     		add	sp, sp, #108
 5867              		@ sp needed
 5868 0118 30BD     		pop	{r4, r5, pc}
 5869              		.cfi_endproc
 5870              	.LFE41:
 5872              		.section	.bss.CurrVol,"aw",%nobits
 5873              		.set	.LANCHOR0,. + 0
 5876              	CurrVol:
 5877 0000 00       		.space	1
 5878              		.section	.rodata.str1.1,"aMS",%progbits,1
 5879              	.LC0:
 5880 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 5880      3A3B3C3D 
 5880      3E3F5B5D 
 5880      7C7F00
 5881              		.section	.bss.Fsid,"aw",%nobits
 5882              		.align	1
 5883              		.set	.LANCHOR2,. + 0
 5886              	Fsid:
 5887 0000 0000     		.space	2
 5888              		.section	.rodata.excvt.4461,"a",%progbits
 5889              		.set	.LANCHOR3,. + 0
 5892              	excvt.4461:
 5893 0000 80       		.byte	-128
 5894 0001 81       		.byte	-127
 5895 0002 82       		.byte	-126
 5896 0003 83       		.byte	-125
 5897 0004 84       		.byte	-124
 5898 0005 85       		.byte	-123
 5899 0006 86       		.byte	-122
 5900 0007 87       		.byte	-121
 5901 0008 88       		.byte	-120
 5902 0009 89       		.byte	-119
 5903 000a 8A       		.byte	-118
 5904 000b 8B       		.byte	-117
 5905 000c 8C       		.byte	-116
 5906 000d 8D       		.byte	-115
 5907 000e 8E       		.byte	-114
 5908 000f 8F       		.byte	-113
 5909 0010 90       		.byte	-112
 5910 0011 91       		.byte	-111
 5911 0012 92       		.byte	-110
 5912 0013 93       		.byte	-109
 5913 0014 94       		.byte	-108
 5914 0015 95       		.byte	-107
 5915 0016 96       		.byte	-106
 5916 0017 97       		.byte	-105
ARM GAS  /tmp/ccOwSZ6Y.s 			page 175


 5917 0018 98       		.byte	-104
 5918 0019 99       		.byte	-103
 5919 001a 8A       		.byte	-118
 5920 001b 9B       		.byte	-101
 5921 001c 8C       		.byte	-116
 5922 001d 8D       		.byte	-115
 5923 001e 8E       		.byte	-114
 5924 001f 8F       		.byte	-113
 5925 0020 A0       		.byte	-96
 5926 0021 A1       		.byte	-95
 5927 0022 A2       		.byte	-94
 5928 0023 A3       		.byte	-93
 5929 0024 A4       		.byte	-92
 5930 0025 A5       		.byte	-91
 5931 0026 A6       		.byte	-90
 5932 0027 A7       		.byte	-89
 5933 0028 A8       		.byte	-88
 5934 0029 A9       		.byte	-87
 5935 002a AA       		.byte	-86
 5936 002b AB       		.byte	-85
 5937 002c AC       		.byte	-84
 5938 002d AD       		.byte	-83
 5939 002e AE       		.byte	-82
 5940 002f AF       		.byte	-81
 5941 0030 B0       		.byte	-80
 5942 0031 B1       		.byte	-79
 5943 0032 B2       		.byte	-78
 5944 0033 A3       		.byte	-93
 5945 0034 B4       		.byte	-76
 5946 0035 B5       		.byte	-75
 5947 0036 B6       		.byte	-74
 5948 0037 B7       		.byte	-73
 5949 0038 B8       		.byte	-72
 5950 0039 A5       		.byte	-91
 5951 003a AA       		.byte	-86
 5952 003b BB       		.byte	-69
 5953 003c BC       		.byte	-68
 5954 003d BD       		.byte	-67
 5955 003e BC       		.byte	-68
 5956 003f AF       		.byte	-81
 5957 0040 C0       		.byte	-64
 5958 0041 C1       		.byte	-63
 5959 0042 C2       		.byte	-62
 5960 0043 C3       		.byte	-61
 5961 0044 C4       		.byte	-60
 5962 0045 C5       		.byte	-59
 5963 0046 C6       		.byte	-58
 5964 0047 C7       		.byte	-57
 5965 0048 C8       		.byte	-56
 5966 0049 C9       		.byte	-55
 5967 004a CA       		.byte	-54
 5968 004b CB       		.byte	-53
 5969 004c CC       		.byte	-52
 5970 004d CD       		.byte	-51
 5971 004e CE       		.byte	-50
 5972 004f CF       		.byte	-49
 5973 0050 D0       		.byte	-48
ARM GAS  /tmp/ccOwSZ6Y.s 			page 176


 5974 0051 D1       		.byte	-47
 5975 0052 D2       		.byte	-46
 5976 0053 D3       		.byte	-45
 5977 0054 D4       		.byte	-44
 5978 0055 D5       		.byte	-43
 5979 0056 D6       		.byte	-42
 5980 0057 D7       		.byte	-41
 5981 0058 D8       		.byte	-40
 5982 0059 D9       		.byte	-39
 5983 005a DA       		.byte	-38
 5984 005b DB       		.byte	-37
 5985 005c DC       		.byte	-36
 5986 005d DD       		.byte	-35
 5987 005e DE       		.byte	-34
 5988 005f DF       		.byte	-33
 5989 0060 C0       		.byte	-64
 5990 0061 C1       		.byte	-63
 5991 0062 C2       		.byte	-62
 5992 0063 C3       		.byte	-61
 5993 0064 C4       		.byte	-60
 5994 0065 C5       		.byte	-59
 5995 0066 C6       		.byte	-58
 5996 0067 C7       		.byte	-57
 5997 0068 C8       		.byte	-56
 5998 0069 C9       		.byte	-55
 5999 006a CA       		.byte	-54
 6000 006b CB       		.byte	-53
 6001 006c CC       		.byte	-52
 6002 006d CD       		.byte	-51
 6003 006e CE       		.byte	-50
 6004 006f CF       		.byte	-49
 6005 0070 D0       		.byte	-48
 6006 0071 D1       		.byte	-47
 6007 0072 D2       		.byte	-46
 6008 0073 D3       		.byte	-45
 6009 0074 D4       		.byte	-44
 6010 0075 D5       		.byte	-43
 6011 0076 D6       		.byte	-42
 6012 0077 F7       		.byte	-9
 6013 0078 D8       		.byte	-40
 6014 0079 D9       		.byte	-39
 6015 007a DA       		.byte	-38
 6016 007b DB       		.byte	-37
 6017 007c DC       		.byte	-36
 6018 007d DD       		.byte	-35
 6019 007e DE       		.byte	-34
 6020 007f FF       		.byte	-1
 6021              		.section	.bss.FatFs,"aw",%nobits
 6022              		.align	2
 6023              		.set	.LANCHOR1,. + 0
 6026              	FatFs:
 6027 0000 00000000 		.space	4
 6028              		.text
 6029              	.Letext0:
 6030              		.file 2 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 6031              		.file 3 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 6032              		.file 4 "../fatfs/inc/integer.h"
ARM GAS  /tmp/ccOwSZ6Y.s 			page 177


 6033              		.file 5 "../fatfs/inc/ff.h"
 6034              		.file 6 "../fatfs/inc/diskio.h"
