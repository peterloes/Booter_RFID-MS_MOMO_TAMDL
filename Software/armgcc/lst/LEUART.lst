ARM GAS  /tmp/cck7pr62.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"LEUART.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.INT_Enable,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	INT_Enable:
  24              	.LFB85:
  25              		.file 1 "../emlib/inc/em_int.h"
   1:../emlib/inc/em_int.h **** /***************************************************************************//**
   2:../emlib/inc/em_int.h ****  * @file
   3:../emlib/inc/em_int.h ****  * @brief Interrupt enable/disable unit API
   4:../emlib/inc/em_int.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_int.h ****  * @version 3.20.2
   6:../emlib/inc/em_int.h ****  *******************************************************************************
   7:../emlib/inc/em_int.h ****  * @section License
   8:../emlib/inc/em_int.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_int.h ****  *******************************************************************************
  10:../emlib/inc/em_int.h ****  *
  11:../emlib/inc/em_int.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_int.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_int.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_int.h ****  *
  15:../emlib/inc/em_int.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_int.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_int.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_int.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_int.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_int.h ****  *
  21:../emlib/inc/em_int.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_int.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_int.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_int.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_int.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_int.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_int.h ****  *
  28:../emlib/inc/em_int.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_int.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_int.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_int.h ****  *
  32:../emlib/inc/em_int.h ****  ******************************************************************************/
  33:../emlib/inc/em_int.h **** #ifndef __EM_INT_H
ARM GAS  /tmp/cck7pr62.s 			page 2


  34:../emlib/inc/em_int.h **** #define __EM_INT_H
  35:../emlib/inc/em_int.h **** 
  36:../emlib/inc/em_int.h **** #include "em_device.h"
  37:../emlib/inc/em_int.h **** 
  38:../emlib/inc/em_int.h **** extern uint32_t INT_LockCnt;
  39:../emlib/inc/em_int.h **** 
  40:../emlib/inc/em_int.h **** #ifdef __cplusplus
  41:../emlib/inc/em_int.h **** extern "C" {
  42:../emlib/inc/em_int.h **** #endif
  43:../emlib/inc/em_int.h **** 
  44:../emlib/inc/em_int.h **** /***************************************************************************//**
  45:../emlib/inc/em_int.h ****  * @addtogroup EM_Library
  46:../emlib/inc/em_int.h ****  * @{
  47:../emlib/inc/em_int.h ****  ******************************************************************************/
  48:../emlib/inc/em_int.h **** 
  49:../emlib/inc/em_int.h **** /***************************************************************************//**
  50:../emlib/inc/em_int.h ****  * @addtogroup INT
  51:../emlib/inc/em_int.h ****  * @{
  52:../emlib/inc/em_int.h ****  ******************************************************************************/
  53:../emlib/inc/em_int.h **** 
  54:../emlib/inc/em_int.h **** /***************************************************************************//**
  55:../emlib/inc/em_int.h ****  * @brief
  56:../emlib/inc/em_int.h ****  *   Disable interrupts.
  57:../emlib/inc/em_int.h ****  *
  58:../emlib/inc/em_int.h ****  * @return
  59:../emlib/inc/em_int.h ****  *   The resulting interrupt nesting level.
  60:../emlib/inc/em_int.h ****  *
  61:../emlib/inc/em_int.h ****  * @details
  62:../emlib/inc/em_int.h ****  *   Disable interrupts and increment lock level counter.
  63:../emlib/inc/em_int.h ****  *
  64:../emlib/inc/em_int.h ****  ******************************************************************************/
  65:../emlib/inc/em_int.h **** __STATIC_INLINE uint32_t INT_Disable(void)
  66:../emlib/inc/em_int.h **** {
  67:../emlib/inc/em_int.h ****   __disable_irq();
  68:../emlib/inc/em_int.h ****   if (INT_LockCnt < UINT32_MAX)
  69:../emlib/inc/em_int.h ****   {
  70:../emlib/inc/em_int.h ****     INT_LockCnt++;
  71:../emlib/inc/em_int.h ****   }
  72:../emlib/inc/em_int.h **** 
  73:../emlib/inc/em_int.h ****   return INT_LockCnt;
  74:../emlib/inc/em_int.h **** }
  75:../emlib/inc/em_int.h **** 
  76:../emlib/inc/em_int.h **** /***************************************************************************//**
  77:../emlib/inc/em_int.h ****  * @brief
  78:../emlib/inc/em_int.h ****  *   Enable interrupts.
  79:../emlib/inc/em_int.h ****  *
  80:../emlib/inc/em_int.h ****  * @return
  81:../emlib/inc/em_int.h ****  *   The resulting interrupt nesting level.
  82:../emlib/inc/em_int.h ****  *
  83:../emlib/inc/em_int.h ****  * @details
  84:../emlib/inc/em_int.h ****  *   Decrement interrupt lock level counter and enable interrupts if counter
  85:../emlib/inc/em_int.h ****  *   reached zero.
  86:../emlib/inc/em_int.h ****  *
  87:../emlib/inc/em_int.h ****  ******************************************************************************/
  88:../emlib/inc/em_int.h **** __STATIC_INLINE uint32_t INT_Enable(void)
  89:../emlib/inc/em_int.h **** {
  26              		.loc 1 89 0
ARM GAS  /tmp/cck7pr62.s 			page 3


  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  90:../emlib/inc/em_int.h ****   uint32_t retVal;
  91:../emlib/inc/em_int.h **** 
  92:../emlib/inc/em_int.h ****   if (INT_LockCnt > 0)
  31              		.loc 1 92 0
  32 0000 034B     		ldr	r3, .L6
  33 0002 1868     		ldr	r0, [r3]
  34 0004 18B1     		cbz	r0, .L2
  93:../emlib/inc/em_int.h ****   {
  94:../emlib/inc/em_int.h ****     INT_LockCnt--;
  35              		.loc 1 94 0
  36 0006 0138     		subs	r0, r0, #1
  37 0008 1860     		str	r0, [r3]
  38              	.LVL0:
  95:../emlib/inc/em_int.h ****     retVal = INT_LockCnt;
  96:../emlib/inc/em_int.h ****     if (retVal == 0)
  39              		.loc 1 96 0
  40 000a 00B9     		cbnz	r0, .L2
  41              	.LBB6:
  42              	.LBB7:
  43              		.file 2 "../CMSIS/Include/core_cmFunc.h"
   1:../CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../CMSIS/Include/core_cmFunc.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cmFunc.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cmFunc.h ****  *
   7:../CMSIS/Include/core_cmFunc.h ****  * @note
   8:../CMSIS/Include/core_cmFunc.h ****  *
   9:../CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cmFunc.h **** 
  12:../CMSIS/Include/core_cmFunc.h ****    All rights reserved.
  13:../CMSIS/Include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cmFunc.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cmFunc.h ****    *
  24:../CMSIS/Include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/cck7pr62.s 			page 4


  34:../CMSIS/Include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cmFunc.h **** 
  37:../CMSIS/Include/core_cmFunc.h **** 
  38:../CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:../CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:../CMSIS/Include/core_cmFunc.h **** 
  41:../CMSIS/Include/core_cmFunc.h **** 
  42:../CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:../CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:../CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:../CMSIS/Include/core_cmFunc.h ****   @{
  46:../CMSIS/Include/core_cmFunc.h ****  */
  47:../CMSIS/Include/core_cmFunc.h **** 
  48:../CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:../CMSIS/Include/core_cmFunc.h **** 
  51:../CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:../CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../CMSIS/Include/core_cmFunc.h **** #endif
  54:../CMSIS/Include/core_cmFunc.h **** 
  55:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:../CMSIS/Include/core_cmFunc.h **** 
  58:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  59:../CMSIS/Include/core_cmFunc.h **** 
  60:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:../CMSIS/Include/core_cmFunc.h **** 
  62:../CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  63:../CMSIS/Include/core_cmFunc.h ****  */
  64:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:../CMSIS/Include/core_cmFunc.h **** {
  66:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:../CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  68:../CMSIS/Include/core_cmFunc.h **** }
  69:../CMSIS/Include/core_cmFunc.h **** 
  70:../CMSIS/Include/core_cmFunc.h **** 
  71:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  72:../CMSIS/Include/core_cmFunc.h **** 
  73:../CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:../CMSIS/Include/core_cmFunc.h **** 
  75:../CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:../CMSIS/Include/core_cmFunc.h ****  */
  77:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:../CMSIS/Include/core_cmFunc.h **** {
  79:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:../CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  81:../CMSIS/Include/core_cmFunc.h **** }
  82:../CMSIS/Include/core_cmFunc.h **** 
  83:../CMSIS/Include/core_cmFunc.h **** 
  84:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:../CMSIS/Include/core_cmFunc.h **** 
  86:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:../CMSIS/Include/core_cmFunc.h **** 
  88:../CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
  89:../CMSIS/Include/core_cmFunc.h ****  */
  90:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
ARM GAS  /tmp/cck7pr62.s 			page 5


  91:../CMSIS/Include/core_cmFunc.h **** {
  92:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:../CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  94:../CMSIS/Include/core_cmFunc.h **** }
  95:../CMSIS/Include/core_cmFunc.h **** 
  96:../CMSIS/Include/core_cmFunc.h **** 
  97:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:../CMSIS/Include/core_cmFunc.h **** 
  99:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:../CMSIS/Include/core_cmFunc.h **** 
 101:../CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 102:../CMSIS/Include/core_cmFunc.h ****  */
 103:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:../CMSIS/Include/core_cmFunc.h **** {
 105:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:../CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
 107:../CMSIS/Include/core_cmFunc.h **** }
 108:../CMSIS/Include/core_cmFunc.h **** 
 109:../CMSIS/Include/core_cmFunc.h **** 
 110:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:../CMSIS/Include/core_cmFunc.h **** 
 112:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:../CMSIS/Include/core_cmFunc.h **** 
 114:../CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 115:../CMSIS/Include/core_cmFunc.h ****  */
 116:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:../CMSIS/Include/core_cmFunc.h **** {
 118:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:../CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 120:../CMSIS/Include/core_cmFunc.h **** }
 121:../CMSIS/Include/core_cmFunc.h **** 
 122:../CMSIS/Include/core_cmFunc.h **** 
 123:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:../CMSIS/Include/core_cmFunc.h **** 
 125:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:../CMSIS/Include/core_cmFunc.h **** 
 127:../CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 128:../CMSIS/Include/core_cmFunc.h ****  */
 129:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:../CMSIS/Include/core_cmFunc.h **** {
 131:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:../CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:../CMSIS/Include/core_cmFunc.h **** }
 134:../CMSIS/Include/core_cmFunc.h **** 
 135:../CMSIS/Include/core_cmFunc.h **** 
 136:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:../CMSIS/Include/core_cmFunc.h **** 
 138:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:../CMSIS/Include/core_cmFunc.h **** 
 140:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:../CMSIS/Include/core_cmFunc.h ****  */
 142:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:../CMSIS/Include/core_cmFunc.h **** {
 144:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:../CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:../CMSIS/Include/core_cmFunc.h **** }
 147:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 6


 148:../CMSIS/Include/core_cmFunc.h **** 
 149:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:../CMSIS/Include/core_cmFunc.h **** 
 151:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:../CMSIS/Include/core_cmFunc.h **** 
 153:../CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 154:../CMSIS/Include/core_cmFunc.h ****  */
 155:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:../CMSIS/Include/core_cmFunc.h **** {
 157:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:../CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:../CMSIS/Include/core_cmFunc.h **** }
 160:../CMSIS/Include/core_cmFunc.h **** 
 161:../CMSIS/Include/core_cmFunc.h **** 
 162:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:../CMSIS/Include/core_cmFunc.h **** 
 164:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:../CMSIS/Include/core_cmFunc.h **** 
 166:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:../CMSIS/Include/core_cmFunc.h ****  */
 168:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:../CMSIS/Include/core_cmFunc.h **** {
 170:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:../CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:../CMSIS/Include/core_cmFunc.h **** }
 173:../CMSIS/Include/core_cmFunc.h **** 
 174:../CMSIS/Include/core_cmFunc.h **** 
 175:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:../CMSIS/Include/core_cmFunc.h **** 
 177:../CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 178:../CMSIS/Include/core_cmFunc.h **** 
 179:../CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 180:../CMSIS/Include/core_cmFunc.h ****  */
 181:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:../CMSIS/Include/core_cmFunc.h **** {
 183:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:../CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 185:../CMSIS/Include/core_cmFunc.h **** }
 186:../CMSIS/Include/core_cmFunc.h **** 
 187:../CMSIS/Include/core_cmFunc.h **** 
 188:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:../CMSIS/Include/core_cmFunc.h **** 
 190:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:../CMSIS/Include/core_cmFunc.h **** 
 192:../CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:../CMSIS/Include/core_cmFunc.h ****  */
 194:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:../CMSIS/Include/core_cmFunc.h **** {
 196:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:../CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:../CMSIS/Include/core_cmFunc.h **** }
 199:../CMSIS/Include/core_cmFunc.h **** 
 200:../CMSIS/Include/core_cmFunc.h **** 
 201:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:../CMSIS/Include/core_cmFunc.h **** 
 203:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 7


 205:../CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:../CMSIS/Include/core_cmFunc.h ****  */
 208:../CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:../CMSIS/Include/core_cmFunc.h **** 
 210:../CMSIS/Include/core_cmFunc.h **** 
 211:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:../CMSIS/Include/core_cmFunc.h **** 
 213:../CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:../CMSIS/Include/core_cmFunc.h ****  */
 216:../CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:../CMSIS/Include/core_cmFunc.h **** 
 218:../CMSIS/Include/core_cmFunc.h **** 
 219:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:../CMSIS/Include/core_cmFunc.h **** 
 221:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:../CMSIS/Include/core_cmFunc.h **** 
 223:../CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 224:../CMSIS/Include/core_cmFunc.h ****  */
 225:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:../CMSIS/Include/core_cmFunc.h **** {
 227:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:../CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 229:../CMSIS/Include/core_cmFunc.h **** }
 230:../CMSIS/Include/core_cmFunc.h **** 
 231:../CMSIS/Include/core_cmFunc.h **** 
 232:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:../CMSIS/Include/core_cmFunc.h **** 
 234:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 235:../CMSIS/Include/core_cmFunc.h **** 
 236:../CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:../CMSIS/Include/core_cmFunc.h ****  */
 238:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:../CMSIS/Include/core_cmFunc.h **** {
 240:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:../CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:../CMSIS/Include/core_cmFunc.h **** }
 243:../CMSIS/Include/core_cmFunc.h **** 
 244:../CMSIS/Include/core_cmFunc.h **** 
 245:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:../CMSIS/Include/core_cmFunc.h **** 
 247:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:../CMSIS/Include/core_cmFunc.h **** 
 249:../CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 250:../CMSIS/Include/core_cmFunc.h ****  */
 251:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:../CMSIS/Include/core_cmFunc.h **** {
 253:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:../CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 255:../CMSIS/Include/core_cmFunc.h **** }
 256:../CMSIS/Include/core_cmFunc.h **** 
 257:../CMSIS/Include/core_cmFunc.h **** 
 258:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:../CMSIS/Include/core_cmFunc.h **** 
 260:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 8


 262:../CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:../CMSIS/Include/core_cmFunc.h ****  */
 264:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:../CMSIS/Include/core_cmFunc.h **** {
 266:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:../CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:../CMSIS/Include/core_cmFunc.h **** }
 269:../CMSIS/Include/core_cmFunc.h **** 
 270:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:../CMSIS/Include/core_cmFunc.h **** 
 272:../CMSIS/Include/core_cmFunc.h **** 
 273:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:../CMSIS/Include/core_cmFunc.h **** 
 275:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:../CMSIS/Include/core_cmFunc.h **** 
 277:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:../CMSIS/Include/core_cmFunc.h **** 
 279:../CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:../CMSIS/Include/core_cmFunc.h ****  */
 281:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:../CMSIS/Include/core_cmFunc.h **** {
 283:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:../CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 286:../CMSIS/Include/core_cmFunc.h **** #else
 287:../CMSIS/Include/core_cmFunc.h ****    return(0);
 288:../CMSIS/Include/core_cmFunc.h **** #endif
 289:../CMSIS/Include/core_cmFunc.h **** }
 290:../CMSIS/Include/core_cmFunc.h **** 
 291:../CMSIS/Include/core_cmFunc.h **** 
 292:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:../CMSIS/Include/core_cmFunc.h **** 
 294:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:../CMSIS/Include/core_cmFunc.h **** 
 296:../CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:../CMSIS/Include/core_cmFunc.h ****  */
 298:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:../CMSIS/Include/core_cmFunc.h **** {
 300:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:../CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:../CMSIS/Include/core_cmFunc.h **** #else
 304:../CMSIS/Include/core_cmFunc.h ****   (void)fpscr;
 305:../CMSIS/Include/core_cmFunc.h **** #endif
 306:../CMSIS/Include/core_cmFunc.h **** }
 307:../CMSIS/Include/core_cmFunc.h **** 
 308:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 309:../CMSIS/Include/core_cmFunc.h **** 
 310:../CMSIS/Include/core_cmFunc.h **** 
 311:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 312:../CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 313:../CMSIS/Include/core_cmFunc.h **** 
 314:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 315:../CMSIS/Include/core_cmFunc.h **** 
 316:../CMSIS/Include/core_cmFunc.h **** 
 317:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 318:../CMSIS/Include/core_cmFunc.h **** /* TI CCS specific functions */
ARM GAS  /tmp/cck7pr62.s 			page 9


 319:../CMSIS/Include/core_cmFunc.h **** 
 320:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_ccs.h>
 321:../CMSIS/Include/core_cmFunc.h **** 
 322:../CMSIS/Include/core_cmFunc.h **** 
 323:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:../CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 325:../CMSIS/Include/core_cmFunc.h **** 
 326:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:../CMSIS/Include/core_cmFunc.h **** 
 328:../CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:../CMSIS/Include/core_cmFunc.h ****  */
 331:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:../CMSIS/Include/core_cmFunc.h **** {
 333:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  44              		.loc 2 333 0
  45              	@ 333 "../CMSIS/Include/core_cmFunc.h" 1
  46 000c 62B6     		cpsie i
  47              	@ 0 "" 2
  48              	.LVL1:
  49              		.thumb
  50              	.L2:
  51              	.LBE7:
  52              	.LBE6:
  97:../emlib/inc/em_int.h ****     {
  98:../emlib/inc/em_int.h ****       __enable_irq();
  99:../emlib/inc/em_int.h ****     }
 100:../emlib/inc/em_int.h ****     return retVal;
 101:../emlib/inc/em_int.h ****   }
 102:../emlib/inc/em_int.h ****   else
 103:../emlib/inc/em_int.h ****   {
 104:../emlib/inc/em_int.h ****     return 0;
 105:../emlib/inc/em_int.h ****   }
 106:../emlib/inc/em_int.h **** }
  53              		.loc 1 106 0
  54 000e 7047     		bx	lr
  55              	.L7:
  56              		.align	2
  57              	.L6:
  58 0010 00000000 		.word	INT_LockCnt
  59              		.cfi_endproc
  60              	.LFE85:
  62              		.section	.text.dmaTransferStart,"ax",%progbits
  63              		.align	1
  64              		.global	dmaTransferStart
  65              		.thumb
  66              		.thumb_func
  68              	dmaTransferStart:
  69              	.LFB114:
  70              		.file 3 "../drivers/LEUART.c"
   1:../drivers/LEUART.c **** /**************************************************************************//**
   2:../drivers/LEUART.c ****  * @file
   3:../drivers/LEUART.c ****  * @brief	LEUART Driver
   4:../drivers/LEUART.c ****  * @author	Energy Micro AS
   5:../drivers/LEUART.c ****  * @author	Ralf Gerhauser
   6:../drivers/LEUART.c ****  * @version	2016-09-27
   7:../drivers/LEUART.c ****  *
ARM GAS  /tmp/cck7pr62.s 			page 10


   8:../drivers/LEUART.c ****  * This is the driver for the Low Energy UART.  It is used to write log and
   9:../drivers/LEUART.c ****  * debug information to a connected host system.  The LEUART device to use
  10:../drivers/LEUART.c ****  * can be set via the @ref LEUART define, for an assignment of the DMA channel,
  11:../drivers/LEUART.c ****  * see @ref DMA_CHAN_LEUART_RX and @ref DMA_CHAN_LEUART_TX.
  12:../drivers/LEUART.c ****  *
  13:../drivers/LEUART.c ****  * @note This driver only supports data transmission.
  14:../drivers/LEUART.c ****  *
  15:../drivers/LEUART.c ****  ******************************************************************************
  16:../drivers/LEUART.c ****  * @section License
  17:../drivers/LEUART.c ****  * <b>(C) Copyright 2013 Energy Micro AS, http://www.energymicro.com</b>
  18:../drivers/LEUART.c ****  *******************************************************************************
  19:../drivers/LEUART.c ****  *
  20:../drivers/LEUART.c ****  * Permission is granted to anyone to use this software for any purpose,
  21:../drivers/LEUART.c ****  * including commercial applications, and to alter it and redistribute it
  22:../drivers/LEUART.c ****  * freely, subject to the following restrictions:
  23:../drivers/LEUART.c ****  *
  24:../drivers/LEUART.c ****  * 1. The origin of this software must not be misrepresented; you must not
  25:../drivers/LEUART.c ****  *    claim that you wrote the original software.
  26:../drivers/LEUART.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  27:../drivers/LEUART.c ****  *    misrepresented as being the original software.
  28:../drivers/LEUART.c ****  * 3. This notice may not be removed or altered from any source distribution.
  29:../drivers/LEUART.c ****  * 4. The source and compiled code may only be used on Energy Micro "EFM32"
  30:../drivers/LEUART.c ****  *    microcontrollers and "EFR4" radios.
  31:../drivers/LEUART.c ****  *
  32:../drivers/LEUART.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  33:../drivers/LEUART.c ****  * obligation to support this Software. Energy Micro AS is providing the
  34:../drivers/LEUART.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  35:../drivers/LEUART.c ****  * including, but not limited to, any implied warranties of merchantability
  36:../drivers/LEUART.c ****  * or fitness for any particular purpose or warranties against infringement
  37:../drivers/LEUART.c ****  * of any proprietary rights of a third party.
  38:../drivers/LEUART.c ****  *
  39:../drivers/LEUART.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  40:../drivers/LEUART.c ****  * special damages, or any other relief, or for any claim by any third party,
  41:../drivers/LEUART.c ****  * arising from your use of this Software.
  42:../drivers/LEUART.c ****  *
  43:../drivers/LEUART.c ****  ****************************************************************************//*
  44:../drivers/LEUART.c **** Revision History:
  45:../drivers/LEUART.c **** 2016-09-27,rage	Use INT_En/Disable() instead of __en/disable_irq().
  46:../drivers/LEUART.c **** 2016-02-23,rage	Added drvLEUART_Deinit() and IsDmaTransferDone().
  47:../drivers/LEUART.c **** 2016-02-10,rage	Initial version, taken from SNB_Heaven.
  48:../drivers/LEUART.c **** */
  49:../drivers/LEUART.c **** 
  50:../drivers/LEUART.c **** 
  51:../drivers/LEUART.c **** /*=============================== Header Files ===============================*/
  52:../drivers/LEUART.c **** 
  53:../drivers/LEUART.c **** #include "em_chip.h"
  54:../drivers/LEUART.c **** #include "em_device.h"
  55:../drivers/LEUART.c **** #include "em_cmu.h"
  56:../drivers/LEUART.c **** #include "em_emu.h"
  57:../drivers/LEUART.c **** #include "em_int.h"
  58:../drivers/LEUART.c **** #include "em_leuart.h"
  59:../drivers/LEUART.c **** #include "LEUART.h"
  60:../drivers/LEUART.c **** 
  61:../drivers/LEUART.c **** /*=============================== Definitions ================================*/
  62:../drivers/LEUART.c **** 
  63:../drivers/LEUART.c ****     /*!@name Hardware Configuration: Serial Communication via LEUART. */
  64:../drivers/LEUART.c **** //@{
ARM GAS  /tmp/cck7pr62.s 			page 11


  65:../drivers/LEUART.c **** #define LEUART			LEUART0		//!< Device to use
  66:../drivers/LEUART.c **** #define cmuClock_LEUART		cmuClock_LEUART0    //!< CMU Clock for LEUART
  67:../drivers/LEUART.c **** #define LEUART_IRQn		LEUART0_IRQn	    //!< Interrupt for Rx
  68:../drivers/LEUART.c **** #define DMAREQ_LEUART_TXBL	DMAREQ_LEUART0_TXBL //!< DMA Request for Tx
  69:../drivers/LEUART.c **** #define DMAREQ_LEUART_RXDATAV	DMAREQ_LEUART0_RXDATAV //!< DMA Request for Rx
  70:../drivers/LEUART.c **** #define LEUART_IRQHandler	LEUART0_IRQHandler  //!< Interrupt Handler
  71:../drivers/LEUART.c **** #define LEUART_PORT		gpioPortD	//!< Port for TX pin
  72:../drivers/LEUART.c **** #define LEUART_PIN_TX		4		//!< Tx pin
  73:../drivers/LEUART.c **** #define LEUART_PIN_RX		5		//!< Rx pin
  74:../drivers/LEUART.c **** //@}
  75:../drivers/LEUART.c **** 
  76:../drivers/LEUART.c ****     /*! Size of the transmit FIFO in bytes */
  77:../drivers/LEUART.c **** #define TX_FIFO_SIZE		1024
  78:../drivers/LEUART.c **** 
  79:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
  80:../drivers/LEUART.c ****     /*! Size of the command line buffer in bytes */
  81:../drivers/LEUART.c **** #define CMD_LINE_SIZE		40
  82:../drivers/LEUART.c **** #endif
  83:../drivers/LEUART.c **** 
  84:../drivers/LEUART.c **** /*======================== External Data and Routines ========================*/
  85:../drivers/LEUART.c **** 
  86:../drivers/LEUART.c **** extern DMA_DESCRIPTOR_TypeDef g_DMA_ControlBlock[];
  87:../drivers/LEUART.c **** extern DMA_CB_TypeDef g_DMA_Callback[];
  88:../drivers/LEUART.c **** 
  89:../drivers/LEUART.c **** /*========================= Global Data and Routines =========================*/
  90:../drivers/LEUART.c **** 
  91:../drivers/LEUART.c **** /*!@brief Global flag to convert \<LF> to \<CR>\<LF> */
  92:../drivers/LEUART.c **** volatile bool	g_flgLEUART_LF2CRLF = true;
  93:../drivers/LEUART.c **** 
  94:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
  95:../drivers/LEUART.c **** /*!@brief Global flag to notify new command in g_CmdLine */
  96:../drivers/LEUART.c **** volatile bool	g_flgCmdLine;
  97:../drivers/LEUART.c **** 
  98:../drivers/LEUART.c **** /*!@brief Command line buffer */
  99:../drivers/LEUART.c **** uint8_t	 g_CmdLine[CMD_LINE_SIZE];
 100:../drivers/LEUART.c **** #endif
 101:../drivers/LEUART.c **** 
 102:../drivers/LEUART.c **** /*================================ Local Data ================================*/
 103:../drivers/LEUART.c **** 
 104:../drivers/LEUART.c **** /* Defining the LEUART initialization data */
 105:../drivers/LEUART.c **** static LEUART_Init_TypeDef leuartInit =
 106:../drivers/LEUART.c **** {
 107:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 108:../drivers/LEUART.c ****   .enable   = leuartEnable,	// Activate Tx and Rx Pin
 109:../drivers/LEUART.c **** #else
 110:../drivers/LEUART.c ****   .enable   = leuartEnableTx,	// Activate LEUn_TX pin only
 111:../drivers/LEUART.c **** #endif
 112:../drivers/LEUART.c ****   .refFreq  = 0,		// Get clock frequency from LEUART clock source
 113:../drivers/LEUART.c ****   .baudrate = 9600,		// Baudrate - overwritten by LEUART_Init()
 114:../drivers/LEUART.c ****   .databits = leuartDatabits8,	// Each LEUART frame containes 8 databits
 115:../drivers/LEUART.c ****   .parity   = leuartNoParity,	// No parity bits in use
 116:../drivers/LEUART.c ****   .stopbits = leuartStopbits2,	// Number of stop bits in a frame
 117:../drivers/LEUART.c **** };
 118:../drivers/LEUART.c **** 
 119:../drivers/LEUART.c **** /* DMA init structure */
 120:../drivers/LEUART.c **** static DMA_Init_TypeDef dmaInit =
 121:../drivers/LEUART.c **** {
ARM GAS  /tmp/cck7pr62.s 			page 12


 122:../drivers/LEUART.c ****     .hprot        = 0,			// No descriptor protection
 123:../drivers/LEUART.c ****     .controlBlock = g_DMA_ControlBlock,	// DMA control block alligned to 256
 124:../drivers/LEUART.c **** };
 125:../drivers/LEUART.c **** 
 126:../drivers/LEUART.c **** /* Setting up DMA channel for Tx */
 127:../drivers/LEUART.c **** static DMA_CfgChannel_TypeDef chnlCfgTx =
 128:../drivers/LEUART.c **** {
 129:../drivers/LEUART.c ****     .highPri   = false,			// Normal priority
 130:../drivers/LEUART.c ****     .enableInt = false,			// No interupt for callback function
 131:../drivers/LEUART.c ****     .select    = DMAREQ_LEUART_TXBL,	// DMA Req. is LEUARTx TX buffer empty
 132:../drivers/LEUART.c ****     .cb = &(g_DMA_Callback[DMA_CHAN_LEUART_TX]), // Callback for DMA TX done
 133:../drivers/LEUART.c **** };
 134:../drivers/LEUART.c **** 
 135:../drivers/LEUART.c **** /* Setting up channel descriptorfor Tx  */
 136:../drivers/LEUART.c **** DMA_CfgDescr_TypeDef descrCfgTx =
 137:../drivers/LEUART.c **** {
 138:../drivers/LEUART.c ****     .dstInc  = dmaDataIncNone,		// Do not increment destination address
 139:../drivers/LEUART.c ****     .srcInc  = dmaDataInc1,		// Increment source address by one byte
 140:../drivers/LEUART.c ****     .size    = dmaDataSize1,		// Data size is one byte
 141:../drivers/LEUART.c ****     .arbRate = dmaArbitrate1,		// Rearbitrate for each byte recieved
 142:../drivers/LEUART.c ****     .hprot   = 0,			// No read/write source protection
 143:../drivers/LEUART.c **** };
 144:../drivers/LEUART.c **** 
 145:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 146:../drivers/LEUART.c **** /* Setting up DMA channel */
 147:../drivers/LEUART.c **** static DMA_CfgChannel_TypeDef chnlCfgRx =
 148:../drivers/LEUART.c **** {
 149:../drivers/LEUART.c ****     .highPri   = false,			// Normal priority
 150:../drivers/LEUART.c ****     .enableInt = false,			// No interupt for callback function
 151:../drivers/LEUART.c ****     .select    = DMAREQ_LEUART_RXDATAV,	// DMA Req. is LEUARTx RX data available
 152:../drivers/LEUART.c ****     .cb        = NULL,			// No callback function
 153:../drivers/LEUART.c **** };
 154:../drivers/LEUART.c **** 
 155:../drivers/LEUART.c **** /* Setting up channel descriptor */
 156:../drivers/LEUART.c **** DMA_CfgDescr_TypeDef descrCfgRx =
 157:../drivers/LEUART.c **** {
 158:../drivers/LEUART.c ****     .dstInc  = dmaDataInc1,		// Increment destination address by one
 159:../drivers/LEUART.c ****     .srcInc  = dmaDataIncNone,		// o not increment source address
 160:../drivers/LEUART.c ****     .size    = dmaDataSize1,		// Data size is one byte
 161:../drivers/LEUART.c ****     .arbRate = dmaArbitrate1,		// Rearbitrate for each byte recieved
 162:../drivers/LEUART.c ****     .hprot   = 0,			// No read/write source protection
 163:../drivers/LEUART.c **** };
 164:../drivers/LEUART.c **** #endif
 165:../drivers/LEUART.c **** 
 166:../drivers/LEUART.c **** /* Transmit FIFO and index variables */
 167:../drivers/LEUART.c **** static uint8_t	 txFIFO[TX_FIFO_SIZE];
 168:../drivers/LEUART.c **** static volatile uint16_t txIdxPut, txIdxGet, txIdxGetNext;
 169:../drivers/LEUART.c **** 
 170:../drivers/LEUART.c **** /* Flag if DMA transfer is in progress */
 171:../drivers/LEUART.c **** static volatile bool	flgDMArun;
 172:../drivers/LEUART.c **** 
 173:../drivers/LEUART.c **** 
 174:../drivers/LEUART.c **** /**************************************************************************//**
 175:../drivers/LEUART.c ****  * @brief  DMA Callback function
 176:../drivers/LEUART.c ****  *
 177:../drivers/LEUART.c ****  * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 178:../drivers/LEUART.c ****  * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
ARM GAS  /tmp/cck7pr62.s 			page 13


 179:../drivers/LEUART.c ****  *
 180:../drivers/LEUART.c ****  ******************************************************************************/
 181:../drivers/LEUART.c **** void dmaTransferStart (void)
 182:../drivers/LEUART.c **** {
  71              		.loc 3 182 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 13B5     		push	{r0, r1, r4, lr}
  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 0, -16
  78              		.cfi_offset 1, -12
  79              		.cfi_offset 4, -8
  80              		.cfi_offset 14, -4
  81              	.LBB14:
  82              	.LBB15:
  83              	.LBB16:
  84              	.LBB17:
 334:../CMSIS/Include/core_cmFunc.h **** }
 335:../CMSIS/Include/core_cmFunc.h **** 
 336:../CMSIS/Include/core_cmFunc.h **** 
 337:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:../CMSIS/Include/core_cmFunc.h **** 
 339:../CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:../CMSIS/Include/core_cmFunc.h ****  */
 342:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:../CMSIS/Include/core_cmFunc.h **** {
 344:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  85              		.loc 2 344 0
  86              	@ 344 "../CMSIS/Include/core_cmFunc.h" 1
  87 0002 72B6     		cpsid i
  88              	@ 0 "" 2
  89              		.thumb
  90              	.LBE17:
  91              	.LBE16:
  68:../emlib/inc/em_int.h ****   if (INT_LockCnt < UINT32_MAX)
  92              		.loc 1 68 0
  93 0004 224B     		ldr	r3, .L18
  94 0006 1A68     		ldr	r2, [r3]
  95 0008 541C     		adds	r4, r2, #1
  96              	.LBE15:
  97              	.LBE14:
 183:../drivers/LEUART.c **** uint16_t	idxPut;		// local index variable
 184:../drivers/LEUART.c **** int16_t		cnt;		// number of bytes to send
 185:../drivers/LEUART.c **** 
 186:../drivers/LEUART.c **** 
 187:../drivers/LEUART.c ****     INT_Disable();
 188:../drivers/LEUART.c **** 
 189:../drivers/LEUART.c ****     if (flgDMArun)
  98              		.loc 3 189 0
  99 000a 224C     		ldr	r4, .L18+4
 100              	.LBB19:
 101              	.LBB18:
  70:../emlib/inc/em_int.h ****     INT_LockCnt++;
 102              		.loc 1 70 0
 103 000c 1CBF     		itt	ne
ARM GAS  /tmp/cck7pr62.s 			page 14


 104 000e 0132     		addne	r2, r2, #1
 105 0010 1A60     		strne	r2, [r3]
 106              	.LBE18:
 107              	.LBE19:
 108              		.loc 3 189 0
 109 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 110 0014 23B1     		cbz	r3, .L10
 190:../drivers/LEUART.c ****     {
 191:../drivers/LEUART.c **** 	INT_Enable();
 192:../drivers/LEUART.c **** 	return;			// do not disturb a running DMA transfer
 193:../drivers/LEUART.c ****     }
 194:../drivers/LEUART.c **** 
 195:../drivers/LEUART.c ****     flgDMArun = true;		// set flag for DMA activity
 196:../drivers/LEUART.c ****     INT_Enable();
 197:../drivers/LEUART.c **** 
 198:../drivers/LEUART.c ****     /* Use local index that will not change */
 199:../drivers/LEUART.c ****     idxPut = txIdxPut;
 200:../drivers/LEUART.c **** 
 201:../drivers/LEUART.c ****     /* Calculate how many bytes to transfer */
 202:../drivers/LEUART.c ****     cnt = idxPut - txIdxGet;
 203:../drivers/LEUART.c **** 
 204:../drivers/LEUART.c ****     if (cnt == 0)
 205:../drivers/LEUART.c ****     {
 206:../drivers/LEUART.c **** 	flgDMArun = false;	// clear flag again
 207:../drivers/LEUART.c **** 	return;
 208:../drivers/LEUART.c ****     }
 209:../drivers/LEUART.c **** 
 210:../drivers/LEUART.c ****     if (cnt < 0)
 211:../drivers/LEUART.c ****     {
 212:../drivers/LEUART.c **** 	/* Limit DMA transfer to end of FIFO buffer */
 213:../drivers/LEUART.c **** 	idxPut = sizeof(txFIFO);
 214:../drivers/LEUART.c **** 	cnt = idxPut - txIdxGet;
 215:../drivers/LEUART.c ****     }
 216:../drivers/LEUART.c **** 
 217:../drivers/LEUART.c ****     /* Calculate next value of the Get Index */
 218:../drivers/LEUART.c ****     txIdxGetNext = txIdxGet + cnt;
 219:../drivers/LEUART.c ****     if (txIdxGetNext >= sizeof(txFIFO))
 220:../drivers/LEUART.c **** 	txIdxGetNext -= sizeof(txFIFO);
 221:../drivers/LEUART.c **** 
 222:../drivers/LEUART.c ****     /* Set new DMA source end address directly in the DMA descriptor */
 223:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
 224:../drivers/LEUART.c **** 
 225:../drivers/LEUART.c ****     /* Enable DMA wake-up from LEUART TX */
 226:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
 227:../drivers/LEUART.c **** 
 228:../drivers/LEUART.c ****     /* (Re)starting the transfer. Using Basic Mode */
 229:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
 230:../drivers/LEUART.c **** 		      true,		// Use primary descriptor
 231:../drivers/LEUART.c **** 		      false,		// No DMA burst
 232:../drivers/LEUART.c **** 		      NULL,		// Keep destination address
 233:../drivers/LEUART.c **** 		      NULL,		// Keep source address
 234:../drivers/LEUART.c **** 		      cnt - 1);		// Size of buffer - 1
 235:../drivers/LEUART.c **** }
 111              		.loc 3 235 0
 112 0016 02B0     		add	sp, sp, #8
 113              		@ sp needed
 114 0018 BDE81040 		pop	{r4, lr}
ARM GAS  /tmp/cck7pr62.s 			page 15


 191:../drivers/LEUART.c **** 	INT_Enable();
 115              		.loc 3 191 0
 116 001c FFF7FEBF 		b	INT_Enable
 117              	.LVL2:
 118              	.L10:
 119              	.LBB20:
 120              	.LBB21:
 195:../drivers/LEUART.c ****     flgDMArun = true;		// set flag for DMA activity
 121              		.loc 3 195 0
 122 0020 0123     		movs	r3, #1
 123 0022 2370     		strb	r3, [r4]
 196:../drivers/LEUART.c ****     INT_Enable();
 124              		.loc 3 196 0
 125 0024 FFF7FEFF 		bl	INT_Enable
 126              	.LVL3:
 199:../drivers/LEUART.c ****     idxPut = txIdxPut;
 127              		.loc 3 199 0
 128 0028 1B4B     		ldr	r3, .L18+8
 202:../drivers/LEUART.c ****     cnt = idxPut - txIdxGet;
 129              		.loc 3 202 0
 130 002a 1C4A     		ldr	r2, .L18+12
 199:../drivers/LEUART.c ****     idxPut = txIdxPut;
 131              		.loc 3 199 0
 132 002c 1988     		ldrh	r1, [r3]
 202:../drivers/LEUART.c ****     cnt = idxPut - txIdxGet;
 133              		.loc 3 202 0
 134 002e 1388     		ldrh	r3, [r2]
 199:../drivers/LEUART.c ****     idxPut = txIdxPut;
 135              		.loc 3 199 0
 136 0030 89B2     		uxth	r1, r1
 137              	.LVL4:
 202:../drivers/LEUART.c ****     cnt = idxPut - txIdxGet;
 138              		.loc 3 202 0
 139 0032 CB1A     		subs	r3, r1, r3
 140 0034 9BB2     		uxth	r3, r3
 141              	.LVL5:
 204:../drivers/LEUART.c ****     if (cnt == 0)
 142              		.loc 3 204 0
 143 0036 0BB9     		cbnz	r3, .L11
 206:../drivers/LEUART.c **** 	flgDMArun = false;	// clear flag again
 144              		.loc 3 206 0
 145 0038 2370     		strb	r3, [r4]
 146 003a 26E0     		b	.L8
 147              	.L11:
 210:../drivers/LEUART.c ****     if (cnt < 0)
 148              		.loc 3 210 0
 149 003c 1804     		lsls	r0, r3, #16
 150 003e 05D5     		bpl	.L13
 151              	.LVL6:
 214:../drivers/LEUART.c **** 	cnt = idxPut - txIdxGet;
 152              		.loc 3 214 0
 153 0040 1388     		ldrh	r3, [r2]
 154              	.LVL7:
 213:../drivers/LEUART.c **** 	idxPut = sizeof(txFIFO);
 155              		.loc 3 213 0
 156 0042 4FF48061 		mov	r1, #1024
 214:../drivers/LEUART.c **** 	cnt = idxPut - txIdxGet;
ARM GAS  /tmp/cck7pr62.s 			page 16


 157              		.loc 3 214 0
 158 0046 C3F58063 		rsb	r3, r3, #1024
 159 004a 9BB2     		uxth	r3, r3
 160              	.LVL8:
 161              	.L13:
 218:../drivers/LEUART.c ****     txIdxGetNext = txIdxGet + cnt;
 162              		.loc 3 218 0
 163 004c 1088     		ldrh	r0, [r2]
 164 004e 144A     		ldr	r2, .L18+16
 165 0050 1844     		add	r0, r0, r3
 166 0052 80B2     		uxth	r0, r0
 167 0054 1080     		strh	r0, [r2]	@ movhi
 219:../drivers/LEUART.c ****     if (txIdxGetNext >= sizeof(txFIFO))
 168              		.loc 3 219 0
 169 0056 1088     		ldrh	r0, [r2]
 170 0058 80B2     		uxth	r0, r0
 171 005a B0F5806F 		cmp	r0, #1024
 172 005e 04D3     		bcc	.L14
 220:../drivers/LEUART.c **** 	txIdxGetNext -= sizeof(txFIFO);
 173              		.loc 3 220 0
 174 0060 1088     		ldrh	r0, [r2]
 175 0062 A0F58060 		sub	r0, r0, #1024
 176 0066 80B2     		uxth	r0, r0
 177 0068 1080     		strh	r0, [r2]	@ movhi
 178              	.L14:
 223:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
 179              		.loc 3 223 0
 180 006a 0E4A     		ldr	r2, .L18+20
 226:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
 181              		.loc 3 226 0
 182 006c 0120     		movs	r0, #1
 223:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
 183              		.loc 3 223 0
 184 006e 1144     		add	r1, r1, r2
 185              	.LVL9:
 186 0070 0D4A     		ldr	r2, .L18+24
 234:../drivers/LEUART.c **** 		      cnt - 1);		// Size of buffer - 1
 187              		.loc 3 234 0
 188 0072 1BB2     		sxth	r3, r3
 189              	.LVL10:
 223:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].SRCEND = &txFIFO[idxPut-1];
 190              		.loc 3 223 0
 191 0074 1161     		str	r1, [r2, #16]
 226:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
 192              		.loc 3 226 0
 193 0076 0D4A     		ldr	r2, .L18+28
 234:../drivers/LEUART.c **** 		      cnt - 1);		// Size of buffer - 1
 194              		.loc 3 234 0
 195 0078 013B     		subs	r3, r3, #1
 226:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 1;
 196              		.loc 3 226 0
 197 007a 1060     		str	r0, [r2]
 229:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_TX, // Activate channel selected
 198              		.loc 3 229 0
 199 007c 0022     		movs	r2, #0
 200 007e 0193     		str	r3, [sp, #4]
 201 0080 0092     		str	r2, [sp]
ARM GAS  /tmp/cck7pr62.s 			page 17


 202 0082 0146     		mov	r1, r0
 203 0084 1346     		mov	r3, r2
 204 0086 FFF7FEFF 		bl	DMA_ActivateBasic
 205              	.LVL11:
 206              	.L8:
 207              	.LBE21:
 208              	.LBE20:
 209              		.loc 3 235 0
 210 008a 02B0     		add	sp, sp, #8
 211              		@ sp needed
 212 008c 10BD     		pop	{r4, pc}
 213              	.L19:
 214 008e 00BF     		.align	2
 215              	.L18:
 216 0090 00000000 		.word	INT_LockCnt
 217 0094 00000000 		.word	.LANCHOR0
 218 0098 00000000 		.word	.LANCHOR1
 219 009c 00000000 		.word	.LANCHOR2
 220 00a0 00000000 		.word	.LANCHOR3
 221 00a4 FFFFFFFF 		.word	.LANCHOR4-1
 222 00a8 00000000 		.word	g_DMA_ControlBlock
 223 00ac 34000843 		.word	1124597812
 224              		.cfi_endproc
 225              	.LFE114:
 227              		.section	.text.dmaTransferDone,"ax",%progbits
 228              		.align	1
 229              		.global	dmaTransferDone
 230              		.thumb
 231              		.thumb_func
 233              	dmaTransferDone:
 234              	.LFB115:
 236:../drivers/LEUART.c **** 
 237:../drivers/LEUART.c **** 
 238:../drivers/LEUART.c **** /**************************************************************************//**
 239:../drivers/LEUART.c ****  * @brief  DMA Callback function
 240:../drivers/LEUART.c ****  *
 241:../drivers/LEUART.c ****  * When the DMA transfer is completed, disables the DMA wake-up on TX in the
 242:../drivers/LEUART.c ****  * LEUART to enable the DMA to sleep even when the LEUART buffer is empty.
 243:../drivers/LEUART.c ****  *
 244:../drivers/LEUART.c ****  ******************************************************************************/
 245:../drivers/LEUART.c **** void dmaTransferDone(unsigned int channel, bool primary, void *user)
 246:../drivers/LEUART.c **** {
 235              		.loc 3 246 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LVL12:
 247:../drivers/LEUART.c ****     (void) channel;
 248:../drivers/LEUART.c ****     (void) primary;
 249:../drivers/LEUART.c ****     (void) user;
 250:../drivers/LEUART.c **** 
 251:../drivers/LEUART.c ****     /* Disable DMA wake-up from LEUART TX */
 252:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_TXDMAWU_SHIFT) = 0;
 241              		.loc 3 252 0
 242 0000 054A     		ldr	r2, .L21
 243              	.LVL13:
ARM GAS  /tmp/cck7pr62.s 			page 18


 244 0002 0023     		movs	r3, #0
 245 0004 1360     		str	r3, [r2]
 253:../drivers/LEUART.c **** 
 254:../drivers/LEUART.c ****     /* Update Get Index */
 255:../drivers/LEUART.c ****     txIdxGet = txIdxGetNext;
 246              		.loc 3 255 0
 247 0006 054A     		ldr	r2, .L21+4
 248 0008 1188     		ldrh	r1, [r2]
 249              	.LVL14:
 250 000a 054A     		ldr	r2, .L21+8
 251 000c 89B2     		uxth	r1, r1
 252 000e 1180     		strh	r1, [r2]	@ movhi
 256:../drivers/LEUART.c **** 
 257:../drivers/LEUART.c ****     /* Clear DMA running flag */
 258:../drivers/LEUART.c ****     flgDMArun = false;
 253              		.loc 3 258 0
 254 0010 044A     		ldr	r2, .L21+12
 255 0012 1370     		strb	r3, [r2]
 259:../drivers/LEUART.c **** 
 260:../drivers/LEUART.c ****     /* Check if still data to send */
 261:../drivers/LEUART.c ****     dmaTransferStart();
 256              		.loc 3 261 0
 257 0014 FFF7FEBF 		b	dmaTransferStart
 258              	.LVL15:
 259              	.L22:
 260              		.align	2
 261              	.L21:
 262 0018 34000843 		.word	1124597812
 263 001c 00000000 		.word	.LANCHOR3
 264 0020 00000000 		.word	.LANCHOR2
 265 0024 00000000 		.word	.LANCHOR0
 266              		.cfi_endproc
 267              	.LFE115:
 269              		.section	.text.IsDmaTransferDone,"ax",%progbits
 270              		.align	1
 271              		.global	IsDmaTransferDone
 272              		.thumb
 273              		.thumb_func
 275              	IsDmaTransferDone:
 276              	.LFB116:
 262:../drivers/LEUART.c **** }
 263:../drivers/LEUART.c **** 
 264:../drivers/LEUART.c **** 
 265:../drivers/LEUART.c **** /**************************************************************************//**
 266:../drivers/LEUART.c ****  * @brief  Check if DMA is done
 267:../drivers/LEUART.c ****  *
 268:../drivers/LEUART.c ****  * This routine tells the caller if the DMA has completed.
 269:../drivers/LEUART.c ****  *
 270:../drivers/LEUART.c ****  * @return
 271:../drivers/LEUART.c ****  * A value of <b>true</b> if DMA transfer is done, <b>false</b> otherwise.
 272:../drivers/LEUART.c ****  *
 273:../drivers/LEUART.c ****  ******************************************************************************/
 274:../drivers/LEUART.c **** bool IsDmaTransferDone(void)
 275:../drivers/LEUART.c **** {
 277              		.loc 3 275 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cck7pr62.s 			page 19


 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 276:../drivers/LEUART.c ****     return (flgDMArun == false);
 282              		.loc 3 276 0
 283 0000 024B     		ldr	r3, .L24
 284 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 277:../drivers/LEUART.c **** }
 285              		.loc 3 277 0
 286 0004 80F00100 		eor	r0, r0, #1
 287 0008 7047     		bx	lr
 288              	.L25:
 289 000a 00BF     		.align	2
 290              	.L24:
 291 000c 00000000 		.word	.LANCHOR0
 292              		.cfi_endproc
 293              	.LFE116:
 295              		.section	.text.drvLEUART_Init,"ax",%progbits
 296              		.align	1
 297              		.global	drvLEUART_Init
 298              		.thumb
 299              		.thumb_func
 301              	drvLEUART_Init:
 302              	.LFB118:
 278:../drivers/LEUART.c **** 
 279:../drivers/LEUART.c **** 
 280:../drivers/LEUART.c **** /**************************************************************************//**
 281:../drivers/LEUART.c ****  * @brief  Setup Low Energy UART with DMA operation
 282:../drivers/LEUART.c ****  *
 283:../drivers/LEUART.c ****  * The LEUART/DMA interaction is defined, and the DMA, channel and descriptor
 284:../drivers/LEUART.c ****  * is initialized. The destination for all the DMA transfers through this
 285:../drivers/LEUART.c ****  * channel is set to be the LEUART TXDATA register, and transfer complete
 286:../drivers/LEUART.c ****  * interrupt is enabled.  The interrupt will be handled by DMA_IRQHandler().
 287:../drivers/LEUART.c ****  *
 288:../drivers/LEUART.c ****  *****************************************************************************/
 289:../drivers/LEUART.c **** static void setupLeuartDma(void)
 290:../drivers/LEUART.c **** {
 291:../drivers/LEUART.c ****     /* Setting call-back function */
 292:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
 293:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
 294:../drivers/LEUART.c **** 
 295:../drivers/LEUART.c ****     /* Initializing DMA, channel and descriptor for Tx */
 296:../drivers/LEUART.c ****     DMA_Init(&dmaInit);
 297:../drivers/LEUART.c ****     DMA_CfgChannel(DMA_CHAN_LEUART_TX, &chnlCfgTx);
 298:../drivers/LEUART.c ****     DMA_CfgDescr(DMA_CHAN_LEUART_TX, true, &descrCfgTx);
 299:../drivers/LEUART.c **** 
 300:../drivers/LEUART.c ****     /* Set new DMA destination end address directly in the DMA descriptor */
 301:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].DSTEND = &LEUART->TXDATA;
 302:../drivers/LEUART.c **** 
 303:../drivers/LEUART.c ****     /* Enable DMA Transfer Complete Interrupt */
 304:../drivers/LEUART.c ****     DMA->IEN = (DMA_IEN_CH0DONE << DMA_CHAN_LEUART_TX);
 305:../drivers/LEUART.c **** 
 306:../drivers/LEUART.c ****     /* Enable DMA interrupt vector */
 307:../drivers/LEUART.c ****     NVIC_EnableIRQ(DMA_IRQn);
 308:../drivers/LEUART.c **** 
 309:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 310:../drivers/LEUART.c ****     /* Initializing DMA, channel and desriptor */
 311:../drivers/LEUART.c ****     DMA_CfgChannel(DMA_CHAN_LEUART_RX, &chnlCfgRx);
ARM GAS  /tmp/cck7pr62.s 			page 20


 312:../drivers/LEUART.c ****     DMA_CfgDescr(DMA_CHAN_LEUART_RX, true, &descrCfgRx);
 313:../drivers/LEUART.c **** 
 314:../drivers/LEUART.c ****     /* Starting the transfer. Using Basic Mode */
 315:../drivers/LEUART.c ****     DMA_ActivateBasic(DMA_CHAN_LEUART_RX, // Activate channel selected
 316:../drivers/LEUART.c **** 		      true,		// Use primary descriptor
 317:../drivers/LEUART.c **** 		      false,		// No DMA burst
 318:../drivers/LEUART.c **** 		      (void *) g_CmdLine,	// Destination address
 319:../drivers/LEUART.c **** 		      (void *) &LEUART->RXDATA,	// Source address is register
 320:../drivers/LEUART.c **** 		      CMD_LINE_SIZE - 1);	// Size of buffer - 1
 321:../drivers/LEUART.c **** 
 322:../drivers/LEUART.c ****     /* Set LEUART signal frame to <NL> (or <CR>) */
 323:../drivers/LEUART.c ****     LEUART->SIGFRAME = '\n';
 324:../drivers/LEUART.c **** 
 325:../drivers/LEUART.c ****     /* Enable LEUART Signal Frame Interrupt */
 326:../drivers/LEUART.c ****     LEUART_IntEnable(LEUART, LEUART_IEN_SIGF);
 327:../drivers/LEUART.c **** 
 328:../drivers/LEUART.c ****     /* Enable LEUART interrupt vector */
 329:../drivers/LEUART.c ****     NVIC_EnableIRQ(LEUART_IRQn);
 330:../drivers/LEUART.c **** 
 331:../drivers/LEUART.c ****     /* Make sure the LEUART wakes up the DMA on RX data */
 332:../drivers/LEUART.c ****     IO_Bit(LEUART->CTRL, _LEUART_CTRL_RXDMAWU_SHIFT) = 1;
 333:../drivers/LEUART.c **** #endif
 334:../drivers/LEUART.c **** }
 335:../drivers/LEUART.c **** 
 336:../drivers/LEUART.c **** 
 337:../drivers/LEUART.c **** /**************************************************************************//**
 338:../drivers/LEUART.c ****  * @brief  Initialize Low Energy UART
 339:../drivers/LEUART.c ****  *
 340:../drivers/LEUART.c ****  * Here the LEUART is initialized with the chosen settings. It is then routed
 341:../drivers/LEUART.c ****  * to location 0 to avoid conflict with the LCD pinout. Finally the GPIO mode
 342:../drivers/LEUART.c ****  * is set to push pull.
 343:../drivers/LEUART.c ****  *
 344:../drivers/LEUART.c ****  * @param[in] baud
 345:../drivers/LEUART.c ****  *	Baudrate to use (maximum 9600bd).
 346:../drivers/LEUART.c ****  *
 347:../drivers/LEUART.c ****  *****************************************************************************/
 348:../drivers/LEUART.c **** void	drvLEUART_Init (uint32_t baud)
 349:../drivers/LEUART.c **** {
 303              		.loc 3 349 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              	.LVL16:
 308 0000 38B5     		push	{r3, r4, r5, lr}
 309              		.cfi_def_cfa_offset 16
 310              		.cfi_offset 3, -16
 311              		.cfi_offset 4, -12
 312              		.cfi_offset 5, -8
 313              		.cfi_offset 14, -4
 350:../drivers/LEUART.c ****     /* Enabling clocks, all other remain disabled */
 351:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_DMA, true);	// Enable DMA clock
 314              		.loc 3 351 0
 315 0002 0121     		movs	r1, #1
 349:../drivers/LEUART.c **** {
 316              		.loc 3 349 0
 317 0004 0546     		mov	r5, r0
 318              		.loc 3 351 0
ARM GAS  /tmp/cck7pr62.s 			page 21


 319 0006 1E48     		ldr	r0, .L27
 320              	.LVL17:
 321 0008 FFF7FEFF 		bl	CMU_ClockEnable
 322              	.LVL18:
 352:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
 353:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock
 354:../drivers/LEUART.c **** 
 355:../drivers/LEUART.c ****     /* Reseting and initializing LEUART */
 356:../drivers/LEUART.c ****     LEUART_Reset(LEUART);
 323              		.loc 3 356 0
 324 000c 1D4C     		ldr	r4, .L27+4
 352:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_GPIO, true);	// Enable GPIO clock
 325              		.loc 3 352 0
 326 000e 1E48     		ldr	r0, .L27+8
 327 0010 0121     		movs	r1, #1
 328 0012 FFF7FEFF 		bl	CMU_ClockEnable
 329              	.LVL19:
 353:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_LEUART, true);	// Enable LEUART clock
 330              		.loc 3 353 0
 331 0016 0121     		movs	r1, #1
 332 0018 1C48     		ldr	r0, .L27+12
 333 001a FFF7FEFF 		bl	CMU_ClockEnable
 334              	.LVL20:
 335              		.loc 3 356 0
 336 001e 2046     		mov	r0, r4
 337 0020 FFF7FEFF 		bl	LEUART_Reset
 338              	.LVL21:
 357:../drivers/LEUART.c ****     leuartInit.baudrate = baud;
 339              		.loc 3 357 0
 340 0024 1A49     		ldr	r1, .L27+16
 358:../drivers/LEUART.c ****     LEUART_Init(LEUART, &leuartInit);
 341              		.loc 3 358 0
 342 0026 2046     		mov	r0, r4
 357:../drivers/LEUART.c ****     leuartInit.baudrate = baud;
 343              		.loc 3 357 0
 344 0028 8D60     		str	r5, [r1, #8]
 345              		.loc 3 358 0
 346 002a FFF7FEFF 		bl	LEUART_Init
 347              	.LVL22:
 359:../drivers/LEUART.c **** 
 360:../drivers/LEUART.c ****     /* Route LEUART Tx (and Rx) Pin to location 0 (PD4/PD5) */
 361:../drivers/LEUART.c ****     LEUART->ROUTE = LEUART_ROUTE_TXPEN
 348              		.loc 3 361 0
 349 002e 0225     		movs	r5, #2
 350              	.LVL23:
 362:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 363:../drivers/LEUART.c **** 		  | LEUART_ROUTE_RXPEN
 364:../drivers/LEUART.c **** #endif
 365:../drivers/LEUART.c **** 		  | LEUART_ROUTE_LOCATION_LOC0;
 366:../drivers/LEUART.c **** 
 367:../drivers/LEUART.c ****     /* Enable GPIO for LEUART. Tx is on D4, Rx on D5 */
 368:../drivers/LEUART.c ****     GPIO_PinModeSet(LEUART_PORT,		// GPIO port
 351              		.loc 3 368 0
 352 0030 0421     		movs	r1, #4
 353 0032 0A46     		mov	r2, r1
 361:../drivers/LEUART.c ****     LEUART->ROUTE = LEUART_ROUTE_TXPEN
 354              		.loc 3 361 0
ARM GAS  /tmp/cck7pr62.s 			page 22


 355 0034 6565     		str	r5, [r4, #84]
 356              		.loc 3 368 0
 357 0036 0320     		movs	r0, #3
 358 0038 0123     		movs	r3, #1
 359 003a FFF7FEFF 		bl	GPIO_PinModeSet
 360              	.LVL24:
 361              	.LBB26:
 362              	.LBB27:
 292:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
 363              		.loc 3 292 0
 364 003e 154B     		ldr	r3, .L27+20
 365 0040 154A     		ldr	r2, .L27+24
 293:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
 366              		.loc 3 293 0
 367 0042 0024     		movs	r4, #0
 292:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].cbFunc  = dmaTransferDone;
 368              		.loc 3 292 0
 369 0044 DA60     		str	r2, [r3, #12]
 293:../drivers/LEUART.c ****     g_DMA_Callback[DMA_CHAN_LEUART_TX].userPtr = NULL;
 370              		.loc 3 293 0
 371 0046 1C61     		str	r4, [r3, #16]
 296:../drivers/LEUART.c ****     DMA_Init(&dmaInit);
 372              		.loc 3 296 0
 373 0048 1448     		ldr	r0, .L27+28
 374 004a FFF7FEFF 		bl	DMA_Init
 375              	.LVL25:
 297:../drivers/LEUART.c ****     DMA_CfgChannel(DMA_CHAN_LEUART_TX, &chnlCfgTx);
 376              		.loc 3 297 0
 377 004e 0120     		movs	r0, #1
 378 0050 1349     		ldr	r1, .L27+32
 379 0052 FFF7FEFF 		bl	DMA_CfgChannel
 380              	.LVL26:
 298:../drivers/LEUART.c ****     DMA_CfgDescr(DMA_CHAN_LEUART_TX, true, &descrCfgTx);
 381              		.loc 3 298 0
 382 0056 0120     		movs	r0, #1
 383 0058 124A     		ldr	r2, .L27+36
 384 005a 0146     		mov	r1, r0
 385 005c FFF7FEFF 		bl	DMA_CfgDescr
 386              	.LVL27:
 301:../drivers/LEUART.c ****     g_DMA_ControlBlock[DMA_CHAN_LEUART_TX].DSTEND = &LEUART->TXDATA;
 387              		.loc 3 301 0
 388 0060 114A     		ldr	r2, .L27+40
 389 0062 124B     		ldr	r3, .L27+44
 390 0064 5A61     		str	r2, [r3, #20]
 304:../drivers/LEUART.c ****     DMA->IEN = (DMA_IEN_CH0DONE << DMA_CHAN_LEUART_TX);
 391              		.loc 3 304 0
 392 0066 124A     		ldr	r2, .L27+48
 393 0068 41F20C03 		movw	r3, #4108
 394 006c D550     		str	r5, [r2, r3]
 395              	.LVL28:
 396              	.LBB28:
 397              	.LBB29:
 398              		.file 4 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
ARM GAS  /tmp/cck7pr62.s 			page 23


   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 24


  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 25


 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
ARM GAS  /tmp/cck7pr62.s 			page 26


 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
ARM GAS  /tmp/cck7pr62.s 			page 27


 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /tmp/cck7pr62.s 			page 28


 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
ARM GAS  /tmp/cck7pr62.s 			page 29


 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
ARM GAS  /tmp/cck7pr62.s 			page 30


 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
ARM GAS  /tmp/cck7pr62.s 			page 31


 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
ARM GAS  /tmp/cck7pr62.s 			page 32


 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
ARM GAS  /tmp/cck7pr62.s 			page 33


 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 34


 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
ARM GAS  /tmp/cck7pr62.s 			page 35


 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
ARM GAS  /tmp/cck7pr62.s 			page 36


 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
ARM GAS  /tmp/cck7pr62.s 			page 37


 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 38


 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
ARM GAS  /tmp/cck7pr62.s 			page 39


 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
ARM GAS  /tmp/cck7pr62.s 			page 40


 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 41


1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
ARM GAS  /tmp/cck7pr62.s 			page 42


1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
ARM GAS  /tmp/cck7pr62.s 			page 43


1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
ARM GAS  /tmp/cck7pr62.s 			page 44


1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 45


1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cck7pr62.s 			page 46


1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 399              		.loc 4 1325 0
 400 006e 114B     		ldr	r3, .L27+52
 401 0070 0122     		movs	r2, #1
 402 0072 1A60     		str	r2, [r3]
 403              	.LBE29:
 404              	.LBE28:
 405              	.LBE27:
 406              	.LBE26:
 369:../drivers/LEUART.c **** 		    LEUART_PIN_TX,		// GPIO port number
 370:../drivers/LEUART.c **** 		    gpioModePushPull,		// Pin mode is set to push pull
 371:../drivers/LEUART.c **** 		    1);				// High idle state
 372:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 373:../drivers/LEUART.c ****     GPIO_PinModeSet(LEUART_PORT,		// GPIO port
 374:../drivers/LEUART.c **** 		    LEUART_PIN_RX,		// GPIO port number
 375:../drivers/LEUART.c **** 		    gpioModeInputPull,		// Pin mode is set to input with
 376:../drivers/LEUART.c **** 		    1);				// Pull-Up
 377:../drivers/LEUART.c **** #endif
 378:../drivers/LEUART.c **** 
 379:../drivers/LEUART.c ****     /* Setup LEUART with DMA */
 380:../drivers/LEUART.c ****     setupLeuartDma();
 381:../drivers/LEUART.c **** 
 382:../drivers/LEUART.c ****     /* Set index variables to the beginning of the FIFO */
 383:../drivers/LEUART.c ****     txIdxPut = txIdxGet = 0;
 407              		.loc 3 383 0
 408 0074 104B     		ldr	r3, .L27+56
 409 0076 1C80     		strh	r4, [r3]	@ movhi
 410 0078 104B     		ldr	r3, .L27+60
 411 007a 1C80     		strh	r4, [r3]	@ movhi
 412 007c 38BD     		pop	{r3, r4, r5, pc}
 413              	.L28:
 414 007e 00BF     		.align	2
 415              	.L27:
 416 0080 00130400 		.word	267008
 417 0084 00400840 		.word	1074282496
 418 0088 00C20200 		.word	180736
 419 008c 40051400 		.word	1312064
 420 0090 00000000 		.word	.LANCHOR5
 421 0094 00000000 		.word	g_DMA_Callback
 422 0098 00000000 		.word	dmaTransferDone
 423 009c 00000000 		.word	.LANCHOR6
 424 00a0 00000000 		.word	.LANCHOR7
 425 00a4 00000000 		.word	.LANCHOR8
 426 00a8 28400840 		.word	1074282536
 427 00ac 00000000 		.word	g_DMA_ControlBlock
 428 00b0 00200C40 		.word	1074536448
 429 00b4 00E100E0 		.word	-536813312
 430 00b8 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cck7pr62.s 			page 47


 431 00bc 00000000 		.word	.LANCHOR1
 432              		.cfi_endproc
 433              	.LFE118:
 435              		.section	.text.drvLEUART_Deinit,"ax",%progbits
 436              		.align	1
 437              		.global	drvLEUART_Deinit
 438              		.thumb
 439              		.thumb_func
 441              	drvLEUART_Deinit:
 442              	.LFB119:
 384:../drivers/LEUART.c **** }
 385:../drivers/LEUART.c **** 
 386:../drivers/LEUART.c **** 
 387:../drivers/LEUART.c **** /**************************************************************************//**
 388:../drivers/LEUART.c ****  * @brief  Deinitialize Low Energy UART
 389:../drivers/LEUART.c ****  *
 390:../drivers/LEUART.c ****  * This routine brings the LEUART and its DMA into a quiescent state.
 391:../drivers/LEUART.c ****  *
 392:../drivers/LEUART.c ****  *****************************************************************************/
 393:../drivers/LEUART.c **** void	drvLEUART_Deinit (void)
 394:../drivers/LEUART.c **** {
 443              		.loc 3 394 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 395:../drivers/LEUART.c ****     /* Disable DMA Transfer Complete Interrupt */
 396:../drivers/LEUART.c ****     DMA->IEN = 0;
 447              		.loc 3 396 0
 448 0000 0C4A     		ldr	r2, .L30
 394:../drivers/LEUART.c **** {
 449              		.loc 3 394 0
 450 0002 10B5     		push	{r4, lr}
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 454              		.loc 3 396 0
 455 0004 41F20C03 		movw	r3, #4108
 456 0008 0024     		movs	r4, #0
 457 000a D450     		str	r4, [r2, r3]
 458              	.LVL29:
 459              	.LBB32:
 460              	.LBB33:
1326:../CMSIS/Include/core_cm3.h **** }
1327:../CMSIS/Include/core_cm3.h **** 
1328:../CMSIS/Include/core_cm3.h **** 
1329:../CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1330:../CMSIS/Include/core_cm3.h **** 
1331:../CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:../CMSIS/Include/core_cm3.h **** 
1333:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:../CMSIS/Include/core_cm3.h ****  */
1335:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:../CMSIS/Include/core_cm3.h **** {
1337:../CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 461              		.loc 4 1337 0
 462 000c 0A4B     		ldr	r3, .L30+4
 463 000e 0122     		movs	r2, #1
ARM GAS  /tmp/cck7pr62.s 			page 48


 464 0010 C3F88020 		str	r2, [r3, #128]
 465              	.LBE33:
 466              	.LBE32:
 397:../drivers/LEUART.c **** 
 398:../drivers/LEUART.c ****     /* Disable DMA interrupt vector */
 399:../drivers/LEUART.c ****     NVIC_DisableIRQ(DMA_IRQn);
 400:../drivers/LEUART.c **** 
 401:../drivers/LEUART.c ****     /* Reset DMA controller */
 402:../drivers/LEUART.c ****     DMA_Reset();
 467              		.loc 3 402 0
 468 0014 FFF7FEFF 		bl	DMA_Reset
 469              	.LVL30:
 403:../drivers/LEUART.c **** 
 404:../drivers/LEUART.c ****     /* Reset LEUART */
 405:../drivers/LEUART.c ****     LEUART_Reset(LEUART);
 470              		.loc 3 405 0
 471 0018 0848     		ldr	r0, .L30+8
 472 001a FFF7FEFF 		bl	LEUART_Reset
 473              	.LVL31:
 406:../drivers/LEUART.c **** 
 407:../drivers/LEUART.c ****     /* Disable clocks */
 408:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_DMA, false);
 474              		.loc 3 408 0
 475 001e 2146     		mov	r1, r4
 476 0020 0748     		ldr	r0, .L30+12
 477 0022 FFF7FEFF 		bl	CMU_ClockEnable
 478              	.LVL32:
 409:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_LEUART, false);
 479              		.loc 3 409 0
 480 0026 2146     		mov	r1, r4
 481 0028 0648     		ldr	r0, .L30+16
 410:../drivers/LEUART.c **** }
 482              		.loc 3 410 0
 483 002a BDE81040 		pop	{r4, lr}
 409:../drivers/LEUART.c ****     CMU_ClockEnable(cmuClock_LEUART, false);
 484              		.loc 3 409 0
 485 002e FFF7FEBF 		b	CMU_ClockEnable
 486              	.LVL33:
 487              	.L31:
 488 0032 00BF     		.align	2
 489              	.L30:
 490 0034 00200C40 		.word	1074536448
 491 0038 00E100E0 		.word	-536813312
 492 003c 00400840 		.word	1074282496
 493 0040 00130400 		.word	267008
 494 0044 40051400 		.word	1312064
 495              		.cfi_endproc
 496              	.LFE119:
 498              		.section	.text.drvLEUART_puts,"ax",%progbits
 499              		.align	1
 500              		.global	drvLEUART_puts
 501              		.thumb
 502              		.thumb_func
 504              	drvLEUART_puts:
 505              	.LFB120:
 411:../drivers/LEUART.c **** 
 412:../drivers/LEUART.c **** 
ARM GAS  /tmp/cck7pr62.s 			page 49


 413:../drivers/LEUART.c **** #if ENABLE_LEUART_RECEIVER
 414:../drivers/LEUART.c **** /**************************************************************************//**
 415:../drivers/LEUART.c ****  * @brief LEUART IRQ handler
 416:../drivers/LEUART.c ****  *
 417:../drivers/LEUART.c ****  * When a character has been received by the LEUART, this interrupt routine will
 418:../drivers/LEUART.c ****  * store the character into the rxFIFO.
 419:../drivers/LEUART.c ****  *
 420:../drivers/LEUART.c ****  *****************************************************************************/
 421:../drivers/LEUART.c **** void LEUART_IRQHandler(void)
 422:../drivers/LEUART.c **** {
 423:../drivers/LEUART.c **** uint32_t leuartif, len;
 424:../drivers/LEUART.c **** 
 425:../drivers/LEUART.c ****     /* Store and reset pending interrupts */
 426:../drivers/LEUART.c ****     leuartif = LEUART_IntGet(LEUART);
 427:../drivers/LEUART.c ****     LEUART_IntClear(LEUART, leuartif);
 428:../drivers/LEUART.c **** 
 429:../drivers/LEUART.c ****     /* Check for frame found */
 430:../drivers/LEUART.c ****     if (leuartif & LEUART_IF_SIGF)
 431:../drivers/LEUART.c ****     {
 432:../drivers/LEUART.c **** 	/* Zero-terminate RX command line buffer */
 433:../drivers/LEUART.c **** 	len = CMD_LINE_SIZE - 2
 434:../drivers/LEUART.c **** 	    - ((g_DMA_ControlBlock[DMA_CHAN_LEUART_RX].CTRL >> 4) & 0x3FF);
 435:../drivers/LEUART.c **** 
 436:../drivers/LEUART.c **** 	g_CmdLine[len] = EOS;
 437:../drivers/LEUART.c **** 
 438:../drivers/LEUART.c **** 	/* set flag to notify new command is available */
 439:../drivers/LEUART.c **** 	g_flgCmdLine = true;
 440:../drivers/LEUART.c **** 
 441:../drivers/LEUART.c **** 	/* Re-start DMA */
 442:../drivers/LEUART.c **** 	DMA_ActivateBasic(DMA_CHAN_LEUART_RX, // Activate channel selected
 443:../drivers/LEUART.c **** 			  true,		// Use primary descriptor
 444:../drivers/LEUART.c **** 			  false,	// No DMA burst
 445:../drivers/LEUART.c **** 			  NULL,		// keep destination address
 446:../drivers/LEUART.c **** 			  NULL,		// keep source address
 447:../drivers/LEUART.c **** 			  CMD_LINE_SIZE - 1);	// Size of buffer - 1
 448:../drivers/LEUART.c ****     }
 449:../drivers/LEUART.c **** }
 450:../drivers/LEUART.c **** #endif
 451:../drivers/LEUART.c **** 
 452:../drivers/LEUART.c **** 
 453:../drivers/LEUART.c **** /***************************************************************************//**
 454:../drivers/LEUART.c ****  *
 455:../drivers/LEUART.c ****  * @brief  Put string into transmit FIFO
 456:../drivers/LEUART.c ****  *
 457:../drivers/LEUART.c ****  * This routine writes the specified string into the transmit FIFO, where it
 458:../drivers/LEUART.c ****  * is transferred to the LEUART via DMA.  If there is no more space in the
 459:../drivers/LEUART.c ****  * FIFO, characters will be discarded.
 460:../drivers/LEUART.c ****  *
 461:../drivers/LEUART.c ****  * @param[in] pStr
 462:../drivers/LEUART.c ****  *	Adress pointer of the string to write into the FIFO.
 463:../drivers/LEUART.c ****  *
 464:../drivers/LEUART.c ****  ******************************************************************************/
 465:../drivers/LEUART.c **** void	 drvLEUART_puts (const char *pStr)
 466:../drivers/LEUART.c **** {
 506              		.loc 3 466 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cck7pr62.s 			page 50


 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              	.LVL34:
 511 0000 30B5     		push	{r4, r5, lr}
 512              		.cfi_def_cfa_offset 12
 513              		.cfi_offset 4, -12
 514              		.cfi_offset 5, -8
 515              		.cfi_offset 14, -4
 467:../drivers/LEUART.c **** int16_t	cnt;			// free buffer space in number of bytes
 468:../drivers/LEUART.c **** bool	sendCR = false;		// set true to write <CR> to buffer
 516              		.loc 3 468 0
 517 0002 0021     		movs	r1, #0
 518              	.LVL35:
 519              	.L33:
 469:../drivers/LEUART.c **** 
 470:../drivers/LEUART.c **** 
 471:../drivers/LEUART.c ****     while (*pStr != EOS)
 520              		.loc 3 471 0 discriminator 1
 521 0004 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 522 0006 002A     		cmp	r2, #0
 523 0008 2ED0     		beq	.L35
 472:../drivers/LEUART.c ****     {
 473:../drivers/LEUART.c **** 	/* Non-blocking: discard string if FIFO is full */
 474:../drivers/LEUART.c **** 	cnt  = txIdxPut;
 524              		.loc 3 474 0
 525 000a 194B     		ldr	r3, .L43
 475:../drivers/LEUART.c **** 	cnt -= txIdxGet;
 526              		.loc 3 475 0
 527 000c 194C     		ldr	r4, .L43+4
 474:../drivers/LEUART.c **** 	cnt  = txIdxPut;
 528              		.loc 3 474 0
 529 000e 1D88     		ldrh	r5, [r3]
 530              	.LVL36:
 531              		.loc 3 475 0
 532 0010 2488     		ldrh	r4, [r4]
 533 0012 2D1B     		subs	r5, r5, r4
 534              	.LVL37:
 535 0014 ADB2     		uxth	r5, r5
 536 0016 ACB2     		uxth	r4, r5
 537              	.LVL38:
 476:../drivers/LEUART.c **** 	if (cnt < 0)
 538              		.loc 3 476 0
 539 0018 14F4004F 		tst	r4, #32768
 477:../drivers/LEUART.c **** 	    cnt += sizeof(txFIFO);
 540              		.loc 3 477 0
 541 001c 1CBF     		itt	ne
 542 001e 05F58064 		addne	r4, r5, #1024
 543 0022 A4B2     		uxthne	r4, r4
 544              	.LVL39:
 478:../drivers/LEUART.c **** 
 479:../drivers/LEUART.c **** 	if (cnt > (int16_t)(sizeof(txFIFO) - 2))
 545              		.loc 3 479 0
 546 0024 24B2     		sxth	r4, r4
 547              	.LVL40:
 548 0026 40F2FE35 		movw	r5, #1022
 549              	.LVL41:
 550 002a AC42     		cmp	r4, r5
 551 002c 1CDC     		bgt	.L35
ARM GAS  /tmp/cck7pr62.s 			page 51


 480:../drivers/LEUART.c **** 	    break;
 481:../drivers/LEUART.c **** 
 482:../drivers/LEUART.c **** 	/* Check if to translate <LF> to <CR><LF> */
 483:../drivers/LEUART.c **** 	if (g_flgLEUART_LF2CRLF  &&  (*pStr == '\n')  &&  ! sendCR)
 552              		.loc 3 483 0
 553 002e 124C     		ldr	r4, .L43+8
 554 0030 2578     		ldrb	r5, [r4]	@ zero_extendqisi2
 555 0032 124C     		ldr	r4, .L43+12
 556 0034 45B1     		cbz	r5, .L36
 557              		.loc 3 483 0 is_stmt 0 discriminator 1
 558 0036 0A2A     		cmp	r2, #10
 559 0038 06D1     		bne	.L36
 560 003a 29B9     		cbnz	r1, .L36
 484:../drivers/LEUART.c **** 	{
 485:../drivers/LEUART.c **** 	    /* Write <CR> to FIFO */
 486:../drivers/LEUART.c **** 	    txFIFO[txIdxPut] = '\r';
 561              		.loc 3 486 0 is_stmt 1
 562 003c 1A88     		ldrh	r2, [r3]
 563 003e 0D21     		movs	r1, #13
 564              	.LVL42:
 565 0040 92B2     		uxth	r2, r2
 566 0042 A154     		strb	r1, [r4, r2]
 567              	.LVL43:
 487:../drivers/LEUART.c **** 	    sendCR = true;	// special character <CR>, set flag
 568              		.loc 3 487 0
 569 0044 0121     		movs	r1, #1
 570 0046 04E0     		b	.L37
 571              	.LVL44:
 572              	.L36:
 488:../drivers/LEUART.c **** 	}
 489:../drivers/LEUART.c **** 	else
 490:../drivers/LEUART.c **** 	{
 491:../drivers/LEUART.c **** 	    /* Write Byte to FIFO */
 492:../drivers/LEUART.c **** 	    txFIFO[txIdxPut] = *pStr++;
 573              		.loc 3 492 0
 574 0048 1988     		ldrh	r1, [r3]
 575              	.LVL45:
 576 004a 0130     		adds	r0, r0, #1
 577              	.LVL46:
 578 004c 89B2     		uxth	r1, r1
 579 004e 6254     		strb	r2, [r4, r1]
 580              	.LVL47:
 493:../drivers/LEUART.c **** 	    sendCR = false;	// regular character, be sure to clear flag
 581              		.loc 3 493 0
 582 0050 0021     		movs	r1, #0
 583              	.LVL48:
 584              	.L37:
 494:../drivers/LEUART.c **** 	}
 495:../drivers/LEUART.c **** 
 496:../drivers/LEUART.c **** 	/* Increment FIFO index */
 497:../drivers/LEUART.c **** 	if (++txIdxPut >= sizeof(txFIFO))
 585              		.loc 3 497 0
 586 0052 1A88     		ldrh	r2, [r3]
 587 0054 0132     		adds	r2, r2, #1
 588 0056 92B2     		uxth	r2, r2
 589 0058 B2F5806F 		cmp	r2, #1024
 590 005c 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/cck7pr62.s 			page 52


 591 005e D1D3     		bcc	.L33
 498:../drivers/LEUART.c **** 	    txIdxPut = 0;	// wrap around
 592              		.loc 3 498 0
 593 0060 034B     		ldr	r3, .L43
 594 0062 0022     		movs	r2, #0
 595 0064 1A80     		strh	r2, [r3]	@ movhi
 596 0066 CDE7     		b	.L33
 597              	.L35:
 499:../drivers/LEUART.c ****     }
 500:../drivers/LEUART.c **** 
 501:../drivers/LEUART.c ****     /* Be sure to enable DMA for data transfer */
 502:../drivers/LEUART.c ****     dmaTransferStart();
 503:../drivers/LEUART.c **** }
 598              		.loc 3 503 0
 599 0068 BDE83040 		pop	{r4, r5, lr}
 502:../drivers/LEUART.c ****     dmaTransferStart();
 600              		.loc 3 502 0
 601 006c FFF7FEBF 		b	dmaTransferStart
 602              	.LVL49:
 603              	.L44:
 604              		.align	2
 605              	.L43:
 606 0070 00000000 		.word	.LANCHOR1
 607 0074 00000000 		.word	.LANCHOR2
 608 0078 00000000 		.word	.LANCHOR9
 609 007c 00000000 		.word	.LANCHOR4
 610              		.cfi_endproc
 611              	.LFE120:
 613              		.section	.text.drvLEUART_putc,"ax",%progbits
 614              		.align	1
 615              		.global	drvLEUART_putc
 616              		.thumb
 617              		.thumb_func
 619              	drvLEUART_putc:
 620              	.LFB121:
 504:../drivers/LEUART.c **** 
 505:../drivers/LEUART.c **** 
 506:../drivers/LEUART.c **** /***************************************************************************//**
 507:../drivers/LEUART.c ****  *
 508:../drivers/LEUART.c ****  * @brief  Put character into the transmit FIFO
 509:../drivers/LEUART.c ****  *
 510:../drivers/LEUART.c ****  * This routine writes the specified character into the transmit FIFO, where
 511:../drivers/LEUART.c ****  * it will be transferred to the LEUART via DMA.  If there is no more space in
 512:../drivers/LEUART.c ****  * the FIFO, the character will be discarded.
 513:../drivers/LEUART.c ****   *
 514:../drivers/LEUART.c ****  * @param[in] c
 515:../drivers/LEUART.c ****  *	Character to write into the FIFO.
 516:../drivers/LEUART.c ****  *
 517:../drivers/LEUART.c ****  ******************************************************************************/
 518:../drivers/LEUART.c **** void	 drvLEUART_putc (char c)
 519:../drivers/LEUART.c **** {
 621              		.loc 3 519 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 8
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              	.LVL50:
 626 0000 07B5     		push	{r0, r1, r2, lr}
ARM GAS  /tmp/cck7pr62.s 			page 53


 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 0, -16
 629              		.cfi_offset 1, -12
 630              		.cfi_offset 2, -8
 631              		.cfi_offset 14, -4
 520:../drivers/LEUART.c **** char	 buffer[2];	// temporary character buffer
 521:../drivers/LEUART.c **** 
 522:../drivers/LEUART.c **** 
 523:../drivers/LEUART.c ****     /* Build local string with just one character */
 524:../drivers/LEUART.c ****     buffer[0] = c;
 525:../drivers/LEUART.c ****     buffer[1] = EOS;
 632              		.loc 3 525 0
 633 0002 0023     		movs	r3, #0
 524:../drivers/LEUART.c ****     buffer[0] = c;
 634              		.loc 3 524 0
 635 0004 8DF80400 		strb	r0, [sp, #4]
 526:../drivers/LEUART.c **** 
 527:../drivers/LEUART.c ****     /* call puts() */
 528:../drivers/LEUART.c ****     drvLEUART_puts (buffer);
 636              		.loc 3 528 0
 637 0008 01A8     		add	r0, sp, #4
 638              	.LVL51:
 525:../drivers/LEUART.c ****     buffer[1] = EOS;
 639              		.loc 3 525 0
 640 000a 8DF80530 		strb	r3, [sp, #5]
 641              		.loc 3 528 0
 642 000e FFF7FEFF 		bl	drvLEUART_puts
 643              	.LVL52:
 529:../drivers/LEUART.c **** }
 644              		.loc 3 529 0
 645 0012 03B0     		add	sp, sp, #12
 646              		@ sp needed
 647 0014 5DF804FB 		ldr	pc, [sp], #4
 648              		.cfi_endproc
 649              	.LFE121:
 651              		.global	descrCfgTx
 652              		.global	g_flgLEUART_LF2CRLF
 653              		.section	.bss.flgDMArun,"aw",%nobits
 654              		.set	.LANCHOR0,. + 0
 657              	flgDMArun:
 658 0000 00       		.space	1
 659              		.section	.bss.txFIFO,"aw",%nobits
 660              		.set	.LANCHOR4,. + 0
 663              	txFIFO:
 664 0000 00000000 		.space	1024
 664      00000000 
 664      00000000 
 664      00000000 
 664      00000000 
 665              		.section	.data.dmaInit,"aw",%progbits
 666              		.align	2
 667              		.set	.LANCHOR6,. + 0
 670              	dmaInit:
 671 0000 00       		.byte	0
 672 0001 000000   		.space	3
 673 0004 00000000 		.word	g_DMA_ControlBlock
 674              		.section	.data.leuartInit,"aw",%progbits
ARM GAS  /tmp/cck7pr62.s 			page 54


 675              		.align	2
 676              		.set	.LANCHOR5,. + 0
 679              	leuartInit:
 680 0000 04       		.byte	4
 681 0001 000000   		.space	3
 682 0004 00000000 		.word	0
 683 0008 80250000 		.word	9600
 684 000c 00       		.byte	0
 685 000d 00       		.byte	0
 686 000e 10       		.byte	16
 687 000f 00       		.space	1
 688              		.section	.bss.txIdxGetNext,"aw",%nobits
 689              		.align	1
 690              		.set	.LANCHOR3,. + 0
 693              	txIdxGetNext:
 694 0000 0000     		.space	2
 695              		.section	.bss.txIdxPut,"aw",%nobits
 696              		.align	1
 697              		.set	.LANCHOR1,. + 0
 700              	txIdxPut:
 701 0000 0000     		.space	2
 702              		.section	.data.chnlCfgTx,"aw",%progbits
 703              		.align	2
 704              		.set	.LANCHOR7,. + 0
 707              	chnlCfgTx:
 708 0000 00       		.byte	0
 709 0001 00       		.byte	0
 710 0002 0000     		.space	2
 711 0004 01001000 		.word	1048577
 712 0008 0C000000 		.word	g_DMA_Callback+12
 713              		.section	.bss.txIdxGet,"aw",%nobits
 714              		.align	1
 715              		.set	.LANCHOR2,. + 0
 718              	txIdxGet:
 719 0000 0000     		.space	2
 720              		.section	.data.descrCfgTx,"aw",%progbits
 721              		.set	.LANCHOR8,. + 0
 724              	descrCfgTx:
 725 0000 03       		.byte	3
 726 0001 00       		.byte	0
 727 0002 00       		.byte	0
 728 0003 00       		.byte	0
 729 0004 00       		.byte	0
 730              		.section	.data.g_flgLEUART_LF2CRLF,"aw",%progbits
 731              		.set	.LANCHOR9,. + 0
 734              	g_flgLEUART_LF2CRLF:
 735 0000 01       		.byte	1
 736              		.text
 737              	.Letext0:
 738              		.file 5 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 739              		.file 6 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 740              		.file 7 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 741              		.file 8 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_ch.h"
 742              		.file 9 "../Device/EnergyMicro/EFM32G/Include/efm32g_leuart.h"
 743              		.file 10 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_descriptor.h"
 744              		.file 11 "../emlib/inc/em_cmu.h"
 745              		.file 12 "../emlib/inc/em_leuart.h"
ARM GAS  /tmp/cck7pr62.s 			page 55


 746              		.file 13 "../emlib/inc/em_gpio.h"
 747              		.file 14 "../emlib/inc/em_dma.h"
