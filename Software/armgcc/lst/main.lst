ARM GAS  /tmp/cc6pScoJ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_IRQHandler,"ax",%progbits
  19              		.align	1
  20              		.global	RTC_IRQHandler
  21              		.thumb
  22              		.thumb_func
  24              	RTC_IRQHandler:
  25              	.LFB121:
  26              		.file 1 "../main.c"
   1:../main.c     **** /***************************************************************************//**
   2:../main.c     ****  * @file
   3:../main.c     ****  * @brief	EFM32 Boot
   4:../main.c     ****  * @author	Ralf Gerhauser
   5:../main.c     ****  * @version	2018-03-28
   6:../main.c     ****  *
   7:../main.c     ****  * This is a boot software for the EFM32 architecture.  Its main purpose is
   8:../main.c     ****  * to verify and start the application software.
   9:../main.c     ****  *
  10:../main.c     ****  * Parts of the code are based on the example code of AN0019 "EEPROM Emulation"
  11:../main.c     ****  * from Energy Micro AS.
  12:../main.c     ****  *
  13:../main.c     ****  ***************************************************************************//**
  14:../main.c     ****  *
  15:../main.c     ****  * Parts are Copyright 2013 Energy Micro AS, http://www.energymicro.com
  16:../main.c     ****  *
  17:../main.c     ****  *******************************************************************************
  18:../main.c     ****  *
  19:../main.c     ****  * Permission is granted to anyone to use this software for any purpose,
  20:../main.c     ****  * including commercial applications, and to alter it and redistribute it
  21:../main.c     ****  * freely, subject to the following restrictions:
  22:../main.c     ****  *
  23:../main.c     ****  * 1. The origin of this software must not be misrepresented; you must not
  24:../main.c     ****  *    claim that you wrote the original software.
  25:../main.c     ****  * 2. Altered source versions must be plainly marked as such, and must not be
  26:../main.c     ****  *    misrepresented as being the original software.
  27:../main.c     ****  * 3. This notice may not be removed or altered from any source distribution.
  28:../main.c     ****  * 4. The source and compiled code may only be used on Energy Micro "EFM32"
  29:../main.c     ****  *    microcontrollers and "EFR4" radios.
  30:../main.c     ****  *
  31:../main.c     ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  32:../main.c     ****  * obligation to support this Software. Energy Micro AS is providing the
ARM GAS  /tmp/cc6pScoJ.s 			page 2


  33:../main.c     ****  * Software "AS IS", with no express or implied warranties of any kind,
  34:../main.c     ****  * including, but not limited to, any implied warranties of merchantability
  35:../main.c     ****  * or fitness for any particular purpose or warranties against infringement
  36:../main.c     ****  * of any proprietary rights of a third party.
  37:../main.c     ****  *
  38:../main.c     ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  39:../main.c     ****  * special damages, or any other relief, or for any claim by any third party,
  40:../main.c     ****  * arising from your use of this Software.
  41:../main.c     ****  *
  42:../main.c     ****  ****************************************************************************//*
  43:../main.c     **** Revision History:
  44:../main.c     **** 2018-03-28,rage	Changed probing for platform "TAMDL".
  45:../main.c     **** 2018-02-19,rage	Added support for platform "TAMDL".
  46:../main.c     **** 2016-04-14,rage	StartFirmware: Corrected check for initial SP and PC.
  47:../main.c     **** 2016-02-27,rage	Renamed board types to "APRDL" and "MAPRDL".
  48:../main.c     **** 2016-02-10,rage	Initial version.
  49:../main.c     **** */
  50:../main.c     **** 
  51:../main.c     **** /*!
  52:../main.c     ****  * @mainpage
  53:../main.c     ****  * <b>Description</b><br>
  54:../main.c     ****  * <b>EFM32_Boot</b> is a boot software for the EFM32 architecture.  Its main
  55:../main.c     ****  * purpose is to verify and start the application software.  Before doing this,
  56:../main.c     ****  * it checks whether there exists an update file on the SD-Card.  If so, the
  57:../main.c     ****  * application software in FLASH will be updated.
  58:../main.c     ****  *
  59:../main.c     ****  * <b>Memory Map</b><br>
  60:../main.c     ****  * FLASH and SRAM memory ranges:
  61:../main.c     ****  * <center><table>
  62:../main.c     ****  * <tr><th>Address</th> <th>Description</th></tr>
  63:../main.c     ****  * <tr><td>0x00000000</td> <td>Start of FLASH, here resides the Booter (32KB)</td></tr>
  64:../main.c     ****  * <tr><td>0x00008000</td> <td>Start of Application Software (up to 96KB)</td></tr>
  65:../main.c     ****  * <tr><td>0x0001FFFF</td> <td>End of 128KB FLASH</td></tr>
  66:../main.c     ****  * <tr><td>0x10000000</td> <td>Start of SRAM when accessed as Code</td></tr>
  67:../main.c     ****  * <tr><td>0x10003FFF</td> <td>End of 16KB SRAM when accessed as Code</td></tr>
  68:../main.c     ****  * <tr><td>0x20000000</td> <td>Start of SRAM when accessed as Data</td></tr>
  69:../main.c     ****  * <tr><td>0x20003FFF</td> <td>End of 16KB SRAM when accessed as Data</td></tr>
  70:../main.c     ****  * </table></center>
  71:../main.c     ****  *
  72:../main.c     ****  * <b>Supported Platforms</b><br>
  73:../main.c     ****  * - APRDL, the name of the update file is <b>APRDL.UPD</b>
  74:../main.c     ****  * - TAMDL, the name of the update file is <b>TAMDL.UPD</b>
  75:../main.c     ****  * - MAPRDL, the name of the update file is <b>MAPRDL.UPD</b>
  76:../main.c     ****  * - Individual platforms, based on MAPRDL.  The name must be specified to
  77:../main.c     ****  *   the Makefile as variable <i>PLATFORM</i>, e.g. "make PLATFORM=MOMO" will
  78:../main.c     ****  *   generate a booter that expects an update file <b>MOMO.UPD</b>.
  79:../main.c     ****  *
  80:../main.c     ****  * If no PLATFORM variable has been specified, the booter determines the
  81:../main.c     ****  * platform by configuring PA3 as input and reading its default state.  For
  82:../main.c     ****  * APRDL this is connected to the KEY_S1 signal, which has a pull-up resistor,
  83:../main.c     ****  * therefore its default state is 1.  For MAPRDL and TAMDL this pin is used for
  84:../main.c     ****  * CAM1_ENABLE, which has a pull-down resistor and is 0.<br>
  85:../main.c     ****  * To distinguish between MAPRDL and TAMDL, pin PC15 will be probed.  On
  86:../main.c     ****  * platform MAPRDL, this is signal PC15_LA_MOSFET which is connected to
  87:../main.c     ****  * pull-down resistor R66.  TAMDL has a pull-up resistor connected to PC15.
  88:../main.c     ****  *
  89:../main.c     ****  * The following table lists the relevant pins, their functionality, and
ARM GAS  /tmp/cc6pScoJ.s 			page 3


  90:../main.c     ****  * default state:
  91:../main.c     ****  * <center><table>
  92:../main.c     ****  * <tr><th>Pin</th><th>APRDL</th><th>MAPRDL</th><th>TAMDL</th></tr>
  93:../main.c     ****  * <tr><td>PA3</td><td>KEY_S1 (1)</td><td>CAM1_ENABLE (0)</td>
  94:../main.c     ****  *	<td>CAM1_ENABLE (0)</td></tr>
  95:../main.c     ****  * <tr><td>PC15</td><td>LA_MOSFET (0)</td><td>LA_MOSFET (0)</td>
  96:../main.c     ****  *	<td>Pull-Up (1)</td></tr>
  97:../main.c     ****  * </table></center>
  98:../main.c     ****  *
  99:../main.c     ****  * <b>Microcontroller</b><br>
 100:../main.c     ****  * The heart of the board is an EFM32G230 microcontroller.  It provides two
 101:../main.c     ****  * different clock domains: All low-energy peripheral is clocked via a
 102:../main.c     ****  * 32.768kHz external XTAL.  The MCU and other high performance peripheral
 103:../main.c     ****  * uses a high-frequency clock.  The board can be configured to use the
 104:../main.c     ****  * internal RC-oscillator, or an external 32MHz XTAL for that purpose,
 105:../main.c     ****  * see define @ref USE_EXT_32MHZ_CLOCK.
 106:../main.c     ****  *
 107:../main.c     ****  * <b>LEDs</b><br>
 108:../main.c     ****  * There are two LEDs, but only the red Power-On LED is used by the booter to
 109:../main.c     ****  * indicate certain states or error codes.
 110:../main.c     ****  * - Under normal conditions, the LED just flashes once for a short time before
 111:../main.c     ****  *   the application software is started.
 112:../main.c     ****  * - If a matching firmware update file has been found on the SD-Card, this
 113:../main.c     ****  *   will be programmed in FLASH.  When the update is done, the LED will
 114:../main.c     ****  *   permanently flicker to indicate that firmware has been updated and it is
 115:../main.c     ****  *   now time to remove the SD-Card containing the update file.
 116:../main.c     ****  * - If an error condition happens, the LED is used to inform the operator
 117:../main.c     ****  *   about the error code.  It starts with a pause of 800ms, followed by a
 118:../main.c     ****  *   number of LED flashes.  The number represents the error code:
 119:../main.c     ****  *   <center><table>
 120:../main.c     ****  *   <tr><th>Code</th> <th>Error Description</th></tr>
 121:../main.c     ****  *   <tr><td>  1 </td> <td>FLASH is not programmed (no application)</td></tr>
 122:../main.c     ****  *   <tr><td>  2 </td> <td>Corrupted application image in FLASH</td></tr>
 123:../main.c     ****  *   <tr><td>  3 </td> <td>No update file found for this board</td></tr>
 124:../main.c     ****  *   <tr><td>  4 </td> <td>Update failed: File read error</td></tr>
 125:../main.c     ****  *   <tr><td>  5 </td> <td>Update failed: FLASH erase error</td></tr>
 126:../main.c     ****  *   <tr><td>  6 </td> <td>Update failed: FLASH write error</td></tr>
 127:../main.c     ****  *   </table></center>
 128:../main.c     ****  *
 129:../main.c     ****  * <b>SD-Card</b><br>
 130:../main.c     ****  * An SD-Card is used to provide firmware update images and to store logging
 131:../main.c     ****  * information in file "UPDATE.TXT".  Only formatted cards can be used,
 132:../main.c     ****  * supported file systems are FAT12, FAT16, and FAT32.  The filenames must
 133:../main.c     ****  * follow the DOS schema 8+3, i.e. maximum 8 characters for the basename,
 134:../main.c     ****  * and 3 for the extension.
 135:../main.c     ****  * If the SD-Card contains a file <b><i>platform</i>.UPD</b>, where
 136:../main.c     ****  * <b><i>platform</i></b> specifies the board the firmware update image
 137:../main.c     ****  * is meant to be, the booter will update the application software in
 138:../main.c     ****  * FLASH with the image from this file.
 139:../main.c     ****  *
 140:../main.c     ****  * <b>Low-Energy UART</b><br>
 141:../main.c     ****  * The Low-Power UART (LEUART) provides a connection to a host computer (PC).
 142:../main.c     ****  * It can be used as monitoring and debugging interface.  All log messages,
 143:../main.c     ****  * written to the SD-Card, are sent through this interface also.  This behaviour
 144:../main.c     ****  * can be changed by defining @ref LOG_MONITOR_FUNCTION to @ref NONE.
 145:../main.c     ****  * The character format for this UART is 9600 baud, 8 data bits, no parity.
 146:../main.c     ****  *
ARM GAS  /tmp/cc6pScoJ.s 			page 4


 147:../main.c     ****  * <b>Booter Firmware</b><br>
 148:../main.c     ****  * The firmware consists of an initialization part and a main loop, also called
 149:../main.c     ****  * service execution loop.  The initialization part sets up all modules, enables
 150:../main.c     ****  * devices and interrupts.  The service execution loop handles all tasks that
 151:../main.c     ****  * must not be executed in interrupt context.
 152:../main.c     ****  *
 153:../main.c     ****  * After power-up or reset the following actions are performed:
 154:../main.c     ****  * -# Basic initialization of MCU and clocks
 155:../main.c     ****  * -# Power-On LED is switched on to show the firmware is alive
 156:../main.c     ****  * -# Real-Time-Counter is set up as time base
 157:../main.c     ****  * -# Low-Energy UART and DMA is configured
 158:../main.c     ****  * -# SD-Card interface is initialized
 159:../main.c     ****  * -# LED is switched off
 160:../main.c     ****  * -# If no SD-Card is present, immediately start the application
 161:../main.c     ****  * -# If an SD-Card is present, but it does not contain any firmware update
 162:../main.c     ****  *    files, immediately start the application
 163:../main.c     ****  * -# If an SD-Card is present and it contains firmware update files, but
 164:../main.c     ****  *    not for this board, show error code 3 via LED
 165:../main.c     ****  * -# If an SD-Card is present and contains a firmware update file for this
 166:../main.c     ****  *    board, read it and program the image into the FLASH
 167:../main.c     ****  * -# If there are any errors, show the error number via LED, see above.
 168:../main.c     ****  * -# Finally wait until the SD-Card containing the firmware update file has
 169:../main.c     ****  *    been removed.
 170:../main.c     ****  */
 171:../main.c     **** 
 172:../main.c     **** /*=============================== Header Files ===============================*/
 173:../main.c     **** 
 174:../main.c     **** #include <stdio.h>
 175:../main.c     **** #include <string.h>
 176:../main.c     **** #include "em_device.h"
 177:../main.c     **** #include "em_chip.h"
 178:../main.c     **** #include "em_cmu.h"
 179:../main.c     **** #include "em_rtc.h"
 180:../main.c     **** #include "em_emu.h"
 181:../main.c     **** #include "em_dma.h"
 182:../main.c     **** #include "config.h"	// include project configuration parameters
 183:../main.c     **** #include "LEUART.h"
 184:../main.c     **** #include "Logging.h"
 185:../main.c     **** #include "Flash.h"	// firmware update routines to erase and program FLASH
 186:../main.c     **** 
 187:../main.c     **** #include "ff.h"		// FS_FAT12/16/32
 188:../main.c     **** #include "diskio.h"	// DSTATUS
 189:../main.c     **** #include "microsd.h"	// g_MicroSD_PwrPort, g_MicroSD_PwrPin, DiskInit(),...
 190:../main.c     **** 
 191:../main.c     **** /*=============================== Definitions ================================*/
 192:../main.c     **** 
 193:../main.c     **** /*!@brief Calculate maximum value to prevent overflow of a 32bit register. */
 194:../main.c     **** #define MAX_VALUE_FOR_32BIT	(0xFFFFFFFFUL / RTC_COUNTS_PER_SEC)
 195:../main.c     **** 
 196:../main.c     **** /*================================ Global Data ===============================*/
 197:../main.c     **** 
 198:../main.c     **** extern PRJ_INFO const  prj;		// Project Information
 199:../main.c     **** 
 200:../main.c     **** 
 201:../main.c     **** /*! @brief Global DMA Control Block.
 202:../main.c     ****  *
 203:../main.c     ****  * It contains the configuration for all 8 DMA channels which may be used by
ARM GAS  /tmp/cc6pScoJ.s 			page 5


 204:../main.c     ****  * various peripheral devices, e.g. ADC, DAC, USART, LEUART, I2C, and others.
 205:../main.c     ****  * The entries of this array will be set by the initialization routines of the
 206:../main.c     ****  * driver, which was assigned to the respective channel.  Unused entries remain
 207:../main.c     ****  * zero.  There is a total of 16 entries in the array.  The first 8 are used
 208:../main.c     ****  * for the primary DMA structures, the second 8 for alternate DMA structures
 209:../main.c     ****  * as used for DMA scatter-gather mode, where one buffer is still available,
 210:../main.c     ****  * while the other can be re-configured.  This application uses only the first
 211:../main.c     ****  * 8 entries.
 212:../main.c     ****  *
 213:../main.c     ****  * @see  DMA Channel Assignment
 214:../main.c     ****  *
 215:../main.c     ****  * @note This array must be aligned to 256!
 216:../main.c     ****  */
 217:../main.c     **** #if defined (__ICCARM__)
 218:../main.c     ****     #pragma data_alignment=256
 219:../main.c     ****     DMA_DESCRIPTOR_TypeDef g_DMA_ControlBlock[DMA_CHAN_COUNT * 2];
 220:../main.c     **** #elif defined (__CC_ARM)
 221:../main.c     ****     DMA_DESCRIPTOR_TypeDef g_DMA_ControlBlock[DMA_CHAN_COUNT * 2] __attribute__ ((aligned(256)));
 222:../main.c     **** #elif defined (__GNUC__)
 223:../main.c     ****     DMA_DESCRIPTOR_TypeDef g_DMA_ControlBlock[DMA_CHAN_COUNT * 2] __attribute__ ((aligned(256)));
 224:../main.c     **** #else
 225:../main.c     ****     #error Undefined toolkit, need to define alignment
 226:../main.c     **** #endif
 227:../main.c     **** 
 228:../main.c     **** 
 229:../main.c     **** /*! @brief Global DMA Callback Structure.
 230:../main.c     ****  *
 231:../main.c     ****  * This array contains the addresses of the DMA callback functions, which are
 232:../main.c     ****  * executed for a dedicated DMA channel at the end of a DMA transfer.
 233:../main.c     ****  * The entries of this array will be set by the initialization routines of the
 234:../main.c     ****  * driver, which was assigned to the respective channel.  Unused entries remain
 235:../main.c     ****  * zero.
 236:../main.c     ****  */
 237:../main.c     **** DMA_CB_TypeDef g_DMA_Callback[DMA_CHAN_COUNT];
 238:../main.c     **** 
 239:../main.c     **** /*! @brief Flag to indicate that an Interrupt occurred in the meantime.
 240:../main.c     ****  *
 241:../main.c     ****  * This flag must be set <b>true</b> by any interrupt service routine that
 242:../main.c     ****  * requires actions in the service execution loop of main().  This prevents
 243:../main.c     ****  * the system from entering sleep mode, so the action can be taken before.
 244:../main.c     ****  *
 245:../main.c     ****  * @note This flag is not used in this project since the booter never enters
 246:../main.c     ****  * 	 any energy saving mode!
 247:../main.c     ****  */
 248:../main.c     **** volatile bool		g_flgIRQ;
 249:../main.c     **** 
 250:../main.c     **** /*=========================== Forward Declarations ===========================*/
 251:../main.c     **** 
 252:../main.c     **** static void cmuSetup(void);
 253:../main.c     **** static int  StartFirmware(void);
 254:../main.c     **** 
 255:../main.c     **** 
 256:../main.c     **** /******************************************************************************
 257:../main.c     ****  * @brief  Main function
 258:../main.c     ****  *****************************************************************************/
 259:../main.c     **** int main( void )
 260:../main.c     **** {
ARM GAS  /tmp/cc6pScoJ.s 			page 6


 261:../main.c     **** char	*pPlatform;
 262:../main.c     **** char	 FirmwareFilename[40];
 263:../main.c     **** int	 n=0, errorCode;
 264:../main.c     **** 
 265:../main.c     ****     /* Initialize chip - handle erratas */
 266:../main.c     ****     CHIP_Init();
 267:../main.c     **** 
 268:../main.c     ****     /* Set up clocks */
 269:../main.c     ****     cmuSetup();
 270:../main.c     **** 
 271:../main.c     ****     /* Enable clock to GPIO */
 272:../main.c     ****     CMU_ClockEnable (cmuClock_GPIO, true);
 273:../main.c     **** 
 274:../main.c     ****     /* Configure PA2 to drive the red Power-On LED (LED1) - show we are alive */
 275:../main.c     ****     GPIO_PinModeSet (POWER_LED_PORT, POWER_LED_PIN, gpioModePushPull, 1);
 276:../main.c     **** 
 277:../main.c     ****     /* Configure PA3 and PC15 as input to determine platform (board type) */
 278:../main.c     ****     GPIO_PinModeSet (gpioPortA, 3, gpioModeInput, 0);
 279:../main.c     ****     GPIO_PinModeSet (gpioPortC,15, gpioModeInput, 0);
 280:../main.c     **** 
 281:../main.c     ****     /* Configure the RTC */
 282:../main.c     ****     RTC_Init_TypeDef rtcInit;
 283:../main.c     ****     rtcInit.debugRun = false;
 284:../main.c     ****     rtcInit.comp0Top = false;
 285:../main.c     ****     rtcInit.enable = false;
 286:../main.c     **** 
 287:../main.c     ****     /* Initialize the RTC */
 288:../main.c     ****     RTC_Init (&rtcInit);
 289:../main.c     **** 
 290:../main.c     ****     /*
 291:../main.c     ****      * We just use one interrupt:
 292:../main.c     ****      *   Overflow - not used
 293:../main.c     ****      *   COMP0    - for the 1/2 second base clock
 294:../main.c     ****      *   COMP1    - not used
 295:../main.c     ****      */
 296:../main.c     ****     RTC_IntEnable (RTC_IEN_COMP0);
 297:../main.c     **** 
 298:../main.c     ****     /* Enable RTC */
 299:../main.c     ****     RTC_Enable (true);
 300:../main.c     **** 
 301:../main.c     ****     /* Enable RTC interrupts */
 302:../main.c     ****     NVIC_ClearPendingIRQ(RTC_IRQn);
 303:../main.c     ****     NVIC_EnableIRQ(RTC_IRQn);
 304:../main.c     **** 
 305:../main.c     ****     /* Init Low Energy UART with 9600bd (this is the maximum) */
 306:../main.c     ****     drvLEUART_Init (9600);
 307:../main.c     **** 
 308:../main.c     **** #ifdef DEBUG
 309:../main.c     ****     dbgInit();
 310:../main.c     **** #endif
 311:../main.c     **** 
 312:../main.c     ****     /* Output version string to LEUART */
 313:../main.c     **** #ifdef PLATFORM
 314:../main.c     ****     drvLEUART_puts("\n***** " PLATFORM "_Boot V");
 315:../main.c     **** #else
 316:../main.c     ****     drvLEUART_puts("\n***** EFM32_Boot V");
 317:../main.c     **** #endif
ARM GAS  /tmp/cc6pScoJ.s 			page 7


 318:../main.c     ****     drvLEUART_puts(prj.Version);
 319:../main.c     ****     drvLEUART_puts(" *****\n\n");
 320:../main.c     **** 
 321:../main.c     ****     /* Initialize Logging (do this early) */
 322:../main.c     ****     LogInit();
 323:../main.c     **** 
 324:../main.c     ****     /* Log Firmware Revision */
 325:../main.c     ****     Log ("======================================");
 326:../main.c     ****     Log ("EFM32_Boot V%s (%s %s)", prj.Version, prj.Date, prj.Time);
 327:../main.c     **** 
 328:../main.c     ****     /*
 329:../main.c     ****      * Determine Platform (board)
 330:../main.c     ****      *
 331:../main.c     ****      * This may be specified via Makefile, e.g. make PLATFORM="TAMDL", otherwise
 332:../main.c     ****      * the booter tries to determine it automatically via pin level:
 333:../main.c     ****      * Port A3 is 0 for MAPRDL (SERENITY) and TAMDL while it is 1 for APRDL
 334:../main.c     ****      * (SNB_Heaven).
 335:../main.c     ****      */
 336:../main.c     **** #ifdef PLATFORM
 337:../main.c     ****     pPlatform = PLATFORM;
 338:../main.c     **** #else
 339:../main.c     ****     if (GPIO->P[gpioPortA].DIN & (1 << 3))
 340:../main.c     ****     {
 341:../main.c     **** 	pPlatform = "APRDL";
 342:../main.c     ****     }
 343:../main.c     ****     else
 344:../main.c     ****     {
 345:../main.c     **** 	pPlatform = "MAPRDL";		// assume MAPRDL (SERENITY)
 346:../main.c     **** 
 347:../main.c     **** 	/*
 348:../main.c     **** 	 * To distinguish between MAPRDL and TAMDL, pin PC15 will be probed.
 349:../main.c     **** 	 * On platform MAPRDL, this is signal PC15_LA_MOSFET which is connected
 350:../main.c     **** 	 * to pull-down resistor R66.  TAMDL has a pull-up resistor connected
 351:../main.c     **** 	 * to PC15.
 352:../main.c     **** 	 */
 353:../main.c     **** 	if (GPIO->P[gpioPortC].DIN & (1 << 15))
 354:../main.c     **** 	{
 355:../main.c     **** 	    /* PC15 is 1 - must be TAMDL, overwrite settings */
 356:../main.c     **** 	    pPlatform = "TAMDL";	// is TAMDL
 357:../main.c     **** 	    g_MicroSD_PwrPort = TAMDL_MICROSD_PWR_GPIO_PORT;
 358:../main.c     **** 	    g_MicroSD_PwrPin  = TAMDL_MICROSD_PWR_PIN;
 359:../main.c     **** 	}
 360:../main.c     ****     }
 361:../main.c     **** #endif
 362:../main.c     ****     Log ("Platform: %s", pPlatform);
 363:../main.c     ****     sprintf (FirmwareFilename, "%s.UPD", pPlatform);
 364:../main.c     **** 
 365:../main.c     ****     /* Log information about the MCU Type and S/N */
 366:../main.c     ****     uint32_t uniquHi = DEVINFO->UNIQUEH;
 367:../main.c     ****     Log ("MCU: %s HW-ID: 0x%08lX%08lX",
 368:../main.c     **** 	 PART_NUMBER, uniquHi, DEVINFO->UNIQUEL);
 369:../main.c     **** 
 370:../main.c     ****     /* Initialize SD-Card Interface */
 371:../main.c     ****     DiskInit();
 372:../main.c     **** 
 373:../main.c     ****     /* Switch Power-LED OFF */
 374:../main.c     ****     POWER_LED = 0;
ARM GAS  /tmp/cc6pScoJ.s 			page 8


 375:../main.c     **** 
 376:../main.c     ****     /* Check if an SD-Card is present */
 377:../main.c     ****     if (DiskCheck())
 378:../main.c     ****     {
 379:../main.c     **** 	/* Yes - see if any "*.UPD" files exist */
 380:../main.c     **** 	if (FindFile ("/", "*.UPD") != NULL)
 381:../main.c     **** 	{
 382:../main.c     **** 	    /*
 383:../main.c     **** 	     * Found update image(s), so the booter will NOT start the
 384:../main.c     **** 	     * application in FLASH until this SD-Card has been removed.
 385:../main.c     **** 	     * Next find out, if there exists an firmware update file for
 386:../main.c     **** 	     * this board.
 387:../main.c     **** 	     */
 388:../main.c     **** 	    if (FindFile ("/", FirmwareFilename) != NULL)
 389:../main.c     **** 	    {
 390:../main.c     **** 	    PRJ_INFO	*pPrjInfo;
 391:../main.c     **** 	    char	 oldVersion[16] = "<unknown>";
 392:../main.c     **** 	    char	 newVersion[16] = "<unknown>";
 393:../main.c     **** 
 394:../main.c     **** 		/* Yes, then proceed firmware update */
 395:../main.c     **** 		Log ("Found update file for this board, reprogramming FLASH");
 396:../main.c     **** 
 397:../main.c     **** 		/* Find version of the current (old) application image */
 398:../main.c     **** 		pPrjInfo = FindPrjInfo();
 399:../main.c     **** 		if (pPrjInfo != NULL)
 400:../main.c     **** 		    strcpy (oldVersion, pPrjInfo->Version);
 401:../main.c     **** 
 402:../main.c     **** 		/* Perform firmware update */
 403:../main.c     **** 		errorCode = FirmwareUpdate (FirmwareFilename);
 404:../main.c     **** 
 405:../main.c     **** 		/* Find version of the new application image */
 406:../main.c     **** 		pPrjInfo = FindPrjInfo();
 407:../main.c     **** 		if (pPrjInfo != NULL)
 408:../main.c     **** 		    strcpy (newVersion, pPrjInfo->Version);
 409:../main.c     **** 
 410:../main.c     **** 		switch (errorCode)
 411:../main.c     **** 		{
 412:../main.c     **** 		    case 0: Log ("Update from version %s to %s finished"
 413:../main.c     **** 				 " - no errors", oldVersion, newVersion);
 414:../main.c     **** 			    break;
 415:../main.c     **** 
 416:../main.c     **** 		    case 4: Log ("Update aborted - File READ ERROR");
 417:../main.c     **** 			    break;
 418:../main.c     **** 
 419:../main.c     **** 		    case 5: Log ("Update aborted - FLASH ERASE ERROR");
 420:../main.c     **** 			    break;
 421:../main.c     **** 
 422:../main.c     **** 		    case 6: Log ("Update aborted - FLASH WRITE ERROR");
 423:../main.c     **** 			    break;
 424:../main.c     **** 
 425:../main.c     **** 		    default:
 426:../main.c     **** 			    Log ("Update aborted - Unknown Error %d",
 427:../main.c     **** 				 errorCode);
 428:../main.c     **** 			    break;
 429:../main.c     **** 		}
 430:../main.c     **** 	    }
 431:../main.c     **** 	    else
ARM GAS  /tmp/cc6pScoJ.s 			page 9


 432:../main.c     **** 	    {
 433:../main.c     **** 		/* No, there isn't any update file for this board */
 434:../main.c     **** 		Log ("There exist no update file for this board!");
 435:../main.c     **** 
 436:../main.c     **** 		errorCode = 3;	// Error Code 3: No Update Image for this board
 437:../main.c     **** 	    }
 438:../main.c     **** 
 439:../main.c     **** 	    /* Write all logging to file "UPDATE.TXT" */
 440:../main.c     **** 	    Log ("Waiting until the SD-Card has been removed");
 441:../main.c     **** 
 442:../main.c     **** 	    /* Open or create Log File */
 443:../main.c     **** 	    if (LogFileOpen("UPDATE.TXT", "UPDATE.TXT"))
 444:../main.c     **** 	    {
 445:../main.c     **** 		/* Flush current log buffer */
 446:../main.c     **** 		LogFlush();
 447:../main.c     **** 	    }
 448:../main.c     **** 
 449:../main.c     **** 	    /*
 450:../main.c     **** 	     * Wait until the SD-Card has been removed.  Show error code
 451:../main.c     **** 	     * while waiting.
 452:../main.c     **** 	     */
 453:../main.c     **** 	    do
 454:../main.c     **** 	    {
 455:../main.c     **** 		if (errorCode == 0)
 456:../main.c     **** 		{
 457:../main.c     **** 		    /* No error, flicker LED */
 458:../main.c     **** 		    POWER_LED = (++n & 0x1) ? 1 : 0;
 459:../main.c     **** 		    msDelay(50);		// pause
 460:../main.c     **** 		}
 461:../main.c     **** 		else
 462:../main.c     **** 		{
 463:../main.c     **** 		    /*
 464:../main.c     **** 		     * Show error code via LED pattern:
 465:../main.c     **** 		     * repeat: Pause - <errorCode> x LED pulses
 466:../main.c     **** 		     */
 467:../main.c     **** 		    POWER_LED = 0;
 468:../main.c     **** 		    msDelay(800);		// pause
 469:../main.c     **** 
 470:../main.c     **** 		    for (n = 0;  n < errorCode;  n++)
 471:../main.c     **** 		    {
 472:../main.c     **** 			POWER_LED = 1;		// LED ON
 473:../main.c     **** 			msDelay(200);
 474:../main.c     **** 			POWER_LED = 0;		// LED OFF
 475:../main.c     **** 			msDelay(200);
 476:../main.c     **** 		    }
 477:../main.c     **** 		}
 478:../main.c     **** 
 479:../main.c     **** 		/* Check for SD-Card (again) */
 480:../main.c     **** 		(void)DiskCheck();
 481:../main.c     **** 
 482:../main.c     **** 	    } while (! IsDiskRemoved());
 483:../main.c     **** 
 484:../main.c     **** 	} // end: found any firmware files
 485:../main.c     **** 	else
 486:../main.c     **** 	{
 487:../main.c     **** 	    drvLEUART_puts("No update files on SD-Card\n");
 488:../main.c     **** 	}
ARM GAS  /tmp/cc6pScoJ.s 			page 10


 489:../main.c     ****     } // end: SF-Card present
 490:../main.c     **** 
 491:../main.c     ****     drvLEUART_puts("Starting Application...\n\n");
 492:../main.c     **** 
 493:../main.c     ****     /* Switch LED off and wait until UART DMA transfer is done */
 494:../main.c     ****     POWER_LED = 0;
 495:../main.c     ****     while (! IsDmaTransferDone())
 496:../main.c     **** 	;
 497:../main.c     **** 
 498:../main.c     ****     /* Bring the LEUART and its DMA into a quiescent state */
 499:../main.c     ****     drvLEUART_Deinit();
 500:../main.c     **** 
 501:../main.c     ****     /*
 502:../main.c     ****      * Verify if FLASH firmware image exists and start it.
 503:../main.c     ****      */
 504:../main.c     ****     errorCode = StartFirmware(); // never returns - except if there is no image!
 505:../main.c     **** 
 506:../main.c     ****     while (true)
 507:../main.c     ****     {
 508:../main.c     **** 	msDelay(800);		// pause
 509:../main.c     **** 
 510:../main.c     **** 	for (n = 0;  n < errorCode;  n++)
 511:../main.c     **** 	{
 512:../main.c     **** 	    POWER_LED = 1;	// LED ON
 513:../main.c     **** 	    msDelay(200);
 514:../main.c     **** 	    POWER_LED = 0;	// LED OFF
 515:../main.c     **** 	    msDelay(200);
 516:../main.c     **** 	}
 517:../main.c     **** 
 518:../main.c     **** 	msDelay(1000);		// pause
 519:../main.c     **** 
 520:../main.c     **** 	/*
 521:../main.c     **** 	 * To be able to detect another update image, we simply
 522:../main.c     **** 	 * perform a RESET.
 523:../main.c     **** 	 */
 524:../main.c     **** 	NVIC_SystemReset();
 525:../main.c     ****     }
 526:../main.c     **** }
 527:../main.c     **** 
 528:../main.c     **** 
 529:../main.c     **** /******************************************************************************
 530:../main.c     ****  * @brief   Configure Clocks
 531:../main.c     ****  *
 532:../main.c     ****  * This local routine is called once from main() to configure all required
 533:../main.c     ****  * clocks of the EFM32 device.
 534:../main.c     ****  *
 535:../main.c     ****  *****************************************************************************/
 536:../main.c     **** static void cmuSetup(void)
 537:../main.c     **** {
 538:../main.c     ****     /* Start LFXO and wait until it is stable */
 539:../main.c     ****     CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
 540:../main.c     **** 
 541:../main.c     **** #if USE_EXT_32MHZ_CLOCK
 542:../main.c     ****     /* Start HFXO and wait until it is stable */
 543:../main.c     ****     CMU_OscillatorEnable(cmuOsc_HFXO, true, true);
 544:../main.c     **** 
 545:../main.c     ****     /* Select HFXO as clock source for HFCLK */
ARM GAS  /tmp/cc6pScoJ.s 			page 11


 546:../main.c     ****     CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);
 547:../main.c     **** 
 548:../main.c     ****     /* Disable HFRCO */
 549:../main.c     ****     CMU_OscillatorEnable(cmuOsc_HFRCO, false, false);
 550:../main.c     **** #endif
 551:../main.c     **** 
 552:../main.c     ****     /* Route the LFXO clock to the RTC and set the prescaler */
 553:../main.c     ****     CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);	// RTC, LETIMER
 554:../main.c     ****     CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFXO);	// LEUART0/1
 555:../main.c     ****     CMU_ClockEnable(cmuClock_RTC, true);
 556:../main.c     **** 
 557:../main.c     ****     /* Prescaler of 1 = 30 us of resolution and overflow each 8 min */
 558:../main.c     ****     CMU_ClockDivSet(cmuClock_RTC, cmuClkDiv_1);
 559:../main.c     **** 
 560:../main.c     ****     /* Enable clock to low energy modules */
 561:../main.c     ****     CMU_ClockEnable(cmuClock_CORELE, true);
 562:../main.c     **** 
 563:../main.c     ****     /* Enable clock for HF peripherals (ADC, DAC, I2C, TIMER, and USART) */
 564:../main.c     ****     CMU_ClockEnable(cmuClock_HFPER, true);
 565:../main.c     **** 
 566:../main.c     ****     /* Enable clock to GPIO */
 567:../main.c     ****     CMU_ClockEnable(cmuClock_GPIO, true);
 568:../main.c     **** }
 569:../main.c     **** 
 570:../main.c     **** 
 571:../main.c     **** /***************************************************************************//**
 572:../main.c     ****  *
 573:../main.c     ****  * @brief	Start Firmware
 574:../main.c     ****  *
 575:../main.c     ****  * This routine verifies if there is a firmware image programmed in FLASH
 576:../main.c     ****  * memory and starts it.
 577:../main.c     ****  *
 578:../main.c     ****  * @return
 579:../main.c     ****  * This routine usually does not return because it passes control to the
 580:../main.c     ****  * application.  However, if there was no valid firmware image found in the
 581:../main.c     ****  * FLASH, it returns error code 2.  If the FLASH is not programmed at all,
 582:../main.c     ****  * error code 1 is returned.
 583:../main.c     ****  *
 584:../main.c     ****  ******************************************************************************/
 585:../main.c     **** static int StartFirmware(void)
 586:../main.c     **** {
 587:../main.c     **** uint32_t *pInitialSP = (uint32_t *)(FIRMWARE_ADDRESS + 0);
 588:../main.c     **** uint32_t *pInitialPC = (uint32_t *)(FIRMWARE_ADDRESS + 4);
 589:../main.c     **** typedef void (*FCT_PTR) (void);
 590:../main.c     **** FCT_PTR	 pStartAppl;
 591:../main.c     **** uint32_t  initSP, initPC;
 592:../main.c     **** 
 593:../main.c     **** 
 594:../main.c     ****     /* Load initial SP, PC from application's Vector Table */
 595:../main.c     ****     initSP = *pInitialSP;
 596:../main.c     ****     initPC = *pInitialPC;
 597:../main.c     **** 
 598:../main.c     ****     /* Verify if values are valid */
 599:../main.c     ****     if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
 600:../main.c     **** 	return 1;
 601:../main.c     **** 
 602:../main.c     ****     if (initSP < SRAM_BASE         ||  initSP > SRAM_BASE  + SRAM_SIZE
ARM GAS  /tmp/cc6pScoJ.s 			page 12


 603:../main.c     ****     ||  initPC < FIRMWARE_ADDRESS  ||  initPC > FLASH_BASE + FLASH_SIZE)
 604:../main.c     **** 	return 2;
 605:../main.c     **** 
 606:../main.c     ****     /* Disable interrupts */
 607:../main.c     ****     __disable_irq();
 608:../main.c     **** 
 609:../main.c     ****     /* Start Application */
 610:../main.c     ****     SCB->VTOR = FIRMWARE_ADDRESS;
 611:../main.c     ****     __set_MSP(initSP);
 612:../main.c     ****     pStartAppl = (FCT_PTR)initPC;
 613:../main.c     **** 
 614:../main.c     ****     pStartAppl();
 615:../main.c     **** 
 616:../main.c     ****     return 9;		// shall never happen
 617:../main.c     **** }
 618:../main.c     **** 
 619:../main.c     **** 
 620:../main.c     **** /***************************************************************************//**
 621:../main.c     ****  *
 622:../main.c     ****  * @brief	Handler for RTC Interrupt
 623:../main.c     ****  *
 624:../main.c     ****  * This is the handler for the Real Time Counter (RTC) interrupt. It checks if
 625:../main.c     ****  * the <b>COMP0</b> which is used for the 1/2s base clock triggered.
 626:../main.c     ****  *
 627:../main.c     ****  ******************************************************************************/
 628:../main.c     **** void	RTC_IRQHandler (void)
 629:../main.c     **** {
  27              		.loc 1 629 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 10B5     		push	{r4, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
 630:../main.c     **** uint32_t	status;			// interrupt status flags
 631:../main.c     **** 
 632:../main.c     ****     /* get interrupt status and mask out disabled IRQs */
 633:../main.c     ****     status  = RTC->IF;
  35              		.loc 1 633 0
  36 0002 084C     		ldr	r4, .L7
  37 0004 2269     		ldr	r2, [r4, #16]
  38              	.LVL0:
 634:../main.c     ****     status &= RTC->IEN;
  39              		.loc 1 634 0
  40 0006 E369     		ldr	r3, [r4, #28]
  41              	.LVL1:
  42 0008 1340     		ands	r3, r3, r2
  43              	.LVL2:
 635:../main.c     **** 
 636:../main.c     ****     /* Check for COMP0 interrupt which occurs every second */
 637:../main.c     ****     if (status & RTC_IF_COMP0)
  44              		.loc 1 637 0
  45 000a 9B07     		lsls	r3, r3, #30
  46              	.LVL3:
  47 000c 09D5     		bpl	.L1
 638:../main.c     ****     {
ARM GAS  /tmp/cc6pScoJ.s 			page 13


 639:../main.c     **** 	/* Generate next COMP0 interrupt after another second */
 640:../main.c     **** 	RTC_CompareSet (0, (RTC->COMP0 + RTC_COUNTS_PER_SEC/2) & 0xFFFFFF);
  48              		.loc 1 640 0
  49 000e A168     		ldr	r1, [r4, #8]
  50 0010 0020     		movs	r0, #0
  51 0012 01F58041 		add	r1, r1, #16384
  52 0016 21F07F41 		bic	r1, r1, #-16777216
  53 001a FFF7FEFF 		bl	RTC_CompareSet
  54              	.LVL4:
 641:../main.c     **** 	RTC->IFC = RTC_IFC_COMP0;
  55              		.loc 1 641 0
  56 001e 0223     		movs	r3, #2
  57 0020 A361     		str	r3, [r4, #24]
  58              	.L1:
  59 0022 10BD     		pop	{r4, pc}
  60              	.L8:
  61              		.align	2
  62              	.L7:
  63 0024 00000840 		.word	1074266112
  64              		.cfi_endproc
  65              	.LFE121:
  67              		.section	.text.msDelay,"ax",%progbits
  68              		.align	1
  69              		.global	msDelay
  70              		.thumb
  71              		.thumb_func
  73              	msDelay:
  74              	.LFB122:
 642:../main.c     ****     }
 643:../main.c     **** }
 644:../main.c     **** 
 645:../main.c     **** 
 646:../main.c     **** /***************************************************************************//**
 647:../main.c     ****  *
 648:../main.c     ****  * @brief	Delay for milliseconds
 649:../main.c     ****  *
 650:../main.c     ****  * This is a delay routine, it returns to the caller after the specified amount
 651:../main.c     ****  * of milliseconds has elapsed.
 652:../main.c     ****  *
 653:../main.c     ****  * @note
 654:../main.c     ****  * This routine permanently reads the Real Time Counter until the calculated
 655:../main.c     ****  * value has been reached.  No interrupts are used, i.e. the CPU is kept busy
 656:../main.c     ****  * all the time.  Usually delay routines are only used for hardware-related
 657:../main.c     ****  * timing constraints and must not be called from interrupt routines.
 658:../main.c     ****  *
 659:../main.c     ****  * @param[in] ms
 660:../main.c     ****  *	Duration in milliseconds to wait before returning to the caller.
 661:../main.c     ****  *
 662:../main.c     ****  ******************************************************************************/
 663:../main.c     **** void	msDelay (uint32_t ms)
 664:../main.c     **** {
  75              		.loc 1 664 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL5:
 665:../main.c     **** uint32_t baseCnt, duration;
ARM GAS  /tmp/cc6pScoJ.s 			page 14


 666:../main.c     **** 
 667:../main.c     ****     /* Parameter check */
 668:../main.c     ****     EFM_ASSERT (0 < ms  &&  ms <= MAX_VALUE_FOR_32BIT);
  80              		.loc 1 668 0
  81 0000 0C4B     		ldr	r3, .L13
  82 0002 421E     		subs	r2, r0, #1
  83 0004 9A42     		cmp	r2, r3
 664:../main.c     **** {
  84              		.loc 1 664 0
  85 0006 10B5     		push	{r4, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 4, -8
  88              		.cfi_offset 14, -4
 664:../main.c     **** {
  89              		.loc 1 664 0
  90 0008 0446     		mov	r4, r0
  91              		.loc 1 668 0
  92 000a 04D9     		bls	.L10
  93              		.loc 1 668 0 is_stmt 0 discriminator 1
  94 000c 0A48     		ldr	r0, .L13+4
  95              	.LVL6:
  96 000e 4FF42771 		mov	r1, #668
  97 0012 FFF7FEFF 		bl	assertEFM
  98              	.LVL7:
  99              	.L10:
 669:../main.c     **** 
 670:../main.c     ****     /* Get current time counter value */
 671:../main.c     ****     baseCnt = RTC->CNT;
 100              		.loc 1 671 0 is_stmt 1
 101 0016 094B     		ldr	r3, .L13+8
 672:../main.c     **** 
 673:../main.c     ****     /* Convert the [ms] value in number of ticks */
 674:../main.c     ****     duration = ((ms * RTC_COUNTS_PER_SEC) / 1000) & 0x00FFFFFF;
 102              		.loc 1 674 0
 103 0018 E403     		lsls	r4, r4, #15
 104              	.LVL8:
 105 001a 4FF47A72 		mov	r2, #1000
 671:../main.c     ****     baseCnt = RTC->CNT;
 106              		.loc 1 671 0
 107 001e 5968     		ldr	r1, [r3, #4]
 108              	.LVL9:
 109              		.loc 1 674 0
 110 0020 B4FBF2F4 		udiv	r4, r4, r2
 111              	.LVL10:
 112              	.L12:
 675:../main.c     **** 
 676:../main.c     ****     /* See how much ticks have been elapsed */
 677:../main.c     ****     while (((RTC->CNT - baseCnt) & 0x00FFFFFF) < duration)
 113              		.loc 1 677 0 discriminator 1
 114 0024 5A68     		ldr	r2, [r3, #4]
 115 0026 521A     		subs	r2, r2, r1
 116 0028 22F07F42 		bic	r2, r2, #-16777216
 117 002c A242     		cmp	r2, r4
 118 002e F9D3     		bcc	.L12
 678:../main.c     **** 	;
 679:../main.c     **** }
 119              		.loc 1 679 0
ARM GAS  /tmp/cc6pScoJ.s 			page 15


 120 0030 10BD     		pop	{r4, pc}
 121              	.LVL11:
 122              	.L14:
 123 0032 00BF     		.align	2
 124              	.L13:
 125 0034 FEFF0100 		.word	131070
 126 0038 00000000 		.word	.LC0
 127 003c 00000840 		.word	1074266112
 128              		.cfi_endproc
 129              	.LFE122:
 131              		.section	.text.startup.main,"ax",%progbits
 132              		.align	1
 133              		.global	main
 134              		.thumb
 135              		.thumb_func
 137              	main:
 138              	.LFB118:
 260:../main.c     **** {
 139              		.loc 1 260 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 80
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              	.LVL12:
 144 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 145              		.cfi_def_cfa_offset 20
 146              		.cfi_offset 4, -20
 147              		.cfi_offset 5, -16
 148              		.cfi_offset 6, -12
 149              		.cfi_offset 7, -8
 150              		.cfi_offset 14, -4
 151              	.LBB34:
 152              	.LBB35:
 153              		.file 2 "../emlib/inc/em_chip.h"
   1:../emlib/inc/em_chip.h **** /***************************************************************************//**
   2:../emlib/inc/em_chip.h ****  * @file
   3:../emlib/inc/em_chip.h ****  * @brief Chip Initialization API
   4:../emlib/inc/em_chip.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_chip.h ****  * @version 3.20.2
   6:../emlib/inc/em_chip.h ****  *******************************************************************************
   7:../emlib/inc/em_chip.h ****  * @section License
   8:../emlib/inc/em_chip.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_chip.h ****  *******************************************************************************
  10:../emlib/inc/em_chip.h ****  *
  11:../emlib/inc/em_chip.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_chip.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_chip.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_chip.h ****  *
  15:../emlib/inc/em_chip.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_chip.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_chip.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_chip.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_chip.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_chip.h ****  *
  21:../emlib/inc/em_chip.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_chip.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_chip.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_chip.h ****  * including, but not limited to, any implied warranties of merchantability
ARM GAS  /tmp/cc6pScoJ.s 			page 16


  25:../emlib/inc/em_chip.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_chip.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_chip.h ****  *
  28:../emlib/inc/em_chip.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_chip.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_chip.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_chip.h ****  *
  32:../emlib/inc/em_chip.h ****  ******************************************************************************/
  33:../emlib/inc/em_chip.h **** #ifndef __EM_CHIP_H
  34:../emlib/inc/em_chip.h **** #define __EM_CHIP_H
  35:../emlib/inc/em_chip.h **** 
  36:../emlib/inc/em_chip.h **** #include "em_device.h"
  37:../emlib/inc/em_chip.h **** #include "em_system.h"
  38:../emlib/inc/em_chip.h **** 
  39:../emlib/inc/em_chip.h **** #ifdef __cplusplus
  40:../emlib/inc/em_chip.h **** extern "C" {
  41:../emlib/inc/em_chip.h **** #endif
  42:../emlib/inc/em_chip.h **** 
  43:../emlib/inc/em_chip.h **** /***************************************************************************//**
  44:../emlib/inc/em_chip.h ****  * @addtogroup EM_Library
  45:../emlib/inc/em_chip.h ****  * @{
  46:../emlib/inc/em_chip.h ****  ******************************************************************************/
  47:../emlib/inc/em_chip.h **** 
  48:../emlib/inc/em_chip.h **** /***************************************************************************//**
  49:../emlib/inc/em_chip.h ****  * @addtogroup CHIP
  50:../emlib/inc/em_chip.h ****  * @brief Chip Initialization API
  51:../emlib/inc/em_chip.h ****  * @{
  52:../emlib/inc/em_chip.h ****  ******************************************************************************/
  53:../emlib/inc/em_chip.h **** 
  54:../emlib/inc/em_chip.h **** /**************************************************************************//**
  55:../emlib/inc/em_chip.h ****  * @brief
  56:../emlib/inc/em_chip.h ****  *   Chip initialization routine for revision errata workarounds
  57:../emlib/inc/em_chip.h ****  *
  58:../emlib/inc/em_chip.h ****  * This init function will configure the EFM32 device to a state where it is
  59:../emlib/inc/em_chip.h ****  * as similar as later revisions as possible, to improve software compatibility
  60:../emlib/inc/em_chip.h ****  * with newer parts. See the device specific errata for details.
  61:../emlib/inc/em_chip.h ****  *****************************************************************************/
  62:../emlib/inc/em_chip.h **** __STATIC_INLINE void CHIP_Init(void)
  63:../emlib/inc/em_chip.h **** {
  64:../emlib/inc/em_chip.h **** #if defined(_EFM32_GECKO_FAMILY)
  65:../emlib/inc/em_chip.h ****   uint32_t                    rev;
  66:../emlib/inc/em_chip.h ****   SYSTEM_ChipRevision_TypeDef chipRev;
  67:../emlib/inc/em_chip.h ****   volatile uint32_t           *reg;
  68:../emlib/inc/em_chip.h **** 
  69:../emlib/inc/em_chip.h ****   rev = *(volatile uint32_t *)(0x0FE081FC);
 154              		.loc 2 69 0
 155 0002 A84B     		ldr	r3, .L68
 156              	.LBE35:
 157              	.LBE34:
 260:../main.c     **** {
 158              		.loc 1 260 0
 159 0004 95B0     		sub	sp, sp, #84
 160              		.cfi_def_cfa_offset 104
 161              	.LBB38:
 162              	.LBB37:
 163              		.loc 2 69 0
 164 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc6pScoJ.s 			page 17


 165              	.LVL13:
  70:../emlib/inc/em_chip.h ****   /* Engineering Sample calibration setup */
  71:../emlib/inc/em_chip.h ****   if ((rev >> 24) == 0)
 166              		.loc 2 71 0
 167 0008 1B0E     		lsrs	r3, r3, #24
 168              	.LVL14:
 169 000a 10D1     		bne	.L16
 170              	.LVL15:
  72:../emlib/inc/em_chip.h ****   {
  73:../emlib/inc/em_chip.h ****     reg   = (volatile uint32_t *)0x400CA00C;
  74:../emlib/inc/em_chip.h ****     *reg &= ~(0x70UL);
 171              		.loc 2 74 0
 172 000c A64B     		ldr	r3, .L68+4
 173 000e 1A68     		ldr	r2, [r3]
 174 0010 22F07002 		bic	r2, r2, #112
 175 0014 1A60     		str	r2, [r3]
 176              	.LVL16:
  75:../emlib/inc/em_chip.h ****     /* DREG */
  76:../emlib/inc/em_chip.h ****     reg   = (volatile uint32_t *)0x400C6020;
  77:../emlib/inc/em_chip.h ****     *reg &= ~(0xE0000000UL);
 177              		.loc 2 77 0
 178 0016 A3F57F53 		sub	r3, r3, #16320
 179 001a 2C3B     		subs	r3, r3, #44
 180 001c 1A68     		ldr	r2, [r3]
 181 001e 22F06042 		bic	r2, r2, #-536870912
 182 0022 1A60     		str	r2, [r3]
  78:../emlib/inc/em_chip.h ****     *reg |= ~(7UL << 25);
 183              		.loc 2 78 0
 184 0024 1A68     		ldr	r2, [r3]
 185 0026 62F06062 		orn	r2, r2, #234881024
 186 002a 1A60     		str	r2, [r3]
 187 002c 01E0     		b	.L17
 188              	.LVL17:
 189              	.L16:
  79:../emlib/inc/em_chip.h ****   }
  80:../emlib/inc/em_chip.h ****   if ((rev >> 24) <= 3)
 190              		.loc 2 80 0
 191 002e 032B     		cmp	r3, #3
 192 0030 0BD8     		bhi	.L18
 193              	.L17:
 194              	.LVL18:
  81:../emlib/inc/em_chip.h ****   {
  82:../emlib/inc/em_chip.h ****     /* DREG */
  83:../emlib/inc/em_chip.h ****     reg   = (volatile uint32_t *)0x400C6020;
  84:../emlib/inc/em_chip.h ****     *reg &= ~(0x00001F80UL);
 195              		.loc 2 84 0
 196 0032 9E4B     		ldr	r3, .L68+8
 197 0034 1A68     		ldr	r2, [r3]
 198 0036 22F4FC52 		bic	r2, r2, #8064
 199 003a 1A60     		str	r2, [r3]
 200              	.LVL19:
  85:../emlib/inc/em_chip.h ****     /* Update CMU reset values */
  86:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x400C8040;
  87:../emlib/inc/em_chip.h ****     *reg = 0;
 201              		.loc 2 87 0
 202 003c 9C4A     		ldr	r2, .L68+12
 203 003e 0023     		movs	r3, #0
ARM GAS  /tmp/cc6pScoJ.s 			page 18


 204 0040 1360     		str	r3, [r2]
 205              	.LVL20:
  88:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x400C8044;
  89:../emlib/inc/em_chip.h ****     *reg = 0;
 206              		.loc 2 89 0
 207 0042 5360     		str	r3, [r2, #4]
 208              	.LVL21:
  90:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x400C8058;
  91:../emlib/inc/em_chip.h ****     *reg = 0;
 209              		.loc 2 91 0
 210 0044 9361     		str	r3, [r2, #24]
 211              	.LVL22:
  92:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x400C8060;
  93:../emlib/inc/em_chip.h ****     *reg = 0;
 212              		.loc 2 93 0
 213 0046 1362     		str	r3, [r2, #32]
 214              	.LVL23:
  94:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x400C8078;
  95:../emlib/inc/em_chip.h ****     *reg = 0;
 215              		.loc 2 95 0
 216 0048 9363     		str	r3, [r2, #56]
 217              	.LVL24:
 218              	.L18:
  96:../emlib/inc/em_chip.h ****   }
  97:../emlib/inc/em_chip.h **** 
  98:../emlib/inc/em_chip.h ****   SYSTEM_ChipRevisionGet(&chipRev);
 219              		.loc 2 98 0
 220 004a 0AA8     		add	r0, sp, #40
 221 004c FFF7FEFF 		bl	SYSTEM_ChipRevisionGet
 222              	.LVL25:
  99:../emlib/inc/em_chip.h ****   if (chipRev.major == 0x01)
 223              		.loc 2 99 0
 224 0050 9DF82830 		ldrb	r3, [sp, #40]	@ zero_extendqisi2
 225 0054 012B     		cmp	r3, #1
 226 0056 0FD1     		bne	.L19
 100:../emlib/inc/em_chip.h ****   {
 101:../emlib/inc/em_chip.h ****     /* Rev A errata handling for EM2/3. Must enable DMA clock in order for EM2/3 */
 102:../emlib/inc/em_chip.h ****     /* to work. This will be fixed in later chip revisions, so only do for rev A. */
 103:../emlib/inc/em_chip.h ****     if (chipRev.minor == 00)
 227              		.loc 2 103 0
 228 0058 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 229 005c 2BB9     		cbnz	r3, .L20
 230              	.LVL26:
 104:../emlib/inc/em_chip.h ****     {
 105:../emlib/inc/em_chip.h ****       reg   = (volatile uint32_t *)0x400C8040;
 106:../emlib/inc/em_chip.h ****       *reg |= 0x2;
 231              		.loc 2 106 0
 232 005e 944B     		ldr	r3, .L68+12
 233 0060 1A68     		ldr	r2, [r3]
 234 0062 42F00202 		orr	r2, r2, #2
 235 0066 1A60     		str	r2, [r3]
 236 0068 01E0     		b	.L21
 237              	.LVL27:
 238              	.L20:
 107:../emlib/inc/em_chip.h ****     }
 108:../emlib/inc/em_chip.h **** 
 109:../emlib/inc/em_chip.h ****     /* Rev A+B errata handling for I2C when using EM2/3. USART0 clock must be enabled */
ARM GAS  /tmp/cc6pScoJ.s 			page 19


 110:../emlib/inc/em_chip.h ****     /* after waking up from EM2/EM3 in order for I2C to work. This will be fixed in */
 111:../emlib/inc/em_chip.h ****     /* later chip revisions, so only do for rev A+B. */
 112:../emlib/inc/em_chip.h ****     if (chipRev.minor <= 0x01)
 239              		.loc 2 112 0
 240 006a 012B     		cmp	r3, #1
 241 006c 04D8     		bhi	.L19
 242              	.L21:
 243              	.LVL28:
 113:../emlib/inc/em_chip.h ****     {
 114:../emlib/inc/em_chip.h ****       reg   = (volatile uint32_t *)0x400C8044;
 115:../emlib/inc/em_chip.h ****       *reg |= 0x1;
 244              		.loc 2 115 0
 245 006e 914B     		ldr	r3, .L68+16
 246 0070 1A68     		ldr	r2, [r3]
 247 0072 42F00102 		orr	r2, r2, #1
 248 0076 1A60     		str	r2, [r3]
 249              	.LVL29:
 250              	.L19:
 116:../emlib/inc/em_chip.h ****     }
 117:../emlib/inc/em_chip.h ****   }
 118:../emlib/inc/em_chip.h ****   /* Ensure correct ADC/DAC calibration value */
 119:../emlib/inc/em_chip.h ****   rev = *(volatile uint32_t *)0x0FE081F0;
 251              		.loc 2 119 0
 252 0078 8F4B     		ldr	r3, .L68+20
 253 007a 1A68     		ldr	r2, [r3]
 254              	.LVL30:
 120:../emlib/inc/em_chip.h ****   if (rev < 0x4C8ABA00)
 255              		.loc 2 120 0
 256 007c 8F4B     		ldr	r3, .L68+24
 257 007e 9A42     		cmp	r2, r3
 258 0080 20D8     		bhi	.L22
 259              	.LVL31:
 260              	.LBB36:
 121:../emlib/inc/em_chip.h ****   {
 122:../emlib/inc/em_chip.h ****     uint32_t cal;
 123:../emlib/inc/em_chip.h **** 
 124:../emlib/inc/em_chip.h ****     /* Enable ADC/DAC clocks */
 125:../emlib/inc/em_chip.h ****     reg   = (volatile uint32_t *)0x400C8044UL;
 126:../emlib/inc/em_chip.h ****     *reg |= (1 << 14 | 1 << 11);
 261              		.loc 2 126 0
 262 0082 8C4B     		ldr	r3, .L68+16
 263 0084 1A68     		ldr	r2, [r3]
 264              	.LVL32:
 265 0086 42F49042 		orr	r2, r2, #18432
 266 008a 1A60     		str	r2, [r3]
 127:../emlib/inc/em_chip.h **** 
 128:../emlib/inc/em_chip.h ****     /* Retrive calibration values */
 129:../emlib/inc/em_chip.h ****     cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
 267              		.loc 2 129 0
 268 008c 8C4A     		ldr	r2, .L68+28
 269 008e 1068     		ldr	r0, [r2]
 130:../emlib/inc/em_chip.h ****            8) << 24;
 131:../emlib/inc/em_chip.h **** 
 132:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
 270              		.loc 2 132 0
 271 0090 1168     		ldr	r1, [r2]
 133:../emlib/inc/em_chip.h ****             0) << 16;
ARM GAS  /tmp/cc6pScoJ.s 			page 20


 134:../emlib/inc/em_chip.h **** 
 135:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
 272              		.loc 2 135 0
 273 0092 1568     		ldr	r5, [r2]
 136:../emlib/inc/em_chip.h ****             8) << 8;
 137:../emlib/inc/em_chip.h **** 
 138:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
 274              		.loc 2 138 0
 275 0094 1468     		ldr	r4, [r2]
 136:../emlib/inc/em_chip.h ****             8) << 8;
 276              		.loc 2 136 0
 277 0096 05F4FE42 		and	r2, r5, #32512
 139:../emlib/inc/em_chip.h ****             0) << 0;
 278              		.loc 2 139 0
 279 009a 04F07F04 		and	r4, r4, #127
 132:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
 280              		.loc 2 132 0
 281 009e 2243     		orrs	r2, r2, r4
 282 00a0 01F07F01 		and	r1, r1, #127
 135:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
 283              		.loc 2 135 0
 284 00a4 42EA0141 		orr	r1, r2, r1, lsl #16
 129:../emlib/inc/em_chip.h ****     cal = ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x00007F00UL) >>
 285              		.loc 2 129 0
 286 00a8 C0F30620 		ubfx	r0, r0, #8, #7
 287              	.LVL33:
 140:../emlib/inc/em_chip.h **** 
 141:../emlib/inc/em_chip.h ****     /* ADC0->CAL = 1.25 reference */
 142:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)0x40002034UL;
 143:../emlib/inc/em_chip.h ****     *reg = cal;
 288              		.loc 2 143 0
 289 00ac 854A     		ldr	r2, .L68+32
 138:../emlib/inc/em_chip.h ****     cal |= ((*(volatile uint32_t *)(0x0FE081B4UL) & 0x0000007FUL) >>
 290              		.loc 2 138 0
 291 00ae 41EA0061 		orr	r1, r1, r0, lsl #24
 292              	.LVL34:
 293              		.loc 2 143 0
 294 00b2 1160     		str	r1, [r2]
 295              	.LVL35:
 144:../emlib/inc/em_chip.h **** 
 145:../emlib/inc/em_chip.h ****     /* DAC0->CAL = 1.25 reference */
 146:../emlib/inc/em_chip.h ****     reg  = (volatile uint32_t *)(0x4000402CUL);
 147:../emlib/inc/em_chip.h ****     cal  = *(volatile uint32_t *)0x0FE081C8UL;
 296              		.loc 2 147 0
 297 00b4 844A     		ldr	r2, .L68+36
 298 00b6 1168     		ldr	r1, [r2]
 299              	.LVL36:
 148:../emlib/inc/em_chip.h ****     *reg = cal;
 300              		.loc 2 148 0
 301 00b8 844A     		ldr	r2, .L68+40
 302 00ba 1160     		str	r1, [r2]
 303              	.LVL37:
 149:../emlib/inc/em_chip.h **** 
 150:../emlib/inc/em_chip.h ****     /* Turn off ADC/DAC clocks */
 151:../emlib/inc/em_chip.h ****     reg   = (volatile uint32_t *)0x400C8044UL;
 152:../emlib/inc/em_chip.h ****     *reg &= ~(1 << 14 | 1 << 11);
 304              		.loc 2 152 0
ARM GAS  /tmp/cc6pScoJ.s 			page 21


 305 00bc 1A68     		ldr	r2, [r3]
 306 00be 22F49042 		bic	r2, r2, #18432
 307 00c2 1A60     		str	r2, [r3]
 308              	.LVL38:
 309              	.L22:
 310              	.LBE36:
 311              	.LBE37:
 312              	.LBE38:
 313              	.LBB39:
 314              	.LBB40:
 539:../main.c     ****     CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
 315              		.loc 1 539 0
 316 00c4 0121     		movs	r1, #1
 317 00c6 0A46     		mov	r2, r1
 318 00c8 0020     		movs	r0, #0
 319 00ca FFF7FEFF 		bl	CMU_OscillatorEnable
 320              	.LVL39:
 553:../main.c     ****     CMU_ClockSelectSet(cmuClock_LFA, cmuSelect_LFXO);	// RTC, LETIMER
 321              		.loc 1 553 0
 322 00ce 8048     		ldr	r0, .L68+44
 323 00d0 0221     		movs	r1, #2
 324 00d2 FFF7FEFF 		bl	CMU_ClockSelectSet
 325              	.LVL40:
 554:../main.c     ****     CMU_ClockSelectSet(cmuClock_LFB, cmuSelect_LFXO);	// LEUART0/1
 326              		.loc 1 554 0
 327 00d6 7F48     		ldr	r0, .L68+48
 328 00d8 0221     		movs	r1, #2
 329 00da FFF7FEFF 		bl	CMU_ClockSelectSet
 330              	.LVL41:
 555:../main.c     ****     CMU_ClockEnable(cmuClock_RTC, true);
 331              		.loc 1 555 0
 332 00de 7E48     		ldr	r0, .L68+52
 333 00e0 0121     		movs	r1, #1
 334 00e2 FFF7FEFF 		bl	CMU_ClockEnable
 335              	.LVL42:
 558:../main.c     ****     CMU_ClockDivSet(cmuClock_RTC, cmuClkDiv_1);
 336              		.loc 1 558 0
 337 00e6 7C48     		ldr	r0, .L68+52
 338 00e8 0121     		movs	r1, #1
 339 00ea FFF7FEFF 		bl	CMU_ClockDivSet
 340              	.LVL43:
 561:../main.c     ****     CMU_ClockEnable(cmuClock_CORELE, true);
 341              		.loc 1 561 0
 342 00ee 7B48     		ldr	r0, .L68+56
 343 00f0 0121     		movs	r1, #1
 344 00f2 FFF7FEFF 		bl	CMU_ClockEnable
 345              	.LVL44:
 564:../main.c     ****     CMU_ClockEnable(cmuClock_HFPER, true);
 346              		.loc 1 564 0
 347 00f6 7A48     		ldr	r0, .L68+60
 348 00f8 0121     		movs	r1, #1
 349 00fa FFF7FEFF 		bl	CMU_ClockEnable
 350              	.LVL45:
 567:../main.c     ****     CMU_ClockEnable(cmuClock_GPIO, true);
 351              		.loc 1 567 0
 352 00fe 7948     		ldr	r0, .L68+64
 353 0100 0121     		movs	r1, #1
ARM GAS  /tmp/cc6pScoJ.s 			page 22


 354 0102 FFF7FEFF 		bl	CMU_ClockEnable
 355              	.LVL46:
 356              	.LBE40:
 357              	.LBE39:
 272:../main.c     ****     CMU_ClockEnable (cmuClock_GPIO, true);
 358              		.loc 1 272 0
 359 0106 7748     		ldr	r0, .L68+64
 360 0108 0121     		movs	r1, #1
 361 010a FFF7FEFF 		bl	CMU_ClockEnable
 362              	.LVL47:
 275:../main.c     ****     GPIO_PinModeSet (POWER_LED_PORT, POWER_LED_PIN, gpioModePushPull, 1);
 363              		.loc 1 275 0
 364 010e 0020     		movs	r0, #0
 365 0110 0221     		movs	r1, #2
 366 0112 0422     		movs	r2, #4
 367 0114 0123     		movs	r3, #1
 368 0116 FFF7FEFF 		bl	GPIO_PinModeSet
 369              	.LVL48:
 278:../main.c     ****     GPIO_PinModeSet (gpioPortA, 3, gpioModeInput, 0);
 370              		.loc 1 278 0
 371 011a 0020     		movs	r0, #0
 372 011c 0346     		mov	r3, r0
 373 011e 0321     		movs	r1, #3
 374 0120 0122     		movs	r2, #1
 375 0122 FFF7FEFF 		bl	GPIO_PinModeSet
 376              	.LVL49:
 279:../main.c     ****     GPIO_PinModeSet (gpioPortC,15, gpioModeInput, 0);
 377              		.loc 1 279 0
 378 0126 0F21     		movs	r1, #15
 379 0128 0122     		movs	r2, #1
 380 012a 0220     		movs	r0, #2
 381 012c 0023     		movs	r3, #0
 382 012e FFF7FEFF 		bl	GPIO_PinModeSet
 383              	.LVL50:
 283:../main.c     ****     rtcInit.debugRun = false;
 384              		.loc 1 283 0
 385 0132 0023     		movs	r3, #0
 285:../main.c     ****     rtcInit.enable = false;
 386              		.loc 1 285 0
 387 0134 14A8     		add	r0, sp, #80
 388 0136 00F84C3D 		strb	r3, [r0, #-76]!
 283:../main.c     ****     rtcInit.debugRun = false;
 389              		.loc 1 283 0
 390 013a 8DF80530 		strb	r3, [sp, #5]
 284:../main.c     ****     rtcInit.comp0Top = false;
 391              		.loc 1 284 0
 392 013e 8DF80630 		strb	r3, [sp, #6]
 288:../main.c     ****     RTC_Init (&rtcInit);
 393              		.loc 1 288 0
 394 0142 FFF7FEFF 		bl	RTC_Init
 395              	.LVL51:
 396              	.LBB41:
 397              	.LBB42:
 398              		.file 3 "../emlib/inc/em_rtc.h"
   1:../emlib/inc/em_rtc.h **** /***************************************************************************//**
   2:../emlib/inc/em_rtc.h ****  * @file
   3:../emlib/inc/em_rtc.h ****  * @brief Real Time Counter (RTC) peripheral API
ARM GAS  /tmp/cc6pScoJ.s 			page 23


   4:../emlib/inc/em_rtc.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_rtc.h ****  * @version 3.20.2
   6:../emlib/inc/em_rtc.h ****  *******************************************************************************
   7:../emlib/inc/em_rtc.h ****  * @section License
   8:../emlib/inc/em_rtc.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_rtc.h ****  *******************************************************************************
  10:../emlib/inc/em_rtc.h ****  *
  11:../emlib/inc/em_rtc.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_rtc.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_rtc.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_rtc.h ****  *
  15:../emlib/inc/em_rtc.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_rtc.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_rtc.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_rtc.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_rtc.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_rtc.h ****  *
  21:../emlib/inc/em_rtc.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_rtc.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_rtc.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_rtc.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_rtc.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_rtc.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_rtc.h ****  *
  28:../emlib/inc/em_rtc.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_rtc.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_rtc.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_rtc.h ****  *
  32:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  33:../emlib/inc/em_rtc.h **** #ifndef __EM_RTC_H
  34:../emlib/inc/em_rtc.h **** #define __EM_RTC_H
  35:../emlib/inc/em_rtc.h **** 
  36:../emlib/inc/em_rtc.h **** #include "em_device.h"
  37:../emlib/inc/em_rtc.h **** #if defined(RTC_COUNT) && (RTC_COUNT > 0)
  38:../emlib/inc/em_rtc.h **** 
  39:../emlib/inc/em_rtc.h **** #include <stdbool.h>
  40:../emlib/inc/em_rtc.h **** 
  41:../emlib/inc/em_rtc.h **** #ifdef __cplusplus
  42:../emlib/inc/em_rtc.h **** extern "C" {
  43:../emlib/inc/em_rtc.h **** #endif
  44:../emlib/inc/em_rtc.h **** 
  45:../emlib/inc/em_rtc.h **** /***************************************************************************//**
  46:../emlib/inc/em_rtc.h ****  * @addtogroup EM_Library
  47:../emlib/inc/em_rtc.h ****  * @{
  48:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  49:../emlib/inc/em_rtc.h **** 
  50:../emlib/inc/em_rtc.h **** /***************************************************************************//**
  51:../emlib/inc/em_rtc.h ****  * @addtogroup RTC
  52:../emlib/inc/em_rtc.h ****  * @{
  53:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  54:../emlib/inc/em_rtc.h **** 
  55:../emlib/inc/em_rtc.h **** /*******************************************************************************
  56:../emlib/inc/em_rtc.h ****  *******************************   STRUCTS   ***********************************
  57:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  58:../emlib/inc/em_rtc.h **** 
  59:../emlib/inc/em_rtc.h **** /** RTC initialization structure. */
  60:../emlib/inc/em_rtc.h **** typedef struct
ARM GAS  /tmp/cc6pScoJ.s 			page 24


  61:../emlib/inc/em_rtc.h **** {
  62:../emlib/inc/em_rtc.h ****   bool enable;   /**< Start counting when init completed. */
  63:../emlib/inc/em_rtc.h ****   bool debugRun; /**< Counter shall keep running during debug halt. */
  64:../emlib/inc/em_rtc.h ****   bool comp0Top; /**< Use compare register 0 as max count value. */
  65:../emlib/inc/em_rtc.h **** } RTC_Init_TypeDef;
  66:../emlib/inc/em_rtc.h **** 
  67:../emlib/inc/em_rtc.h **** /** Suggested default config for RTC init structure. */
  68:../emlib/inc/em_rtc.h **** #define RTC_INIT_DEFAULT                                       \
  69:../emlib/inc/em_rtc.h ****   { true,    /* Start counting when init done */               \
  70:../emlib/inc/em_rtc.h ****     false,   /* Disable updating during debug halt */          \
  71:../emlib/inc/em_rtc.h ****     true     /* Restart counting from 0 when reaching COMP0 */ \
  72:../emlib/inc/em_rtc.h ****   }
  73:../emlib/inc/em_rtc.h **** 
  74:../emlib/inc/em_rtc.h **** 
  75:../emlib/inc/em_rtc.h **** /*******************************************************************************
  76:../emlib/inc/em_rtc.h ****  *****************************   PROTOTYPES   **********************************
  77:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  78:../emlib/inc/em_rtc.h **** 
  79:../emlib/inc/em_rtc.h **** uint32_t RTC_CompareGet(unsigned int comp);
  80:../emlib/inc/em_rtc.h **** void RTC_CompareSet(unsigned int comp, uint32_t value);
  81:../emlib/inc/em_rtc.h **** 
  82:../emlib/inc/em_rtc.h **** /***************************************************************************//**
  83:../emlib/inc/em_rtc.h ****  * @brief
  84:../emlib/inc/em_rtc.h ****  *   Get RTC counter value.
  85:../emlib/inc/em_rtc.h ****  *
  86:../emlib/inc/em_rtc.h ****  * @return
  87:../emlib/inc/em_rtc.h ****  *   Current RTC counter value.
  88:../emlib/inc/em_rtc.h ****  ******************************************************************************/
  89:../emlib/inc/em_rtc.h **** __STATIC_INLINE uint32_t RTC_CounterGet(void)
  90:../emlib/inc/em_rtc.h **** {
  91:../emlib/inc/em_rtc.h ****   return(RTC->CNT);
  92:../emlib/inc/em_rtc.h **** }
  93:../emlib/inc/em_rtc.h **** 
  94:../emlib/inc/em_rtc.h **** void RTC_CounterReset(void);
  95:../emlib/inc/em_rtc.h **** void RTC_Enable(bool enable);
  96:../emlib/inc/em_rtc.h **** void RTC_FreezeEnable(bool enable);
  97:../emlib/inc/em_rtc.h **** void RTC_Init(const RTC_Init_TypeDef *init);
  98:../emlib/inc/em_rtc.h **** 
  99:../emlib/inc/em_rtc.h **** /***************************************************************************//**
 100:../emlib/inc/em_rtc.h ****  * @brief
 101:../emlib/inc/em_rtc.h ****  *   Clear one or more pending RTC interrupts.
 102:../emlib/inc/em_rtc.h ****  *
 103:../emlib/inc/em_rtc.h ****  * @param[in] flags
 104:../emlib/inc/em_rtc.h ****  *   RTC interrupt sources to clear. Use a set of interrupt flags OR-ed
 105:../emlib/inc/em_rtc.h ****  *   together to clear multiple interrupt sources for the RTC module
 106:../emlib/inc/em_rtc.h ****  *   (RTC_IFS_nnn).
 107:../emlib/inc/em_rtc.h ****  ******************************************************************************/
 108:../emlib/inc/em_rtc.h **** __STATIC_INLINE void RTC_IntClear(uint32_t flags)
 109:../emlib/inc/em_rtc.h **** {
 110:../emlib/inc/em_rtc.h ****   RTC->IFC = flags;
 111:../emlib/inc/em_rtc.h **** }
 112:../emlib/inc/em_rtc.h **** 
 113:../emlib/inc/em_rtc.h **** 
 114:../emlib/inc/em_rtc.h **** /***************************************************************************//**
 115:../emlib/inc/em_rtc.h ****  * @brief
 116:../emlib/inc/em_rtc.h ****  *   Disable one or more RTC interrupts.
 117:../emlib/inc/em_rtc.h ****  *
ARM GAS  /tmp/cc6pScoJ.s 			page 25


 118:../emlib/inc/em_rtc.h ****  * @param[in] flags
 119:../emlib/inc/em_rtc.h ****  *   RTC interrupt sources to disable. Use a set of interrupt flags OR-ed
 120:../emlib/inc/em_rtc.h ****  *   together to disable multiple interrupt sources for the RTC module
 121:../emlib/inc/em_rtc.h ****  *   (RTC_IFS_nnn).
 122:../emlib/inc/em_rtc.h ****  ******************************************************************************/
 123:../emlib/inc/em_rtc.h **** __STATIC_INLINE void RTC_IntDisable(uint32_t flags)
 124:../emlib/inc/em_rtc.h **** {
 125:../emlib/inc/em_rtc.h ****   RTC->IEN &= ~(flags);
 126:../emlib/inc/em_rtc.h **** }
 127:../emlib/inc/em_rtc.h **** 
 128:../emlib/inc/em_rtc.h **** 
 129:../emlib/inc/em_rtc.h **** /***************************************************************************//**
 130:../emlib/inc/em_rtc.h ****  * @brief
 131:../emlib/inc/em_rtc.h ****  *   Enable one or more RTC interrupts.
 132:../emlib/inc/em_rtc.h ****  *
 133:../emlib/inc/em_rtc.h ****  * @note
 134:../emlib/inc/em_rtc.h ****  *   Depending on the use, a pending interrupt may already be set prior to
 135:../emlib/inc/em_rtc.h ****  *   enabling the interrupt. Consider using RTC_IntClear() prior to enabling
 136:../emlib/inc/em_rtc.h ****  *   if such a pending interrupt should be ignored.
 137:../emlib/inc/em_rtc.h ****  *
 138:../emlib/inc/em_rtc.h ****  * @param[in] flags
 139:../emlib/inc/em_rtc.h ****  *   RTC interrupt sources to enable. Use a set of interrupt flags OR-ed
 140:../emlib/inc/em_rtc.h ****  *   together to set multiple interrupt sources for the RTC module
 141:../emlib/inc/em_rtc.h ****  *   (RTC_IFS_nnn).
 142:../emlib/inc/em_rtc.h ****  ******************************************************************************/
 143:../emlib/inc/em_rtc.h **** __STATIC_INLINE void RTC_IntEnable(uint32_t flags)
 144:../emlib/inc/em_rtc.h **** {
 145:../emlib/inc/em_rtc.h ****   RTC->IEN |= flags;
 399              		.loc 3 145 0
 400 0146 684B     		ldr	r3, .L68+68
 401              	.LBE42:
 402              	.LBE41:
 299:../main.c     ****     RTC_Enable (true);
 403              		.loc 1 299 0
 404 0148 0120     		movs	r0, #1
 405              	.LBB44:
 406              	.LBB43:
 407              		.loc 3 145 0
 408 014a DA69     		ldr	r2, [r3, #28]
 409 014c 42F00202 		orr	r2, r2, #2
 410 0150 DA61     		str	r2, [r3, #28]
 411              	.LBE43:
 412              	.LBE44:
 299:../main.c     ****     RTC_Enable (true);
 413              		.loc 1 299 0
 414 0152 FFF7FEFF 		bl	RTC_Enable
 415              	.LVL52:
 416              	.LBB45:
 417              	.LBB46:
 418              		.file 4 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
ARM GAS  /tmp/cc6pScoJ.s 			page 26


   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
ARM GAS  /tmp/cc6pScoJ.s 			page 27


  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
ARM GAS  /tmp/cc6pScoJ.s 			page 28


 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
ARM GAS  /tmp/cc6pScoJ.s 			page 29


 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
ARM GAS  /tmp/cc6pScoJ.s 			page 30


 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
ARM GAS  /tmp/cc6pScoJ.s 			page 31


 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
ARM GAS  /tmp/cc6pScoJ.s 			page 32


 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
ARM GAS  /tmp/cc6pScoJ.s 			page 33


 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
ARM GAS  /tmp/cc6pScoJ.s 			page 34


 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
ARM GAS  /tmp/cc6pScoJ.s 			page 35


 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
ARM GAS  /tmp/cc6pScoJ.s 			page 36


 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
ARM GAS  /tmp/cc6pScoJ.s 			page 37


 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
ARM GAS  /tmp/cc6pScoJ.s 			page 38


 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
ARM GAS  /tmp/cc6pScoJ.s 			page 39


 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
ARM GAS  /tmp/cc6pScoJ.s 			page 40


 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 41


 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
ARM GAS  /tmp/cc6pScoJ.s 			page 42


 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
ARM GAS  /tmp/cc6pScoJ.s 			page 43


 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
ARM GAS  /tmp/cc6pScoJ.s 			page 44


1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
ARM GAS  /tmp/cc6pScoJ.s 			page 45


1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
ARM GAS  /tmp/cc6pScoJ.s 			page 46


1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
ARM GAS  /tmp/cc6pScoJ.s 			page 47


1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
ARM GAS  /tmp/cc6pScoJ.s 			page 48


1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 49


1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1326:../CMSIS/Include/core_cm3.h **** }
1327:../CMSIS/Include/core_cm3.h **** 
1328:../CMSIS/Include/core_cm3.h **** 
1329:../CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1330:../CMSIS/Include/core_cm3.h **** 
1331:../CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:../CMSIS/Include/core_cm3.h **** 
1333:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:../CMSIS/Include/core_cm3.h ****  */
1335:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:../CMSIS/Include/core_cm3.h **** {
1337:../CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1338:../CMSIS/Include/core_cm3.h **** }
1339:../CMSIS/Include/core_cm3.h **** 
1340:../CMSIS/Include/core_cm3.h **** 
1341:../CMSIS/Include/core_cm3.h **** /** \brief  Get Pending Interrupt
1342:../CMSIS/Include/core_cm3.h **** 
1343:../CMSIS/Include/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1344:../CMSIS/Include/core_cm3.h ****     for the specified interrupt.
1345:../CMSIS/Include/core_cm3.h **** 
1346:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1347:../CMSIS/Include/core_cm3.h **** 
1348:../CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not pending.
1349:../CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is pending.
1350:../CMSIS/Include/core_cm3.h ****  */
1351:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1352:../CMSIS/Include/core_cm3.h **** {
1353:../CMSIS/Include/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1354:../CMSIS/Include/core_cm3.h **** }
1355:../CMSIS/Include/core_cm3.h **** 
1356:../CMSIS/Include/core_cm3.h **** 
1357:../CMSIS/Include/core_cm3.h **** /** \brief  Set Pending Interrupt
1358:../CMSIS/Include/core_cm3.h **** 
1359:../CMSIS/Include/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1360:../CMSIS/Include/core_cm3.h **** 
1361:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1362:../CMSIS/Include/core_cm3.h ****  */
1363:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1364:../CMSIS/Include/core_cm3.h **** {
1365:../CMSIS/Include/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1366:../CMSIS/Include/core_cm3.h **** }
1367:../CMSIS/Include/core_cm3.h **** 
1368:../CMSIS/Include/core_cm3.h **** 
1369:../CMSIS/Include/core_cm3.h **** /** \brief  Clear Pending Interrupt
1370:../CMSIS/Include/core_cm3.h **** 
1371:../CMSIS/Include/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1372:../CMSIS/Include/core_cm3.h **** 
1373:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1374:../CMSIS/Include/core_cm3.h ****  */
1375:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/cc6pScoJ.s 			page 50


1376:../CMSIS/Include/core_cm3.h **** {
1377:../CMSIS/Include/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 419              		.loc 4 1377 0
 420 0156 654B     		ldr	r3, .L68+72
 421 0158 4FF08072 		mov	r2, #16777216
 422 015c C3F88021 		str	r2, [r3, #384]
 423              	.LVL53:
 424              	.LBE46:
 425              	.LBE45:
 306:../main.c     ****     drvLEUART_Init (9600);
 426              		.loc 1 306 0
 427 0160 4FF41650 		mov	r0, #9600
 428              	.LBB47:
 429              	.LBB48:
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 430              		.loc 4 1325 0
 431 0164 1A60     		str	r2, [r3]
 432              	.LBE48:
 433              	.LBE47:
 306:../main.c     ****     drvLEUART_Init (9600);
 434              		.loc 1 306 0
 435 0166 FFF7FEFF 		bl	drvLEUART_Init
 436              	.LVL54:
 309:../main.c     ****     dbgInit();
 437              		.loc 1 309 0
 438 016a FFF7FEFF 		bl	dbgInit
 439              	.LVL55:
 316:../main.c     ****     drvLEUART_puts("\n***** EFM32_Boot V");
 440              		.loc 1 316 0
 441 016e 6048     		ldr	r0, .L68+76
 442 0170 FFF7FEFF 		bl	drvLEUART_puts
 443              	.LVL56:
 318:../main.c     ****     drvLEUART_puts(prj.Version);
 444              		.loc 1 318 0
 445 0174 5F48     		ldr	r0, .L68+80
 446 0176 FFF7FEFF 		bl	drvLEUART_puts
 447              	.LVL57:
 319:../main.c     ****     drvLEUART_puts(" *****\n\n");
 448              		.loc 1 319 0
 449 017a 5F48     		ldr	r0, .L68+84
 450 017c FFF7FEFF 		bl	drvLEUART_puts
 451              	.LVL58:
 322:../main.c     ****     LogInit();
 452              		.loc 1 322 0
 453 0180 FFF7FEFF 		bl	LogInit
 454              	.LVL59:
 325:../main.c     ****     Log ("======================================");
 455              		.loc 1 325 0
 456 0184 5D48     		ldr	r0, .L68+88
 457 0186 FFF7FEFF 		bl	Log
 458              	.LVL60:
 326:../main.c     ****     Log ("EFM32_Boot V%s (%s %s)", prj.Version, prj.Date, prj.Time);
 459              		.loc 1 326 0
 460 018a 5A49     		ldr	r1, .L68+80
 461 018c 5C48     		ldr	r0, .L68+92
 462 018e A1F11A02 		sub	r2, r1, #26
 463 0192 A1F10A03 		sub	r3, r1, #10
ARM GAS  /tmp/cc6pScoJ.s 			page 51


 464 0196 FFF7FEFF 		bl	Log
 465              	.LVL61:
 339:../main.c     ****     if (GPIO->P[gpioPortA].DIN & (1 << 3))
 466              		.loc 1 339 0
 467 019a 5A4B     		ldr	r3, .L68+96
 468 019c DA69     		ldr	r2, [r3, #28]
 469 019e 1707     		lsls	r7, r2, #28
 470 01a0 0AD4     		bmi	.L51
 471              	.LVL62:
 353:../main.c     **** 	if (GPIO->P[gpioPortC].DIN & (1 << 15))
 472              		.loc 1 353 0
 473 01a2 5B6E     		ldr	r3, [r3, #100]
 474 01a4 1E04     		lsls	r6, r3, #16
 475 01a6 09D5     		bpl	.L52
 476              	.LVL63:
 357:../main.c     **** 	    g_MicroSD_PwrPort = TAMDL_MICROSD_PWR_GPIO_PORT;
 477              		.loc 1 357 0
 478 01a8 574B     		ldr	r3, .L68+100
 479 01aa 0222     		movs	r2, #2
 480 01ac 1A70     		strb	r2, [r3]
 358:../main.c     **** 	    g_MicroSD_PwrPin  = TAMDL_MICROSD_PWR_PIN;
 481              		.loc 1 358 0
 482 01ae 574B     		ldr	r3, .L68+104
 483 01b0 0A22     		movs	r2, #10
 484 01b2 1A60     		str	r2, [r3]
 356:../main.c     **** 	    pPlatform = "TAMDL";	// is TAMDL
 485              		.loc 1 356 0
 486 01b4 564C     		ldr	r4, .L68+108
 487 01b6 02E0     		b	.L23
 488              	.LVL64:
 489              	.L51:
 341:../main.c     **** 	pPlatform = "APRDL";
 490              		.loc 1 341 0
 491 01b8 564C     		ldr	r4, .L68+112
 492 01ba 00E0     		b	.L23
 493              	.LVL65:
 494              	.L52:
 345:../main.c     **** 	pPlatform = "MAPRDL";		// assume MAPRDL (SERENITY)
 495              		.loc 1 345 0
 496 01bc 564C     		ldr	r4, .L68+116
 497              	.LVL66:
 498              	.L23:
 362:../main.c     ****     Log ("Platform: %s", pPlatform);
 499              		.loc 1 362 0
 500 01be 2146     		mov	r1, r4
 501 01c0 5648     		ldr	r0, .L68+120
 502 01c2 FFF7FEFF 		bl	Log
 503              	.LVL67:
 363:../main.c     ****     sprintf (FirmwareFilename, "%s.UPD", pPlatform);
 504              		.loc 1 363 0
 505 01c6 2246     		mov	r2, r4
 506 01c8 5549     		ldr	r1, .L68+124
 507 01ca 0AA8     		add	r0, sp, #40
 508 01cc FFF7FEFF 		bl	siprintf
 509              	.LVL68:
 366:../main.c     ****     uint32_t uniquHi = DEVINFO->UNIQUEH;
 510              		.loc 1 366 0
ARM GAS  /tmp/cc6pScoJ.s 			page 52


 511 01d0 544B     		ldr	r3, .L68+128
 374:../main.c     ****     POWER_LED = 0;
 512              		.loc 1 374 0
 513 01d2 554C     		ldr	r4, .L68+132
 514              	.LVL69:
 366:../main.c     ****     uint32_t uniquHi = DEVINFO->UNIQUEH;
 515              		.loc 1 366 0
 516 01d4 5A6C     		ldr	r2, [r3, #68]
 517              	.LVL70:
 367:../main.c     ****     Log ("MCU: %s HW-ID: 0x%08lX%08lX",
 518              		.loc 1 367 0
 519 01d6 5548     		ldr	r0, .L68+136
 520 01d8 1B6C     		ldr	r3, [r3, #64]
 521 01da 5549     		ldr	r1, .L68+140
 374:../main.c     ****     POWER_LED = 0;
 522              		.loc 1 374 0
 523 01dc 0026     		movs	r6, #0
 367:../main.c     ****     Log ("MCU: %s HW-ID: 0x%08lX%08lX",
 524              		.loc 1 367 0
 525 01de FFF7FEFF 		bl	Log
 526              	.LVL71:
 371:../main.c     ****     DiskInit();
 527              		.loc 1 371 0
 528 01e2 FFF7FEFF 		bl	DiskInit
 529              	.LVL72:
 374:../main.c     ****     POWER_LED = 0;
 530              		.loc 1 374 0
 531 01e6 2660     		str	r6, [r4]
 377:../main.c     ****     if (DiskCheck())
 532              		.loc 1 377 0
 533 01e8 FFF7FEFF 		bl	DiskCheck
 534              	.LVL73:
 535 01ec 0028     		cmp	r0, #0
 536 01ee 00F0EB80 		beq	.L25
 380:../main.c     **** 	if (FindFile ("/", "*.UPD") != NULL)
 537              		.loc 1 380 0
 538 01f2 5048     		ldr	r0, .L68+144
 539 01f4 5049     		ldr	r1, .L68+148
 540 01f6 FFF7FEFF 		bl	FindFile
 541              	.LVL74:
 542 01fa 0028     		cmp	r0, #0
 543 01fc 00F0E180 		beq	.L26
 388:../main.c     **** 	    if (FindFile ("/", FirmwareFilename) != NULL)
 544              		.loc 1 388 0
 545 0200 4C48     		ldr	r0, .L68+144
 546 0202 0AA9     		add	r1, sp, #40
 547 0204 FFF7FEFF 		bl	FindFile
 548              	.LVL75:
 549 0208 0028     		cmp	r0, #0
 550 020a 00F0A580 		beq	.L27
 551              	.LBB49:
 391:../main.c     **** 	    char	 oldVersion[16] = "<unknown>";
 552              		.loc 1 391 0
 553 020e 4B4D     		ldr	r5, .L68+152
 554 0210 02AB     		add	r3, sp, #8
 555 0212 2868     		ldr	r0, [r5]	@ unaligned
 556 0214 6968     		ldr	r1, [r5, #4]	@ unaligned
ARM GAS  /tmp/cc6pScoJ.s 			page 53


 557 0216 2F89     		ldrh	r7, [r5, #8]	@ unaligned
 558 0218 03C3     		stmia	r3!, {r0, r1}
 559 021a 0622     		movs	r2, #6
 560 021c 3146     		mov	r1, r6
 561 021e 0DF11200 		add	r0, sp, #18
 562 0222 1F80     		strh	r7, [r3]	@ unaligned
 563 0224 FFF7FEFF 		bl	memset
 564              	.LVL76:
 392:../main.c     **** 	    char	 newVersion[16] = "<unknown>";
 565              		.loc 1 392 0
 566 0228 2868     		ldr	r0, [r5]	@ unaligned
 567 022a 6968     		ldr	r1, [r5, #4]	@ unaligned
 568 022c 06AB     		add	r3, sp, #24
 569 022e 03C3     		stmia	r3!, {r0, r1}
 570 0230 0622     		movs	r2, #6
 571 0232 3146     		mov	r1, r6
 572 0234 0DF12200 		add	r0, sp, #34
 573 0238 1F80     		strh	r7, [r3]	@ unaligned
 574 023a FFF7FEFF 		bl	memset
 575              	.LVL77:
 395:../main.c     **** 		Log ("Found update file for this board, reprogramming FLASH");
 576              		.loc 1 395 0
 577 023e 4048     		ldr	r0, .L68+156
 578 0240 FFF7FEFF 		bl	Log
 579              	.LVL78:
 398:../main.c     **** 		pPrjInfo = FindPrjInfo();
 580              		.loc 1 398 0
 581 0244 FFF7FEFF 		bl	FindPrjInfo
 582              	.LVL79:
 399:../main.c     **** 		if (pPrjInfo != NULL)
 583              		.loc 1 399 0
 584 0248 0146     		mov	r1, r0
 585 024a 18B1     		cbz	r0, .L28
 400:../main.c     **** 		    strcpy (oldVersion, pPrjInfo->Version);
 586              		.loc 1 400 0
 587 024c 02A8     		add	r0, sp, #8
 588              	.LVL80:
 589 024e 2631     		adds	r1, r1, #38
 590              	.LVL81:
 591 0250 FFF7FEFF 		bl	strcpy
 592              	.LVL82:
 593              	.L28:
 403:../main.c     **** 		errorCode = FirmwareUpdate (FirmwareFilename);
 594              		.loc 1 403 0
 595 0254 0AA8     		add	r0, sp, #40
 596 0256 FFF7FEFF 		bl	FirmwareUpdate
 597              	.LVL83:
 598 025a 0546     		mov	r5, r0
 599              	.LVL84:
 406:../main.c     **** 		pPrjInfo = FindPrjInfo();
 600              		.loc 1 406 0
 601 025c FFF7FEFF 		bl	FindPrjInfo
 602              	.LVL85:
 407:../main.c     **** 		if (pPrjInfo != NULL)
 603              		.loc 1 407 0
 604 0260 0146     		mov	r1, r0
 605 0262 18B1     		cbz	r0, .L29
ARM GAS  /tmp/cc6pScoJ.s 			page 54


 408:../main.c     **** 		    strcpy (newVersion, pPrjInfo->Version);
 606              		.loc 1 408 0
 607 0264 06A8     		add	r0, sp, #24
 608              	.LVL86:
 609 0266 2631     		adds	r1, r1, #38
 610              	.LVL87:
 611 0268 FFF7FEFF 		bl	strcpy
 612              	.LVL88:
 613              	.L29:
 410:../main.c     **** 		switch (errorCode)
 614              		.loc 1 410 0
 615 026c 062D     		cmp	r5, #6
 616 026e 13D8     		bhi	.L30
 617 0270 DFE805F0 		tbb	[pc, r5]
 618              	.L32:
 619 0274 04       		.byte	(.L31-.L32)/2
 620 0275 12       		.byte	(.L30-.L32)/2
 621 0276 12       		.byte	(.L30-.L32)/2
 622 0277 12       		.byte	(.L30-.L32)/2
 623 0278 0A       		.byte	(.L33-.L32)/2
 624 0279 0C       		.byte	(.L34-.L32)/2
 625 027a 0E       		.byte	(.L35-.L32)/2
 626 027b 00       		.p2align 1
 627              	.L31:
 412:../main.c     **** 		    case 0: Log ("Update from version %s to %s finished"
 628              		.loc 1 412 0
 629 027c 3148     		ldr	r0, .L68+160
 630 027e 02A9     		add	r1, sp, #8
 631 0280 06AA     		add	r2, sp, #24
 632 0282 FFF7FEFF 		bl	Log
 633              	.LVL89:
 414:../main.c     **** 			    break;
 634              		.loc 1 414 0
 635 0286 6BE0     		b	.L37
 636              	.L33:
 416:../main.c     **** 		    case 4: Log ("Update aborted - File READ ERROR");
 637              		.loc 1 416 0
 638 0288 2F48     		ldr	r0, .L68+164
 639 028a 02E0     		b	.L66
 640              	.L34:
 419:../main.c     **** 		    case 5: Log ("Update aborted - FLASH ERASE ERROR");
 641              		.loc 1 419 0
 642 028c 2F48     		ldr	r0, .L68+168
 643 028e 00E0     		b	.L66
 644              	.L35:
 422:../main.c     **** 		    case 6: Log ("Update aborted - FLASH WRITE ERROR");
 645              		.loc 1 422 0
 646 0290 2F48     		ldr	r0, .L68+172
 647              	.L66:
 648 0292 FFF7FEFF 		bl	Log
 649              	.LVL90:
 423:../main.c     **** 			    break;
 650              		.loc 1 423 0
 651 0296 63E0     		b	.L37
 652              	.L30:
 426:../main.c     **** 			    Log ("Update aborted - Unknown Error %d",
 653              		.loc 1 426 0
ARM GAS  /tmp/cc6pScoJ.s 			page 55


 654 0298 2E48     		ldr	r0, .L68+176
 655 029a 2946     		mov	r1, r5
 656 029c FFF7FEFF 		bl	Log
 657              	.LVL91:
 428:../main.c     **** 			    break;
 658              		.loc 1 428 0
 659 02a0 5EE0     		b	.L37
 660              	.L69:
 661 02a2 00BF     		.align	2
 662              	.L68:
 663 02a4 FC81E00F 		.word	266371580
 664 02a8 0CA00C40 		.word	1074569228
 665 02ac 20600C40 		.word	1074552864
 666 02b0 40800C40 		.word	1074561088
 667 02b4 44800C40 		.word	1074561092
 668 02b8 F081E00F 		.word	266371568
 669 02bc FFB98A4C 		.word	1284159999
 670 02c0 B481E00F 		.word	266371508
 671 02c4 34200040 		.word	1073750068
 672 02c8 C881E00F 		.word	266371528
 673 02cc 2C400040 		.word	1073758252
 674 02d0 02000600 		.word	393218
 675 02d4 03001200 		.word	1179651
 676 02d8 30040800 		.word	525360
 677 02dc 00230400 		.word	271104
 678 02e0 10810200 		.word	164112
 679 02e4 00C20200 		.word	180736
 680 02e8 00000840 		.word	1074266112
 681 02ec 00E100E0 		.word	-536813312
 682 02f0 1D000000 		.word	.LC4
 683 02f4 26000000 		.word	prj+38
 684 02f8 31000000 		.word	.LC5
 685 02fc 3A000000 		.word	.LC6
 686 0300 61000000 		.word	.LC7
 687 0304 00600040 		.word	1073766400
 688 0308 00000000 		.word	g_MicroSD_PwrPort
 689 030c 00000000 		.word	g_MicroSD_PwrPin
 690 0310 17000000 		.word	.LC3
 691 0314 0A000000 		.word	.LC1
 692 0318 10000000 		.word	.LC2
 693 031c 78000000 		.word	.LC8
 694 0320 85000000 		.word	.LC9
 695 0324 B081E00F 		.word	266371504
 696 0328 88010C42 		.word	1108083080
 697 032c 8C000000 		.word	.LC10
 698 0330 A8000000 		.word	.LC11
 699 0334 B6000000 		.word	.LC12
 700 0338 B8000000 		.word	.LC13
 701 033c 00000000 		.word	.LANCHOR0
 702 0340 BE000000 		.word	.LC15
 703 0344 F4000000 		.word	.LC16
 704 0348 26010000 		.word	.LC17
 705 034c 47010000 		.word	.LC18
 706 0350 6A010000 		.word	.LC19
 707 0354 8D010000 		.word	.LC20
 708              	.LVL92:
 709              	.L27:
ARM GAS  /tmp/cc6pScoJ.s 			page 56


 710              	.LBE49:
 434:../main.c     **** 		Log ("There exist no update file for this board!");
 711              		.loc 1 434 0
 712 0358 4148     		ldr	r0, .L70
 713 035a FFF7FEFF 		bl	Log
 714              	.LVL93:
 436:../main.c     **** 		errorCode = 3;	// Error Code 3: No Update Image for this board
 715              		.loc 1 436 0
 716 035e 0325     		movs	r5, #3
 717              	.LVL94:
 718              	.L37:
 440:../main.c     **** 	    Log ("Waiting until the SD-Card has been removed");
 719              		.loc 1 440 0
 720 0360 4048     		ldr	r0, .L70+4
 721 0362 FFF7FEFF 		bl	Log
 722              	.LVL95:
 443:../main.c     **** 	    if (LogFileOpen("UPDATE.TXT", "UPDATE.TXT"))
 723              		.loc 1 443 0
 724 0366 4048     		ldr	r0, .L70+8
 725 0368 0146     		mov	r1, r0
 726 036a FFF7FEFF 		bl	LogFileOpen
 727              	.LVL96:
 728 036e 08B1     		cbz	r0, .L38
 446:../main.c     **** 		LogFlush();
 729              		.loc 1 446 0
 730 0370 FFF7FEFF 		bl	LogFlush
 731              	.LVL97:
 732              	.L38:
 436:../main.c     **** 		errorCode = 3;	// Error Code 3: No Update Image for this board
 733              		.loc 1 436 0
 734 0374 0026     		movs	r6, #0
 735              	.LVL98:
 736              	.L44:
 455:../main.c     **** 		if (errorCode == 0)
 737              		.loc 1 455 0
 738 0376 3DB9     		cbnz	r5, .L39
 458:../main.c     **** 		    POWER_LED = (++n & 0x1) ? 1 : 0;
 739              		.loc 1 458 0
 740 0378 0136     		adds	r6, r6, #1
 741              	.LVL99:
 742 037a 06F00103 		and	r3, r6, #1
 743 037e 2360     		str	r3, [r4]
 459:../main.c     **** 		    msDelay(50);		// pause
 744              		.loc 1 459 0
 745 0380 3220     		movs	r0, #50
 746 0382 FFF7FEFF 		bl	msDelay
 747              	.LVL100:
 748 0386 15E0     		b	.L40
 749              	.L39:
 467:../main.c     **** 		    POWER_LED = 0;
 750              		.loc 1 467 0
 751 0388 0026     		movs	r6, #0
 752              	.LVL101:
 753 038a 2660     		str	r6, [r4]
 468:../main.c     **** 		    msDelay(800);		// pause
 754              		.loc 1 468 0
 755 038c 4FF44870 		mov	r0, #800
ARM GAS  /tmp/cc6pScoJ.s 			page 57


 756 0390 FFF7FEFF 		bl	msDelay
 757              	.LVL102:
 758              	.L41:
 470:../main.c     **** 		    for (n = 0;  n < errorCode;  n++)
 759              		.loc 1 470 0 discriminator 1
 760 0394 AE42     		cmp	r6, r5
 761 0396 0BDA     		bge	.L67
 472:../main.c     **** 			POWER_LED = 1;		// LED ON
 762              		.loc 1 472 0 discriminator 2
 763 0398 0123     		movs	r3, #1
 764 039a 2360     		str	r3, [r4]
 473:../main.c     **** 			msDelay(200);
 765              		.loc 1 473 0 discriminator 2
 766 039c C820     		movs	r0, #200
 767 039e FFF7FEFF 		bl	msDelay
 768              	.LVL103:
 474:../main.c     **** 			POWER_LED = 0;		// LED OFF
 769              		.loc 1 474 0 discriminator 2
 770 03a2 0023     		movs	r3, #0
 771 03a4 2360     		str	r3, [r4]
 475:../main.c     **** 			msDelay(200);
 772              		.loc 1 475 0 discriminator 2
 773 03a6 C820     		movs	r0, #200
 774 03a8 FFF7FEFF 		bl	msDelay
 775              	.LVL104:
 470:../main.c     **** 		    for (n = 0;  n < errorCode;  n++)
 776              		.loc 1 470 0 discriminator 2
 777 03ac 0136     		adds	r6, r6, #1
 778              	.LVL105:
 779 03ae F1E7     		b	.L41
 780              	.L67:
 781 03b0 25EAE576 		bic	r6, r5, r5, asr #31
 782              	.LVL106:
 783              	.L40:
 480:../main.c     **** 		(void)DiskCheck();
 784              		.loc 1 480 0
 785 03b4 FFF7FEFF 		bl	DiskCheck
 786              	.LVL107:
 482:../main.c     **** 	    } while (! IsDiskRemoved());
 787              		.loc 1 482 0
 788 03b8 FFF7FEFF 		bl	IsDiskRemoved
 789              	.LVL108:
 790 03bc 0028     		cmp	r0, #0
 791 03be DAD0     		beq	.L44
 792 03c0 02E0     		b	.L25
 793              	.LVL109:
 794              	.L26:
 487:../main.c     **** 	    drvLEUART_puts("No update files on SD-Card\n");
 795              		.loc 1 487 0
 796 03c2 2A48     		ldr	r0, .L70+12
 797 03c4 FFF7FEFF 		bl	drvLEUART_puts
 798              	.LVL110:
 799              	.L25:
 491:../main.c     ****     drvLEUART_puts("Starting Application...\n\n");
 800              		.loc 1 491 0
 801 03c8 2948     		ldr	r0, .L70+16
 802 03ca FFF7FEFF 		bl	drvLEUART_puts
ARM GAS  /tmp/cc6pScoJ.s 			page 58


 803              	.LVL111:
 494:../main.c     ****     POWER_LED = 0;
 804              		.loc 1 494 0
 805 03ce 0023     		movs	r3, #0
 806 03d0 2360     		str	r3, [r4]
 807              	.L46:
 495:../main.c     ****     while (! IsDmaTransferDone())
 808              		.loc 1 495 0 discriminator 1
 809 03d2 FFF7FEFF 		bl	IsDmaTransferDone
 810              	.LVL112:
 811 03d6 0028     		cmp	r0, #0
 812 03d8 FBD0     		beq	.L46
 499:../main.c     ****     drvLEUART_Deinit();
 813              		.loc 1 499 0
 814 03da FFF7FEFF 		bl	drvLEUART_Deinit
 815              	.LVL113:
 816              	.LBB50:
 817              	.LBB51:
 595:../main.c     ****     initSP = *pInitialSP;
 818              		.loc 1 595 0
 819 03de 4FF40041 		mov	r1, #32768
 820 03e2 0A68     		ldr	r2, [r1]
 821              	.LVL114:
 596:../main.c     ****     initPC = *pInitialPC;
 822              		.loc 1 596 0
 823 03e4 48F20403 		movw	r3, #32772
 599:../main.c     ****     if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
 824              		.loc 1 599 0
 825 03e8 551C     		adds	r5, r2, #1
 596:../main.c     ****     initPC = *pInitialPC;
 826              		.loc 1 596 0
 827 03ea 1B68     		ldr	r3, [r3]
 828              	.LVL115:
 599:../main.c     ****     if (initSP == 0xFFFFFFFF  ||  initPC == 0xFFFFFFFF)
 829              		.loc 1 599 0
 830 03ec 13D0     		beq	.L54
 831 03ee 581C     		adds	r0, r3, #1
 832 03f0 11D0     		beq	.L54
 602:../main.c     ****     if (initSP < SRAM_BASE         ||  initSP > SRAM_BASE  + SRAM_SIZE
 833              		.loc 1 602 0
 834 03f2 02F16040 		add	r0, r2, #-536870912
 835 03f6 B0F5804F 		cmp	r0, #16384
 836 03fa 0ED8     		bhi	.L56
 603:../main.c     ****     ||  initPC < FIRMWARE_ADDRESS  ||  initPC > FLASH_BASE + FLASH_SIZE)
 837              		.loc 1 603 0
 838 03fc A3F50040 		sub	r0, r3, #32768
 839 0400 B0F5C03F 		cmp	r0, #98304
 840 0404 09D8     		bhi	.L56
 841              	.LBB52:
 842              	.LBB53:
 843              		.file 5 "../CMSIS/Include/core_cmFunc.h"
   1:../CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:../CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:../CMSIS/Include/core_cmFunc.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cmFunc.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cmFunc.h ****  *
ARM GAS  /tmp/cc6pScoJ.s 			page 59


   7:../CMSIS/Include/core_cmFunc.h ****  * @note
   8:../CMSIS/Include/core_cmFunc.h ****  *
   9:../CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cmFunc.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cmFunc.h **** 
  12:../CMSIS/Include/core_cmFunc.h ****    All rights reserved.
  13:../CMSIS/Include/core_cmFunc.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cmFunc.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cmFunc.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cmFunc.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cmFunc.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cmFunc.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cmFunc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cmFunc.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cmFunc.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cmFunc.h ****    *
  24:../CMSIS/Include/core_cmFunc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cmFunc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cmFunc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cmFunc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cmFunc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cmFunc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cmFunc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cmFunc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cmFunc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cmFunc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cmFunc.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cmFunc.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cmFunc.h **** 
  37:../CMSIS/Include/core_cmFunc.h **** 
  38:../CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  39:../CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  40:../CMSIS/Include/core_cmFunc.h **** 
  41:../CMSIS/Include/core_cmFunc.h **** 
  42:../CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  43:../CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  44:../CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  45:../CMSIS/Include/core_cmFunc.h ****   @{
  46:../CMSIS/Include/core_cmFunc.h ****  */
  47:../CMSIS/Include/core_cmFunc.h **** 
  48:../CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  50:../CMSIS/Include/core_cmFunc.h **** 
  51:../CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  52:../CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../CMSIS/Include/core_cmFunc.h **** #endif
  54:../CMSIS/Include/core_cmFunc.h **** 
  55:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  56:../CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  57:../CMSIS/Include/core_cmFunc.h **** 
  58:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  59:../CMSIS/Include/core_cmFunc.h **** 
  60:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  61:../CMSIS/Include/core_cmFunc.h **** 
  62:../CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  63:../CMSIS/Include/core_cmFunc.h ****  */
ARM GAS  /tmp/cc6pScoJ.s 			page 60


  64:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  65:../CMSIS/Include/core_cmFunc.h **** {
  66:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  67:../CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  68:../CMSIS/Include/core_cmFunc.h **** }
  69:../CMSIS/Include/core_cmFunc.h **** 
  70:../CMSIS/Include/core_cmFunc.h **** 
  71:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  72:../CMSIS/Include/core_cmFunc.h **** 
  73:../CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  74:../CMSIS/Include/core_cmFunc.h **** 
  75:../CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  76:../CMSIS/Include/core_cmFunc.h ****  */
  77:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  78:../CMSIS/Include/core_cmFunc.h **** {
  79:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  80:../CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  81:../CMSIS/Include/core_cmFunc.h **** }
  82:../CMSIS/Include/core_cmFunc.h **** 
  83:../CMSIS/Include/core_cmFunc.h **** 
  84:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
  85:../CMSIS/Include/core_cmFunc.h **** 
  86:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  87:../CMSIS/Include/core_cmFunc.h **** 
  88:../CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
  89:../CMSIS/Include/core_cmFunc.h ****  */
  90:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  91:../CMSIS/Include/core_cmFunc.h **** {
  92:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  93:../CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  94:../CMSIS/Include/core_cmFunc.h **** }
  95:../CMSIS/Include/core_cmFunc.h **** 
  96:../CMSIS/Include/core_cmFunc.h **** 
  97:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  98:../CMSIS/Include/core_cmFunc.h **** 
  99:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 100:../CMSIS/Include/core_cmFunc.h **** 
 101:../CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 102:../CMSIS/Include/core_cmFunc.h ****  */
 103:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
 104:../CMSIS/Include/core_cmFunc.h **** {
 105:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 106:../CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
 107:../CMSIS/Include/core_cmFunc.h **** }
 108:../CMSIS/Include/core_cmFunc.h **** 
 109:../CMSIS/Include/core_cmFunc.h **** 
 110:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 111:../CMSIS/Include/core_cmFunc.h **** 
 112:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 113:../CMSIS/Include/core_cmFunc.h **** 
 114:../CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 115:../CMSIS/Include/core_cmFunc.h ****  */
 116:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 117:../CMSIS/Include/core_cmFunc.h **** {
 118:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:../CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 120:../CMSIS/Include/core_cmFunc.h **** }
ARM GAS  /tmp/cc6pScoJ.s 			page 61


 121:../CMSIS/Include/core_cmFunc.h **** 
 122:../CMSIS/Include/core_cmFunc.h **** 
 123:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 124:../CMSIS/Include/core_cmFunc.h **** 
 125:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 126:../CMSIS/Include/core_cmFunc.h **** 
 127:../CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 128:../CMSIS/Include/core_cmFunc.h ****  */
 129:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 130:../CMSIS/Include/core_cmFunc.h **** {
 131:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 132:../CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 133:../CMSIS/Include/core_cmFunc.h **** }
 134:../CMSIS/Include/core_cmFunc.h **** 
 135:../CMSIS/Include/core_cmFunc.h **** 
 136:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 137:../CMSIS/Include/core_cmFunc.h **** 
 138:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 139:../CMSIS/Include/core_cmFunc.h **** 
 140:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 141:../CMSIS/Include/core_cmFunc.h ****  */
 142:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 143:../CMSIS/Include/core_cmFunc.h **** {
 144:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 145:../CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 146:../CMSIS/Include/core_cmFunc.h **** }
 147:../CMSIS/Include/core_cmFunc.h **** 
 148:../CMSIS/Include/core_cmFunc.h **** 
 149:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 150:../CMSIS/Include/core_cmFunc.h **** 
 151:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 152:../CMSIS/Include/core_cmFunc.h **** 
 153:../CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 154:../CMSIS/Include/core_cmFunc.h ****  */
 155:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 156:../CMSIS/Include/core_cmFunc.h **** {
 157:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 158:../CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 159:../CMSIS/Include/core_cmFunc.h **** }
 160:../CMSIS/Include/core_cmFunc.h **** 
 161:../CMSIS/Include/core_cmFunc.h **** 
 162:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 163:../CMSIS/Include/core_cmFunc.h **** 
 164:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 165:../CMSIS/Include/core_cmFunc.h **** 
 166:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 167:../CMSIS/Include/core_cmFunc.h ****  */
 168:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 169:../CMSIS/Include/core_cmFunc.h **** {
 170:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 171:../CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 172:../CMSIS/Include/core_cmFunc.h **** }
 173:../CMSIS/Include/core_cmFunc.h **** 
 174:../CMSIS/Include/core_cmFunc.h **** 
 175:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 176:../CMSIS/Include/core_cmFunc.h **** 
 177:../CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
ARM GAS  /tmp/cc6pScoJ.s 			page 62


 178:../CMSIS/Include/core_cmFunc.h **** 
 179:../CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 180:../CMSIS/Include/core_cmFunc.h ****  */
 181:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 182:../CMSIS/Include/core_cmFunc.h **** {
 183:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 184:../CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 185:../CMSIS/Include/core_cmFunc.h **** }
 186:../CMSIS/Include/core_cmFunc.h **** 
 187:../CMSIS/Include/core_cmFunc.h **** 
 188:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 189:../CMSIS/Include/core_cmFunc.h **** 
 190:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 191:../CMSIS/Include/core_cmFunc.h **** 
 192:../CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 193:../CMSIS/Include/core_cmFunc.h ****  */
 194:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 195:../CMSIS/Include/core_cmFunc.h **** {
 196:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 197:../CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 198:../CMSIS/Include/core_cmFunc.h **** }
 199:../CMSIS/Include/core_cmFunc.h **** 
 200:../CMSIS/Include/core_cmFunc.h **** 
 201:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 202:../CMSIS/Include/core_cmFunc.h **** 
 203:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 204:../CMSIS/Include/core_cmFunc.h **** 
 205:../CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 206:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 207:../CMSIS/Include/core_cmFunc.h ****  */
 208:../CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 209:../CMSIS/Include/core_cmFunc.h **** 
 210:../CMSIS/Include/core_cmFunc.h **** 
 211:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 212:../CMSIS/Include/core_cmFunc.h **** 
 213:../CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 214:../CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 215:../CMSIS/Include/core_cmFunc.h ****  */
 216:../CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 217:../CMSIS/Include/core_cmFunc.h **** 
 218:../CMSIS/Include/core_cmFunc.h **** 
 219:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 220:../CMSIS/Include/core_cmFunc.h **** 
 221:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 222:../CMSIS/Include/core_cmFunc.h **** 
 223:../CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 224:../CMSIS/Include/core_cmFunc.h ****  */
 225:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 226:../CMSIS/Include/core_cmFunc.h **** {
 227:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 228:../CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 229:../CMSIS/Include/core_cmFunc.h **** }
 230:../CMSIS/Include/core_cmFunc.h **** 
 231:../CMSIS/Include/core_cmFunc.h **** 
 232:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 233:../CMSIS/Include/core_cmFunc.h **** 
 234:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
ARM GAS  /tmp/cc6pScoJ.s 			page 63


 235:../CMSIS/Include/core_cmFunc.h **** 
 236:../CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 237:../CMSIS/Include/core_cmFunc.h ****  */
 238:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 239:../CMSIS/Include/core_cmFunc.h **** {
 240:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 241:../CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 242:../CMSIS/Include/core_cmFunc.h **** }
 243:../CMSIS/Include/core_cmFunc.h **** 
 244:../CMSIS/Include/core_cmFunc.h **** 
 245:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 246:../CMSIS/Include/core_cmFunc.h **** 
 247:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 248:../CMSIS/Include/core_cmFunc.h **** 
 249:../CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 250:../CMSIS/Include/core_cmFunc.h ****  */
 251:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 252:../CMSIS/Include/core_cmFunc.h **** {
 253:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 254:../CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 255:../CMSIS/Include/core_cmFunc.h **** }
 256:../CMSIS/Include/core_cmFunc.h **** 
 257:../CMSIS/Include/core_cmFunc.h **** 
 258:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 259:../CMSIS/Include/core_cmFunc.h **** 
 260:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 261:../CMSIS/Include/core_cmFunc.h **** 
 262:../CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 263:../CMSIS/Include/core_cmFunc.h ****  */
 264:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 265:../CMSIS/Include/core_cmFunc.h **** {
 266:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 267:../CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 268:../CMSIS/Include/core_cmFunc.h **** }
 269:../CMSIS/Include/core_cmFunc.h **** 
 270:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 271:../CMSIS/Include/core_cmFunc.h **** 
 272:../CMSIS/Include/core_cmFunc.h **** 
 273:../CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 274:../CMSIS/Include/core_cmFunc.h **** 
 275:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 276:../CMSIS/Include/core_cmFunc.h **** 
 277:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 278:../CMSIS/Include/core_cmFunc.h **** 
 279:../CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 280:../CMSIS/Include/core_cmFunc.h ****  */
 281:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 282:../CMSIS/Include/core_cmFunc.h **** {
 283:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 284:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 285:../CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 286:../CMSIS/Include/core_cmFunc.h **** #else
 287:../CMSIS/Include/core_cmFunc.h ****    return(0);
 288:../CMSIS/Include/core_cmFunc.h **** #endif
 289:../CMSIS/Include/core_cmFunc.h **** }
 290:../CMSIS/Include/core_cmFunc.h **** 
 291:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 64


 292:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 293:../CMSIS/Include/core_cmFunc.h **** 
 294:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 295:../CMSIS/Include/core_cmFunc.h **** 
 296:../CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 297:../CMSIS/Include/core_cmFunc.h ****  */
 298:../CMSIS/Include/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 299:../CMSIS/Include/core_cmFunc.h **** {
 300:../CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 301:../CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 302:../CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 303:../CMSIS/Include/core_cmFunc.h **** #else
 304:../CMSIS/Include/core_cmFunc.h ****   (void)fpscr;
 305:../CMSIS/Include/core_cmFunc.h **** #endif
 306:../CMSIS/Include/core_cmFunc.h **** }
 307:../CMSIS/Include/core_cmFunc.h **** 
 308:../CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 309:../CMSIS/Include/core_cmFunc.h **** 
 310:../CMSIS/Include/core_cmFunc.h **** 
 311:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 312:../CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 313:../CMSIS/Include/core_cmFunc.h **** 
 314:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 315:../CMSIS/Include/core_cmFunc.h **** 
 316:../CMSIS/Include/core_cmFunc.h **** 
 317:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 318:../CMSIS/Include/core_cmFunc.h **** /* TI CCS specific functions */
 319:../CMSIS/Include/core_cmFunc.h **** 
 320:../CMSIS/Include/core_cmFunc.h **** #include <cmsis_ccs.h>
 321:../CMSIS/Include/core_cmFunc.h **** 
 322:../CMSIS/Include/core_cmFunc.h **** 
 323:../CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 324:../CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 325:../CMSIS/Include/core_cmFunc.h **** 
 326:../CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 327:../CMSIS/Include/core_cmFunc.h **** 
 328:../CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 329:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 330:../CMSIS/Include/core_cmFunc.h ****  */
 331:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 332:../CMSIS/Include/core_cmFunc.h **** {
 333:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 334:../CMSIS/Include/core_cmFunc.h **** }
 335:../CMSIS/Include/core_cmFunc.h **** 
 336:../CMSIS/Include/core_cmFunc.h **** 
 337:../CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 338:../CMSIS/Include/core_cmFunc.h **** 
 339:../CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 340:../CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 341:../CMSIS/Include/core_cmFunc.h ****  */
 342:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 343:../CMSIS/Include/core_cmFunc.h **** {
 344:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 844              		.loc 5 344 0
 845              	@ 344 "../CMSIS/Include/core_cmFunc.h" 1
 846 0406 72B6     		cpsid i
 847              	@ 0 "" 2
ARM GAS  /tmp/cc6pScoJ.s 			page 65


 848              		.thumb
 849              	.LBE53:
 850              	.LBE52:
 610:../main.c     ****     SCB->VTOR = FIRMWARE_ADDRESS;
 851              		.loc 1 610 0
 852 0408 1A48     		ldr	r0, .L70+20
 853 040a 8160     		str	r1, [r0, #8]
 854              	.LVL116:
 855              	.LBB54:
 856              	.LBB55:
 345:../CMSIS/Include/core_cmFunc.h **** }
 346:../CMSIS/Include/core_cmFunc.h **** 
 347:../CMSIS/Include/core_cmFunc.h **** 
 348:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
 349:../CMSIS/Include/core_cmFunc.h **** 
 350:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
 351:../CMSIS/Include/core_cmFunc.h **** 
 352:../CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
 353:../CMSIS/Include/core_cmFunc.h ****  */
 354:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 355:../CMSIS/Include/core_cmFunc.h **** {
 356:../CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 357:../CMSIS/Include/core_cmFunc.h **** 
 358:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 359:../CMSIS/Include/core_cmFunc.h ****   return(result);
 360:../CMSIS/Include/core_cmFunc.h **** }
 361:../CMSIS/Include/core_cmFunc.h **** 
 362:../CMSIS/Include/core_cmFunc.h **** 
 363:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
 364:../CMSIS/Include/core_cmFunc.h **** 
 365:../CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 366:../CMSIS/Include/core_cmFunc.h **** 
 367:../CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 368:../CMSIS/Include/core_cmFunc.h ****  */
 369:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 370:../CMSIS/Include/core_cmFunc.h **** {
 371:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 372:../CMSIS/Include/core_cmFunc.h **** }
 373:../CMSIS/Include/core_cmFunc.h **** 
 374:../CMSIS/Include/core_cmFunc.h **** 
 375:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get IPSR Register
 376:../CMSIS/Include/core_cmFunc.h **** 
 377:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 378:../CMSIS/Include/core_cmFunc.h **** 
 379:../CMSIS/Include/core_cmFunc.h ****     \return               IPSR Register value
 380:../CMSIS/Include/core_cmFunc.h ****  */
 381:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 382:../CMSIS/Include/core_cmFunc.h **** {
 383:../CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 384:../CMSIS/Include/core_cmFunc.h **** 
 385:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 386:../CMSIS/Include/core_cmFunc.h ****   return(result);
 387:../CMSIS/Include/core_cmFunc.h **** }
 388:../CMSIS/Include/core_cmFunc.h **** 
 389:../CMSIS/Include/core_cmFunc.h **** 
 390:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
 391:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 66


 392:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 393:../CMSIS/Include/core_cmFunc.h **** 
 394:../CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 395:../CMSIS/Include/core_cmFunc.h ****  */
 396:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 397:../CMSIS/Include/core_cmFunc.h **** {
 398:../CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 399:../CMSIS/Include/core_cmFunc.h **** 
 400:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 401:../CMSIS/Include/core_cmFunc.h ****   return(result);
 402:../CMSIS/Include/core_cmFunc.h **** }
 403:../CMSIS/Include/core_cmFunc.h **** 
 404:../CMSIS/Include/core_cmFunc.h **** 
 405:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 406:../CMSIS/Include/core_cmFunc.h **** 
 407:../CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 408:../CMSIS/Include/core_cmFunc.h **** 
 409:../CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 410:../CMSIS/Include/core_cmFunc.h ****  */
 411:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 412:../CMSIS/Include/core_cmFunc.h **** {
 413:../CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 414:../CMSIS/Include/core_cmFunc.h **** 
 415:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 416:../CMSIS/Include/core_cmFunc.h ****   return(result);
 417:../CMSIS/Include/core_cmFunc.h **** }
 418:../CMSIS/Include/core_cmFunc.h **** 
 419:../CMSIS/Include/core_cmFunc.h **** 
 420:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 421:../CMSIS/Include/core_cmFunc.h **** 
 422:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 423:../CMSIS/Include/core_cmFunc.h **** 
 424:../CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 425:../CMSIS/Include/core_cmFunc.h ****  */
 426:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 427:../CMSIS/Include/core_cmFunc.h **** {
 428:../CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 429:../CMSIS/Include/core_cmFunc.h **** 
 430:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 431:../CMSIS/Include/core_cmFunc.h ****   return(result);
 432:../CMSIS/Include/core_cmFunc.h **** }
 433:../CMSIS/Include/core_cmFunc.h **** 
 434:../CMSIS/Include/core_cmFunc.h **** 
 435:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 436:../CMSIS/Include/core_cmFunc.h **** 
 437:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 438:../CMSIS/Include/core_cmFunc.h **** 
 439:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 440:../CMSIS/Include/core_cmFunc.h ****  */
 441:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 442:../CMSIS/Include/core_cmFunc.h **** {
 443:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 444:../CMSIS/Include/core_cmFunc.h **** }
 445:../CMSIS/Include/core_cmFunc.h **** 
 446:../CMSIS/Include/core_cmFunc.h **** 
 447:../CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 448:../CMSIS/Include/core_cmFunc.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 67


 449:../CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 450:../CMSIS/Include/core_cmFunc.h **** 
 451:../CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 452:../CMSIS/Include/core_cmFunc.h ****  */
 453:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 454:../CMSIS/Include/core_cmFunc.h **** {
 455:../CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 456:../CMSIS/Include/core_cmFunc.h **** 
 457:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 458:../CMSIS/Include/core_cmFunc.h ****   return(result);
 459:../CMSIS/Include/core_cmFunc.h **** }
 460:../CMSIS/Include/core_cmFunc.h **** 
 461:../CMSIS/Include/core_cmFunc.h **** 
 462:../CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 463:../CMSIS/Include/core_cmFunc.h **** 
 464:../CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 465:../CMSIS/Include/core_cmFunc.h **** 
 466:../CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 467:../CMSIS/Include/core_cmFunc.h ****  */
 468:../CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 469:../CMSIS/Include/core_cmFunc.h **** {
 470:../CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 857              		.loc 5 470 0
 858              	@ 470 "../CMSIS/Include/core_cmFunc.h" 1
 859 040c 82F30888 		MSR msp, r2
 860              	
 861              	@ 0 "" 2
 862              	.LVL117:
 863              		.thumb
 864              	.LBE55:
 865              	.LBE54:
 614:../main.c     ****     pStartAppl();
 866              		.loc 1 614 0
 867 0410 9847     		blx	r3
 868              	.LVL118:
 616:../main.c     ****     return 9;		// shall never happen
 869              		.loc 1 616 0
 870 0412 0925     		movs	r5, #9
 871              	.LVL119:
 872 0414 02E0     		b	.L47
 873              	.LVL120:
 874              	.L54:
 600:../main.c     **** 	return 1;
 875              		.loc 1 600 0
 876 0416 0125     		movs	r5, #1
 877 0418 00E0     		b	.L47
 878              	.L56:
 604:../main.c     **** 	return 2;
 879              		.loc 1 604 0
 880 041a 0225     		movs	r5, #2
 881              	.LVL121:
 882              	.L47:
 883              	.LBE51:
 884              	.LBE50:
 508:../main.c     **** 	msDelay(800);		// pause
 885              		.loc 1 508 0
 886 041c 4FF44870 		mov	r0, #800
ARM GAS  /tmp/cc6pScoJ.s 			page 68


 887 0420 FFF7FEFF 		bl	msDelay
 888              	.LVL122:
 510:../main.c     **** 	for (n = 0;  n < errorCode;  n++)
 889              		.loc 1 510 0
 890 0424 0026     		movs	r6, #0
 891              	.LVL123:
 892              	.L49:
 512:../main.c     **** 	    POWER_LED = 1;	// LED ON
 893              		.loc 1 512 0 discriminator 2
 894 0426 0123     		movs	r3, #1
 895 0428 2360     		str	r3, [r4]
 513:../main.c     **** 	    msDelay(200);
 896              		.loc 1 513 0 discriminator 2
 897 042a C820     		movs	r0, #200
 898 042c FFF7FEFF 		bl	msDelay
 899              	.LVL124:
 514:../main.c     **** 	    POWER_LED = 0;	// LED OFF
 900              		.loc 1 514 0 discriminator 2
 901 0430 0023     		movs	r3, #0
 902 0432 2360     		str	r3, [r4]
 515:../main.c     **** 	    msDelay(200);
 903              		.loc 1 515 0 discriminator 2
 904 0434 C820     		movs	r0, #200
 510:../main.c     **** 	for (n = 0;  n < errorCode;  n++)
 905              		.loc 1 510 0 discriminator 2
 906 0436 0136     		adds	r6, r6, #1
 907              	.LVL125:
 515:../main.c     **** 	    msDelay(200);
 908              		.loc 1 515 0 discriminator 2
 909 0438 FFF7FEFF 		bl	msDelay
 910              	.LVL126:
 510:../main.c     **** 	for (n = 0;  n < errorCode;  n++)
 911              		.loc 1 510 0 discriminator 2
 912 043c AE42     		cmp	r6, r5
 913 043e F2DB     		blt	.L49
 518:../main.c     **** 	msDelay(1000);		// pause
 914              		.loc 1 518 0
 915 0440 4FF47A70 		mov	r0, #1000
 916 0444 FFF7FEFF 		bl	msDelay
 917              	.LVL127:
 918              	.LBB56:
 919              	.LBB57:
 920              	.LBB58:
 921              	.LBB59:
 922              		.file 6 "../CMSIS/Include/core_cmInstr.h"
   1:../CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../CMSIS/Include/core_cmInstr.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cmInstr.h ****  * @date     05. March 2013
   6:../CMSIS/Include/core_cmInstr.h ****  *
   7:../CMSIS/Include/core_cmInstr.h ****  * @note
   8:../CMSIS/Include/core_cmInstr.h ****  *
   9:../CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cmInstr.h **** 
  12:../CMSIS/Include/core_cmInstr.h ****    All rights reserved.
ARM GAS  /tmp/cc6pScoJ.s 			page 69


  13:../CMSIS/Include/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cmInstr.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cmInstr.h ****    *
  24:../CMSIS/Include/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cmInstr.h **** 
  37:../CMSIS/Include/core_cmInstr.h **** 
  38:../CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:../CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:../CMSIS/Include/core_cmInstr.h **** 
  41:../CMSIS/Include/core_cmInstr.h **** 
  42:../CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:../CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:../CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  45:../CMSIS/Include/core_cmInstr.h ****   @{
  46:../CMSIS/Include/core_cmInstr.h **** */
  47:../CMSIS/Include/core_cmInstr.h **** 
  48:../CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:../CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  50:../CMSIS/Include/core_cmInstr.h **** 
  51:../CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:../CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:../CMSIS/Include/core_cmInstr.h **** #endif
  54:../CMSIS/Include/core_cmInstr.h **** 
  55:../CMSIS/Include/core_cmInstr.h **** 
  56:../CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  57:../CMSIS/Include/core_cmInstr.h **** 
  58:../CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:../CMSIS/Include/core_cmInstr.h ****  */
  60:../CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  61:../CMSIS/Include/core_cmInstr.h **** 
  62:../CMSIS/Include/core_cmInstr.h **** 
  63:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:../CMSIS/Include/core_cmInstr.h **** 
  65:../CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:../CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  67:../CMSIS/Include/core_cmInstr.h ****  */
  68:../CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  69:../CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 70


  70:../CMSIS/Include/core_cmInstr.h **** 
  71:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  72:../CMSIS/Include/core_cmInstr.h **** 
  73:../CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:../CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:../CMSIS/Include/core_cmInstr.h ****  */
  76:../CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  77:../CMSIS/Include/core_cmInstr.h **** 
  78:../CMSIS/Include/core_cmInstr.h **** 
  79:../CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  80:../CMSIS/Include/core_cmInstr.h **** 
  81:../CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:../CMSIS/Include/core_cmInstr.h ****  */
  83:../CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  84:../CMSIS/Include/core_cmInstr.h **** 
  85:../CMSIS/Include/core_cmInstr.h **** 
  86:../CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:../CMSIS/Include/core_cmInstr.h **** 
  88:../CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:../CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:../CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:../CMSIS/Include/core_cmInstr.h ****  */
  92:../CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:../CMSIS/Include/core_cmInstr.h **** 
  94:../CMSIS/Include/core_cmInstr.h **** 
  95:../CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:../CMSIS/Include/core_cmInstr.h **** 
  97:../CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:../CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:../CMSIS/Include/core_cmInstr.h ****  */
 100:../CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:../CMSIS/Include/core_cmInstr.h **** 
 102:../CMSIS/Include/core_cmInstr.h **** 
 103:../CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:../CMSIS/Include/core_cmInstr.h **** 
 105:../CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:../CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:../CMSIS/Include/core_cmInstr.h ****  */
 108:../CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:../CMSIS/Include/core_cmInstr.h **** 
 110:../CMSIS/Include/core_cmInstr.h **** 
 111:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:../CMSIS/Include/core_cmInstr.h **** 
 113:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:../CMSIS/Include/core_cmInstr.h **** 
 115:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 117:../CMSIS/Include/core_cmInstr.h ****  */
 118:../CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 119:../CMSIS/Include/core_cmInstr.h **** 
 120:../CMSIS/Include/core_cmInstr.h **** 
 121:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:../CMSIS/Include/core_cmInstr.h **** 
 123:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:../CMSIS/Include/core_cmInstr.h **** 
 125:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
ARM GAS  /tmp/cc6pScoJ.s 			page 71


 127:../CMSIS/Include/core_cmInstr.h ****  */
 128:../CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:../CMSIS/Include/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:../CMSIS/Include/core_cmInstr.h **** {
 131:../CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 132:../CMSIS/Include/core_cmInstr.h ****   bx lr
 133:../CMSIS/Include/core_cmInstr.h **** }
 134:../CMSIS/Include/core_cmInstr.h **** #endif
 135:../CMSIS/Include/core_cmInstr.h **** 
 136:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:../CMSIS/Include/core_cmInstr.h **** 
 138:../CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:../CMSIS/Include/core_cmInstr.h **** 
 140:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 142:../CMSIS/Include/core_cmInstr.h ****  */
 143:../CMSIS/Include/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:../CMSIS/Include/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:../CMSIS/Include/core_cmInstr.h **** {
 146:../CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 147:../CMSIS/Include/core_cmInstr.h ****   bx lr
 148:../CMSIS/Include/core_cmInstr.h **** }
 149:../CMSIS/Include/core_cmInstr.h **** #endif
 150:../CMSIS/Include/core_cmInstr.h **** 
 151:../CMSIS/Include/core_cmInstr.h **** 
 152:../CMSIS/Include/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:../CMSIS/Include/core_cmInstr.h **** 
 154:../CMSIS/Include/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:../CMSIS/Include/core_cmInstr.h **** 
 156:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:../CMSIS/Include/core_cmInstr.h ****     \return               Rotated value
 159:../CMSIS/Include/core_cmInstr.h ****  */
 160:../CMSIS/Include/core_cmInstr.h **** #define __ROR                             __ror
 161:../CMSIS/Include/core_cmInstr.h **** 
 162:../CMSIS/Include/core_cmInstr.h **** 
 163:../CMSIS/Include/core_cmInstr.h **** /** \brief  Breakpoint
 164:../CMSIS/Include/core_cmInstr.h **** 
 165:../CMSIS/Include/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:../CMSIS/Include/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:../CMSIS/Include/core_cmInstr.h **** 
 168:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:../CMSIS/Include/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:../CMSIS/Include/core_cmInstr.h ****  */
 171:../CMSIS/Include/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:../CMSIS/Include/core_cmInstr.h **** 
 173:../CMSIS/Include/core_cmInstr.h **** 
 174:../CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:../CMSIS/Include/core_cmInstr.h **** 
 176:../CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:../CMSIS/Include/core_cmInstr.h **** 
 178:../CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:../CMSIS/Include/core_cmInstr.h **** 
 180:../CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:../CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 182:../CMSIS/Include/core_cmInstr.h ****  */
 183:../CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
ARM GAS  /tmp/cc6pScoJ.s 			page 72


 184:../CMSIS/Include/core_cmInstr.h **** 
 185:../CMSIS/Include/core_cmInstr.h **** 
 186:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:../CMSIS/Include/core_cmInstr.h **** 
 188:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:../CMSIS/Include/core_cmInstr.h **** 
 190:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:../CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:../CMSIS/Include/core_cmInstr.h ****  */
 193:../CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:../CMSIS/Include/core_cmInstr.h **** 
 195:../CMSIS/Include/core_cmInstr.h **** 
 196:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:../CMSIS/Include/core_cmInstr.h **** 
 198:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:../CMSIS/Include/core_cmInstr.h **** 
 200:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:../CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:../CMSIS/Include/core_cmInstr.h ****  */
 203:../CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:../CMSIS/Include/core_cmInstr.h **** 
 205:../CMSIS/Include/core_cmInstr.h **** 
 206:../CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:../CMSIS/Include/core_cmInstr.h **** 
 208:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:../CMSIS/Include/core_cmInstr.h **** 
 210:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:../CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:../CMSIS/Include/core_cmInstr.h ****  */
 213:../CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:../CMSIS/Include/core_cmInstr.h **** 
 215:../CMSIS/Include/core_cmInstr.h **** 
 216:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:../CMSIS/Include/core_cmInstr.h **** 
 218:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:../CMSIS/Include/core_cmInstr.h **** 
 220:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 221:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 223:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 224:../CMSIS/Include/core_cmInstr.h ****  */
 225:../CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:../CMSIS/Include/core_cmInstr.h **** 
 227:../CMSIS/Include/core_cmInstr.h **** 
 228:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:../CMSIS/Include/core_cmInstr.h **** 
 230:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:../CMSIS/Include/core_cmInstr.h **** 
 232:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 233:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 235:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 236:../CMSIS/Include/core_cmInstr.h ****  */
 237:../CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:../CMSIS/Include/core_cmInstr.h **** 
 239:../CMSIS/Include/core_cmInstr.h **** 
 240:../CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
ARM GAS  /tmp/cc6pScoJ.s 			page 73


 241:../CMSIS/Include/core_cmInstr.h **** 
 242:../CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:../CMSIS/Include/core_cmInstr.h **** 
 244:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 245:../CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:../CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 247:../CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 248:../CMSIS/Include/core_cmInstr.h ****  */
 249:../CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:../CMSIS/Include/core_cmInstr.h **** 
 251:../CMSIS/Include/core_cmInstr.h **** 
 252:../CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:../CMSIS/Include/core_cmInstr.h **** 
 254:../CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:../CMSIS/Include/core_cmInstr.h **** 
 256:../CMSIS/Include/core_cmInstr.h ****  */
 257:../CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 258:../CMSIS/Include/core_cmInstr.h **** 
 259:../CMSIS/Include/core_cmInstr.h **** 
 260:../CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 261:../CMSIS/Include/core_cmInstr.h **** 
 262:../CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 263:../CMSIS/Include/core_cmInstr.h **** 
 264:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:../CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:../CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 267:../CMSIS/Include/core_cmInstr.h ****  */
 268:../CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 269:../CMSIS/Include/core_cmInstr.h **** 
 270:../CMSIS/Include/core_cmInstr.h **** 
 271:../CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:../CMSIS/Include/core_cmInstr.h **** 
 273:../CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 274:../CMSIS/Include/core_cmInstr.h **** 
 275:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:../CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:../CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 278:../CMSIS/Include/core_cmInstr.h ****  */
 279:../CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 280:../CMSIS/Include/core_cmInstr.h **** 
 281:../CMSIS/Include/core_cmInstr.h **** 
 282:../CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 283:../CMSIS/Include/core_cmInstr.h **** 
 284:../CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:../CMSIS/Include/core_cmInstr.h **** 
 286:../CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:../CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 288:../CMSIS/Include/core_cmInstr.h ****  */
 289:../CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz
 290:../CMSIS/Include/core_cmInstr.h **** 
 291:../CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:../CMSIS/Include/core_cmInstr.h **** 
 293:../CMSIS/Include/core_cmInstr.h **** 
 294:../CMSIS/Include/core_cmInstr.h **** 
 295:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:../CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 297:../CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 74


 298:../CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 299:../CMSIS/Include/core_cmInstr.h **** 
 300:../CMSIS/Include/core_cmInstr.h **** 
 301:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:../CMSIS/Include/core_cmInstr.h **** /* TI CCS specific functions */
 303:../CMSIS/Include/core_cmInstr.h **** 
 304:../CMSIS/Include/core_cmInstr.h **** #include <cmsis_ccs.h>
 305:../CMSIS/Include/core_cmInstr.h **** 
 306:../CMSIS/Include/core_cmInstr.h **** 
 307:../CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:../CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 309:../CMSIS/Include/core_cmInstr.h **** 
 310:../CMSIS/Include/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:../CMSIS/Include/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:../CMSIS/Include/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:../CMSIS/Include/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:../CMSIS/Include/core_cmInstr.h **** #else
 317:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:../CMSIS/Include/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:../CMSIS/Include/core_cmInstr.h **** #endif
 320:../CMSIS/Include/core_cmInstr.h **** 
 321:../CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 322:../CMSIS/Include/core_cmInstr.h **** 
 323:../CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:../CMSIS/Include/core_cmInstr.h ****  */
 325:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:../CMSIS/Include/core_cmInstr.h **** {
 327:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 328:../CMSIS/Include/core_cmInstr.h **** }
 329:../CMSIS/Include/core_cmInstr.h **** 
 330:../CMSIS/Include/core_cmInstr.h **** 
 331:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:../CMSIS/Include/core_cmInstr.h **** 
 333:../CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:../CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 335:../CMSIS/Include/core_cmInstr.h ****  */
 336:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:../CMSIS/Include/core_cmInstr.h **** {
 338:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 339:../CMSIS/Include/core_cmInstr.h **** }
 340:../CMSIS/Include/core_cmInstr.h **** 
 341:../CMSIS/Include/core_cmInstr.h **** 
 342:../CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 343:../CMSIS/Include/core_cmInstr.h **** 
 344:../CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:../CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:../CMSIS/Include/core_cmInstr.h ****  */
 347:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:../CMSIS/Include/core_cmInstr.h **** {
 349:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 350:../CMSIS/Include/core_cmInstr.h **** }
 351:../CMSIS/Include/core_cmInstr.h **** 
 352:../CMSIS/Include/core_cmInstr.h **** 
 353:../CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 354:../CMSIS/Include/core_cmInstr.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 75


 355:../CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:../CMSIS/Include/core_cmInstr.h ****  */
 357:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:../CMSIS/Include/core_cmInstr.h **** {
 359:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 360:../CMSIS/Include/core_cmInstr.h **** }
 361:../CMSIS/Include/core_cmInstr.h **** 
 362:../CMSIS/Include/core_cmInstr.h **** 
 363:../CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:../CMSIS/Include/core_cmInstr.h **** 
 365:../CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:../CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:../CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 368:../CMSIS/Include/core_cmInstr.h ****  */
 369:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:../CMSIS/Include/core_cmInstr.h **** {
 371:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 372:../CMSIS/Include/core_cmInstr.h **** }
 373:../CMSIS/Include/core_cmInstr.h **** 
 374:../CMSIS/Include/core_cmInstr.h **** 
 375:../CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:../CMSIS/Include/core_cmInstr.h **** 
 377:../CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:../CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:../CMSIS/Include/core_cmInstr.h ****  */
 380:../CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:../CMSIS/Include/core_cmInstr.h **** {
 382:../CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 923              		.loc 6 382 0
 924              	@ 382 "../CMSIS/Include/core_cmInstr.h" 1
 925 0448 BFF34F8F 		dsb
 926              	@ 0 "" 2
 927              		.thumb
 928              	.LBE59:
 929              	.LBE58:
1378:../CMSIS/Include/core_cm3.h **** }
1379:../CMSIS/Include/core_cm3.h **** 
1380:../CMSIS/Include/core_cm3.h **** 
1381:../CMSIS/Include/core_cm3.h **** /** \brief  Get Active Interrupt
1382:../CMSIS/Include/core_cm3.h **** 
1383:../CMSIS/Include/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1384:../CMSIS/Include/core_cm3.h **** 
1385:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1386:../CMSIS/Include/core_cm3.h **** 
1387:../CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not active.
1388:../CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is active.
1389:../CMSIS/Include/core_cm3.h ****  */
1390:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1391:../CMSIS/Include/core_cm3.h **** {
1392:../CMSIS/Include/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1393:../CMSIS/Include/core_cm3.h **** }
1394:../CMSIS/Include/core_cm3.h **** 
1395:../CMSIS/Include/core_cm3.h **** 
1396:../CMSIS/Include/core_cm3.h **** /** \brief  Set Interrupt Priority
1397:../CMSIS/Include/core_cm3.h **** 
1398:../CMSIS/Include/core_cm3.h ****     The function sets the priority of an interrupt.
1399:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/cc6pScoJ.s 			page 76


1400:../CMSIS/Include/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1401:../CMSIS/Include/core_cm3.h **** 
1402:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1403:../CMSIS/Include/core_cm3.h ****     \param [in]  priority  Priority to set.
1404:../CMSIS/Include/core_cm3.h ****  */
1405:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1406:../CMSIS/Include/core_cm3.h **** {
1407:../CMSIS/Include/core_cm3.h ****   if(IRQn < 0) {
1408:../CMSIS/Include/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1409:../CMSIS/Include/core_cm3.h ****   else {
1410:../CMSIS/Include/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1411:../CMSIS/Include/core_cm3.h **** }
1412:../CMSIS/Include/core_cm3.h **** 
1413:../CMSIS/Include/core_cm3.h **** 
1414:../CMSIS/Include/core_cm3.h **** /** \brief  Get Interrupt Priority
1415:../CMSIS/Include/core_cm3.h **** 
1416:../CMSIS/Include/core_cm3.h ****     The function reads the priority of an interrupt. The interrupt
1417:../CMSIS/Include/core_cm3.h ****     number can be positive to specify an external (device specific)
1418:../CMSIS/Include/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1419:../CMSIS/Include/core_cm3.h **** 
1420:../CMSIS/Include/core_cm3.h **** 
1421:../CMSIS/Include/core_cm3.h ****     \param [in]   IRQn  Interrupt number.
1422:../CMSIS/Include/core_cm3.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1423:../CMSIS/Include/core_cm3.h ****                         priority bits of the microcontroller.
1424:../CMSIS/Include/core_cm3.h ****  */
1425:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1426:../CMSIS/Include/core_cm3.h **** {
1427:../CMSIS/Include/core_cm3.h **** 
1428:../CMSIS/Include/core_cm3.h ****   if(IRQn < 0) {
1429:../CMSIS/Include/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1430:../CMSIS/Include/core_cm3.h ****   else {
1431:../CMSIS/Include/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1432:../CMSIS/Include/core_cm3.h **** }
1433:../CMSIS/Include/core_cm3.h **** 
1434:../CMSIS/Include/core_cm3.h **** 
1435:../CMSIS/Include/core_cm3.h **** /** \brief  Encode Priority
1436:../CMSIS/Include/core_cm3.h **** 
1437:../CMSIS/Include/core_cm3.h ****     The function encodes the priority for an interrupt with the given priority group,
1438:../CMSIS/Include/core_cm3.h ****     preemptive priority value, and subpriority value.
1439:../CMSIS/Include/core_cm3.h ****     In case of a conflict between priority grouping and available
1440:../CMSIS/Include/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1441:../CMSIS/Include/core_cm3.h **** 
1442:../CMSIS/Include/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1443:../CMSIS/Include/core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1444:../CMSIS/Include/core_cm3.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1445:../CMSIS/Include/core_cm3.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1446:../CMSIS/Include/core_cm3.h ****  */
1447:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1448:../CMSIS/Include/core_cm3.h **** {
1449:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1450:../CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1451:../CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1452:../CMSIS/Include/core_cm3.h **** 
1453:../CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1454:../CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1455:../CMSIS/Include/core_cm3.h **** 
1456:../CMSIS/Include/core_cm3.h ****   return (
ARM GAS  /tmp/cc6pScoJ.s 			page 77


1457:../CMSIS/Include/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1458:../CMSIS/Include/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1459:../CMSIS/Include/core_cm3.h ****          );
1460:../CMSIS/Include/core_cm3.h **** }
1461:../CMSIS/Include/core_cm3.h **** 
1462:../CMSIS/Include/core_cm3.h **** 
1463:../CMSIS/Include/core_cm3.h **** /** \brief  Decode Priority
1464:../CMSIS/Include/core_cm3.h **** 
1465:../CMSIS/Include/core_cm3.h ****     The function decodes an interrupt priority value with a given priority group to
1466:../CMSIS/Include/core_cm3.h ****     preemptive priority value and subpriority value.
1467:../CMSIS/Include/core_cm3.h ****     In case of a conflict between priority grouping and available
1468:../CMSIS/Include/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1469:../CMSIS/Include/core_cm3.h **** 
1470:../CMSIS/Include/core_cm3.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1471:../CMSIS/Include/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1472:../CMSIS/Include/core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1473:../CMSIS/Include/core_cm3.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1474:../CMSIS/Include/core_cm3.h ****  */
1475:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1476:../CMSIS/Include/core_cm3.h **** {
1477:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1478:../CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1479:../CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1480:../CMSIS/Include/core_cm3.h **** 
1481:../CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1482:../CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1483:../CMSIS/Include/core_cm3.h **** 
1484:../CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1485:../CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1486:../CMSIS/Include/core_cm3.h **** }
1487:../CMSIS/Include/core_cm3.h **** 
1488:../CMSIS/Include/core_cm3.h **** 
1489:../CMSIS/Include/core_cm3.h **** /** \brief  System Reset
1490:../CMSIS/Include/core_cm3.h **** 
1491:../CMSIS/Include/core_cm3.h ****     The function initiates a system reset request to reset the MCU.
1492:../CMSIS/Include/core_cm3.h ****  */
1493:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1494:../CMSIS/Include/core_cm3.h **** {
1495:../CMSIS/Include/core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1496:../CMSIS/Include/core_cm3.h ****                                                                   buffered write are completed befo
1497:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1498:../CMSIS/Include/core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 930              		.loc 4 1498 0
 931 044c 094A     		ldr	r2, .L70+20
 932 044e 0A4B     		ldr	r3, .L70+24
 933 0450 D168     		ldr	r1, [r2, #12]
 934 0452 01F4E061 		and	r1, r1, #1792
 935 0456 0B43     		orrs	r3, r3, r1
1497:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 936              		.loc 4 1497 0
 937 0458 D360     		str	r3, [r2, #12]
 938              	.LBB60:
 939              	.LBB61:
 940              		.loc 6 382 0
 941              	@ 382 "../CMSIS/Include/core_cmInstr.h" 1
 942 045a BFF34F8F 		dsb
 943              	@ 0 "" 2
ARM GAS  /tmp/cc6pScoJ.s 			page 78


 944              		.thumb
 945              	.L50:
 946 045e FEE7     		b	.L50
 947              	.L71:
 948              		.align	2
 949              	.L70:
 950 0460 AF010000 		.word	.LC21
 951 0464 DA010000 		.word	.LC22
 952 0468 05020000 		.word	.LC23
 953 046c 10020000 		.word	.LC24
 954 0470 2C020000 		.word	.LC25
 955 0474 00ED00E0 		.word	-536810240
 956 0478 0400FA05 		.word	100270084
 957              	.LBE61:
 958              	.LBE60:
 959              	.LBE57:
 960              	.LBE56:
 961              		.cfi_endproc
 962              	.LFE118:
 964              		.section	.text.DelayTick,"ax",%progbits
 965              		.align	1
 966              		.global	DelayTick
 967              		.thumb
 968              		.thumb_func
 970              	DelayTick:
 971              	.LFB123:
 680:../main.c     **** 
 681:../main.c     **** 
 682:../main.c     **** /***************************************************************************//**
 683:../main.c     ****  *
 684:../main.c     ****  * @brief	Delay for one tick
 685:../main.c     ****  *
 686:../main.c     ****  * This is a delay routine for very short durations, it returns to the caller
 687:../main.c     ****  * after one tick, i.e. with a 32kHz XTAL about 30 microseconds (may be up to
 688:../main.c     ****  * 59 microseconds).
 689:../main.c     ****  *
 690:../main.c     ****  ******************************************************************************/
 691:../main.c     **** void	DelayTick (void)
 692:../main.c     **** {
 972              		.loc 1 692 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 693:../main.c     **** uint32_t currCnt;
 694:../main.c     **** 
 695:../main.c     ****     /* Get current time counter value */
 696:../main.c     ****     currCnt = RTC->CNT;
 977              		.loc 1 696 0
 978 0000 054B     		ldr	r3, .L77
 979 0002 5A68     		ldr	r2, [r3, #4]
 980              	.LVL128:
 981              	.L74:
 697:../main.c     **** 
 698:../main.c     ****     /* First synchronize with next counter change */
 699:../main.c     ****     while (RTC->CNT == currCnt)
 982              		.loc 1 699 0 discriminator 1
ARM GAS  /tmp/cc6pScoJ.s 			page 79


 983 0004 5968     		ldr	r1, [r3, #4]
 984 0006 9142     		cmp	r1, r2
 985 0008 FCD0     		beq	.L74
 700:../main.c     **** 	;
 701:../main.c     **** 
 702:../main.c     ****     /* Wait another tick change */
 703:../main.c     ****     currCnt = RTC->CNT;
 986              		.loc 1 703 0
 987 000a 034A     		ldr	r2, .L77
 988              	.LVL129:
 989 000c 5268     		ldr	r2, [r2, #4]
 990              	.LVL130:
 991              	.L76:
 704:../main.c     ****     while (RTC->CNT == currCnt)
 992              		.loc 1 704 0 discriminator 1
 993 000e 5968     		ldr	r1, [r3, #4]
 994 0010 9142     		cmp	r1, r2
 995 0012 FCD0     		beq	.L76
 705:../main.c     **** 	;
 706:../main.c     **** }
 996              		.loc 1 706 0
 997 0014 7047     		bx	lr
 998              	.L78:
 999 0016 00BF     		.align	2
 1000              	.L77:
 1001 0018 00000840 		.word	1074266112
 1002              		.cfi_endproc
 1003              	.LFE123:
 1005              		.comm	g_flgIRQ,1,1
 1006              		.comm	g_DMA_Callback,96,4
 1007              		.comm	g_DMA_ControlBlock,256,256
 1008              		.section	.rodata
 1009              		.set	.LANCHOR0,. + 0
 1010              	.LC14:
 1011 0000 3C756E6B 		.ascii	"<unknown>\000"
 1011      6E6F776E 
 1011      3E00
 1012 000a 00000000 		.space	6
 1012      0000
 1013              		.section	.rodata.str1.1,"aMS",%progbits,1
 1014              	.LC0:
 1015 0000 2E2E2F6D 		.ascii	"../main.c\000"
 1015      61696E2E 
 1015      6300
 1016              	.LC1:
 1017 000a 41505244 		.ascii	"APRDL\000"
 1017      4C00
 1018              	.LC2:
 1019 0010 4D415052 		.ascii	"MAPRDL\000"
 1019      444C00
 1020              	.LC3:
 1021 0017 54414D44 		.ascii	"TAMDL\000"
 1021      4C00
 1022              	.LC4:
 1023 001d 0A2A2A2A 		.ascii	"\012***** EFM32_Boot V\000"
 1023      2A2A2045 
 1023      464D3332 
ARM GAS  /tmp/cc6pScoJ.s 			page 80


 1023      5F426F6F 
 1023      74205600 
 1024              	.LC5:
 1025 0031 202A2A2A 		.ascii	" *****\012\012\000"
 1025      2A2A0A0A 
 1025      00
 1026              	.LC6:
 1027 003a 3D3D3D3D 		.ascii	"======================================\000"
 1027      3D3D3D3D 
 1027      3D3D3D3D 
 1027      3D3D3D3D 
 1027      3D3D3D3D 
 1028              	.LC7:
 1029 0061 45464D33 		.ascii	"EFM32_Boot V%s (%s %s)\000"
 1029      325F426F 
 1029      6F742056 
 1029      25732028 
 1029      25732025 
 1030              	.LC8:
 1031 0078 506C6174 		.ascii	"Platform: %s\000"
 1031      666F726D 
 1031      3A202573 
 1031      00
 1032              	.LC9:
 1033 0085 25732E55 		.ascii	"%s.UPD\000"
 1033      504400
 1034              	.LC10:
 1035 008c 4D43553A 		.ascii	"MCU: %s HW-ID: 0x%08lX%08lX\000"
 1035      20257320 
 1035      48572D49 
 1035      443A2030 
 1035      78253038 
 1036              	.LC11:
 1037 00a8 45464D33 		.ascii	"EFM32G230F128\000"
 1037      32473233 
 1037      30463132 
 1037      3800
 1038              	.LC12:
 1039 00b6 2F00     		.ascii	"/\000"
 1040              	.LC13:
 1041 00b8 2A2E5550 		.ascii	"*.UPD\000"
 1041      4400
 1042              	.LC15:
 1043 00be 466F756E 		.ascii	"Found update file for this board, reprogramming FLA"
 1043      64207570 
 1043      64617465 
 1043      2066696C 
 1043      6520666F 
 1044 00f1 534800   		.ascii	"SH\000"
 1045              	.LC16:
 1046 00f4 55706461 		.ascii	"Update from version %s to %s finished - no errors\000"
 1046      74652066 
 1046      726F6D20 
 1046      76657273 
 1046      696F6E20 
 1047              	.LC17:
 1048 0126 55706461 		.ascii	"Update aborted - File READ ERROR\000"
ARM GAS  /tmp/cc6pScoJ.s 			page 81


 1048      74652061 
 1048      626F7274 
 1048      6564202D 
 1048      2046696C 
 1049              	.LC18:
 1050 0147 55706461 		.ascii	"Update aborted - FLASH ERASE ERROR\000"
 1050      74652061 
 1050      626F7274 
 1050      6564202D 
 1050      20464C41 
 1051              	.LC19:
 1052 016a 55706461 		.ascii	"Update aborted - FLASH WRITE ERROR\000"
 1052      74652061 
 1052      626F7274 
 1052      6564202D 
 1052      20464C41 
 1053              	.LC20:
 1054 018d 55706461 		.ascii	"Update aborted - Unknown Error %d\000"
 1054      74652061 
 1054      626F7274 
 1054      6564202D 
 1054      20556E6B 
 1055              	.LC21:
 1056 01af 54686572 		.ascii	"There exist no update file for this board!\000"
 1056      65206578 
 1056      69737420 
 1056      6E6F2075 
 1056      70646174 
 1057              	.LC22:
 1058 01da 57616974 		.ascii	"Waiting until the SD-Card has been removed\000"
 1058      696E6720 
 1058      756E7469 
 1058      6C207468 
 1058      65205344 
 1059              	.LC23:
 1060 0205 55504441 		.ascii	"UPDATE.TXT\000"
 1060      54452E54 
 1060      585400
 1061              	.LC24:
 1062 0210 4E6F2075 		.ascii	"No update files on SD-Card\012\000"
 1062      70646174 
 1062      65206669 
 1062      6C657320 
 1062      6F6E2053 
 1063              	.LC25:
 1064 022c 53746172 		.ascii	"Starting Application...\012\012\000"
 1064      74696E67 
 1064      20417070 
 1064      6C696361 
 1064      74696F6E 
 1065              		.text
 1066              	.Letext0:
 1067              		.file 7 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 1068              		.file 8 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 1069              		.file 9 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1070              		.file 10 "../Device/EnergyMicro/EFM32G/Include/efm32g_rtc.h"
 1071              		.file 11 "../Device/EnergyMicro/EFM32G/Include/efm32g_gpio_p.h"
ARM GAS  /tmp/cc6pScoJ.s 			page 82


 1072              		.file 12 "../Device/EnergyMicro/EFM32G/Include/efm32g_gpio.h"
 1073              		.file 13 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_descriptor.h"
 1074              		.file 14 "../Device/EnergyMicro/EFM32G/Include/efm32g_devinfo.h"
 1075              		.file 15 "../emlib/inc/em_system.h"
 1076              		.file 16 "../emlib/inc/em_cmu.h"
 1077              		.file 17 "../emlib/inc/em_dma.h"
 1078              		.file 18 "../config.h"
 1079              		.file 19 "../emlib/inc/em_gpio.h"
 1080              		.file 20 "../drivers/microsd.h"
 1081              		.file 21 "../emlib/inc/em_assert.h"
 1082              		.file 22 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/string.h"
 1083              		.file 23 "../drivers/Flash.h"
 1084              		.file 24 "../drivers/LEUART.h"
 1085              		.file 25 "../drivers/Logging.h"
 1086              		.file 26 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdio.h"
