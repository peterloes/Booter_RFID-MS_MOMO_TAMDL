ARM GAS  /tmp/ccnPSQXa.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"em_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DMA_Prepare,"ax",%progbits
  19              		.align	1
  20              		.thumb
  21              		.thumb_func
  23              	DMA_Prepare:
  24              	.LFB71:
  25              		.file 1 "../emlib/src/em_dma.c"
   1:../emlib/src/em_dma.c **** /***************************************************************************//**
   2:../emlib/src/em_dma.c ****  * @file
   3:../emlib/src/em_dma.c ****  * @brief Direct memory access (DMA) module peripheral API
   4:../emlib/src/em_dma.c ****  * @author Energy Micro AS
   5:../emlib/src/em_dma.c ****  * @version 3.20.2
   6:../emlib/src/em_dma.c ****  *******************************************************************************
   7:../emlib/src/em_dma.c ****  * @section License
   8:../emlib/src/em_dma.c ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/src/em_dma.c ****  *******************************************************************************
  10:../emlib/src/em_dma.c ****  *
  11:../emlib/src/em_dma.c ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/src/em_dma.c ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/src/em_dma.c ****  * freely, subject to the following restrictions:
  14:../emlib/src/em_dma.c ****  *
  15:../emlib/src/em_dma.c ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/src/em_dma.c ****  *    claim that you wrote the original software.
  17:../emlib/src/em_dma.c ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/src/em_dma.c ****  *    misrepresented as being the original software.
  19:../emlib/src/em_dma.c ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/src/em_dma.c ****  *
  21:../emlib/src/em_dma.c ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/src/em_dma.c ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/src/em_dma.c ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/src/em_dma.c ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/src/em_dma.c ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/src/em_dma.c ****  * of any proprietary rights of a third party.
  27:../emlib/src/em_dma.c ****  *
  28:../emlib/src/em_dma.c ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/src/em_dma.c ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/src/em_dma.c ****  * arising from your use of this Software.
  31:../emlib/src/em_dma.c ****  *
  32:../emlib/src/em_dma.c ****  ******************************************************************************/
  33:../emlib/src/em_dma.c **** #include "em_dma.h"
ARM GAS  /tmp/ccnPSQXa.s 			page 2


  34:../emlib/src/em_dma.c **** #if defined( DMA_PRESENT )
  35:../emlib/src/em_dma.c **** 
  36:../emlib/src/em_dma.c **** #include "em_cmu.h"
  37:../emlib/src/em_dma.c **** #include "em_assert.h"
  38:../emlib/src/em_dma.c **** #include "em_bitband.h"
  39:../emlib/src/em_dma.c **** 
  40:../emlib/src/em_dma.c **** /***************************************************************************//**
  41:../emlib/src/em_dma.c ****  * @addtogroup EM_Library
  42:../emlib/src/em_dma.c ****  * @{
  43:../emlib/src/em_dma.c ****  ******************************************************************************/
  44:../emlib/src/em_dma.c **** 
  45:../emlib/src/em_dma.c **** /***************************************************************************//**
  46:../emlib/src/em_dma.c ****  * @addtogroup DMA
  47:../emlib/src/em_dma.c ****  * @brief Direct Memory Access (DMA) Peripheral API
  48:../emlib/src/em_dma.c ****  * @details
  49:../emlib/src/em_dma.c ****  *  These DMA access functions provide basic support for the following
  50:../emlib/src/em_dma.c ****  *  types of DMA cycles:
  51:../emlib/src/em_dma.c ****  *
  52:../emlib/src/em_dma.c ****  *  @li @b Basic, used for transferring data between memory and peripherals.
  53:../emlib/src/em_dma.c ****  *  @li @b Auto-request, used for transferring data between memory locations.
  54:../emlib/src/em_dma.c ****  *  @li @b Ping-pong, used for for continuous transfer of data between memory
  55:../emlib/src/em_dma.c ****  *    and peripherals, automatically toggling between primary and alternate
  56:../emlib/src/em_dma.c ****  *    descriptors.
  57:../emlib/src/em_dma.c ****  *  @li @b Memory @b scatter-gather, used for transferring a number of buffers
  58:../emlib/src/em_dma.c ****  *    between memory locations.
  59:../emlib/src/em_dma.c ****  *  @li @b Peripheral @b scatter-gather, used for transferring a number of
  60:../emlib/src/em_dma.c ****  *    buffers between memory and peripherals.
  61:../emlib/src/em_dma.c ****  *
  62:../emlib/src/em_dma.c ****  *  A basic understanding of the DMA controller is assumed. Please refer to
  63:../emlib/src/em_dma.c ****  *  the EFM32 reference manual for further details.
  64:../emlib/src/em_dma.c ****  *
  65:../emlib/src/em_dma.c ****  *  The term 'descriptor' is used as a synonym to the 'channel control data
  66:../emlib/src/em_dma.c ****  *  structure' term.
  67:../emlib/src/em_dma.c ****  *
  68:../emlib/src/em_dma.c ****  *  In order to use the DMA controller, the initialization function must have
  69:../emlib/src/em_dma.c ****  *  been executed once (normally during system init):
  70:../emlib/src/em_dma.c ****  * @verbatim
  71:../emlib/src/em_dma.c ****  * DMA_Init();
  72:../emlib/src/em_dma.c ****  * @endverbatim
  73:../emlib/src/em_dma.c ****  *
  74:../emlib/src/em_dma.c ****  *  Then, normally a user of a DMA channel configures the channel:
  75:../emlib/src/em_dma.c ****  * @verbatim
  76:../emlib/src/em_dma.c ****  * DMA_CfgChannel();
  77:../emlib/src/em_dma.c ****  * @endverbatim
  78:../emlib/src/em_dma.c ****  *
  79:../emlib/src/em_dma.c ****  *  The channel configuration only has to be done once, if reusing the channel
  80:../emlib/src/em_dma.c ****  *  for the same purpose later.
  81:../emlib/src/em_dma.c ****  *
  82:../emlib/src/em_dma.c ****  *  In order to set up a DMA cycle, the primary and/or alternate descriptor
  83:../emlib/src/em_dma.c ****  *  has to be set up as indicated below.
  84:../emlib/src/em_dma.c ****  *
  85:../emlib/src/em_dma.c ****  *  For basic or auto-request cycles, use once on either primary or alternate
  86:../emlib/src/em_dma.c ****  *  descriptor:
  87:../emlib/src/em_dma.c ****  * @verbatim
  88:../emlib/src/em_dma.c ****  * DMA_CfgDescr();
  89:../emlib/src/em_dma.c ****  * @endverbatim
  90:../emlib/src/em_dma.c ****  *
ARM GAS  /tmp/ccnPSQXa.s 			page 3


  91:../emlib/src/em_dma.c ****  * For ping-pong cycles, configure both primary or alternate descriptors:
  92:../emlib/src/em_dma.c ****  * @verbatim
  93:../emlib/src/em_dma.c ****  * DMA_CfgDescr(); // Primary descriptor config
  94:../emlib/src/em_dma.c ****  * DMA_CfgDescr(); // Alternate descriptor config
  95:../emlib/src/em_dma.c ****  * @endverbatim
  96:../emlib/src/em_dma.c ****  *
  97:../emlib/src/em_dma.c ****  * For scatter-gather cycles, the alternate descriptor array must be programmed:
  98:../emlib/src/em_dma.c ****  * @verbatim
  99:../emlib/src/em_dma.c ****  * // 'n' is the number of scattered buffers
 100:../emlib/src/em_dma.c ****  * // 'descr' points to the start of the alternate descriptor array
 101:../emlib/src/em_dma.c ****  *
 102:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 103:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, 0, cfg);
 104:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 105:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, 1, cfg);
 106:../emlib/src/em_dma.c ****  * :
 107:../emlib/src/em_dma.c ****  * // Fill in 'cfg'
 108:../emlib/src/em_dma.c ****  * DMA_CfgDescrScatterGather(descr, n - 1, cfg);
 109:../emlib/src/em_dma.c ****  * @endverbatim
 110:../emlib/src/em_dma.c ****  *
 111:../emlib/src/em_dma.c ****  * In many cases, the descriptor configuration only has to be done once, if
 112:../emlib/src/em_dma.c ****  * re-using the channel for the same type of DMA cycles later.
 113:../emlib/src/em_dma.c ****  *
 114:../emlib/src/em_dma.c ****  * In order to activate the DMA cycle, use the respective DMA_Activate...()
 115:../emlib/src/em_dma.c ****  * function.
 116:../emlib/src/em_dma.c ****  *
 117:../emlib/src/em_dma.c ****  * For ping-pong DMA cycles, use DMA_RefreshPingPong() from the callback to
 118:../emlib/src/em_dma.c ****  * prepare the completed descriptor for reuse. Notice that the refresh must
 119:../emlib/src/em_dma.c ****  * be done prior to the other active descriptor completes, otherwise the
 120:../emlib/src/em_dma.c ****  * ping-pong DMA cycle will halt.
 121:../emlib/src/em_dma.c ****  * @{
 122:../emlib/src/em_dma.c ****  ******************************************************************************/
 123:../emlib/src/em_dma.c **** 
 124:../emlib/src/em_dma.c **** /*******************************************************************************
 125:../emlib/src/em_dma.c ****  **************************   LOCAL FUNCTIONS   ********************************
 126:../emlib/src/em_dma.c ****  ******************************************************************************/
 127:../emlib/src/em_dma.c **** 
 128:../emlib/src/em_dma.c **** /** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */
 129:../emlib/src/em_dma.c **** 
 130:../emlib/src/em_dma.c **** /***************************************************************************//**
 131:../emlib/src/em_dma.c ****  * @brief
 132:../emlib/src/em_dma.c ****  *   Prepare descriptor for DMA cycle.
 133:../emlib/src/em_dma.c ****  *
 134:../emlib/src/em_dma.c ****  * @details
 135:../emlib/src/em_dma.c ****  *   This function prepares the last pieces of configuration required to start a
 136:../emlib/src/em_dma.c ****  *   DMA cycle. Since the DMA controller itself modifies some parts of the
 137:../emlib/src/em_dma.c ****  *   descriptor during use, those parts need to be refreshed if reusing a
 138:../emlib/src/em_dma.c ****  *   descriptor configuration.
 139:../emlib/src/em_dma.c ****  *
 140:../emlib/src/em_dma.c ****  * @note
 141:../emlib/src/em_dma.c ****  *   If using this function on a descriptor already activated and in use by the
 142:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 143:../emlib/src/em_dma.c ****  *
 144:../emlib/src/em_dma.c ****  * @param[in] channel
 145:../emlib/src/em_dma.c ****  *   DMA channel to prepare for DMA cycle.
 146:../emlib/src/em_dma.c ****  *
 147:../emlib/src/em_dma.c ****  * @param[in] cycleCtrl
ARM GAS  /tmp/ccnPSQXa.s 			page 4


 148:../emlib/src/em_dma.c ****  *   DMA cycle type to prepare for.
 149:../emlib/src/em_dma.c ****  *
 150:../emlib/src/em_dma.c ****  * @param[in] primary
 151:../emlib/src/em_dma.c ****  *   @li true - prepare primary descriptor
 152:../emlib/src/em_dma.c ****  *   @li false - prepare alternate descriptor
 153:../emlib/src/em_dma.c ****  *
 154:../emlib/src/em_dma.c ****  * @param[in] useBurst
 155:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 156:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 157:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 158:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 159:../emlib/src/em_dma.c ****  *
 160:../emlib/src/em_dma.c ****  * @param[in] dst
 161:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 162:../emlib/src/em_dma.c ****  *   descriptor as is.
 163:../emlib/src/em_dma.c ****  *
 164:../emlib/src/em_dma.c ****  * @param[in] src
 165:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 166:../emlib/src/em_dma.c ****  *   descriptor as is.
 167:../emlib/src/em_dma.c ****  *
 168:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 169:../emlib/src/em_dma.c ****  *   Number of elements (minus 1) to transfer (<= 1023).
 170:../emlib/src/em_dma.c ****  ******************************************************************************/
 171:../emlib/src/em_dma.c **** static void DMA_Prepare(unsigned int channel,
 172:../emlib/src/em_dma.c ****                         DMA_CycleCtrl_TypeDef cycleCtrl,
 173:../emlib/src/em_dma.c ****                         bool primary,
 174:../emlib/src/em_dma.c ****                         bool useBurst,
 175:../emlib/src/em_dma.c ****                         void *dst,
 176:../emlib/src/em_dma.c ****                         void *src,
 177:../emlib/src/em_dma.c ****                         unsigned int nMinus1)
 178:../emlib/src/em_dma.c **** {
  26              		.loc 1 178 0
  27              		.cfi_startproc
  28              		@ args = 12, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
 179:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 180:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *primDescr;
 181:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 182:../emlib/src/em_dma.c ****   uint32_t               inc;
 183:../emlib/src/em_dma.c ****   uint32_t               chBit;
 184:../emlib/src/em_dma.c ****   uint32_t               tmp;
 185:../emlib/src/em_dma.c **** 
 186:../emlib/src/em_dma.c ****   primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
  39              		.loc 1 186 0
  40 0004 DFF88080 		ldr	r8, .L25
  41 0008 0401     		lsls	r4, r0, #4
  42 000a D8F808C0 		ldr	ip, [r8, #8]
 178:../emlib/src/em_dma.c **** {
ARM GAS  /tmp/ccnPSQXa.s 			page 5


  43              		.loc 1 178 0
  44 000e 069D     		ldr	r5, [sp, #24]
  45 0010 079F     		ldr	r7, [sp, #28]
  46 0012 089E     		ldr	r6, [sp, #32]
  47              		.loc 1 186 0
  48 0014 A444     		add	ip, ip, r4
  49              	.LVL1:
 187:../emlib/src/em_dma.c **** 
 188:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
 189:../emlib/src/em_dma.c ****   if (primary)
  50              		.loc 1 189 0
  51 0016 1AB9     		cbnz	r2, .L12
 190:../emlib/src/em_dma.c ****   {
 191:../emlib/src/em_dma.c ****     descr = primDescr;
 192:../emlib/src/em_dma.c ****   }
 193:../emlib/src/em_dma.c ****   else
 194:../emlib/src/em_dma.c ****   {
 195:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
  52              		.loc 1 195 0
  53 0018 D8F80C80 		ldr	r8, [r8, #12]
  54 001c 4444     		add	r4, r4, r8
  55              	.LVL2:
  56 001e 00E0     		b	.L2
  57              	.LVL3:
  58              	.L12:
 191:../emlib/src/em_dma.c ****     descr = primDescr;
  59              		.loc 1 191 0
  60 0020 6446     		mov	r4, ip
  61              	.L2:
  62              	.LVL4:
 196:../emlib/src/em_dma.c ****   }
 197:../emlib/src/em_dma.c **** 
 198:../emlib/src/em_dma.c ****   /* If callback defined, update info on whether callback is issued */
 199:../emlib/src/em_dma.c ****   /* for primary or alternate descriptor. Mainly needed for ping-pong */
 200:../emlib/src/em_dma.c ****   /* cycles. */
 201:../emlib/src/em_dma.c ****   cb = (DMA_CB_TypeDef *)(primDescr->USER);
  63              		.loc 1 201 0
  64 0022 DCF80CC0 		ldr	ip, [ip, #12]
  65              	.LVL5:
 202:../emlib/src/em_dma.c ****   if (cb)
  66              		.loc 1 202 0
  67 0026 BCF1000F 		cmp	ip, #0
  68 002a 01D0     		beq	.L3
 203:../emlib/src/em_dma.c ****   {
 204:../emlib/src/em_dma.c ****     cb->primary = (uint8_t)primary;
  69              		.loc 1 204 0
  70 002c 8CF80820 		strb	r2, [ip, #8]
  71              	.L3:
 205:../emlib/src/em_dma.c ****   }
 206:../emlib/src/em_dma.c **** 
 207:../emlib/src/em_dma.c ****   if (src)
  72              		.loc 1 207 0
  73 0030 57B1     		cbz	r7, .L4
 208:../emlib/src/em_dma.c ****   {
 209:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
  74              		.loc 1 209 0
  75 0032 D4F808C0 		ldr	ip, [r4, #8]
ARM GAS  /tmp/ccnPSQXa.s 			page 6


  76              	.LVL6:
  77 0036 CCF3816C 		ubfx	ip, ip, #26, #2
  78              	.LVL7:
 210:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_SRC_INC_NONE)
  79              		.loc 1 210 0
  80 003a BCF1030F 		cmp	ip, #3
 211:../emlib/src/em_dma.c ****     {
 212:../emlib/src/em_dma.c ****       descr->SRCEND = src;
 213:../emlib/src/em_dma.c ****     }
 214:../emlib/src/em_dma.c ****     else
 215:../emlib/src/em_dma.c ****     {
 216:../emlib/src/em_dma.c ****       descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
  81              		.loc 1 216 0
  82 003e 1CBF     		itt	ne
  83 0040 06FA0CFC 		lslne	ip, r6, ip
  84              	.LVL8:
  85 0044 6744     		addne	r7, r7, ip
  86 0046 2760     		str	r7, [r4]
  87              	.LVL9:
  88              	.L4:
 217:../emlib/src/em_dma.c ****     }
 218:../emlib/src/em_dma.c ****   }
 219:../emlib/src/em_dma.c **** 
 220:../emlib/src/em_dma.c ****   if (dst)
  89              		.loc 1 220 0
  90 0048 3DB1     		cbz	r5, .L6
 221:../emlib/src/em_dma.c ****   {
 222:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
  91              		.loc 1 222 0
  92 004a A768     		ldr	r7, [r4, #8]
  93 004c BF0F     		lsrs	r7, r7, #30
  94              	.LVL10:
 223:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_DST_INC_NONE)
  95              		.loc 1 223 0
  96 004e 032F     		cmp	r7, #3
 224:../emlib/src/em_dma.c ****     {
 225:../emlib/src/em_dma.c ****       descr->DSTEND = dst;
 226:../emlib/src/em_dma.c ****     }
 227:../emlib/src/em_dma.c ****     else
 228:../emlib/src/em_dma.c ****     {
 229:../emlib/src/em_dma.c ****       descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
  97              		.loc 1 229 0
  98 0050 1CBF     		itt	ne
  99 0052 06FA07F7 		lslne	r7, r6, r7
 100              	.LVL11:
 101 0056 ED19     		addne	r5, r5, r7
 102 0058 6560     		str	r5, [r4, #4]
 103              	.L6:
 230:../emlib/src/em_dma.c ****     }
 231:../emlib/src/em_dma.c ****   }
 232:../emlib/src/em_dma.c **** 
 233:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 104              		.loc 1 233 0
 105 005a 0125     		movs	r5, #1
 106 005c 05FA00F0 		lsl	r0, r5, r0
 107              	.LVL12:
 108 0060 094D     		ldr	r5, .L25
ARM GAS  /tmp/ccnPSQXa.s 			page 7


 234:../emlib/src/em_dma.c ****   if (useBurst)
 109              		.loc 1 234 0
 110 0062 0BB1     		cbz	r3, .L8
 235:../emlib/src/em_dma.c ****   {
 236:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTS = chBit;
 111              		.loc 1 236 0
 112 0064 A861     		str	r0, [r5, #24]
 113 0066 00E0     		b	.L9
 114              	.L8:
 237:../emlib/src/em_dma.c ****   }
 238:../emlib/src/em_dma.c ****   else
 239:../emlib/src/em_dma.c ****   {
 240:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTC = chBit;
 115              		.loc 1 240 0
 116 0068 E861     		str	r0, [r5, #28]
 117              	.L9:
 241:../emlib/src/em_dma.c ****   }
 242:../emlib/src/em_dma.c **** 
 243:../emlib/src/em_dma.c ****   if (primary)
 118              		.loc 1 243 0
 119 006a 0AB1     		cbz	r2, .L10
 244:../emlib/src/em_dma.c ****   {
 245:../emlib/src/em_dma.c ****     DMA->CHALTC = chBit;
 120              		.loc 1 245 0
 121 006c 6863     		str	r0, [r5, #52]
 122 006e 00E0     		b	.L11
 123              	.L10:
 246:../emlib/src/em_dma.c ****   }
 247:../emlib/src/em_dma.c ****   else
 248:../emlib/src/em_dma.c ****   {
 249:../emlib/src/em_dma.c ****     DMA->CHALTS = chBit;
 124              		.loc 1 249 0
 125 0070 2863     		str	r0, [r5, #48]
 126              	.L11:
 250:../emlib/src/em_dma.c ****   }
 251:../emlib/src/em_dma.c **** 
 252:../emlib/src/em_dma.c ****   /* Set cycle control */
 253:../emlib/src/em_dma.c ****   tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
 127              		.loc 1 253 0
 128 0072 A368     		ldr	r3, [r4, #8]
 129              	.LVL13:
 130 0074 23F47F53 		bic	r3, r3, #16320
 131 0078 23F03703 		bic	r3, r3, #55
 132              	.LVL14:
 254:../emlib/src/em_dma.c ****   tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
 133              		.loc 1 254 0
 134 007c 0B43     		orrs	r3, r3, r1
 135              	.LVL15:
 255:../emlib/src/em_dma.c ****   tmp        |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 136              		.loc 1 255 0
 137 007e 43EA0616 		orr	r6, r3, r6, lsl #4
 138              	.LVL16:
 256:../emlib/src/em_dma.c ****   descr->CTRL = tmp;
 139              		.loc 1 256 0
 140 0082 A660     		str	r6, [r4, #8]
 141 0084 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 142              	.LVL17:
ARM GAS  /tmp/ccnPSQXa.s 			page 8


 143              	.L26:
 144              		.align	2
 145              	.L25:
 146 0088 00200C40 		.word	1074536448
 147              		.cfi_endproc
 148              	.LFE71:
 150              		.section	.text.DMA_IRQHandler,"ax",%progbits
 151              		.align	1
 152              		.global	DMA_IRQHandler
 153              		.thumb
 154              		.thumb_func
 156              	DMA_IRQHandler:
 157              	.LFB72:
 257:../emlib/src/em_dma.c **** }
 258:../emlib/src/em_dma.c **** 
 259:../emlib/src/em_dma.c **** /** @endcond */
 260:../emlib/src/em_dma.c **** 
 261:../emlib/src/em_dma.c **** /*******************************************************************************
 262:../emlib/src/em_dma.c ****  ************************   INTERRUPT FUNCTIONS   ******************************
 263:../emlib/src/em_dma.c ****  ******************************************************************************/
 264:../emlib/src/em_dma.c **** 
 265:../emlib/src/em_dma.c **** #ifndef EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 266:../emlib/src/em_dma.c **** 
 267:../emlib/src/em_dma.c **** /***************************************************************************//**
 268:../emlib/src/em_dma.c ****  * @brief
 269:../emlib/src/em_dma.c ****  *   Interrupt handler for DMA cycle completion handling.
 270:../emlib/src/em_dma.c ****  *
 271:../emlib/src/em_dma.c ****  * @details
 272:../emlib/src/em_dma.c ****  *   Clears any pending flags and calls registered callback (if any).
 273:../emlib/src/em_dma.c ****  *
 274:../emlib/src/em_dma.c ****  *   If using the default interrupt vector table setup provided, this function
 275:../emlib/src/em_dma.c ****  *   is automatically placed in the IRQ table due to weak linking. If taking
 276:../emlib/src/em_dma.c ****  *   control over the interrupt vector table in some other way, this interrupt
 277:../emlib/src/em_dma.c ****  *   handler must be installed in order to be able to support callback actions.
 278:../emlib/src/em_dma.c ****  *
 279:../emlib/src/em_dma.c ****  *   In order for the user to implement a custom IRQ handler or run without
 280:../emlib/src/em_dma.c ****  *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 281:../emlib/src/em_dma.c ****  *   with a \#define statement or with the compiler option -D.
 282:../emlib/src/em_dma.c ****  *
 283:../emlib/src/em_dma.c ****  ******************************************************************************/
 284:../emlib/src/em_dma.c **** void DMA_IRQHandler(void)
 285:../emlib/src/em_dma.c **** {
 158              		.loc 1 285 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 286:../emlib/src/em_dma.c ****   int                    channel;
 287:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 288:../emlib/src/em_dma.c ****   uint32_t               pending;
 289:../emlib/src/em_dma.c ****   uint32_t               pendingPrio;
 290:../emlib/src/em_dma.c ****   uint32_t               prio;
 291:../emlib/src/em_dma.c ****   uint32_t               primaryCpy;
 292:../emlib/src/em_dma.c ****   int                    i;
 293:../emlib/src/em_dma.c **** 
 294:../emlib/src/em_dma.c ****   /* Get all pending and enabled interrupts */
 295:../emlib/src/em_dma.c ****   pending  = DMA->IF;
 162              		.loc 1 295 0
ARM GAS  /tmp/ccnPSQXa.s 			page 9


 163 0000 1A4B     		ldr	r3, .L44
 164 0002 1B4A     		ldr	r2, .L44+4
 296:../emlib/src/em_dma.c ****   pending &= DMA->IEN;
 165              		.loc 1 296 0
 166 0004 41F20C01 		movw	r1, #4108
 295:../emlib/src/em_dma.c ****   pending  = DMA->IF;
 167              		.loc 1 295 0
 168 0008 1268     		ldr	r2, [r2]
 169              	.LVL18:
 285:../emlib/src/em_dma.c **** {
 170              		.loc 1 285 0
 171 000a 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 172              		.cfi_def_cfa_offset 24
 173              		.cfi_offset 4, -24
 174              		.cfi_offset 5, -20
 175              		.cfi_offset 6, -16
 176              		.cfi_offset 7, -12
 177              		.cfi_offset 8, -8
 178              		.cfi_offset 14, -4
 179              		.loc 1 296 0
 180 000e 5F58     		ldr	r7, [r3, r1]
 181              	.LVL19:
 297:../emlib/src/em_dma.c **** 
 298:../emlib/src/em_dma.c ****   /* Check for bus error */
 299:../emlib/src/em_dma.c ****   if (pending & DMA_IF_ERR)
 182              		.loc 1 299 0
 183 0010 1740     		ands	r7, r7, r2
 184              	.LVL20:
 185 0012 00D5     		bpl	.L28
 186              	.L29:
 187 0014 FEE7     		b	.L29
 188              	.L28:
 300:../emlib/src/em_dma.c ****   {
 301:../emlib/src/em_dma.c ****     /* Loop here to enable the debugger to see what has happened */
 302:../emlib/src/em_dma.c ****     while (1)
 303:../emlib/src/em_dma.c ****       ;
 304:../emlib/src/em_dma.c ****   }
 305:../emlib/src/em_dma.c **** 
 306:../emlib/src/em_dma.c ****   /* Process all pending channel interrupts. First process channels */
 307:../emlib/src/em_dma.c ****   /* defined with high priority, then those with default priority. */
 308:../emlib/src/em_dma.c ****   prio        = DMA->CHPRIS;
 189              		.loc 1 308 0
 190 0016 D3F83880 		ldr	r8, [r3, #56]
 191              	.LVL21:
 309:../emlib/src/em_dma.c ****   pendingPrio = pending & prio;
 192              		.loc 1 309 0
 193 001a 0226     		movs	r6, #2
 194 001c 07EA0805 		and	r5, r7, r8
 195              	.LVL22:
 196              	.L30:
 285:../emlib/src/em_dma.c **** {
 197              		.loc 1 285 0 discriminator 1
 198 0020 0024     		movs	r4, #0
 199              	.L36:
 200              	.LVL23:
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 311:../emlib/src/em_dma.c ****   {
ARM GAS  /tmp/ccnPSQXa.s 			page 10


 312:../emlib/src/em_dma.c ****     channel = 0;
 313:../emlib/src/em_dma.c ****     /* Process pending interrupts within high/default priority group */
 314:../emlib/src/em_dma.c ****     /* honouring priority within group. */
 315:../emlib/src/em_dma.c ****     while (pendingPrio)
 201              		.loc 1 315 0 discriminator 1
 202 0022 EDB1     		cbz	r5, .L43
 316:../emlib/src/em_dma.c ****     {
 317:../emlib/src/em_dma.c ****       if (pendingPrio & 1)
 203              		.loc 1 317 0
 204 0024 EB07     		lsls	r3, r5, #31
 205 0026 18D5     		bpl	.L32
 206              	.LBB2:
 318:../emlib/src/em_dma.c ****       {
 319:../emlib/src/em_dma.c ****         DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 320:../emlib/src/em_dma.c ****         uint32_t chmask = 1 << channel;
 207              		.loc 1 320 0
 208 0028 0121     		movs	r1, #1
 209 002a A140     		lsls	r1, r1, r4
 319:../emlib/src/em_dma.c ****         DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 210              		.loc 1 319 0
 211 002c 0F4B     		ldr	r3, .L44
 321:../emlib/src/em_dma.c **** 
 322:../emlib/src/em_dma.c ****         /* Clear pending interrupt prior to invoking callback, in case it */
 323:../emlib/src/em_dma.c ****         /* sets up another DMA cycle. */
 324:../emlib/src/em_dma.c ****         DMA->IFC = chmask;
 212              		.loc 1 324 0
 213 002e 114A     		ldr	r2, .L44+8
 319:../emlib/src/em_dma.c ****         DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 214              		.loc 1 319 0
 215 0030 9B68     		ldr	r3, [r3, #8]
 216              	.LVL24:
 217              		.loc 1 324 0
 218 0032 1160     		str	r1, [r2]
 325:../emlib/src/em_dma.c **** 
 326:../emlib/src/em_dma.c ****         /* Normally, no point in enabling interrupt without callback, but */
 327:../emlib/src/em_dma.c ****         /* check if callback is defined anyway. Callback info is always */
 328:../emlib/src/em_dma.c ****         /* located in primary descriptor. */
 329:../emlib/src/em_dma.c ****         cb = (DMA_CB_TypeDef *)(descr[channel].USER);
 219              		.loc 1 329 0
 220 0034 03EB0413 		add	r3, r3, r4, lsl #4
 221              	.LVL25:
 222 0038 DB68     		ldr	r3, [r3, #12]
 223              	.LVL26:
 330:../emlib/src/em_dma.c ****         if (cb)
 224              		.loc 1 330 0
 225 003a 73B1     		cbz	r3, .L32
 331:../emlib/src/em_dma.c ****         {
 332:../emlib/src/em_dma.c ****           /* Toggle next-descriptor indicator always prior to invoking */
 333:../emlib/src/em_dma.c ****           /* callback (in case callback reconfigurs something) */
 334:../emlib/src/em_dma.c ****           primaryCpy   = cb->primary;
 226              		.loc 1 334 0
 227 003c 197A     		ldrb	r1, [r3, #8]	@ zero_extendqisi2
 228              	.LVL27:
 335:../emlib/src/em_dma.c ****           cb->primary ^= 1;
 336:../emlib/src/em_dma.c ****           if (cb->cbFunc)
 229              		.loc 1 336 0
 230 003e D3F800C0 		ldr	ip, [r3]
ARM GAS  /tmp/ccnPSQXa.s 			page 11


 335:../emlib/src/em_dma.c ****           cb->primary ^= 1;
 231              		.loc 1 335 0
 232 0042 81F00102 		eor	r2, r1, #1
 233              	.LVL28:
 234 0046 1A72     		strb	r2, [r3, #8]
 235              	.LVL29:
 236              		.loc 1 336 0
 237 0048 BCF1000F 		cmp	ip, #0
 238 004c 05D0     		beq	.L32
 337:../emlib/src/em_dma.c ****           {
 338:../emlib/src/em_dma.c ****             cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
 239              		.loc 1 338 0
 240 004e 0031     		adds	r1, r1, #0
 241 0050 2046     		mov	r0, r4
 242 0052 18BF     		it	ne
 243 0054 0121     		movne	r1, #1
 244              	.LVL30:
 245 0056 5A68     		ldr	r2, [r3, #4]
 246              	.LVL31:
 247 0058 E047     		blx	ip
 248              	.LVL32:
 249              	.L32:
 250              	.LBE2:
 339:../emlib/src/em_dma.c ****           }
 340:../emlib/src/em_dma.c ****         }
 341:../emlib/src/em_dma.c ****       }
 342:../emlib/src/em_dma.c **** 
 343:../emlib/src/em_dma.c ****       pendingPrio >>= 1;
 251              		.loc 1 343 0
 252 005a 6D08     		lsrs	r5, r5, #1
 253              	.LVL33:
 344:../emlib/src/em_dma.c ****       channel++;
 254              		.loc 1 344 0
 255 005c 0134     		adds	r4, r4, #1
 256              	.LVL34:
 257 005e E0E7     		b	.L36
 258              	.L43:
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 259              		.loc 1 310 0
 260 0060 013E     		subs	r6, r6, #1
 261              	.LVL35:
 345:../emlib/src/em_dma.c ****     }
 346:../emlib/src/em_dma.c **** 
 347:../emlib/src/em_dma.c ****     /* On second iteration, process default priority channels */
 348:../emlib/src/em_dma.c ****     pendingPrio = pending & ~prio;
 262              		.loc 1 348 0
 263 0062 27EA0805 		bic	r5, r7, r8
 264              	.LVL36:
 310:../emlib/src/em_dma.c ****   for (i = 0; i < 2; i++)
 265              		.loc 1 310 0
 266 0066 DBD1     		bne	.L30
 267 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 268              	.LVL37:
 269              	.L45:
 270              		.align	2
 271              	.L44:
 272 006c 00200C40 		.word	1074536448
ARM GAS  /tmp/ccnPSQXa.s 			page 12


 273 0070 00300C40 		.word	1074540544
 274 0074 08300C40 		.word	1074540552
 275              		.cfi_endproc
 276              	.LFE72:
 278              		.section	.text.DMA_ActivateAuto,"ax",%progbits
 279              		.align	1
 280              		.global	DMA_ActivateAuto
 281              		.thumb
 282              		.thumb_func
 284              	DMA_ActivateAuto:
 285              	.LFB73:
 349:../emlib/src/em_dma.c ****   }
 350:../emlib/src/em_dma.c **** }
 351:../emlib/src/em_dma.c **** 
 352:../emlib/src/em_dma.c **** #endif /* EXCLUDE_DEFAULT_DMA_IRQ_HANDLER */
 353:../emlib/src/em_dma.c **** 
 354:../emlib/src/em_dma.c **** 
 355:../emlib/src/em_dma.c **** /*******************************************************************************
 356:../emlib/src/em_dma.c ****  **************************   GLOBAL FUNCTIONS   *******************************
 357:../emlib/src/em_dma.c ****  ******************************************************************************/
 358:../emlib/src/em_dma.c **** 
 359:../emlib/src/em_dma.c **** /***************************************************************************//**
 360:../emlib/src/em_dma.c ****  * @brief
 361:../emlib/src/em_dma.c ****  *   Activate DMA auto-request cycle (used for memory-memory transfers).
 362:../emlib/src/em_dma.c ****  *
 363:../emlib/src/em_dma.c ****  * @details
 364:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and descriptor to be used
 365:../emlib/src/em_dma.c ****  *   must have been properly configured.
 366:../emlib/src/em_dma.c ****  *
 367:../emlib/src/em_dma.c ****  * @note
 368:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 369:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 370:../emlib/src/em_dma.c ****  *
 371:../emlib/src/em_dma.c ****  * @param[in] channel
 372:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 373:../emlib/src/em_dma.c ****  *
 374:../emlib/src/em_dma.c ****  * @param[in] primary
 375:../emlib/src/em_dma.c ****  *   @li true - activate using primary descriptor
 376:../emlib/src/em_dma.c ****  *   @li false - activate using alternate descriptor
 377:../emlib/src/em_dma.c ****  *
 378:../emlib/src/em_dma.c ****  * @param[in] dst
 379:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 380:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 381:../emlib/src/em_dma.c ****  *
 382:../emlib/src/em_dma.c ****  * @param[in] src
 383:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 384:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 385:../emlib/src/em_dma.c ****  *
 386:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 387:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
 388:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
 389:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
 390:../emlib/src/em_dma.c ****  ******************************************************************************/
 391:../emlib/src/em_dma.c **** void DMA_ActivateAuto(unsigned int channel,
 392:../emlib/src/em_dma.c ****                       bool primary,
 393:../emlib/src/em_dma.c ****                       void *dst,
 394:../emlib/src/em_dma.c ****                       void *src,
ARM GAS  /tmp/ccnPSQXa.s 			page 13


 395:../emlib/src/em_dma.c ****                       unsigned int nMinus1)
 396:../emlib/src/em_dma.c **** {
 286              		.loc 1 396 0
 287              		.cfi_startproc
 288              		@ args = 4, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL38:
 291 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 292              		.cfi_def_cfa_offset 40
 293              		.cfi_offset 0, -40
 294              		.cfi_offset 1, -36
 295              		.cfi_offset 2, -32
 296              		.cfi_offset 3, -28
 297              		.cfi_offset 4, -24
 298              		.cfi_offset 5, -20
 299              		.cfi_offset 6, -16
 300              		.cfi_offset 7, -12
 301              		.cfi_offset 8, -8
 302              		.cfi_offset 14, -4
 397:../emlib/src/em_dma.c ****   uint32_t chBit;
 398:../emlib/src/em_dma.c **** 
 399:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 303              		.loc 1 399 0
 304 0004 0728     		cmp	r0, #7
 396:../emlib/src/em_dma.c **** {
 305              		.loc 1 396 0
 306 0006 0446     		mov	r4, r0
 307 0008 0E46     		mov	r6, r1
 308 000a 9046     		mov	r8, r2
 309 000c 1F46     		mov	r7, r3
 310 000e 0A9D     		ldr	r5, [sp, #40]
 311              		.loc 1 399 0
 312 0010 04D9     		bls	.L47
 313              		.loc 1 399 0 is_stmt 0 discriminator 1
 314 0012 1048     		ldr	r0, .L49
 315              	.LVL39:
 316 0014 40F28F11 		movw	r1, #399
 317              	.LVL40:
 318 0018 FFF7FEFF 		bl	assertEFM
 319              	.LVL41:
 320              	.L47:
 400:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 321              		.loc 1 400 0 is_stmt 1
 322 001c B5F5806F 		cmp	r5, #1024
 323 0020 04D3     		bcc	.L48
 324              		.loc 1 400 0 is_stmt 0 discriminator 1
 325 0022 0C48     		ldr	r0, .L49
 326 0024 4FF4C871 		mov	r1, #400
 327 0028 FFF7FEFF 		bl	assertEFM
 328              	.LVL42:
 329              	.L48:
 401:../emlib/src/em_dma.c **** 
 402:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 330              		.loc 1 402 0 is_stmt 1
 331 002c 2046     		mov	r0, r4
 332 002e CDF80080 		str	r8, [sp]
 333 0032 0197     		str	r7, [sp, #4]
ARM GAS  /tmp/ccnPSQXa.s 			page 14


 334 0034 0295     		str	r5, [sp, #8]
 335 0036 0221     		movs	r1, #2
 336 0038 3246     		mov	r2, r6
 337 003a 0023     		movs	r3, #0
 338 003c FFF7FEFF 		bl	DMA_Prepare
 339              	.LVL43:
 403:../emlib/src/em_dma.c ****               dmaCycleCtrlAuto,
 404:../emlib/src/em_dma.c ****               primary,
 405:../emlib/src/em_dma.c ****               false,
 406:../emlib/src/em_dma.c ****               dst,
 407:../emlib/src/em_dma.c ****               src,
 408:../emlib/src/em_dma.c ****               nMinus1);
 409:../emlib/src/em_dma.c **** 
 410:../emlib/src/em_dma.c ****   chBit        = 1 << channel;
 340              		.loc 1 410 0
 341 0040 0123     		movs	r3, #1
 342 0042 03FA04F4 		lsl	r4, r3, r4
 343              	.LVL44:
 411:../emlib/src/em_dma.c ****   DMA->CHENS   = chBit; /* Enable channel */
 344              		.loc 1 411 0
 345 0046 044B     		ldr	r3, .L49+4
 346 0048 9C62     		str	r4, [r3, #40]
 412:../emlib/src/em_dma.c ****   DMA->CHSWREQ = chBit; /* Activate with SW request */
 347              		.loc 1 412 0
 348 004a 5C61     		str	r4, [r3, #20]
 413:../emlib/src/em_dma.c **** }
 349              		.loc 1 413 0
 350 004c 04B0     		add	sp, sp, #16
 351              		@ sp needed
 352 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 353              	.LVL45:
 354              	.L50:
 355 0052 00BF     		.align	2
 356              	.L49:
 357 0054 00000000 		.word	.LC0
 358 0058 00200C40 		.word	1074536448
 359              		.cfi_endproc
 360              	.LFE73:
 362              		.section	.text.DMA_ActivateBasic,"ax",%progbits
 363              		.align	1
 364              		.global	DMA_ActivateBasic
 365              		.thumb
 366              		.thumb_func
 368              	DMA_ActivateBasic:
 369              	.LFB74:
 414:../emlib/src/em_dma.c **** 
 415:../emlib/src/em_dma.c **** 
 416:../emlib/src/em_dma.c **** /***************************************************************************//**
 417:../emlib/src/em_dma.c ****  * @brief
 418:../emlib/src/em_dma.c ****  *   Activate DMA basic cycle (used for memory-peripheral transfers).
 419:../emlib/src/em_dma.c ****  *
 420:../emlib/src/em_dma.c ****  * @details
 421:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and descriptor to be used
 422:../emlib/src/em_dma.c ****  *   must have been properly configured.
 423:../emlib/src/em_dma.c ****  *
 424:../emlib/src/em_dma.c ****  * @note
 425:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
ARM GAS  /tmp/ccnPSQXa.s 			page 15


 426:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 427:../emlib/src/em_dma.c ****  *
 428:../emlib/src/em_dma.c ****  * @param[in] channel
 429:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 430:../emlib/src/em_dma.c ****  *
 431:../emlib/src/em_dma.c ****  * @param[in] primary
 432:../emlib/src/em_dma.c ****  *   @li true - activate using primary descriptor
 433:../emlib/src/em_dma.c ****  *   @li false - activate using alternate descriptor
 434:../emlib/src/em_dma.c ****  *
 435:../emlib/src/em_dma.c ****  * @param[in] useBurst
 436:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 437:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 438:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 439:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 440:../emlib/src/em_dma.c ****  *
 441:../emlib/src/em_dma.c ****  * @param[in] dst
 442:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
 443:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 444:../emlib/src/em_dma.c ****  *
 445:../emlib/src/em_dma.c ****  * @param[in] src
 446:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
 447:../emlib/src/em_dma.c ****  *   descriptor as is from a previous activation.
 448:../emlib/src/em_dma.c ****  *
 449:../emlib/src/em_dma.c ****  * @param[in] nMinus1
 450:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
 451:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
 452:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
 453:../emlib/src/em_dma.c ****  ******************************************************************************/
 454:../emlib/src/em_dma.c **** void DMA_ActivateBasic(unsigned int channel,
 455:../emlib/src/em_dma.c ****                        bool primary,
 456:../emlib/src/em_dma.c ****                        bool useBurst,
 457:../emlib/src/em_dma.c ****                        void *dst,
 458:../emlib/src/em_dma.c ****                        void *src,
 459:../emlib/src/em_dma.c ****                        unsigned int nMinus1)
 460:../emlib/src/em_dma.c **** {
 370              		.loc 1 460 0
 371              		.cfi_startproc
 372              		@ args = 8, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL46:
 375 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 376              		.cfi_def_cfa_offset 40
 377              		.cfi_offset 0, -40
 378              		.cfi_offset 1, -36
 379              		.cfi_offset 2, -32
 380              		.cfi_offset 3, -28
 381              		.cfi_offset 4, -24
 382              		.cfi_offset 5, -20
 383              		.cfi_offset 6, -16
 384              		.cfi_offset 7, -12
 385              		.cfi_offset 8, -8
 386              		.cfi_offset 14, -4
 461:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 387              		.loc 1 461 0
 388 0004 0728     		cmp	r0, #7
 460:../emlib/src/em_dma.c **** {
 389              		.loc 1 460 0
ARM GAS  /tmp/ccnPSQXa.s 			page 16


 390 0006 0446     		mov	r4, r0
 391 0008 0F46     		mov	r7, r1
 392 000a 1646     		mov	r6, r2
 393 000c 9846     		mov	r8, r3
 394 000e 0B9D     		ldr	r5, [sp, #44]
 395              		.loc 1 461 0
 396 0010 04D9     		bls	.L52
 397              		.loc 1 461 0 is_stmt 0 discriminator 1
 398 0012 1048     		ldr	r0, .L54
 399              	.LVL47:
 400 0014 40F2CD11 		movw	r1, #461
 401              	.LVL48:
 402 0018 FFF7FEFF 		bl	assertEFM
 403              	.LVL49:
 404              	.L52:
 462:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 405              		.loc 1 462 0 is_stmt 1
 406 001c B5F5806F 		cmp	r5, #1024
 407 0020 04D3     		bcc	.L53
 408              		.loc 1 462 0 is_stmt 0 discriminator 1
 409 0022 0C48     		ldr	r0, .L54
 410 0024 4FF4E771 		mov	r1, #462
 411 0028 FFF7FEFF 		bl	assertEFM
 412              	.LVL50:
 413              	.L53:
 463:../emlib/src/em_dma.c **** 
 464:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 414              		.loc 1 464 0 is_stmt 1
 415 002c 0A9B     		ldr	r3, [sp, #40]
 416 002e 2046     		mov	r0, r4
 417 0030 0193     		str	r3, [sp, #4]
 418 0032 CDF80080 		str	r8, [sp]
 419 0036 3346     		mov	r3, r6
 420 0038 0295     		str	r5, [sp, #8]
 421 003a 0121     		movs	r1, #1
 422 003c 3A46     		mov	r2, r7
 423 003e FFF7FEFF 		bl	DMA_Prepare
 424              	.LVL51:
 465:../emlib/src/em_dma.c ****               dmaCycleCtrlBasic,
 466:../emlib/src/em_dma.c ****               primary,
 467:../emlib/src/em_dma.c ****               useBurst,
 468:../emlib/src/em_dma.c ****               dst,
 469:../emlib/src/em_dma.c ****               src,
 470:../emlib/src/em_dma.c ****               nMinus1);
 471:../emlib/src/em_dma.c **** 
 472:../emlib/src/em_dma.c ****   /* Enable channel, request signal is provided by peripheral device */
 473:../emlib/src/em_dma.c ****   DMA->CHENS = 1 << channel;
 425              		.loc 1 473 0
 426 0042 0123     		movs	r3, #1
 427 0044 03FA04F4 		lsl	r4, r3, r4
 428              	.LVL52:
 429 0048 034B     		ldr	r3, .L54+4
 430 004a 9C62     		str	r4, [r3, #40]
 474:../emlib/src/em_dma.c **** }
 431              		.loc 1 474 0
 432 004c 04B0     		add	sp, sp, #16
 433              		@ sp needed
ARM GAS  /tmp/ccnPSQXa.s 			page 17


 434 004e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 435              	.LVL53:
 436              	.L55:
 437 0052 00BF     		.align	2
 438              	.L54:
 439 0054 00000000 		.word	.LC0
 440 0058 00200C40 		.word	1074536448
 441              		.cfi_endproc
 442              	.LFE74:
 444              		.section	.text.DMA_ActivatePingPong,"ax",%progbits
 445              		.align	1
 446              		.global	DMA_ActivatePingPong
 447              		.thumb
 448              		.thumb_func
 450              	DMA_ActivatePingPong:
 451              	.LFB75:
 475:../emlib/src/em_dma.c **** 
 476:../emlib/src/em_dma.c **** 
 477:../emlib/src/em_dma.c **** /***************************************************************************//**
 478:../emlib/src/em_dma.c ****  * @brief
 479:../emlib/src/em_dma.c ****  *   Activate DMA ping-pong cycle (used for memory-peripheral transfers).
 480:../emlib/src/em_dma.c ****  *
 481:../emlib/src/em_dma.c ****  * @details
 482:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the channel and both descriptors must
 483:../emlib/src/em_dma.c ****  *   have been properly configured. The primary descriptor is always the first
 484:../emlib/src/em_dma.c ****  *   descriptor to be used by the DMA controller.
 485:../emlib/src/em_dma.c ****  *
 486:../emlib/src/em_dma.c ****  * @note
 487:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 488:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 489:../emlib/src/em_dma.c ****  *
 490:../emlib/src/em_dma.c ****  * @param[in] channel
 491:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 492:../emlib/src/em_dma.c ****  *
 493:../emlib/src/em_dma.c ****  * @param[in] useBurst
 494:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
 495:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
 496:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptors. Please
 497:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage. Notice
 498:../emlib/src/em_dma.c ****  *   that this setting is used for both the primary and alternate descriptors.
 499:../emlib/src/em_dma.c ****  *
 500:../emlib/src/em_dma.c ****  * @param[in] primDst
 501:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to, for primary descriptor.
 502:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 503:../emlib/src/em_dma.c ****  *
 504:../emlib/src/em_dma.c ****  * @param[in] primSrc
 505:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from, for primary descriptor.
 506:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 507:../emlib/src/em_dma.c ****  *
 508:../emlib/src/em_dma.c ****  * @param[in] primNMinus1
 509:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023), for
 510:../emlib/src/em_dma.c ****  *   primary descriptor. The size of the DMA transfer element (1, 2 or 4 bytes)
 511:../emlib/src/em_dma.c ****  *   is configured with DMA_CfgDescr().
 512:../emlib/src/em_dma.c ****  *
 513:../emlib/src/em_dma.c ****  * @param[in] altDst
 514:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to, for alternate descriptor.
 515:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
ARM GAS  /tmp/ccnPSQXa.s 			page 18


 516:../emlib/src/em_dma.c ****  *
 517:../emlib/src/em_dma.c ****  * @param[in] altSrc
 518:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from, for alternate descriptor.
 519:../emlib/src/em_dma.c ****  *   If NULL, leave setting in descriptor as is from a previous activation.
 520:../emlib/src/em_dma.c ****  *
 521:../emlib/src/em_dma.c ****  * @param[in] altNMinus1
 522:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023), for
 523:../emlib/src/em_dma.c ****  *   alternate descriptor. The size of the DMA transfer element (1, 2 or 4 bytes)
 524:../emlib/src/em_dma.c ****  *   is configured with DMA_CfgDescr().
 525:../emlib/src/em_dma.c ****  ******************************************************************************/
 526:../emlib/src/em_dma.c **** void DMA_ActivatePingPong(unsigned int channel,
 527:../emlib/src/em_dma.c ****                           bool useBurst,
 528:../emlib/src/em_dma.c ****                           void *primDst,
 529:../emlib/src/em_dma.c ****                           void *primSrc,
 530:../emlib/src/em_dma.c ****                           unsigned int primNMinus1,
 531:../emlib/src/em_dma.c ****                           void *altDst,
 532:../emlib/src/em_dma.c ****                           void *altSrc,
 533:../emlib/src/em_dma.c ****                           unsigned int altNMinus1)
 534:../emlib/src/em_dma.c **** {
 452              		.loc 1 534 0
 453              		.cfi_startproc
 454              		@ args = 16, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              	.LVL54:
 457 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 458              		.cfi_def_cfa_offset 28
 459              		.cfi_offset 4, -28
 460              		.cfi_offset 5, -24
 461              		.cfi_offset 6, -20
 462              		.cfi_offset 7, -16
 463              		.cfi_offset 8, -12
 464              		.cfi_offset 9, -8
 465              		.cfi_offset 14, -4
 535:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 466              		.loc 1 535 0
 467 0004 0728     		cmp	r0, #7
 534:../emlib/src/em_dma.c **** {
 468              		.loc 1 534 0
 469 0006 85B0     		sub	sp, sp, #20
 470              		.cfi_def_cfa_offset 48
 534:../emlib/src/em_dma.c **** {
 471              		.loc 1 534 0
 472 0008 0446     		mov	r4, r0
 473 000a 0D46     		mov	r5, r1
 474 000c 9146     		mov	r9, r2
 475 000e 9846     		mov	r8, r3
 476 0010 0C9E     		ldr	r6, [sp, #48]
 477 0012 0F9F     		ldr	r7, [sp, #60]
 478              		.loc 1 535 0
 479 0014 04D9     		bls	.L57
 480              		.loc 1 535 0 is_stmt 0 discriminator 1
 481 0016 1948     		ldr	r0, .L60
 482              	.LVL55:
 483 0018 40F21721 		movw	r1, #535
 484              	.LVL56:
 485 001c FFF7FEFF 		bl	assertEFM
 486              	.LVL57:
ARM GAS  /tmp/ccnPSQXa.s 			page 19


 487              	.L57:
 536:../emlib/src/em_dma.c ****   EFM_ASSERT(primNMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 488              		.loc 1 536 0 is_stmt 1
 489 0020 B6F5806F 		cmp	r6, #1024
 490 0024 04D3     		bcc	.L58
 491              		.loc 1 536 0 is_stmt 0 discriminator 1
 492 0026 1548     		ldr	r0, .L60
 493 0028 4FF40671 		mov	r1, #536
 494 002c FFF7FEFF 		bl	assertEFM
 495              	.LVL58:
 496              	.L58:
 537:../emlib/src/em_dma.c ****   EFM_ASSERT(altNMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 497              		.loc 1 537 0 is_stmt 1
 498 0030 B7F5806F 		cmp	r7, #1024
 499 0034 04D3     		bcc	.L59
 500              		.loc 1 537 0 is_stmt 0 discriminator 1
 501 0036 1148     		ldr	r0, .L60
 502 0038 40F21921 		movw	r1, #537
 503 003c FFF7FEFF 		bl	assertEFM
 504              	.LVL59:
 505              	.L59:
 538:../emlib/src/em_dma.c **** 
 539:../emlib/src/em_dma.c ****   /* Prepare alternate descriptor first */
 540:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 506              		.loc 1 540 0 is_stmt 1
 507 0040 0D9B     		ldr	r3, [sp, #52]
 508 0042 2046     		mov	r0, r4
 509 0044 0093     		str	r3, [sp]
 510 0046 0E9B     		ldr	r3, [sp, #56]
 511 0048 0297     		str	r7, [sp, #8]
 512 004a 0193     		str	r3, [sp, #4]
 513 004c 0321     		movs	r1, #3
 514 004e 2B46     		mov	r3, r5
 515 0050 0022     		movs	r2, #0
 516 0052 FFF7FEFF 		bl	DMA_Prepare
 517              	.LVL60:
 541:../emlib/src/em_dma.c ****               dmaCycleCtrlPingPong,
 542:../emlib/src/em_dma.c ****               false,
 543:../emlib/src/em_dma.c ****               useBurst,
 544:../emlib/src/em_dma.c ****               altDst,
 545:../emlib/src/em_dma.c ****               altSrc,
 546:../emlib/src/em_dma.c ****               altNMinus1);
 547:../emlib/src/em_dma.c **** 
 548:../emlib/src/em_dma.c ****   /* Prepare primary descriptor last in order to start cycle using it */
 549:../emlib/src/em_dma.c ****   DMA_Prepare(channel,
 518              		.loc 1 549 0
 519 0056 2046     		mov	r0, r4
 520 0058 2B46     		mov	r3, r5
 521 005a CDF80090 		str	r9, [sp]
 522 005e CDF80480 		str	r8, [sp, #4]
 523 0062 0296     		str	r6, [sp, #8]
 524 0064 0321     		movs	r1, #3
 525 0066 0122     		movs	r2, #1
 526 0068 FFF7FEFF 		bl	DMA_Prepare
 527              	.LVL61:
 550:../emlib/src/em_dma.c ****               dmaCycleCtrlPingPong,
 551:../emlib/src/em_dma.c ****               true,
ARM GAS  /tmp/ccnPSQXa.s 			page 20


 552:../emlib/src/em_dma.c ****               useBurst,
 553:../emlib/src/em_dma.c ****               primDst,
 554:../emlib/src/em_dma.c ****               primSrc,
 555:../emlib/src/em_dma.c ****               primNMinus1);
 556:../emlib/src/em_dma.c **** 
 557:../emlib/src/em_dma.c ****   /* Enable channel, request signal is provided by peripheral device */
 558:../emlib/src/em_dma.c ****   DMA->CHENS = 1 << channel;
 528              		.loc 1 558 0
 529 006c 0123     		movs	r3, #1
 530 006e 03FA04F4 		lsl	r4, r3, r4
 531              	.LVL62:
 532 0072 034B     		ldr	r3, .L60+4
 533 0074 9C62     		str	r4, [r3, #40]
 559:../emlib/src/em_dma.c **** }
 534              		.loc 1 559 0
 535 0076 05B0     		add	sp, sp, #20
 536              		@ sp needed
 537 0078 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 538              	.LVL63:
 539              	.L61:
 540              		.align	2
 541              	.L60:
 542 007c 00000000 		.word	.LC0
 543 0080 00200C40 		.word	1074536448
 544              		.cfi_endproc
 545              	.LFE75:
 547              		.section	.text.DMA_ActivateScatterGather,"ax",%progbits
 548              		.align	1
 549              		.global	DMA_ActivateScatterGather
 550              		.thumb
 551              		.thumb_func
 553              	DMA_ActivateScatterGather:
 554              	.LFB76:
 560:../emlib/src/em_dma.c **** 
 561:../emlib/src/em_dma.c **** 
 562:../emlib/src/em_dma.c **** /***************************************************************************//**
 563:../emlib/src/em_dma.c ****  * @brief
 564:../emlib/src/em_dma.c ****  *   Activate DMA scatter-gather cycle (used for either memory-peripheral
 565:../emlib/src/em_dma.c ****  *   or memory-memory transfers).
 566:../emlib/src/em_dma.c ****  *
 567:../emlib/src/em_dma.c ****  * @details
 568:../emlib/src/em_dma.c ****  *   Prior to activating the DMA cycle, the array with alternate descriptors
 569:../emlib/src/em_dma.c ****  *   must have been properly configured. This function can be reused without
 570:../emlib/src/em_dma.c ****  *   reconfiguring the alternate descriptors, as long as @p count is the same.
 571:../emlib/src/em_dma.c ****  *
 572:../emlib/src/em_dma.c ****  * @note
 573:../emlib/src/em_dma.c ****  *   If using this function on a channel already activated and in use by the
 574:../emlib/src/em_dma.c ****  *   DMA controller, the behaviour is undefined.
 575:../emlib/src/em_dma.c ****  *
 576:../emlib/src/em_dma.c ****  * @param[in] channel
 577:../emlib/src/em_dma.c ****  *   DMA channel to activate DMA cycle for.
 578:../emlib/src/em_dma.c ****  *
 579:../emlib/src/em_dma.c ****  * @param[in] useBurst
 580:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts
 581:../emlib/src/em_dma.c ****  *   (and thus this parameter is ignored for memory scatter-gather cycles).
 582:../emlib/src/em_dma.c ****  *   This parameter determines if bursts should be enabled during DMA transfers
 583:../emlib/src/em_dma.c ****  *   using the alternate descriptors. Bursts must not be used if the total
ARM GAS  /tmp/ccnPSQXa.s 			page 21


 584:../emlib/src/em_dma.c ****  *   length (as given by nMinus1 for the alternate descriptor) is
 585:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
 586:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
 587:../emlib/src/em_dma.c ****  *
 588:../emlib/src/em_dma.c ****  * @param[in,out] altDescr
 589:../emlib/src/em_dma.c ****  *   Pointer to start of array with prepared alternate descriptors. The last
 590:../emlib/src/em_dma.c ****  *   descriptor will have its cycle control type reprogrammed to basic type.
 591:../emlib/src/em_dma.c ****  *
 592:../emlib/src/em_dma.c ****  * @param[in] count
 593:../emlib/src/em_dma.c ****  *   Number of alternate descriptors in @p altDescr array. Maximum number of
 594:../emlib/src/em_dma.c ****  *   alternate descriptors is 256.
 595:../emlib/src/em_dma.c ****  ******************************************************************************/
 596:../emlib/src/em_dma.c **** void DMA_ActivateScatterGather(unsigned int channel,
 597:../emlib/src/em_dma.c ****                                bool useBurst,
 598:../emlib/src/em_dma.c ****                                DMA_DESCRIPTOR_TypeDef *altDescr,
 599:../emlib/src/em_dma.c ****                                unsigned int count)
 600:../emlib/src/em_dma.c **** {
 555              		.loc 1 600 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              	.LVL64:
 601:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 602:../emlib/src/em_dma.c ****   DMA_CB_TypeDef         *cb;
 603:../emlib/src/em_dma.c ****   uint32_t               cycleCtrl;
 604:../emlib/src/em_dma.c ****   uint32_t               chBit;
 605:../emlib/src/em_dma.c **** 
 606:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 560              		.loc 1 606 0
 561 0000 0728     		cmp	r0, #7
 600:../emlib/src/em_dma.c **** {
 562              		.loc 1 600 0
 563 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 564              		.cfi_def_cfa_offset 32
 565              		.cfi_offset 4, -32
 566              		.cfi_offset 5, -28
 567              		.cfi_offset 6, -24
 568              		.cfi_offset 7, -20
 569              		.cfi_offset 8, -16
 570              		.cfi_offset 9, -12
 571              		.cfi_offset 10, -8
 572              		.cfi_offset 14, -4
 600:../emlib/src/em_dma.c **** {
 573              		.loc 1 600 0
 574 0006 0646     		mov	r6, r0
 575 0008 8A46     		mov	r10, r1
 576 000a 1546     		mov	r5, r2
 577 000c 1F46     		mov	r7, r3
 578              		.loc 1 606 0
 579 000e 04D9     		bls	.L63
 580              		.loc 1 606 0 is_stmt 0 discriminator 1
 581 0010 2D48     		ldr	r0, .L78
 582              	.LVL65:
 583 0012 40F25E21 		movw	r1, #606
 584              	.LVL66:
 585 0016 FFF7FEFF 		bl	assertEFM
 586              	.LVL67:
ARM GAS  /tmp/ccnPSQXa.s 			page 22


 587              	.L63:
 607:../emlib/src/em_dma.c ****   EFM_ASSERT(altDescr);
 588              		.loc 1 607 0 is_stmt 1
 589 001a 25B9     		cbnz	r5, .L64
 590              		.loc 1 607 0 is_stmt 0 discriminator 1
 591 001c 2A48     		ldr	r0, .L78
 592 001e 40F25F21 		movw	r1, #607
 593 0022 FFF7FEFF 		bl	assertEFM
 594              	.LVL68:
 595              	.L64:
 608:../emlib/src/em_dma.c ****   EFM_ASSERT(count && (count <= 256));
 596              		.loc 1 608 0 is_stmt 1
 597 0026 7B1E     		subs	r3, r7, #1
 598 0028 FF2B     		cmp	r3, #255
 599 002a 04D9     		bls	.L65
 600              		.loc 1 608 0 is_stmt 0 discriminator 1
 601 002c 2648     		ldr	r0, .L78
 602 002e 4FF41871 		mov	r1, #608
 603 0032 FFF7FEFF 		bl	assertEFM
 604              	.LVL69:
 605              	.L65:
 609:../emlib/src/em_dma.c **** 
 610:../emlib/src/em_dma.c ****   /* We have to configure the primary descriptor properly in order to */
 611:../emlib/src/em_dma.c ****   /* transfer one complete alternate descriptor from the alternate */
 612:../emlib/src/em_dma.c ****   /* descriptor table into the actual alternate descriptor. */
 613:../emlib/src/em_dma.c ****   descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE) + channel;
 606              		.loc 1 613 0 is_stmt 1
 607 0036 254A     		ldr	r2, .L78+4
 614:../emlib/src/em_dma.c **** 
 615:../emlib/src/em_dma.c ****   /* Set source end address to point to alternate descriptor array */
 616:../emlib/src/em_dma.c ****   descr->SRCEND = (uint32_t *)altDescr + (count * 4) - 1;
 608              		.loc 1 616 0
 609 0038 3C01     		lsls	r4, r7, #4
 613:../emlib/src/em_dma.c ****   descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE) + channel;
 610              		.loc 1 613 0
 611 003a 9168     		ldr	r1, [r2, #8]
 612              		.loc 1 616 0
 613 003c 201F     		subs	r0, r4, #4
 613:../emlib/src/em_dma.c ****   descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE) + channel;
 614              		.loc 1 613 0
 615 003e 3301     		lsls	r3, r6, #4
 616              		.loc 1 616 0
 617 0040 2844     		add	r0, r0, r5
 618 0042 5850     		str	r0, [r3, r1]
 617:../emlib/src/em_dma.c **** 
 618:../emlib/src/em_dma.c ****   /* The destination end address in the primary descriptor MUST point */
 619:../emlib/src/em_dma.c ****   /* to the corresponding alternate descriptor in scatter-gather mode. */
 620:../emlib/src/em_dma.c ****   descr->DSTEND = (uint32_t *)((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE) +
 619              		.loc 1 620 0
 620 0044 D268     		ldr	r2, [r2, #12]
 613:../emlib/src/em_dma.c ****   descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE) + channel;
 621              		.loc 1 613 0
 622 0046 03EB0109 		add	r9, r3, r1
 623              	.LVL70:
 624              		.loc 1 620 0
 625 004a 0C32     		adds	r2, r2, #12
 621:../emlib/src/em_dma.c ****                                channel + 1) - 1;
ARM GAS  /tmp/ccnPSQXa.s 			page 23


 626              		.loc 1 621 0
 627 004c 1344     		add	r3, r3, r2
 620:../emlib/src/em_dma.c ****   descr->DSTEND = (uint32_t *)((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE) +
 628              		.loc 1 620 0
 629 004e C9F80430 		str	r3, [r9, #4]
 622:../emlib/src/em_dma.c **** 
 623:../emlib/src/em_dma.c ****   /* The user field of the descriptor is used for callback configuration, */
 624:../emlib/src/em_dma.c ****   /* and already configured when channel is configured. Do not modify it. */
 625:../emlib/src/em_dma.c **** 
 626:../emlib/src/em_dma.c ****   /* Determine from alternate configuration whether this is a memory or */
 627:../emlib/src/em_dma.c ****   /* peripheral scatter-gather, by looking at the first alternate descriptor. */
 628:../emlib/src/em_dma.c ****   cycleCtrl  = altDescr->CTRL & _DMA_CTRL_CYCLE_CTRL_MASK;
 630              		.loc 1 628 0
 631 0052 AB68     		ldr	r3, [r5, #8]
 632              	.LVL71:
 629:../emlib/src/em_dma.c ****   cycleCtrl &= ~(1 << _DMA_CTRL_CYCLE_CTRL_SHIFT);
 633              		.loc 1 629 0
 634 0054 03F00608 		and	r8, r3, #6
 635              	.LVL72:
 630:../emlib/src/em_dma.c **** 
 631:../emlib/src/em_dma.c ****   EFM_ASSERT((cycleCtrl == dmaCycleCtrlMemScatterGather) ||
 636              		.loc 1 631 0
 637 0058 5B07     		lsls	r3, r3, #29
 638 005a 04D4     		bmi	.L66
 639              		.loc 1 631 0 is_stmt 0 discriminator 1
 640 005c 1A48     		ldr	r0, .L78
 641 005e 4FF41E71 		mov	r1, #632
 642 0062 FFF7FEFF 		bl	assertEFM
 643              	.LVL73:
 644              	.L66:
 632:../emlib/src/em_dma.c ****              (cycleCtrl == dmaCycleCtrlPerScatterGather));
 633:../emlib/src/em_dma.c **** 
 634:../emlib/src/em_dma.c ****   /* Set last alternate descriptor to basic or auto-request cycle type in */
 635:../emlib/src/em_dma.c ****   /* order to have dma_done signal asserted when complete. Otherwise interrupt */
 636:../emlib/src/em_dma.c ****   /* will not be triggered when done. */
 637:../emlib/src/em_dma.c ****   altDescr[count - 1].CTRL &= ~_DMA_CTRL_CYCLE_CTRL_MASK;
 645              		.loc 1 637 0 is_stmt 1
 646 0066 103C     		subs	r4, r4, #16
 647 0068 2C44     		add	r4, r4, r5
 648 006a A368     		ldr	r3, [r4, #8]
 638:../emlib/src/em_dma.c ****   if (cycleCtrl == dmaCycleCtrlMemScatterGather)
 649              		.loc 1 638 0
 650 006c B8F1040F 		cmp	r8, #4
 637:../emlib/src/em_dma.c ****   altDescr[count - 1].CTRL &= ~_DMA_CTRL_CYCLE_CTRL_MASK;
 651              		.loc 1 637 0
 652 0070 23F00703 		bic	r3, r3, #7
 653 0074 A360     		str	r3, [r4, #8]
 639:../emlib/src/em_dma.c ****   {
 640:../emlib/src/em_dma.c ****     altDescr[count - 1].CTRL |= (uint32_t)dmaCycleCtrlAuto << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 654              		.loc 1 640 0
 655 0076 A368     		ldr	r3, [r4, #8]
 656 0078 0CBF     		ite	eq
 657 007a 43F00203 		orreq	r3, r3, #2
 641:../emlib/src/em_dma.c ****   }
 642:../emlib/src/em_dma.c ****   else
 643:../emlib/src/em_dma.c ****   {
 644:../emlib/src/em_dma.c ****     altDescr[count - 1].CTRL |= (uint32_t)dmaCycleCtrlBasic << _DMA_CTRL_CYCLE_CTRL_SHIFT;
ARM GAS  /tmp/ccnPSQXa.s 			page 24


 658              		.loc 1 644 0
 659 007e 43F00103 		orrne	r3, r3, #1
 660 0082 A360     		str	r3, [r4, #8]
 645:../emlib/src/em_dma.c ****   }
 646:../emlib/src/em_dma.c **** 
 647:../emlib/src/em_dma.c ****   /* If callback defined, update info on whether callback is issued for */
 648:../emlib/src/em_dma.c ****   /* primary or alternate descriptor. Not really useful for scatter-gather, */
 649:../emlib/src/em_dma.c ****   /* but do for consistency. Always set to alternate, since that is the last */
 650:../emlib/src/em_dma.c ****   /* descriptor actually used. */
 651:../emlib/src/em_dma.c ****   cb = (DMA_CB_TypeDef *)(descr->USER);
 661              		.loc 1 651 0
 662 0084 D9F80C30 		ldr	r3, [r9, #12]
 663              	.LVL74:
 652:../emlib/src/em_dma.c ****   if (cb)
 664              		.loc 1 652 0
 665 0088 0BB1     		cbz	r3, .L69
 653:../emlib/src/em_dma.c ****   {
 654:../emlib/src/em_dma.c ****     cb->primary = false;
 666              		.loc 1 654 0
 667 008a 0022     		movs	r2, #0
 668 008c 1A72     		strb	r2, [r3, #8]
 669              	.L69:
 655:../emlib/src/em_dma.c ****   }
 656:../emlib/src/em_dma.c **** 
 657:../emlib/src/em_dma.c ****   /* Configure primary descriptor control word */
 658:../emlib/src/em_dma.c ****   descr->CTRL =
 659:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataInc4 << _DMA_CTRL_DST_INC_SHIFT) |
 660:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataSize4 << _DMA_CTRL_DST_SIZE_SHIFT) |
 661:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataInc4 << _DMA_CTRL_SRC_INC_SHIFT) |
 662:../emlib/src/em_dma.c ****     ((uint32_t)dmaDataSize4 << _DMA_CTRL_SRC_SIZE_SHIFT) |
 663:../emlib/src/em_dma.c ****     /* Use same protection scheme as for alternate descriptors */
 664:../emlib/src/em_dma.c ****     (altDescr->CTRL & _DMA_CTRL_SRC_PROT_CTRL_MASK) |
 670              		.loc 1 664 0
 671 008e AB68     		ldr	r3, [r5, #8]
 672              	.LVL75:
 665:../emlib/src/em_dma.c ****     ((uint32_t)dmaArbitrate4 << _DMA_CTRL_R_POWER_SHIFT) |
 666:../emlib/src/em_dma.c ****     (((count * 4) - 1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 673              		.loc 1 666 0
 674 0090 BF01     		lsls	r7, r7, #6
 675              	.LVL76:
 664:../emlib/src/em_dma.c ****     (altDescr->CTRL & _DMA_CTRL_SRC_PROT_CTRL_MASK) |
 676              		.loc 1 664 0
 677 0092 03F4E013 		and	r3, r3, #1835008
 665:../emlib/src/em_dma.c ****     ((uint32_t)dmaArbitrate4 << _DMA_CTRL_R_POWER_SHIFT) |
 678              		.loc 1 665 0
 679 0096 48EA0303 		orr	r3, r8, r3
 680              		.loc 1 666 0
 681 009a 43F02A43 		orr	r3, r3, #-1442840576
 682 009e 43F40043 		orr	r3, r3, #32768
 667:../emlib/src/em_dma.c ****     (((uint32_t)useBurst & 1) << _DMA_CTRL_NEXT_USEBURST_SHIFT) |
 683              		.loc 1 667 0
 684 00a2 43EACA03 		orr	r3, r3, r10, lsl #3
 666:../emlib/src/em_dma.c ****     (((count * 4) - 1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 685              		.loc 1 666 0
 686 00a6 103F     		subs	r7, r7, #16
 687              		.loc 1 667 0
 688 00a8 3B43     		orrs	r3, r3, r7
ARM GAS  /tmp/ccnPSQXa.s 			page 25


 658:../emlib/src/em_dma.c ****   descr->CTRL =
 689              		.loc 1 658 0
 690 00aa C9F80830 		str	r3, [r9, #8]
 668:../emlib/src/em_dma.c ****     cycleCtrl;
 669:../emlib/src/em_dma.c **** 
 670:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 691              		.loc 1 670 0
 692 00ae 0123     		movs	r3, #1
 693 00b0 03FA06F6 		lsl	r6, r3, r6
 694              	.LVL77:
 671:../emlib/src/em_dma.c **** 
 672:../emlib/src/em_dma.c ****   /* Start with primary descriptor */
 673:../emlib/src/em_dma.c ****   DMA->CHALTC = chBit;
 695              		.loc 1 673 0
 696 00b4 054B     		ldr	r3, .L78+4
 674:../emlib/src/em_dma.c **** 
 675:../emlib/src/em_dma.c ****   /* Enable channel */
 676:../emlib/src/em_dma.c ****   DMA->CHENS = chBit;
 677:../emlib/src/em_dma.c **** 
 678:../emlib/src/em_dma.c ****   /* Send request if memory scatter-gather, otherwise request signal is */
 679:../emlib/src/em_dma.c ****   /* provided by peripheral. */
 680:../emlib/src/em_dma.c ****   if (cycleCtrl == dmaCycleCtrlMemScatterGather)
 697              		.loc 1 680 0
 698 00b6 B8F1040F 		cmp	r8, #4
 673:../emlib/src/em_dma.c ****   DMA->CHALTC = chBit;
 699              		.loc 1 673 0
 700 00ba 5E63     		str	r6, [r3, #52]
 676:../emlib/src/em_dma.c ****   DMA->CHENS = chBit;
 701              		.loc 1 676 0
 702 00bc 9E62     		str	r6, [r3, #40]
 681:../emlib/src/em_dma.c ****   {
 682:../emlib/src/em_dma.c ****     DMA->CHSWREQ = chBit;
 703              		.loc 1 682 0
 704 00be 08BF     		it	eq
 705 00c0 5E61     		streq	r6, [r3, #20]
 706 00c2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 707              	.LVL78:
 708              	.L79:
 709 00c6 00BF     		.align	2
 710              	.L78:
 711 00c8 00000000 		.word	.LC0
 712 00cc 00200C40 		.word	1074536448
 713              		.cfi_endproc
 714              	.LFE76:
 716              		.section	.text.DMA_CfgChannel,"ax",%progbits
 717              		.align	1
 718              		.global	DMA_CfgChannel
 719              		.thumb
 720              		.thumb_func
 722              	DMA_CfgChannel:
 723              	.LFB77:
 683:../emlib/src/em_dma.c ****   }
 684:../emlib/src/em_dma.c **** }
 685:../emlib/src/em_dma.c **** 
 686:../emlib/src/em_dma.c **** 
 687:../emlib/src/em_dma.c **** /***************************************************************************//**
 688:../emlib/src/em_dma.c ****  * @brief
ARM GAS  /tmp/ccnPSQXa.s 			page 26


 689:../emlib/src/em_dma.c ****  *   Configure a DMA channel.
 690:../emlib/src/em_dma.c ****  *
 691:../emlib/src/em_dma.c ****  * @details
 692:../emlib/src/em_dma.c ****  *   Configure miscellaneous issues for a DMA channel. This function is typically
 693:../emlib/src/em_dma.c ****  *   used once to setup a channel for a certain type of use.
 694:../emlib/src/em_dma.c ****  *
 695:../emlib/src/em_dma.c ****  * @note
 696:../emlib/src/em_dma.c ****  *   If using this function on a channel already in use by the DMA controller,
 697:../emlib/src/em_dma.c ****  *   the behaviour is undefined.
 698:../emlib/src/em_dma.c ****  *
 699:../emlib/src/em_dma.c ****  * @param[in] channel
 700:../emlib/src/em_dma.c ****  *   DMA channel to configure.
 701:../emlib/src/em_dma.c ****  *
 702:../emlib/src/em_dma.c ****  * @param[in] cfg
 703:../emlib/src/em_dma.c ****  *   Configuration to use.
 704:../emlib/src/em_dma.c ****  ******************************************************************************/
 705:../emlib/src/em_dma.c **** void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
 706:../emlib/src/em_dma.c **** {
 724              		.loc 1 706 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728              	.LVL79:
 707:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 708:../emlib/src/em_dma.c **** 
 709:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 729              		.loc 1 709 0
 730 0000 0728     		cmp	r0, #7
 706:../emlib/src/em_dma.c **** {
 731              		.loc 1 706 0
 732 0002 38B5     		push	{r3, r4, r5, lr}
 733              		.cfi_def_cfa_offset 16
 734              		.cfi_offset 3, -16
 735              		.cfi_offset 4, -12
 736              		.cfi_offset 5, -8
 737              		.cfi_offset 14, -4
 706:../emlib/src/em_dma.c **** {
 738              		.loc 1 706 0
 739 0004 0446     		mov	r4, r0
 740 0006 0D46     		mov	r5, r1
 741              		.loc 1 709 0
 742 0008 04D9     		bls	.L81
 743              		.loc 1 709 0 is_stmt 0 discriminator 1
 744 000a 1548     		ldr	r0, .L87
 745              	.LVL80:
 746 000c 40F2C521 		movw	r1, #709
 747              	.LVL81:
 748 0010 FFF7FEFF 		bl	assertEFM
 749              	.LVL82:
 750              	.L81:
 710:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 751              		.loc 1 710 0 is_stmt 1
 752 0014 25B9     		cbnz	r5, .L82
 753              		.loc 1 710 0 is_stmt 0 discriminator 1
 754 0016 1248     		ldr	r0, .L87
 755 0018 40F2C621 		movw	r1, #710
 756 001c FFF7FEFF 		bl	assertEFM
ARM GAS  /tmp/ccnPSQXa.s 			page 27


 757              	.LVL83:
 758              	.L82:
 711:../emlib/src/em_dma.c **** 
 712:../emlib/src/em_dma.c ****   /* Always keep callback configuration reference in primary descriptor */
 713:../emlib/src/em_dma.c ****   descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 759              		.loc 1 713 0 is_stmt 1
 760 0020 104B     		ldr	r3, .L87+4
 714:../emlib/src/em_dma.c ****   descr[channel].USER = (uint32_t)(cfg->cb);
 761              		.loc 1 714 0
 762 0022 AA68     		ldr	r2, [r5, #8]
 713:../emlib/src/em_dma.c ****   descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
 763              		.loc 1 713 0
 764 0024 9968     		ldr	r1, [r3, #8]
 765              	.LVL84:
 766              		.loc 1 714 0
 767 0026 01EB0411 		add	r1, r1, r4, lsl #4
 768              	.LVL85:
 769 002a CA60     		str	r2, [r1, #12]
 715:../emlib/src/em_dma.c **** 
 716:../emlib/src/em_dma.c ****   /* Set to specified priority for channel */
 717:../emlib/src/em_dma.c ****   if (cfg->highPri)
 770              		.loc 1 717 0
 771 002c 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 772 002e 0122     		movs	r2, #1
 718:../emlib/src/em_dma.c ****   {
 719:../emlib/src/em_dma.c ****     DMA->CHPRIS = 1 << channel;
 773              		.loc 1 719 0
 774 0030 A240     		lsls	r2, r2, r4
 717:../emlib/src/em_dma.c ****   if (cfg->highPri)
 775              		.loc 1 717 0
 776 0032 09B1     		cbz	r1, .L83
 777              		.loc 1 719 0
 778 0034 9A63     		str	r2, [r3, #56]
 779 0036 00E0     		b	.L84
 780              	.L83:
 720:../emlib/src/em_dma.c ****   }
 721:../emlib/src/em_dma.c ****   else
 722:../emlib/src/em_dma.c ****   {
 723:../emlib/src/em_dma.c ****     DMA->CHPRIC = 1 << channel;
 781              		.loc 1 723 0
 782 0038 DA63     		str	r2, [r3, #60]
 783              	.L84:
 724:../emlib/src/em_dma.c ****   }
 725:../emlib/src/em_dma.c **** 
 726:../emlib/src/em_dma.c ****   /* Set DMA signal source select */
 727:../emlib/src/em_dma.c ****   DMA->CH[channel].CTRL = cfg->select;
 784              		.loc 1 727 0
 785 003a 6A68     		ldr	r2, [r5, #4]
 786 003c 04F58861 		add	r1, r4, #1088
 787 0040 43F82120 		str	r2, [r3, r1, lsl #2]
 788 0044 084B     		ldr	r3, .L87+8
 728:../emlib/src/em_dma.c **** 
 729:../emlib/src/em_dma.c ****   /* Enable/disable interrupt as specified */
 730:../emlib/src/em_dma.c ****   if (cfg->enableInt)
 789              		.loc 1 730 0
 790 0046 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 791 0048 2344     		add	r3, r3, r4
ARM GAS  /tmp/ccnPSQXa.s 			page 28


 792 004a 32B1     		cbz	r2, .L85
 731:../emlib/src/em_dma.c ****   {
 732:../emlib/src/em_dma.c ****     DMA->IFC = (1 << channel);
 793              		.loc 1 732 0
 794 004c 0122     		movs	r2, #1
 795 004e 02FA04F4 		lsl	r4, r2, r4
 796              	.LVL86:
 797 0052 0448     		ldr	r0, .L87+4
 798 0054 41F20801 		movw	r1, #4104
 799              	.LVL87:
 800 0058 4450     		str	r4, [r0, r1]
 801              	.LVL88:
 802              	.L85:
 803              	.LBB7:
 804              	.LBB8:
 805              		.file 2 "../emlib/inc/em_bitband.h"
   1:../emlib/inc/em_bitband.h **** /***************************************************************************//**
   2:../emlib/inc/em_bitband.h ****  * @file
   3:../emlib/inc/em_bitband.h ****  * @brief Bitband Peripheral API
   4:../emlib/inc/em_bitband.h ****  * @author Energy Micro AS
   5:../emlib/inc/em_bitband.h ****  * @version 3.20.2
   6:../emlib/inc/em_bitband.h ****  *******************************************************************************
   7:../emlib/inc/em_bitband.h ****  * @section License
   8:../emlib/inc/em_bitband.h ****  * <b>(C) Copyright 2012 Energy Micro AS, http://www.energymicro.com</b>
   9:../emlib/inc/em_bitband.h ****  *******************************************************************************
  10:../emlib/inc/em_bitband.h ****  *
  11:../emlib/inc/em_bitband.h ****  * Permission is granted to anyone to use this software for any purpose,
  12:../emlib/inc/em_bitband.h ****  * including commercial applications, and to alter it and redistribute it
  13:../emlib/inc/em_bitband.h ****  * freely, subject to the following restrictions:
  14:../emlib/inc/em_bitband.h ****  *
  15:../emlib/inc/em_bitband.h ****  * 1. The origin of this software must not be misrepresented; you must not
  16:../emlib/inc/em_bitband.h ****  *    claim that you wrote the original software.
  17:../emlib/inc/em_bitband.h ****  * 2. Altered source versions must be plainly marked as such, and must not be
  18:../emlib/inc/em_bitband.h ****  *    misrepresented as being the original software.
  19:../emlib/inc/em_bitband.h ****  * 3. This notice may not be removed or altered from any source distribution.
  20:../emlib/inc/em_bitband.h ****  *
  21:../emlib/inc/em_bitband.h ****  * DISCLAIMER OF WARRANTY/LIMITATION OF REMEDIES: Energy Micro AS has no
  22:../emlib/inc/em_bitband.h ****  * obligation to support this Software. Energy Micro AS is providing the
  23:../emlib/inc/em_bitband.h ****  * Software "AS IS", with no express or implied warranties of any kind,
  24:../emlib/inc/em_bitband.h ****  * including, but not limited to, any implied warranties of merchantability
  25:../emlib/inc/em_bitband.h ****  * or fitness for any particular purpose or warranties against infringement
  26:../emlib/inc/em_bitband.h ****  * of any proprietary rights of a third party.
  27:../emlib/inc/em_bitband.h ****  *
  28:../emlib/inc/em_bitband.h ****  * Energy Micro AS will not be liable for any consequential, incidental, or
  29:../emlib/inc/em_bitband.h ****  * special damages, or any other relief, or for any claim by any third party,
  30:../emlib/inc/em_bitband.h ****  * arising from your use of this Software.
  31:../emlib/inc/em_bitband.h ****  *
  32:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  33:../emlib/inc/em_bitband.h **** #ifndef __EM_BITBAND_H
  34:../emlib/inc/em_bitband.h **** #define __EM_BITBAND_H
  35:../emlib/inc/em_bitband.h **** 
  36:../emlib/inc/em_bitband.h **** #include "em_device.h"
  37:../emlib/inc/em_bitband.h **** #ifdef __cplusplus
  38:../emlib/inc/em_bitband.h **** extern "C" {
  39:../emlib/inc/em_bitband.h **** #endif
  40:../emlib/inc/em_bitband.h **** 
  41:../emlib/inc/em_bitband.h **** /***************************************************************************//**
ARM GAS  /tmp/ccnPSQXa.s 			page 29


  42:../emlib/inc/em_bitband.h ****  * @addtogroup EM_Library
  43:../emlib/inc/em_bitband.h ****  * @{
  44:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  45:../emlib/inc/em_bitband.h **** 
  46:../emlib/inc/em_bitband.h **** /***************************************************************************//**
  47:../emlib/inc/em_bitband.h ****  * @addtogroup BITBAND
  48:../emlib/inc/em_bitband.h ****  * @brief BITBAND Peripheral API
  49:../emlib/inc/em_bitband.h ****  * @{
  50:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  51:../emlib/inc/em_bitband.h **** 
  52:../emlib/inc/em_bitband.h **** /***************************************************************************//**
  53:../emlib/inc/em_bitband.h ****  * @brief
  54:../emlib/inc/em_bitband.h ****  *   Perform bit-band operation on peripheral memory location.
  55:../emlib/inc/em_bitband.h ****  *
  56:../emlib/inc/em_bitband.h ****  * @details
  57:../emlib/inc/em_bitband.h ****  *   Bit-banding provides atomic read-modify-write cycle for single bit
  58:../emlib/inc/em_bitband.h ****  *   modification. Please refer to the reference manual for further details
  59:../emlib/inc/em_bitband.h ****  *   about bit-banding.
  60:../emlib/inc/em_bitband.h ****  *
  61:../emlib/inc/em_bitband.h ****  * @note
  62:../emlib/inc/em_bitband.h ****  *   This function is only atomic on cores which fully support bitbanding.
  63:../emlib/inc/em_bitband.h ****  *
  64:../emlib/inc/em_bitband.h ****  * @param[in] addr Peripheral address location to modify bit in.
  65:../emlib/inc/em_bitband.h ****  *
  66:../emlib/inc/em_bitband.h ****  * @param[in] bit Bit position to modify, 0-31.
  67:../emlib/inc/em_bitband.h ****  *
  68:../emlib/inc/em_bitband.h ****  * @param[in] val Value to set bit to, 0 or 1.
  69:../emlib/inc/em_bitband.h ****  ******************************************************************************/
  70:../emlib/inc/em_bitband.h **** __STATIC_INLINE void BITBAND_Peripheral(volatile uint32_t *addr,
  71:../emlib/inc/em_bitband.h ****                                         uint32_t bit,
  72:../emlib/inc/em_bitband.h ****                                         uint32_t val)
  73:../emlib/inc/em_bitband.h **** {
  74:../emlib/inc/em_bitband.h **** #if defined(BITBAND_PER_BASE)
  75:../emlib/inc/em_bitband.h ****   uint32_t tmp =
 806              		.loc 2 75 0
 807 005a 9B00     		lsls	r3, r3, #2
  76:../emlib/inc/em_bitband.h ****     BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
  77:../emlib/inc/em_bitband.h **** 
  78:../emlib/inc/em_bitband.h ****   *((volatile uint32_t *)tmp) = (uint32_t)val;
 808              		.loc 2 78 0
 809 005c 1A60     		str	r2, [r3]
 810 005e 38BD     		pop	{r3, r4, r5, pc}
 811              	.LVL89:
 812              	.L88:
 813              		.align	2
 814              	.L87:
 815 0060 00000000 		.word	.LC0
 816 0064 00200C40 		.word	1074536448
 817 0068 6080E110 		.word	283213920
 818              	.LBE8:
 819              	.LBE7:
 820              		.cfi_endproc
 821              	.LFE77:
 823              		.section	.text.DMA_CfgDescr,"ax",%progbits
 824              		.align	1
 825              		.global	DMA_CfgDescr
 826              		.thumb
ARM GAS  /tmp/ccnPSQXa.s 			page 30


 827              		.thumb_func
 829              	DMA_CfgDescr:
 830              	.LFB78:
 733:../emlib/src/em_dma.c ****     BITBAND_Peripheral(&(DMA->IEN), channel, 1);
 734:../emlib/src/em_dma.c ****   }
 735:../emlib/src/em_dma.c ****   else
 736:../emlib/src/em_dma.c ****   {
 737:../emlib/src/em_dma.c ****     BITBAND_Peripheral(&(DMA->IEN), channel, 0);
 738:../emlib/src/em_dma.c ****   }
 739:../emlib/src/em_dma.c **** }
 740:../emlib/src/em_dma.c **** 
 741:../emlib/src/em_dma.c **** 
 742:../emlib/src/em_dma.c **** /***************************************************************************//**
 743:../emlib/src/em_dma.c ****  * @brief
 744:../emlib/src/em_dma.c ****  *   Configure DMA descriptor for auto-request, basic or ping-pong DMA cycles.
 745:../emlib/src/em_dma.c ****  *
 746:../emlib/src/em_dma.c ****  * @details
 747:../emlib/src/em_dma.c ****  *   This function is used for configuration of a descriptor for the following
 748:../emlib/src/em_dma.c ****  *   DMA cycle types:
 749:../emlib/src/em_dma.c ****  *
 750:../emlib/src/em_dma.c ****  *   @li auto-request - used for memory/memory transfer
 751:../emlib/src/em_dma.c ****  *   @li basic - used for a peripheral/memory transfer
 752:../emlib/src/em_dma.c ****  *   @li ping-pong - used for a ping-pong based peripheral/memory transfer
 753:../emlib/src/em_dma.c ****  *     style providing time to refresh one descriptor while the other is
 754:../emlib/src/em_dma.c ****  *     in use.
 755:../emlib/src/em_dma.c ****  *
 756:../emlib/src/em_dma.c ****  *   The DMA cycle is not activated, please see DMA_ActivateAuto(),
 757:../emlib/src/em_dma.c ****  *   DMA_ActivateBasic() or DMA_ActivatePingPong() to activate the DMA cycle.
 758:../emlib/src/em_dma.c ****  *   In many cases, the configuration only has to be done once, and all
 759:../emlib/src/em_dma.c ****  *   subsequent cycles may be activated with the activate function.
 760:../emlib/src/em_dma.c ****  *
 761:../emlib/src/em_dma.c ****  *   For ping-pong DMA cycles, this function must be used both on the primary
 762:../emlib/src/em_dma.c ****  *   and the alternate descriptor prior to activating the DMA cycle.
 763:../emlib/src/em_dma.c ****  *
 764:../emlib/src/em_dma.c ****  *   Notice that the DMA channel must also be configured, see DMA_CfgChannel().
 765:../emlib/src/em_dma.c ****  *
 766:../emlib/src/em_dma.c ****  * @note
 767:../emlib/src/em_dma.c ****  *   If using this function on a descriptor already activated and in use by
 768:../emlib/src/em_dma.c ****  *   the DMA controller, the behaviour is undefined.
 769:../emlib/src/em_dma.c ****  *
 770:../emlib/src/em_dma.c ****  * @param[in] channel
 771:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 772:../emlib/src/em_dma.c ****  *
 773:../emlib/src/em_dma.c ****  * @param[in] primary
 774:../emlib/src/em_dma.c ****  *   @li true - configure primary descriptor
 775:../emlib/src/em_dma.c ****  *   @li false - configure alternate descriptor
 776:../emlib/src/em_dma.c ****  *
 777:../emlib/src/em_dma.c ****  * @param[in] cfg
 778:../emlib/src/em_dma.c ****  *   Configuration to use.
 779:../emlib/src/em_dma.c ****  ******************************************************************************/
 780:../emlib/src/em_dma.c **** void DMA_CfgDescr(unsigned int channel,
 781:../emlib/src/em_dma.c ****                   bool primary,
 782:../emlib/src/em_dma.c ****                   DMA_CfgDescr_TypeDef *cfg)
 783:../emlib/src/em_dma.c **** {
 831              		.loc 1 783 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccnPSQXa.s 			page 31


 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835              	.LVL90:
 784:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
 785:../emlib/src/em_dma.c **** 
 786:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 836              		.loc 1 786 0
 837 0000 0728     		cmp	r0, #7
 783:../emlib/src/em_dma.c **** {
 838              		.loc 1 783 0
 839 0002 70B5     		push	{r4, r5, r6, lr}
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 4, -16
 842              		.cfi_offset 5, -12
 843              		.cfi_offset 6, -8
 844              		.cfi_offset 14, -4
 783:../emlib/src/em_dma.c **** {
 845              		.loc 1 783 0
 846 0004 0546     		mov	r5, r0
 847 0006 0E46     		mov	r6, r1
 848 0008 1446     		mov	r4, r2
 849              		.loc 1 786 0
 850 000a 04D9     		bls	.L90
 851              		.loc 1 786 0 is_stmt 0 discriminator 1
 852 000c 1148     		ldr	r0, .L94
 853              	.LVL91:
 854 000e 40F21231 		movw	r1, #786
 855              	.LVL92:
 856 0012 FFF7FEFF 		bl	assertEFM
 857              	.LVL93:
 858              	.L90:
 787:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 859              		.loc 1 787 0 is_stmt 1
 860 0016 24B9     		cbnz	r4, .L91
 861              		.loc 1 787 0 is_stmt 0 discriminator 1
 862 0018 0E48     		ldr	r0, .L94
 863 001a 40F21331 		movw	r1, #787
 864 001e FFF7FEFF 		bl	assertEFM
 865              	.LVL94:
 866              	.L91:
 867 0022 0D4B     		ldr	r3, .L94+4
 788:../emlib/src/em_dma.c **** 
 789:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
 790:../emlib/src/em_dma.c ****   if (primary)
 868              		.loc 1 790 0 is_stmt 1
 869 0024 0EB1     		cbz	r6, .L92
 791:../emlib/src/em_dma.c ****   {
 792:../emlib/src/em_dma.c ****     descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
 870              		.loc 1 792 0
 871 0026 9B68     		ldr	r3, [r3, #8]
 872              	.LVL95:
 873 0028 00E0     		b	.L93
 874              	.LVL96:
 875              	.L92:
 793:../emlib/src/em_dma.c ****   }
 794:../emlib/src/em_dma.c ****   else
 795:../emlib/src/em_dma.c ****   {
 796:../emlib/src/em_dma.c ****     descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
ARM GAS  /tmp/ccnPSQXa.s 			page 32


 876              		.loc 1 796 0
 877 002a DB68     		ldr	r3, [r3, #12]
 878              	.LVL97:
 879              	.L93:
 797:../emlib/src/em_dma.c ****   }
 798:../emlib/src/em_dma.c ****   descr += channel;
 799:../emlib/src/em_dma.c **** 
 800:../emlib/src/em_dma.c ****   /* Prepare the descriptor */
 801:../emlib/src/em_dma.c ****   /* Source/destination end addresses set when started */
 802:../emlib/src/em_dma.c ****   descr->CTRL =
 803:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 804:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 805:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 806:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 807:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 880              		.loc 1 807 0
 881 002c 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 808:../emlib/src/em_dma.c ****     (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
 882              		.loc 1 808 0
 883 002e E178     		ldrb	r1, [r4, #3]	@ zero_extendqisi2
 807:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 884              		.loc 1 807 0
 885 0030 9204     		lsls	r2, r2, #18
 806:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 886              		.loc 1 806 0
 887 0032 42EA8132 		orr	r2, r2, r1, lsl #14
 803:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 888              		.loc 1 803 0
 889 0036 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 798:../emlib/src/em_dma.c ****   descr += channel;
 890              		.loc 1 798 0
 891 0038 03EB0515 		add	r5, r3, r5, lsl #4
 892              	.LVL98:
 804:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 893              		.loc 1 804 0
 894 003c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 805:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 895              		.loc 1 805 0
 896 003e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 803:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 897              		.loc 1 803 0
 898 0040 8907     		lsls	r1, r1, #30
 899 0042 41EA0371 		orr	r1, r1, r3, lsl #28
 804:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 900              		.loc 1 804 0
 901 0046 41EA8061 		orr	r1, r1, r0, lsl #26
 805:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 902              		.loc 1 805 0
 903 004a 41EA0363 		orr	r3, r1, r3, lsl #24
 809:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_N_MINUS_1_SHIFT) |         /* Set when activated */
 810:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |     /* Set when activated */
 904              		.loc 1 810 0
 905 004e 1343     		orrs	r3, r3, r2
 802:../emlib/src/em_dma.c ****   descr->CTRL =
 906              		.loc 1 802 0
 907 0050 AB60     		str	r3, [r5, #8]
 908 0052 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccnPSQXa.s 			page 33


 909              	.LVL99:
 910              	.L95:
 911              		.align	2
 912              	.L94:
 913 0054 00000000 		.word	.LC0
 914 0058 00200C40 		.word	1074536448
 915              		.cfi_endproc
 916              	.LFE78:
 918              		.section	.text.DMA_CfgDescrScatterGather,"ax",%progbits
 919              		.align	1
 920              		.global	DMA_CfgDescrScatterGather
 921              		.thumb
 922              		.thumb_func
 924              	DMA_CfgDescrScatterGather:
 925              	.LFB79:
 811:../emlib/src/em_dma.c ****     DMA_CTRL_CYCLE_CTRL_INVALID;               /* Set when activated */
 812:../emlib/src/em_dma.c **** }
 813:../emlib/src/em_dma.c **** 
 814:../emlib/src/em_dma.c **** 
 815:../emlib/src/em_dma.c **** #if defined( _DMA_LOOP0_MASK ) && defined( _DMA_LOOP1_MASK )
 816:../emlib/src/em_dma.c **** /***************************************************************************//**
 817:../emlib/src/em_dma.c ****  * @brief Configure DMA channel for Loop mode or 2D transfer.
 818:../emlib/src/em_dma.c ****  *
 819:../emlib/src/em_dma.c ****  * @details
 820:../emlib/src/em_dma.c ****  *   For 2D transfer, set cfg->enable to "false", and only configure nMinus1
 821:../emlib/src/em_dma.c ****  *   to same width as channel descriptor.
 822:../emlib/src/em_dma.c ****  *
 823:../emlib/src/em_dma.c ****  * @param[in] channel
 824:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 825:../emlib/src/em_dma.c ****  *
 826:../emlib/src/em_dma.c ****  * @param[in] cfg
 827:../emlib/src/em_dma.c ****  *   Configuration to use.
 828:../emlib/src/em_dma.c ****  ******************************************************************************/
 829:../emlib/src/em_dma.c **** void DMA_CfgLoop(unsigned int channel, DMA_CfgLoop_TypeDef *cfg)
 830:../emlib/src/em_dma.c **** {
 831:../emlib/src/em_dma.c ****   EFM_ASSERT(channel <= 1);
 832:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->nMinus1 <= 1023);
 833:../emlib/src/em_dma.c **** 
 834:../emlib/src/em_dma.c ****   /* Configure LOOP setting */
 835:../emlib/src/em_dma.c ****   switch( channel )
 836:../emlib/src/em_dma.c ****   {
 837:../emlib/src/em_dma.c ****   case 0:
 838:../emlib/src/em_dma.c ****     DMA->LOOP0 = (cfg->enable << _DMA_LOOP0_EN_SHIFT|
 839:../emlib/src/em_dma.c ****                   cfg->nMinus1 << _DMA_LOOP0_WIDTH_SHIFT);
 840:../emlib/src/em_dma.c ****     break;
 841:../emlib/src/em_dma.c ****   case 1:
 842:../emlib/src/em_dma.c ****     DMA->LOOP1 = (cfg->enable << _DMA_LOOP1_EN_SHIFT|
 843:../emlib/src/em_dma.c ****                   cfg->nMinus1 << _DMA_LOOP1_WIDTH_SHIFT);
 844:../emlib/src/em_dma.c ****     break;
 845:../emlib/src/em_dma.c ****   }
 846:../emlib/src/em_dma.c **** }
 847:../emlib/src/em_dma.c **** #endif
 848:../emlib/src/em_dma.c **** 
 849:../emlib/src/em_dma.c **** 
 850:../emlib/src/em_dma.c **** #if defined( _DMA_RECT0_MASK )
 851:../emlib/src/em_dma.c **** /***************************************************************************//**
 852:../emlib/src/em_dma.c ****  * @brief Configure DMA channel 2D transfer properties.
ARM GAS  /tmp/ccnPSQXa.s 			page 34


 853:../emlib/src/em_dma.c ****  *
 854:../emlib/src/em_dma.c ****  * @param[in] channel
 855:../emlib/src/em_dma.c ****  *   DMA channel to configure for.
 856:../emlib/src/em_dma.c ****  *
 857:../emlib/src/em_dma.c ****  * @param[in] cfg
 858:../emlib/src/em_dma.c ****  *   Configuration to use.
 859:../emlib/src/em_dma.c ****  ******************************************************************************/
 860:../emlib/src/em_dma.c **** void DMA_CfgRect(unsigned int channel, DMA_CfgRect_TypeDef *cfg)
 861:../emlib/src/em_dma.c **** {
 862:../emlib/src/em_dma.c ****   (void)channel;                            /* Unused parameter */
 863:../emlib/src/em_dma.c **** 
 864:../emlib/src/em_dma.c ****   EFM_ASSERT(channel == 0);
 865:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->dstStride <= 2047);
 866:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->srcStride <= 2047);
 867:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg->height <= 1023);
 868:../emlib/src/em_dma.c **** 
 869:../emlib/src/em_dma.c ****   /* Configure rectangular/2D copy */
 870:../emlib/src/em_dma.c ****   DMA->RECT0 = (cfg->dstStride << _DMA_RECT0_DSTSTRIDE_SHIFT|
 871:../emlib/src/em_dma.c ****                 cfg->srcStride << _DMA_RECT0_SRCSTRIDE_SHIFT|
 872:../emlib/src/em_dma.c ****                 cfg->height << _DMA_RECT0_HEIGHT_SHIFT);
 873:../emlib/src/em_dma.c **** }
 874:../emlib/src/em_dma.c **** #endif
 875:../emlib/src/em_dma.c **** 
 876:../emlib/src/em_dma.c **** 
 877:../emlib/src/em_dma.c **** /***************************************************************************//**
 878:../emlib/src/em_dma.c ****  * @brief
 879:../emlib/src/em_dma.c ****  *   Configure an alternate DMA descriptor for use with scatter-gather DMA
 880:../emlib/src/em_dma.c ****  *   cycles.
 881:../emlib/src/em_dma.c ****  *
 882:../emlib/src/em_dma.c ****  * @details
 883:../emlib/src/em_dma.c ****  *   In scatter-gather mode, the alternate descriptors are located in one
 884:../emlib/src/em_dma.c ****  *   contiguous memory area. Each of the alternate descriptor must be fully
 885:../emlib/src/em_dma.c ****  *   configured prior to starting the scatter-gather DMA cycle.
 886:../emlib/src/em_dma.c ****  *
 887:../emlib/src/em_dma.c ****  *   The DMA cycle is not activated by this function, please see
 888:../emlib/src/em_dma.c ****  *   DMA_ActivateScatterGather() to activate the DMA cycle. In some cases, the
 889:../emlib/src/em_dma.c ****  *   alternate configuration only has to be done once, and all subsequent
 890:../emlib/src/em_dma.c ****  *   transfers may be activated with the activate function.
 891:../emlib/src/em_dma.c ****  *
 892:../emlib/src/em_dma.c ****  *   Notice that the DMA channel must also be configured, see DMA_CfgChannel().
 893:../emlib/src/em_dma.c ****  *
 894:../emlib/src/em_dma.c ****  * @param[in] descr
 895:../emlib/src/em_dma.c ****  *   Points to start of memory area holding the alternate descriptors.
 896:../emlib/src/em_dma.c ****  *
 897:../emlib/src/em_dma.c ****  * @param[in] indx
 898:../emlib/src/em_dma.c ****  *   Alternate descriptor index number to configure (numbered from 0).
 899:../emlib/src/em_dma.c ****  *
 900:../emlib/src/em_dma.c ****  * @param[in] cfg
 901:../emlib/src/em_dma.c ****  *   Configuration to use.
 902:../emlib/src/em_dma.c ****  ******************************************************************************/
 903:../emlib/src/em_dma.c **** void DMA_CfgDescrScatterGather(DMA_DESCRIPTOR_TypeDef *descr,
 904:../emlib/src/em_dma.c ****                                unsigned int indx,
 905:../emlib/src/em_dma.c ****                                DMA_CfgDescrSGAlt_TypeDef *cfg)
 906:../emlib/src/em_dma.c **** {
 926              		.loc 1 906 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccnPSQXa.s 			page 35


 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL100:
 931 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 932              		.cfi_def_cfa_offset 24
 933              		.cfi_offset 3, -24
 934              		.cfi_offset 4, -20
 935              		.cfi_offset 5, -16
 936              		.cfi_offset 6, -12
 937              		.cfi_offset 7, -8
 938              		.cfi_offset 14, -4
 939              		.loc 1 906 0
 940 0002 0E46     		mov	r6, r1
 941 0004 1446     		mov	r4, r2
 907:../emlib/src/em_dma.c ****   uint32_t cycleCtrl;
 908:../emlib/src/em_dma.c **** 
 909:../emlib/src/em_dma.c ****   EFM_ASSERT(descr);
 942              		.loc 1 909 0
 943 0006 0546     		mov	r5, r0
 944 0008 20B9     		cbnz	r0, .L97
 945              		.loc 1 909 0 is_stmt 0 discriminator 1
 946 000a 1E48     		ldr	r0, .L107
 947              	.LVL101:
 948 000c 40F28D31 		movw	r1, #909
 949              	.LVL102:
 950 0010 FFF7FEFF 		bl	assertEFM
 951              	.LVL103:
 952              	.L97:
 910:../emlib/src/em_dma.c ****   EFM_ASSERT(cfg);
 953              		.loc 1 910 0 is_stmt 1
 954 0014 24B9     		cbnz	r4, .L98
 955              		.loc 1 910 0 is_stmt 0 discriminator 1
 956 0016 1B48     		ldr	r0, .L107
 957 0018 40F28E31 		movw	r1, #910
 958 001c FFF7FEFF 		bl	assertEFM
 959              	.LVL104:
 960              	.L98:
 911:../emlib/src/em_dma.c **** 
 912:../emlib/src/em_dma.c ****   /* Point to selected entry in alternate descriptor table */
 913:../emlib/src/em_dma.c ****   descr += indx;
 914:../emlib/src/em_dma.c **** 
 915:../emlib/src/em_dma.c ****   if (cfg->srcInc == dmaDataIncNone)
 961              		.loc 1 915 0 is_stmt 1
 962 0020 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 963 0022 A089     		ldrh	r0, [r4, #12]
 964 0024 032A     		cmp	r2, #3
 916:../emlib/src/em_dma.c ****   {
 917:../emlib/src/em_dma.c ****     descr->SRCEND = cfg->src;
 918:../emlib/src/em_dma.c ****   }
 919:../emlib/src/em_dma.c ****   else
 920:../emlib/src/em_dma.c ****   {
 921:../emlib/src/em_dma.c ****     descr->SRCEND = (void *)((uint32_t)(cfg->src) + ((uint32_t)(cfg->nMinus1) << cfg->srcInc));
 965              		.loc 1 921 0
 966 0026 18BF     		it	ne
 967 0028 00FA02F7 		lslne	r7, r0, r2
 913:../emlib/src/em_dma.c ****   descr += indx;
 968              		.loc 1 913 0
 969 002c 4FEA0611 		lsl	r1, r6, #4
ARM GAS  /tmp/ccnPSQXa.s 			page 36


 970 0030 2668     		ldr	r6, [r4]
 971              	.LVL105:
 972 0032 05EB0103 		add	r3, r5, r1
 973              	.LVL106:
 974              		.loc 1 921 0
 975 0036 18BF     		it	ne
 976 0038 F619     		addne	r6, r6, r7
 977 003a 6E50     		str	r6, [r5, r1]
 922:../emlib/src/em_dma.c ****   }
 923:../emlib/src/em_dma.c **** 
 924:../emlib/src/em_dma.c ****   if (cfg->dstInc == dmaDataIncNone)
 978              		.loc 1 924 0
 979 003c 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
 980 003e 6568     		ldr	r5, [r4, #4]
 981 0040 0329     		cmp	r1, #3
 925:../emlib/src/em_dma.c ****   {
 926:../emlib/src/em_dma.c ****     descr->DSTEND = cfg->dst;
 927:../emlib/src/em_dma.c ****   }
 928:../emlib/src/em_dma.c ****   else
 929:../emlib/src/em_dma.c ****   {
 930:../emlib/src/em_dma.c ****     descr->DSTEND = (void *)((uint32_t)(cfg->dst) + ((uint32_t)(cfg->nMinus1) << cfg->dstInc));
 982              		.loc 1 930 0
 983 0042 1CBF     		itt	ne
 984 0044 00FA01F6 		lslne	r6, r0, r1
 985 0048 AD19     		addne	r5, r5, r6
 986 004a 5D60     		str	r5, [r3, #4]
 931:../emlib/src/em_dma.c ****   }
 932:../emlib/src/em_dma.c **** 
 933:../emlib/src/em_dma.c ****   /* User definable part not used */
 934:../emlib/src/em_dma.c ****   descr->USER = 0;
 987              		.loc 1 934 0
 988 004c 0025     		movs	r5, #0
 989 004e DD60     		str	r5, [r3, #12]
 935:../emlib/src/em_dma.c **** 
 936:../emlib/src/em_dma.c ****   if (cfg->peripheral)
 990              		.loc 1 936 0
 991 0050 E57B     		ldrb	r5, [r4, #15]	@ zero_extendqisi2
 937:../emlib/src/em_dma.c ****   {
 938:../emlib/src/em_dma.c ****     cycleCtrl = (uint32_t)dmaCycleCtrlPerScatterGather + 1;
 939:../emlib/src/em_dma.c ****   }
 940:../emlib/src/em_dma.c ****   else
 941:../emlib/src/em_dma.c ****   {
 942:../emlib/src/em_dma.c ****     cycleCtrl = (uint32_t)dmaCycleCtrlMemScatterGather + 1;
 943:../emlib/src/em_dma.c ****   }
 944:../emlib/src/em_dma.c **** 
 945:../emlib/src/em_dma.c ****   descr->CTRL =
 946:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 947:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 948:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 949:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 950:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 992              		.loc 1 950 0
 993 0052 A77B     		ldrb	r7, [r4, #14]	@ zero_extendqisi2
 936:../emlib/src/em_dma.c ****   if (cfg->peripheral)
 994              		.loc 1 936 0
 995 0054 002D     		cmp	r5, #0
 947:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
ARM GAS  /tmp/ccnPSQXa.s 			page 37


 996              		.loc 1 947 0
 997 0056 A57A     		ldrb	r5, [r4, #10]	@ zero_extendqisi2
 946:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 998              		.loc 1 946 0
 999 0058 4FEA8171 		lsl	r1, r1, #30
 951:../emlib/src/em_dma.c ****     (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT) |
 1000              		.loc 1 951 0
 1001 005c E47A     		ldrb	r4, [r4, #11]	@ zero_extendqisi2
 1002              	.LVL107:
 946:../emlib/src/em_dma.c ****     (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT) |
 1003              		.loc 1 946 0
 1004 005e 41EA0571 		orr	r1, r1, r5, lsl #28
 950:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 1005              		.loc 1 950 0
 1006 0062 4FEA8747 		lsl	r7, r7, #18
 949:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT) |
 1007              		.loc 1 949 0
 1008 0066 47EA0010 		orr	r0, r7, r0, lsl #4
 947:../emlib/src/em_dma.c ****     (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT) |
 1009              		.loc 1 947 0
 1010 006a 41EA8262 		orr	r2, r1, r2, lsl #26
 950:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT) |
 1011              		.loc 1 950 0
 1012 006e 40EA8430 		orr	r0, r0, r4, lsl #14
 948:../emlib/src/em_dma.c ****     (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT) |
 1013              		.loc 1 948 0
 1014 0072 42EA0565 		orr	r5, r2, r5, lsl #24
 938:../emlib/src/em_dma.c ****     cycleCtrl = (uint32_t)dmaCycleCtrlPerScatterGather + 1;
 1015              		.loc 1 938 0
 1016 0076 0CBF     		ite	eq
 1017 0078 0526     		moveq	r6, #5
 1018 007a 0726     		movne	r6, #7
 1019              	.LVL108:
 952:../emlib/src/em_dma.c ****     ((uint32_t)(cfg->nMinus1) << _DMA_CTRL_N_MINUS_1_SHIFT) |
 1020              		.loc 1 952 0
 1021 007c 0543     		orrs	r5, r5, r0
 953:../emlib/src/em_dma.c ****     /* Never set next useburst bit, since the descriptor used after the */
 954:../emlib/src/em_dma.c ****     /* alternate descriptor is the primary descriptor which operates on */
 955:../emlib/src/em_dma.c ****     /* memory. If the alternate descriptors need to have useBurst set, this */
 956:../emlib/src/em_dma.c ****     /* done when setting up the primary descriptor, ie when activating. */
 957:../emlib/src/em_dma.c ****     (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) |
 1022              		.loc 1 957 0
 1023 007e 3543     		orrs	r5, r5, r6
 945:../emlib/src/em_dma.c ****   descr->CTRL =
 1024              		.loc 1 945 0
 1025 0080 9D60     		str	r5, [r3, #8]
 1026 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1027              	.LVL109:
 1028              	.L108:
 1029              		.align	2
 1030              	.L107:
 1031 0084 00000000 		.word	.LC0
 1032              		.cfi_endproc
 1033              	.LFE79:
 1035              		.section	.text.DMA_ChannelEnabled,"ax",%progbits
 1036              		.align	1
 1037              		.global	DMA_ChannelEnabled
ARM GAS  /tmp/ccnPSQXa.s 			page 38


 1038              		.thumb
 1039              		.thumb_func
 1041              	DMA_ChannelEnabled:
 1042              	.LFB80:
 958:../emlib/src/em_dma.c ****     (cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT);
 959:../emlib/src/em_dma.c **** }
 960:../emlib/src/em_dma.c **** 
 961:../emlib/src/em_dma.c **** 
 962:../emlib/src/em_dma.c **** /***************************************************************************//**
 963:../emlib/src/em_dma.c ****  * @brief
 964:../emlib/src/em_dma.c ****  *   Check if DMA channel is enabled.
 965:../emlib/src/em_dma.c ****  *
 966:../emlib/src/em_dma.c ****  * @details
 967:../emlib/src/em_dma.c ****  *   The DMA channel is disabled when the DMA controller has finished a DMA
 968:../emlib/src/em_dma.c ****  *   cycle.
 969:../emlib/src/em_dma.c ****  *
 970:../emlib/src/em_dma.c ****  * @param[in] channel
 971:../emlib/src/em_dma.c ****  *   DMA channel to check.
 972:../emlib/src/em_dma.c ****  *
 973:../emlib/src/em_dma.c ****  * @return
 974:../emlib/src/em_dma.c ****  *   true if channel is enabled, false if not.
 975:../emlib/src/em_dma.c ****  ******************************************************************************/
 976:../emlib/src/em_dma.c **** bool DMA_ChannelEnabled(unsigned int channel)
 977:../emlib/src/em_dma.c **** {
 1043              		.loc 1 977 0
 1044              		.cfi_startproc
 1045              		@ args = 0, pretend = 0, frame = 0
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047              	.LVL110:
 978:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1048              		.loc 1 978 0
 1049 0000 0728     		cmp	r0, #7
 977:../emlib/src/em_dma.c **** {
 1050              		.loc 1 977 0
 1051 0002 10B5     		push	{r4, lr}
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 4, -8
 1054              		.cfi_offset 14, -4
 977:../emlib/src/em_dma.c **** {
 1055              		.loc 1 977 0
 1056 0004 0446     		mov	r4, r0
 1057              		.loc 1 978 0
 1058 0006 04D9     		bls	.L110
 1059              		.loc 1 978 0 is_stmt 0 discriminator 1
 1060 0008 0548     		ldr	r0, .L111
 1061              	.LVL111:
 1062 000a 40F2D231 		movw	r1, #978
 1063 000e FFF7FEFF 		bl	assertEFM
 1064              	.LVL112:
 1065              	.L110:
 979:../emlib/src/em_dma.c **** 
 980:../emlib/src/em_dma.c ****   return (bool)((DMA->CHENS >> channel) & 1);
 1066              		.loc 1 980 0 is_stmt 1
 1067 0012 044B     		ldr	r3, .L111+4
 1068 0014 9B6A     		ldr	r3, [r3, #40]
 1069 0016 23FA04F0 		lsr	r0, r3, r4
 981:../emlib/src/em_dma.c **** }
ARM GAS  /tmp/ccnPSQXa.s 			page 39


 1070              		.loc 1 981 0
 1071 001a 00F00100 		and	r0, r0, #1
 1072 001e 10BD     		pop	{r4, pc}
 1073              	.LVL113:
 1074              	.L112:
 1075              		.align	2
 1076              	.L111:
 1077 0020 00000000 		.word	.LC0
 1078 0024 00200C40 		.word	1074536448
 1079              		.cfi_endproc
 1080              	.LFE80:
 1082              		.section	.text.DMA_RefreshPingPong,"ax",%progbits
 1083              		.align	1
 1084              		.global	DMA_RefreshPingPong
 1085              		.thumb
 1086              		.thumb_func
 1088              	DMA_RefreshPingPong:
 1089              	.LFB82:
 982:../emlib/src/em_dma.c **** 
 983:../emlib/src/em_dma.c **** 
 984:../emlib/src/em_dma.c **** /***************************************************************************//**
 985:../emlib/src/em_dma.c ****  * @brief
 986:../emlib/src/em_dma.c ****  *   Initializes DMA controller.
 987:../emlib/src/em_dma.c ****  *
 988:../emlib/src/em_dma.c ****  * @details
 989:../emlib/src/em_dma.c ****  *   This function will reset and prepare the DMA controller for use. Although
 990:../emlib/src/em_dma.c ****  *   it may be used several times, it is normally only used during system
 991:../emlib/src/em_dma.c ****  *   init. If reused during normal operation, notice that any ongoing DMA
 992:../emlib/src/em_dma.c ****  *   transfers will be aborted. When completed, the DMA controller is in
 993:../emlib/src/em_dma.c ****  *   an enabled state.
 994:../emlib/src/em_dma.c ****  *
 995:../emlib/src/em_dma.c ****  * @note
 996:../emlib/src/em_dma.c ****  *   Must be invoked before using the DMA controller.
 997:../emlib/src/em_dma.c ****  *
 998:../emlib/src/em_dma.c ****  * @param[in] init
 999:../emlib/src/em_dma.c ****  *   Pointer to a structure containing DMA init information.
1000:../emlib/src/em_dma.c ****  ******************************************************************************/
1001:../emlib/src/em_dma.c **** void DMA_Init(DMA_Init_TypeDef *init)
1002:../emlib/src/em_dma.c **** {
1003:../emlib/src/em_dma.c ****   EFM_ASSERT(init);
1004:../emlib/src/em_dma.c **** 
1005:../emlib/src/em_dma.c ****   /* Make sure control block is properly aligned */
1006:../emlib/src/em_dma.c ****   EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
1007:../emlib/src/em_dma.c **** 
1008:../emlib/src/em_dma.c ****   /* Make sure DMA clock is enabled prior to accessing DMA module */
1009:../emlib/src/em_dma.c ****   CMU_ClockEnable(cmuClock_DMA, true);
1010:../emlib/src/em_dma.c **** 
1011:../emlib/src/em_dma.c ****   /* Make sure DMA controller is set to a known reset state */
1012:../emlib/src/em_dma.c ****   DMA_Reset();
1013:../emlib/src/em_dma.c **** 
1014:../emlib/src/em_dma.c ****   /* Clear/enable DMA interrupts */
1015:../emlib/src/em_dma.c ****   NVIC_ClearPendingIRQ(DMA_IRQn);
1016:../emlib/src/em_dma.c ****   NVIC_EnableIRQ(DMA_IRQn);
1017:../emlib/src/em_dma.c **** 
1018:../emlib/src/em_dma.c ****   /* Enable bus error interrupt */
1019:../emlib/src/em_dma.c ****   DMA->IEN = DMA_IEN_ERR;
1020:../emlib/src/em_dma.c **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 40


1021:../emlib/src/em_dma.c ****   /* Set pointer to control block, notice that this ptr must have been */
1022:../emlib/src/em_dma.c ****   /* properly aligned, according to requirements defined in the reference */
1023:../emlib/src/em_dma.c ****   /* manual. */
1024:../emlib/src/em_dma.c ****   DMA->CTRLBASE = (uint32_t)(init->controlBlock);
1025:../emlib/src/em_dma.c **** 
1026:../emlib/src/em_dma.c ****   /* Configure and enable the DMA controller */
1027:../emlib/src/em_dma.c ****   DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT) | DMA_CONFIG_EN;
1028:../emlib/src/em_dma.c **** }
1029:../emlib/src/em_dma.c **** 
1030:../emlib/src/em_dma.c **** 
1031:../emlib/src/em_dma.c **** /***************************************************************************//**
1032:../emlib/src/em_dma.c ****  * @brief
1033:../emlib/src/em_dma.c ****  *   Refresh a descriptor used in a DMA ping-pong cycle.
1034:../emlib/src/em_dma.c ****  *
1035:../emlib/src/em_dma.c ****  * @details
1036:../emlib/src/em_dma.c ****  *   During a ping-pong DMA cycle, the DMA controller automatically alternates
1037:../emlib/src/em_dma.c ****  *   between primary and alternate descriptors, when completing use of a
1038:../emlib/src/em_dma.c ****  *   descriptor. While the other descriptor is in use by the DMA controller,
1039:../emlib/src/em_dma.c ****  *   the SW should refresh the completed descriptor. This is typically done from
1040:../emlib/src/em_dma.c ****  *   the callback defined for the ping-pong cycle.
1041:../emlib/src/em_dma.c ****  *
1042:../emlib/src/em_dma.c ****  * @param[in] channel
1043:../emlib/src/em_dma.c ****  *   DMA channel to refresh ping-pong descriptor for.
1044:../emlib/src/em_dma.c ****  *
1045:../emlib/src/em_dma.c ****  * @param[in] primary
1046:../emlib/src/em_dma.c ****  *   @li true - refresh primary descriptor
1047:../emlib/src/em_dma.c ****  *   @li false - refresh alternate descriptor
1048:../emlib/src/em_dma.c ****  *
1049:../emlib/src/em_dma.c ****  * @param[in] useBurst
1050:../emlib/src/em_dma.c ****  *   The burst feature is only used on peripherals supporting DMA bursts.
1051:../emlib/src/em_dma.c ****  *   Bursts must not be used if the total length (as given by nMinus1) is
1052:../emlib/src/em_dma.c ****  *   less than the arbitration rate configured for the descriptor. Please
1053:../emlib/src/em_dma.c ****  *   refer to the reference manual for further details on burst usage.
1054:../emlib/src/em_dma.c ****  *
1055:../emlib/src/em_dma.c ****  * @param[in] dst
1056:../emlib/src/em_dma.c ****  *   Address to start location to transfer data to. If NULL, leave setting in
1057:../emlib/src/em_dma.c ****  *   descriptor as is.
1058:../emlib/src/em_dma.c ****  *
1059:../emlib/src/em_dma.c ****  * @param[in] src
1060:../emlib/src/em_dma.c ****  *   Address to start location to transfer data from. If NULL, leave setting in
1061:../emlib/src/em_dma.c ****  *   descriptor as is.
1062:../emlib/src/em_dma.c ****  *
1063:../emlib/src/em_dma.c ****  * @param[in] nMinus1
1064:../emlib/src/em_dma.c ****  *   Number of DMA transfer elements (minus 1) to transfer (<= 1023). The
1065:../emlib/src/em_dma.c ****  *   size of the DMA transfer element (1, 2 or 4 bytes) is configured with
1066:../emlib/src/em_dma.c ****  *   DMA_CfgDescr().
1067:../emlib/src/em_dma.c ****  *
1068:../emlib/src/em_dma.c ****  * @param[in] stop
1069:../emlib/src/em_dma.c ****  *   Indicate that the DMA ping-pong cycle shall stop @b after completing use
1070:../emlib/src/em_dma.c ****  *   of this descriptor.
1071:../emlib/src/em_dma.c ****  ******************************************************************************/
1072:../emlib/src/em_dma.c **** void DMA_RefreshPingPong(unsigned int channel,
1073:../emlib/src/em_dma.c ****                          bool primary,
1074:../emlib/src/em_dma.c ****                          bool useBurst,
1075:../emlib/src/em_dma.c ****                          void *dst,
1076:../emlib/src/em_dma.c ****                          void *src,
1077:../emlib/src/em_dma.c ****                          unsigned int nMinus1,
ARM GAS  /tmp/ccnPSQXa.s 			page 41


1078:../emlib/src/em_dma.c ****                          bool stop)
1079:../emlib/src/em_dma.c **** {
 1090              		.loc 1 1079 0
 1091              		.cfi_startproc
 1092              		@ args = 12, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL114:
 1095 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1096              		.cfi_def_cfa_offset 32
 1097              		.cfi_offset 3, -32
 1098              		.cfi_offset 4, -28
 1099              		.cfi_offset 5, -24
 1100              		.cfi_offset 6, -20
 1101              		.cfi_offset 7, -16
 1102              		.cfi_offset 8, -12
 1103              		.cfi_offset 9, -8
 1104              		.cfi_offset 14, -4
1080:../emlib/src/em_dma.c ****   DMA_CycleCtrl_TypeDef  cycleCtrl;
1081:../emlib/src/em_dma.c ****   DMA_DESCRIPTOR_TypeDef *descr;
1082:../emlib/src/em_dma.c ****   uint32_t               inc;
1083:../emlib/src/em_dma.c ****   uint32_t               chBit;
1084:../emlib/src/em_dma.c ****   uint32_t               tmp;
1085:../emlib/src/em_dma.c **** 
1086:../emlib/src/em_dma.c ****   EFM_ASSERT(channel < DMA_CHAN_COUNT);
 1105              		.loc 1 1086 0
 1106 0004 0728     		cmp	r0, #7
1079:../emlib/src/em_dma.c **** {
 1107              		.loc 1 1079 0
 1108 0006 0646     		mov	r6, r0
 1109 0008 8946     		mov	r9, r1
 1110 000a 9046     		mov	r8, r2
 1111 000c 1F46     		mov	r7, r3
 1112 000e 089D     		ldr	r5, [sp, #32]
 1113 0010 099C     		ldr	r4, [sp, #36]
 1114              		.loc 1 1086 0
 1115 0012 04D9     		bls	.L114
 1116              		.loc 1 1086 0 is_stmt 0 discriminator 1
 1117 0014 2348     		ldr	r0, .L135
 1118              	.LVL115:
 1119 0016 40F23E41 		movw	r1, #1086
 1120              	.LVL116:
 1121 001a FFF7FEFF 		bl	assertEFM
 1122              	.LVL117:
 1123              	.L114:
1087:../emlib/src/em_dma.c ****   EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));
 1124              		.loc 1 1087 0 is_stmt 1
 1125 001e B4F5806F 		cmp	r4, #1024
 1126 0022 04D3     		bcc	.L115
 1127              		.loc 1 1087 0 is_stmt 0 discriminator 1
 1128 0024 1F48     		ldr	r0, .L135
 1129 0026 40F23F41 		movw	r1, #1087
 1130 002a FFF7FEFF 		bl	assertEFM
 1131              	.LVL118:
 1132              	.L115:
1088:../emlib/src/em_dma.c **** 
1089:../emlib/src/em_dma.c ****   /* The ping-pong DMA cycle may be stopped by issuing a basic cycle type */
1090:../emlib/src/em_dma.c ****   if (stop)
ARM GAS  /tmp/ccnPSQXa.s 			page 42


1091:../emlib/src/em_dma.c ****   {
1092:../emlib/src/em_dma.c ****     cycleCtrl = dmaCycleCtrlBasic;
 1133              		.loc 1 1092 0 is_stmt 1
 1134 002e 9DF82830 		ldrb	r3, [sp, #40]	@ zero_extendqisi2
 1135 0032 3201     		lsls	r2, r6, #4
 1136 0034 002B     		cmp	r3, #0
 1137 0036 0CBF     		ite	eq
 1138 0038 4FF0030C 		moveq	ip, #3
 1139 003c 4FF0010C 		movne	ip, #1
 1140              	.LVL119:
 1141 0040 194B     		ldr	r3, .L135+4
1093:../emlib/src/em_dma.c ****   }
1094:../emlib/src/em_dma.c ****   else
1095:../emlib/src/em_dma.c ****   {
1096:../emlib/src/em_dma.c ****     cycleCtrl = dmaCycleCtrlPingPong;
1097:../emlib/src/em_dma.c ****   }
1098:../emlib/src/em_dma.c **** 
1099:../emlib/src/em_dma.c ****   /* Find descriptor to configure */
1100:../emlib/src/em_dma.c ****   if (primary)
 1142              		.loc 1 1100 0
 1143 0042 B9F1000F 		cmp	r9, #0
 1144 0046 01D0     		beq	.L117
1101:../emlib/src/em_dma.c ****   {
1102:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
 1145              		.loc 1 1102 0
 1146 0048 9968     		ldr	r1, [r3, #8]
 1147 004a 00E0     		b	.L132
 1148              	.L117:
1103:../emlib/src/em_dma.c ****   }
1104:../emlib/src/em_dma.c ****   else
1105:../emlib/src/em_dma.c ****   {
1106:../emlib/src/em_dma.c ****     descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
 1149              		.loc 1 1106 0
 1150 004c D968     		ldr	r1, [r3, #12]
 1151              	.L132:
 1152 004e 1144     		add	r1, r1, r2
 1153              	.LVL120:
1107:../emlib/src/em_dma.c ****   }
1108:../emlib/src/em_dma.c **** 
1109:../emlib/src/em_dma.c ****   if (src)
 1154              		.loc 1 1109 0
 1155 0050 45B1     		cbz	r5, .L119
1110:../emlib/src/em_dma.c ****   {
1111:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
 1156              		.loc 1 1111 0
 1157 0052 8A68     		ldr	r2, [r1, #8]
 1158 0054 C2F38162 		ubfx	r2, r2, #26, #2
 1159              	.LVL121:
1112:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_SRC_INC_NONE)
 1160              		.loc 1 1112 0
 1161 0058 032A     		cmp	r2, #3
1113:../emlib/src/em_dma.c ****     {
1114:../emlib/src/em_dma.c ****       descr->SRCEND = src;
1115:../emlib/src/em_dma.c ****     }
1116:../emlib/src/em_dma.c ****     else
1117:../emlib/src/em_dma.c ****     {
1118:../emlib/src/em_dma.c ****       descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
ARM GAS  /tmp/ccnPSQXa.s 			page 43


 1162              		.loc 1 1118 0
 1163 005a 1CBF     		itt	ne
 1164 005c 04FA02F2 		lslne	r2, r4, r2
 1165              	.LVL122:
 1166 0060 AD18     		addne	r5, r5, r2
 1167 0062 0D60     		str	r5, [r1]
 1168              	.L119:
1119:../emlib/src/em_dma.c ****     }
1120:../emlib/src/em_dma.c ****   }
1121:../emlib/src/em_dma.c **** 
1122:../emlib/src/em_dma.c ****   if (dst)
 1169              		.loc 1 1122 0
 1170 0064 3FB1     		cbz	r7, .L121
1123:../emlib/src/em_dma.c ****   {
1124:../emlib/src/em_dma.c ****     inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
 1171              		.loc 1 1124 0
 1172 0066 8A68     		ldr	r2, [r1, #8]
 1173 0068 920F     		lsrs	r2, r2, #30
 1174              	.LVL123:
1125:../emlib/src/em_dma.c ****     if (inc == _DMA_CTRL_DST_INC_NONE)
 1175              		.loc 1 1125 0
 1176 006a 032A     		cmp	r2, #3
1126:../emlib/src/em_dma.c ****     {
1127:../emlib/src/em_dma.c ****       descr->DSTEND = dst;
1128:../emlib/src/em_dma.c ****     }
1129:../emlib/src/em_dma.c ****     else
1130:../emlib/src/em_dma.c ****     {
1131:../emlib/src/em_dma.c ****       descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
 1177              		.loc 1 1131 0
 1178 006c 1CBF     		itt	ne
 1179 006e 04FA02F2 		lslne	r2, r4, r2
 1180              	.LVL124:
 1181 0072 BF18     		addne	r7, r7, r2
 1182              	.LVL125:
 1183 0074 4F60     		str	r7, [r1, #4]
 1184              	.L121:
1132:../emlib/src/em_dma.c ****     }
1133:../emlib/src/em_dma.c ****   }
1134:../emlib/src/em_dma.c **** 
1135:../emlib/src/em_dma.c ****   chBit = 1 << channel;
 1185              		.loc 1 1135 0
 1186 0076 0123     		movs	r3, #1
 1187 0078 03FA06F6 		lsl	r6, r3, r6
 1188              	.LVL126:
 1189 007c 0A48     		ldr	r0, .L135+4
1136:../emlib/src/em_dma.c ****   if (useBurst)
 1190              		.loc 1 1136 0
 1191 007e B8F1000F 		cmp	r8, #0
 1192 0082 01D0     		beq	.L123
1137:../emlib/src/em_dma.c ****   {
1138:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTS = chBit;
 1193              		.loc 1 1138 0
 1194 0084 8661     		str	r6, [r0, #24]
 1195 0086 00E0     		b	.L124
 1196              	.L123:
1139:../emlib/src/em_dma.c ****   }
1140:../emlib/src/em_dma.c ****   else
ARM GAS  /tmp/ccnPSQXa.s 			page 44


1141:../emlib/src/em_dma.c ****   {
1142:../emlib/src/em_dma.c ****     DMA->CHUSEBURSTC = chBit;
 1197              		.loc 1 1142 0
 1198 0088 C661     		str	r6, [r0, #28]
 1199              	.L124:
1143:../emlib/src/em_dma.c ****   }
1144:../emlib/src/em_dma.c **** 
1145:../emlib/src/em_dma.c ****   /* Set cycle control */
1146:../emlib/src/em_dma.c ****   tmp         = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
 1200              		.loc 1 1146 0
 1201 008a 8B68     		ldr	r3, [r1, #8]
 1202 008c 23F47F53 		bic	r3, r3, #16320
 1203 0090 23F03703 		bic	r3, r3, #55
 1204              	.LVL127:
1147:../emlib/src/em_dma.c ****   tmp        |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
 1205              		.loc 1 1147 0
 1206 0094 43EA0413 		orr	r3, r3, r4, lsl #4
 1207              	.LVL128:
1148:../emlib/src/em_dma.c ****   tmp        |= cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
 1208              		.loc 1 1148 0
 1209 0098 43EA0C03 		orr	r3, r3, ip
 1210              	.LVL129:
1149:../emlib/src/em_dma.c ****   descr->CTRL = tmp;
 1211              		.loc 1 1149 0
 1212 009c 8B60     		str	r3, [r1, #8]
 1213 009e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1214              	.LVL130:
 1215              	.L136:
 1216 00a2 00BF     		.align	2
 1217              	.L135:
 1218 00a4 00000000 		.word	.LC0
 1219 00a8 00200C40 		.word	1074536448
 1220              		.cfi_endproc
 1221              	.LFE82:
 1223              		.section	.text.DMA_Reset,"ax",%progbits
 1224              		.align	1
 1225              		.global	DMA_Reset
 1226              		.thumb
 1227              		.thumb_func
 1229              	DMA_Reset:
 1230              	.LFB83:
1150:../emlib/src/em_dma.c **** }
1151:../emlib/src/em_dma.c **** 
1152:../emlib/src/em_dma.c **** 
1153:../emlib/src/em_dma.c **** /***************************************************************************//**
1154:../emlib/src/em_dma.c ****  * @brief
1155:../emlib/src/em_dma.c ****  *   Reset the DMA controller.
1156:../emlib/src/em_dma.c ****  *
1157:../emlib/src/em_dma.c ****  * @details
1158:../emlib/src/em_dma.c ****  *   This functions will disable the DMA controller and set it to a reset
1159:../emlib/src/em_dma.c ****  *   state.
1160:../emlib/src/em_dma.c ****  *
1161:../emlib/src/em_dma.c ****  * @note
1162:../emlib/src/em_dma.c ****  *   Notice that any ongoing transfers will be aborted.
1163:../emlib/src/em_dma.c ****  ******************************************************************************/
1164:../emlib/src/em_dma.c **** void DMA_Reset(void)
1165:../emlib/src/em_dma.c **** {
ARM GAS  /tmp/ccnPSQXa.s 			page 45


 1231              		.loc 1 1165 0
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              		@ link register save eliminated.
 1236              	.LVL131:
 1237              	.LBB11:
 1238              	.LBB12:
 1239              		.file 3 "../CMSIS/Include/core_cm3.h"
   1:../CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:../CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:../CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:../CMSIS/Include/core_cm3.h ****  * @version  V3.20
   5:../CMSIS/Include/core_cm3.h ****  * @date     25. February 2013
   6:../CMSIS/Include/core_cm3.h ****  *
   7:../CMSIS/Include/core_cm3.h ****  * @note
   8:../CMSIS/Include/core_cm3.h ****  *
   9:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  10:../CMSIS/Include/core_cm3.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:../CMSIS/Include/core_cm3.h **** 
  12:../CMSIS/Include/core_cm3.h ****    All rights reserved.
  13:../CMSIS/Include/core_cm3.h ****    Redistribution and use in source and binary forms, with or without
  14:../CMSIS/Include/core_cm3.h ****    modification, are permitted provided that the following conditions are met:
  15:../CMSIS/Include/core_cm3.h ****    - Redistributions of source code must retain the above copyright
  16:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer.
  17:../CMSIS/Include/core_cm3.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../CMSIS/Include/core_cm3.h ****      notice, this list of conditions and the following disclaimer in the
  19:../CMSIS/Include/core_cm3.h ****      documentation and/or other materials provided with the distribution.
  20:../CMSIS/Include/core_cm3.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../CMSIS/Include/core_cm3.h ****      to endorse or promote products derived from this software without
  22:../CMSIS/Include/core_cm3.h ****      specific prior written permission.
  23:../CMSIS/Include/core_cm3.h ****    *
  24:../CMSIS/Include/core_cm3.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../CMSIS/Include/core_cm3.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../CMSIS/Include/core_cm3.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../CMSIS/Include/core_cm3.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../CMSIS/Include/core_cm3.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../CMSIS/Include/core_cm3.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../CMSIS/Include/core_cm3.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../CMSIS/Include/core_cm3.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../CMSIS/Include/core_cm3.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../CMSIS/Include/core_cm3.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../CMSIS/Include/core_cm3.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../CMSIS/Include/core_cm3.h ****    ---------------------------------------------------------------------------*/
  36:../CMSIS/Include/core_cm3.h **** 
  37:../CMSIS/Include/core_cm3.h **** 
  38:../CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  39:../CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../CMSIS/Include/core_cm3.h **** #endif
  41:../CMSIS/Include/core_cm3.h **** 
  42:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  43:../CMSIS/Include/core_cm3.h ****  extern "C" {
  44:../CMSIS/Include/core_cm3.h **** #endif
  45:../CMSIS/Include/core_cm3.h **** 
  46:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  47:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  48:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 46


  49:../CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../CMSIS/Include/core_cm3.h **** 
  52:../CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../CMSIS/Include/core_cm3.h **** 
  55:../CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  57:../CMSIS/Include/core_cm3.h **** 
  58:../CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  60:../CMSIS/Include/core_cm3.h ****  */
  61:../CMSIS/Include/core_cm3.h **** 
  62:../CMSIS/Include/core_cm3.h **** 
  63:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
  64:../CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  65:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  66:../CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  67:../CMSIS/Include/core_cm3.h ****   @{
  68:../CMSIS/Include/core_cm3.h ****  */
  69:../CMSIS/Include/core_cm3.h **** 
  70:../CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  71:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:../CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  74:../CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:../CMSIS/Include/core_cm3.h **** 
  76:../CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  77:../CMSIS/Include/core_cm3.h **** 
  78:../CMSIS/Include/core_cm3.h **** 
  79:../CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  80:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  83:../CMSIS/Include/core_cm3.h **** 
  84:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  85:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  88:../CMSIS/Include/core_cm3.h **** 
  89:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  90:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  91:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  92:../CMSIS/Include/core_cm3.h **** 
  93:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  94:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  95:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  96:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  97:../CMSIS/Include/core_cm3.h **** 
  98:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  99:../CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
 102:../CMSIS/Include/core_cm3.h **** 
 103:../CMSIS/Include/core_cm3.h **** #endif
 104:../CMSIS/Include/core_cm3.h **** 
 105:../CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
ARM GAS  /tmp/ccnPSQXa.s 			page 47


 106:../CMSIS/Include/core_cm3.h **** */
 107:../CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
 108:../CMSIS/Include/core_cm3.h **** 
 109:../CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
 110:../CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
 111:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:../CMSIS/Include/core_cm3.h ****   #endif
 113:../CMSIS/Include/core_cm3.h **** 
 114:../CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 115:../CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 116:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 117:../CMSIS/Include/core_cm3.h ****   #endif
 118:../CMSIS/Include/core_cm3.h **** 
 119:../CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 120:../CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 121:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 122:../CMSIS/Include/core_cm3.h ****   #endif
 123:../CMSIS/Include/core_cm3.h **** 
 124:../CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 125:../CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 126:../CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 127:../CMSIS/Include/core_cm3.h ****   #endif
 128:../CMSIS/Include/core_cm3.h **** 
 129:../CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 130:../CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 131:../CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 132:../CMSIS/Include/core_cm3.h ****   #endif
 133:../CMSIS/Include/core_cm3.h **** #endif
 134:../CMSIS/Include/core_cm3.h **** 
 135:../CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 136:../CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 137:../CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 138:../CMSIS/Include/core_cm3.h **** 
 139:../CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 140:../CMSIS/Include/core_cm3.h **** 
 141:../CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 142:../CMSIS/Include/core_cm3.h **** 
 143:../CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 144:../CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 145:../CMSIS/Include/core_cm3.h **** 
 146:../CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 147:../CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 148:../CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 149:../CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 150:../CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 151:../CMSIS/Include/core_cm3.h ****   #endif
 152:../CMSIS/Include/core_cm3.h **** 
 153:../CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 154:../CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 155:../CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 156:../CMSIS/Include/core_cm3.h ****   #endif
 157:../CMSIS/Include/core_cm3.h **** 
 158:../CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 159:../CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 160:../CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 161:../CMSIS/Include/core_cm3.h ****   #endif
 162:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 48


 163:../CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 164:../CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 165:../CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 166:../CMSIS/Include/core_cm3.h ****   #endif
 167:../CMSIS/Include/core_cm3.h **** #endif
 168:../CMSIS/Include/core_cm3.h **** 
 169:../CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 170:../CMSIS/Include/core_cm3.h **** /**
 171:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 172:../CMSIS/Include/core_cm3.h **** 
 173:../CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 174:../CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 175:../CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 176:../CMSIS/Include/core_cm3.h **** */
 177:../CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 178:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 179:../CMSIS/Include/core_cm3.h **** #else
 180:../CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 181:../CMSIS/Include/core_cm3.h **** #endif
 182:../CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 183:../CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 184:../CMSIS/Include/core_cm3.h **** 
 185:../CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 186:../CMSIS/Include/core_cm3.h **** 
 187:../CMSIS/Include/core_cm3.h **** 
 188:../CMSIS/Include/core_cm3.h **** 
 189:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
 190:../CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 191:../CMSIS/Include/core_cm3.h ****   Core Register contain:
 192:../CMSIS/Include/core_cm3.h ****   - Core Register
 193:../CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 194:../CMSIS/Include/core_cm3.h ****   - Core SCB Register
 195:../CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 196:../CMSIS/Include/core_cm3.h ****   - Core Debug Register
 197:../CMSIS/Include/core_cm3.h ****   - Core MPU Register
 198:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 199:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 200:../CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 201:../CMSIS/Include/core_cm3.h **** */
 202:../CMSIS/Include/core_cm3.h **** 
 203:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 204:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 205:../CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 206:../CMSIS/Include/core_cm3.h ****   @{
 207:../CMSIS/Include/core_cm3.h ****  */
 208:../CMSIS/Include/core_cm3.h **** 
 209:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 210:../CMSIS/Include/core_cm3.h ****  */
 211:../CMSIS/Include/core_cm3.h **** typedef union
 212:../CMSIS/Include/core_cm3.h **** {
 213:../CMSIS/Include/core_cm3.h ****   struct
 214:../CMSIS/Include/core_cm3.h ****   {
 215:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 216:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 217:../CMSIS/Include/core_cm3.h **** #else
 218:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 219:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
ARM GAS  /tmp/ccnPSQXa.s 			page 49


 220:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 221:../CMSIS/Include/core_cm3.h **** #endif
 222:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 223:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 224:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 225:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 226:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 227:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 228:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 229:../CMSIS/Include/core_cm3.h **** } APSR_Type;
 230:../CMSIS/Include/core_cm3.h **** 
 231:../CMSIS/Include/core_cm3.h **** 
 232:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 233:../CMSIS/Include/core_cm3.h ****  */
 234:../CMSIS/Include/core_cm3.h **** typedef union
 235:../CMSIS/Include/core_cm3.h **** {
 236:../CMSIS/Include/core_cm3.h ****   struct
 237:../CMSIS/Include/core_cm3.h ****   {
 238:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 239:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 240:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 241:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 242:../CMSIS/Include/core_cm3.h **** } IPSR_Type;
 243:../CMSIS/Include/core_cm3.h **** 
 244:../CMSIS/Include/core_cm3.h **** 
 245:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:../CMSIS/Include/core_cm3.h ****  */
 247:../CMSIS/Include/core_cm3.h **** typedef union
 248:../CMSIS/Include/core_cm3.h **** {
 249:../CMSIS/Include/core_cm3.h ****   struct
 250:../CMSIS/Include/core_cm3.h ****   {
 251:../CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 252:../CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 253:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 254:../CMSIS/Include/core_cm3.h **** #else
 255:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 256:../CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 257:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 258:../CMSIS/Include/core_cm3.h **** #endif
 259:../CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 260:../CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 261:../CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 262:../CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 263:../CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 264:../CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 265:../CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 266:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:../CMSIS/Include/core_cm3.h **** } xPSR_Type;
 269:../CMSIS/Include/core_cm3.h **** 
 270:../CMSIS/Include/core_cm3.h **** 
 271:../CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 272:../CMSIS/Include/core_cm3.h ****  */
 273:../CMSIS/Include/core_cm3.h **** typedef union
 274:../CMSIS/Include/core_cm3.h **** {
 275:../CMSIS/Include/core_cm3.h ****   struct
 276:../CMSIS/Include/core_cm3.h ****   {
ARM GAS  /tmp/ccnPSQXa.s 			page 50


 277:../CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 278:../CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 279:../CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 280:../CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 281:../CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 282:../CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 283:../CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 284:../CMSIS/Include/core_cm3.h **** 
 285:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 286:../CMSIS/Include/core_cm3.h **** 
 287:../CMSIS/Include/core_cm3.h **** 
 288:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 289:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 290:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 291:../CMSIS/Include/core_cm3.h ****   @{
 292:../CMSIS/Include/core_cm3.h ****  */
 293:../CMSIS/Include/core_cm3.h **** 
 294:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 295:../CMSIS/Include/core_cm3.h ****  */
 296:../CMSIS/Include/core_cm3.h **** typedef struct
 297:../CMSIS/Include/core_cm3.h **** {
 298:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 299:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 300:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 301:../CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 302:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 303:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 304:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 305:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 306:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 307:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 308:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 309:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 310:../CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 311:../CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 312:../CMSIS/Include/core_cm3.h **** 
 313:../CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 314:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 315:../CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 316:../CMSIS/Include/core_cm3.h **** 
 317:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 318:../CMSIS/Include/core_cm3.h **** 
 319:../CMSIS/Include/core_cm3.h **** 
 320:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 321:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 322:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 323:../CMSIS/Include/core_cm3.h ****   @{
 324:../CMSIS/Include/core_cm3.h ****  */
 325:../CMSIS/Include/core_cm3.h **** 
 326:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 327:../CMSIS/Include/core_cm3.h ****  */
 328:../CMSIS/Include/core_cm3.h **** typedef struct
 329:../CMSIS/Include/core_cm3.h **** {
 330:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 331:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 332:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 333:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
ARM GAS  /tmp/ccnPSQXa.s 			page 51


 334:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 335:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 336:../CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 337:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 338:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 339:../CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 340:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 341:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 342:../CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 343:../CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 344:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 345:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 346:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 347:../CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 348:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 349:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 350:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 351:../CMSIS/Include/core_cm3.h **** } SCB_Type;
 352:../CMSIS/Include/core_cm3.h **** 
 353:../CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 354:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 355:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 356:../CMSIS/Include/core_cm3.h **** 
 357:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 358:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 359:../CMSIS/Include/core_cm3.h **** 
 360:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 361:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 362:../CMSIS/Include/core_cm3.h **** 
 363:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 364:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 365:../CMSIS/Include/core_cm3.h **** 
 366:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 367:../CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 368:../CMSIS/Include/core_cm3.h **** 
 369:../CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 370:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 371:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 372:../CMSIS/Include/core_cm3.h **** 
 373:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 374:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 375:../CMSIS/Include/core_cm3.h **** 
 376:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 377:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 378:../CMSIS/Include/core_cm3.h **** 
 379:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 380:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 381:../CMSIS/Include/core_cm3.h **** 
 382:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 383:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 384:../CMSIS/Include/core_cm3.h **** 
 385:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 386:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 387:../CMSIS/Include/core_cm3.h **** 
 388:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 389:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 390:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 52


 391:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 392:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 393:../CMSIS/Include/core_cm3.h **** 
 394:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 395:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 396:../CMSIS/Include/core_cm3.h **** 
 397:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 398:../CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 399:../CMSIS/Include/core_cm3.h **** 
 400:../CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 401:../CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 402:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 403:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 404:../CMSIS/Include/core_cm3.h **** 
 405:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 406:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 407:../CMSIS/Include/core_cm3.h **** #else
 408:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:../CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:../CMSIS/Include/core_cm3.h **** #endif
 411:../CMSIS/Include/core_cm3.h **** 
 412:../CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 413:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 414:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 415:../CMSIS/Include/core_cm3.h **** 
 416:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 417:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 418:../CMSIS/Include/core_cm3.h **** 
 419:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 420:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 421:../CMSIS/Include/core_cm3.h **** 
 422:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 423:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 424:../CMSIS/Include/core_cm3.h **** 
 425:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 426:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 427:../CMSIS/Include/core_cm3.h **** 
 428:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 429:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 430:../CMSIS/Include/core_cm3.h **** 
 431:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 432:../CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 433:../CMSIS/Include/core_cm3.h **** 
 434:../CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 435:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 436:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 437:../CMSIS/Include/core_cm3.h **** 
 438:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 439:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 440:../CMSIS/Include/core_cm3.h **** 
 441:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 442:../CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 443:../CMSIS/Include/core_cm3.h **** 
 444:../CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 445:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 446:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 447:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 53


 448:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 449:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 450:../CMSIS/Include/core_cm3.h **** 
 451:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 452:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 453:../CMSIS/Include/core_cm3.h **** 
 454:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 455:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 456:../CMSIS/Include/core_cm3.h **** 
 457:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 458:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 459:../CMSIS/Include/core_cm3.h **** 
 460:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 461:../CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 462:../CMSIS/Include/core_cm3.h **** 
 463:../CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 464:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 465:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 466:../CMSIS/Include/core_cm3.h **** 
 467:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 468:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 469:../CMSIS/Include/core_cm3.h **** 
 470:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 471:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 472:../CMSIS/Include/core_cm3.h **** 
 473:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 474:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 475:../CMSIS/Include/core_cm3.h **** 
 476:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 477:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 478:../CMSIS/Include/core_cm3.h **** 
 479:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 480:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 481:../CMSIS/Include/core_cm3.h **** 
 482:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 483:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 484:../CMSIS/Include/core_cm3.h **** 
 485:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 486:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 487:../CMSIS/Include/core_cm3.h **** 
 488:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 489:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 490:../CMSIS/Include/core_cm3.h **** 
 491:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 492:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 493:../CMSIS/Include/core_cm3.h **** 
 494:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 495:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 496:../CMSIS/Include/core_cm3.h **** 
 497:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 498:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 499:../CMSIS/Include/core_cm3.h **** 
 500:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 501:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 502:../CMSIS/Include/core_cm3.h **** 
 503:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 504:../CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
ARM GAS  /tmp/ccnPSQXa.s 			page 54


 505:../CMSIS/Include/core_cm3.h **** 
 506:../CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 507:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 508:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 509:../CMSIS/Include/core_cm3.h **** 
 510:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 511:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 512:../CMSIS/Include/core_cm3.h **** 
 513:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 514:../CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 515:../CMSIS/Include/core_cm3.h **** 
 516:../CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 517:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 518:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 519:../CMSIS/Include/core_cm3.h **** 
 520:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 521:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 522:../CMSIS/Include/core_cm3.h **** 
 523:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 524:../CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 525:../CMSIS/Include/core_cm3.h **** 
 526:../CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 527:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 528:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 529:../CMSIS/Include/core_cm3.h **** 
 530:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 531:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 532:../CMSIS/Include/core_cm3.h **** 
 533:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 534:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 535:../CMSIS/Include/core_cm3.h **** 
 536:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 537:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 538:../CMSIS/Include/core_cm3.h **** 
 539:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 540:../CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 541:../CMSIS/Include/core_cm3.h **** 
 542:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 543:../CMSIS/Include/core_cm3.h **** 
 544:../CMSIS/Include/core_cm3.h **** 
 545:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 546:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 547:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 548:../CMSIS/Include/core_cm3.h ****   @{
 549:../CMSIS/Include/core_cm3.h ****  */
 550:../CMSIS/Include/core_cm3.h **** 
 551:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 552:../CMSIS/Include/core_cm3.h ****  */
 553:../CMSIS/Include/core_cm3.h **** typedef struct
 554:../CMSIS/Include/core_cm3.h **** {
 555:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 556:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 557:../CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 558:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 559:../CMSIS/Include/core_cm3.h **** #else
 560:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 561:../CMSIS/Include/core_cm3.h **** #endif
ARM GAS  /tmp/ccnPSQXa.s 			page 55


 562:../CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 563:../CMSIS/Include/core_cm3.h **** 
 564:../CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 565:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 566:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 567:../CMSIS/Include/core_cm3.h **** 
 568:../CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 569:../CMSIS/Include/core_cm3.h **** 
 570:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:../CMSIS/Include/core_cm3.h **** 
 573:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:../CMSIS/Include/core_cm3.h **** 
 576:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:../CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:../CMSIS/Include/core_cm3.h **** 
 579:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 580:../CMSIS/Include/core_cm3.h **** 
 581:../CMSIS/Include/core_cm3.h **** 
 582:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 583:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 584:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 585:../CMSIS/Include/core_cm3.h ****   @{
 586:../CMSIS/Include/core_cm3.h ****  */
 587:../CMSIS/Include/core_cm3.h **** 
 588:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:../CMSIS/Include/core_cm3.h ****  */
 590:../CMSIS/Include/core_cm3.h **** typedef struct
 591:../CMSIS/Include/core_cm3.h **** {
 592:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:../CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:../CMSIS/Include/core_cm3.h **** } SysTick_Type;
 597:../CMSIS/Include/core_cm3.h **** 
 598:../CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 599:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:../CMSIS/Include/core_cm3.h **** 
 602:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:../CMSIS/Include/core_cm3.h **** 
 605:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:../CMSIS/Include/core_cm3.h **** 
 608:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:../CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:../CMSIS/Include/core_cm3.h **** 
 611:../CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 612:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:../CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:../CMSIS/Include/core_cm3.h **** 
 615:../CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 616:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:../CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 56


 619:../CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 620:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:../CMSIS/Include/core_cm3.h **** 
 623:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:../CMSIS/Include/core_cm3.h **** 
 626:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:../CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:../CMSIS/Include/core_cm3.h **** 
 629:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 630:../CMSIS/Include/core_cm3.h **** 
 631:../CMSIS/Include/core_cm3.h **** 
 632:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 633:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 634:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 635:../CMSIS/Include/core_cm3.h ****   @{
 636:../CMSIS/Include/core_cm3.h ****  */
 637:../CMSIS/Include/core_cm3.h **** 
 638:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:../CMSIS/Include/core_cm3.h ****  */
 640:../CMSIS/Include/core_cm3.h **** typedef struct
 641:../CMSIS/Include/core_cm3.h **** {
 642:../CMSIS/Include/core_cm3.h ****   __O  union
 643:../CMSIS/Include/core_cm3.h ****   {
 644:../CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:../CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:../CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:../CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 649:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 651:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 653:../CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];
 655:../CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 656:../CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 657:../CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 658:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];
 659:../CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 660:../CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 661:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];
 662:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 663:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 664:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 665:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 666:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 667:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 668:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 669:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 670:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 671:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 672:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 673:../CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 674:../CMSIS/Include/core_cm3.h **** } ITM_Type;
 675:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 57


 676:../CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 677:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 678:../CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 679:../CMSIS/Include/core_cm3.h **** 
 680:../CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 681:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 682:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 683:../CMSIS/Include/core_cm3.h **** 
 684:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 685:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 686:../CMSIS/Include/core_cm3.h **** 
 687:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 688:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 689:../CMSIS/Include/core_cm3.h **** 
 690:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 691:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 692:../CMSIS/Include/core_cm3.h **** 
 693:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 694:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 695:../CMSIS/Include/core_cm3.h **** 
 696:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 697:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 698:../CMSIS/Include/core_cm3.h **** 
 699:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 700:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 701:../CMSIS/Include/core_cm3.h **** 
 702:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 703:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 704:../CMSIS/Include/core_cm3.h **** 
 705:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 706:../CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 707:../CMSIS/Include/core_cm3.h **** 
 708:../CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 709:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 710:../CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 711:../CMSIS/Include/core_cm3.h **** 
 712:../CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 713:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 714:../CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 715:../CMSIS/Include/core_cm3.h **** 
 716:../CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 717:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 718:../CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 719:../CMSIS/Include/core_cm3.h **** 
 720:../CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 721:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 722:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 723:../CMSIS/Include/core_cm3.h **** 
 724:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 725:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 726:../CMSIS/Include/core_cm3.h **** 
 727:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 728:../CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 729:../CMSIS/Include/core_cm3.h **** 
 730:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 731:../CMSIS/Include/core_cm3.h **** 
 732:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 58


 733:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 734:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 735:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 736:../CMSIS/Include/core_cm3.h ****   @{
 737:../CMSIS/Include/core_cm3.h ****  */
 738:../CMSIS/Include/core_cm3.h **** 
 739:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 740:../CMSIS/Include/core_cm3.h ****  */
 741:../CMSIS/Include/core_cm3.h **** typedef struct
 742:../CMSIS/Include/core_cm3.h **** {
 743:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 744:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 745:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 746:../CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 747:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 748:../CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 749:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 750:../CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 751:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 752:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 753:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 754:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 755:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 756:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 757:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 758:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 759:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 760:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 761:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 762:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 763:../CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 764:../CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 765:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 766:../CMSIS/Include/core_cm3.h **** } DWT_Type;
 767:../CMSIS/Include/core_cm3.h **** 
 768:../CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 769:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 770:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 771:../CMSIS/Include/core_cm3.h **** 
 772:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 773:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 774:../CMSIS/Include/core_cm3.h **** 
 775:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 776:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 777:../CMSIS/Include/core_cm3.h **** 
 778:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 779:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 780:../CMSIS/Include/core_cm3.h **** 
 781:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 782:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 783:../CMSIS/Include/core_cm3.h **** 
 784:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 785:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 786:../CMSIS/Include/core_cm3.h **** 
 787:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 788:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 789:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 59


 790:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 791:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 792:../CMSIS/Include/core_cm3.h **** 
 793:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 794:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 795:../CMSIS/Include/core_cm3.h **** 
 796:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 797:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 798:../CMSIS/Include/core_cm3.h **** 
 799:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 800:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 801:../CMSIS/Include/core_cm3.h **** 
 802:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 803:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 804:../CMSIS/Include/core_cm3.h **** 
 805:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 806:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 807:../CMSIS/Include/core_cm3.h **** 
 808:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 809:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 810:../CMSIS/Include/core_cm3.h **** 
 811:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 812:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 813:../CMSIS/Include/core_cm3.h **** 
 814:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 815:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 816:../CMSIS/Include/core_cm3.h **** 
 817:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 818:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 819:../CMSIS/Include/core_cm3.h **** 
 820:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 821:../CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 822:../CMSIS/Include/core_cm3.h **** 
 823:../CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 824:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 825:../CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 826:../CMSIS/Include/core_cm3.h **** 
 827:../CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 828:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 829:../CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 830:../CMSIS/Include/core_cm3.h **** 
 831:../CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 832:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 833:../CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 834:../CMSIS/Include/core_cm3.h **** 
 835:../CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 836:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 837:../CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 838:../CMSIS/Include/core_cm3.h **** 
 839:../CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 840:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 841:../CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 842:../CMSIS/Include/core_cm3.h **** 
 843:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 844:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 845:../CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 846:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 60


 847:../CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 848:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 849:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 850:../CMSIS/Include/core_cm3.h **** 
 851:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 852:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 853:../CMSIS/Include/core_cm3.h **** 
 854:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 855:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 856:../CMSIS/Include/core_cm3.h **** 
 857:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 858:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 859:../CMSIS/Include/core_cm3.h **** 
 860:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 861:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 862:../CMSIS/Include/core_cm3.h **** 
 863:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 864:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 865:../CMSIS/Include/core_cm3.h **** 
 866:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 867:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 868:../CMSIS/Include/core_cm3.h **** 
 869:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 870:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 871:../CMSIS/Include/core_cm3.h **** 
 872:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 873:../CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 874:../CMSIS/Include/core_cm3.h **** 
 875:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 876:../CMSIS/Include/core_cm3.h **** 
 877:../CMSIS/Include/core_cm3.h **** 
 878:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 879:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 880:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 881:../CMSIS/Include/core_cm3.h ****   @{
 882:../CMSIS/Include/core_cm3.h ****  */
 883:../CMSIS/Include/core_cm3.h **** 
 884:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 885:../CMSIS/Include/core_cm3.h ****  */
 886:../CMSIS/Include/core_cm3.h **** typedef struct
 887:../CMSIS/Include/core_cm3.h **** {
 888:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 889:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 890:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 891:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 892:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 893:../CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 894:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 895:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 896:../CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 897:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 898:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 899:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 900:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 901:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 902:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 903:../CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
ARM GAS  /tmp/ccnPSQXa.s 			page 61


 904:../CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 905:../CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 906:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 907:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 908:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 909:../CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 910:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 911:../CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 912:../CMSIS/Include/core_cm3.h **** } TPI_Type;
 913:../CMSIS/Include/core_cm3.h **** 
 914:../CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 915:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 916:../CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 917:../CMSIS/Include/core_cm3.h **** 
 918:../CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 919:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 920:../CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 921:../CMSIS/Include/core_cm3.h **** 
 922:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 923:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 924:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 925:../CMSIS/Include/core_cm3.h **** 
 926:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 927:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 928:../CMSIS/Include/core_cm3.h **** 
 929:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 930:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 931:../CMSIS/Include/core_cm3.h **** 
 932:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 933:../CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 934:../CMSIS/Include/core_cm3.h **** 
 935:../CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 936:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 937:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 938:../CMSIS/Include/core_cm3.h **** 
 939:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 940:../CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 941:../CMSIS/Include/core_cm3.h **** 
 942:../CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 943:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 944:../CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 945:../CMSIS/Include/core_cm3.h **** 
 946:../CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 947:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 948:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 949:../CMSIS/Include/core_cm3.h **** 
 950:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 951:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 952:../CMSIS/Include/core_cm3.h **** 
 953:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 954:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 955:../CMSIS/Include/core_cm3.h **** 
 956:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 957:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 958:../CMSIS/Include/core_cm3.h **** 
 959:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 960:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
ARM GAS  /tmp/ccnPSQXa.s 			page 62


 961:../CMSIS/Include/core_cm3.h **** 
 962:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 963:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 964:../CMSIS/Include/core_cm3.h **** 
 965:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 966:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 967:../CMSIS/Include/core_cm3.h **** 
 968:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 969:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 970:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 971:../CMSIS/Include/core_cm3.h **** 
 972:../CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 973:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 974:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 975:../CMSIS/Include/core_cm3.h **** 
 976:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 977:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 978:../CMSIS/Include/core_cm3.h **** 
 979:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 980:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 981:../CMSIS/Include/core_cm3.h **** 
 982:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 983:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 984:../CMSIS/Include/core_cm3.h **** 
 985:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 986:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 987:../CMSIS/Include/core_cm3.h **** 
 988:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 989:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 990:../CMSIS/Include/core_cm3.h **** 
 991:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 992:../CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 993:../CMSIS/Include/core_cm3.h **** 
 994:../CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 995:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 996:../CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 997:../CMSIS/Include/core_cm3.h **** 
 998:../CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 999:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
1000:../CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
1001:../CMSIS/Include/core_cm3.h **** 
1002:../CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
1003:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
1004:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1005:../CMSIS/Include/core_cm3.h **** 
1006:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
1007:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1008:../CMSIS/Include/core_cm3.h **** 
1009:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
1010:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1011:../CMSIS/Include/core_cm3.h **** 
1012:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
1013:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1014:../CMSIS/Include/core_cm3.h **** 
1015:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1016:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1017:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 63


1018:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1019:../CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1020:../CMSIS/Include/core_cm3.h **** 
1021:../CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1022:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1023:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1024:../CMSIS/Include/core_cm3.h **** 
1025:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1026:../CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1027:../CMSIS/Include/core_cm3.h **** 
1028:../CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1029:../CMSIS/Include/core_cm3.h **** 
1030:../CMSIS/Include/core_cm3.h **** 
1031:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1032:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1033:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1034:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1035:../CMSIS/Include/core_cm3.h ****   @{
1036:../CMSIS/Include/core_cm3.h ****  */
1037:../CMSIS/Include/core_cm3.h **** 
1038:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1039:../CMSIS/Include/core_cm3.h ****  */
1040:../CMSIS/Include/core_cm3.h **** typedef struct
1041:../CMSIS/Include/core_cm3.h **** {
1042:../CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1043:../CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1044:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1045:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1046:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1047:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1048:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1049:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1050:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1051:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1052:../CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1053:../CMSIS/Include/core_cm3.h **** } MPU_Type;
1054:../CMSIS/Include/core_cm3.h **** 
1055:../CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1056:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1057:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1058:../CMSIS/Include/core_cm3.h **** 
1059:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1060:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1061:../CMSIS/Include/core_cm3.h **** 
1062:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1063:../CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1064:../CMSIS/Include/core_cm3.h **** 
1065:../CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1066:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1067:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1068:../CMSIS/Include/core_cm3.h **** 
1069:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1070:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1071:../CMSIS/Include/core_cm3.h **** 
1072:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1073:../CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1074:../CMSIS/Include/core_cm3.h **** 
ARM GAS  /tmp/ccnPSQXa.s 			page 64


1075:../CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1076:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1077:../CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1078:../CMSIS/Include/core_cm3.h **** 
1079:../CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1080:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1081:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1082:../CMSIS/Include/core_cm3.h **** 
1083:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1084:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1085:../CMSIS/Include/core_cm3.h **** 
1086:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1087:../CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1088:../CMSIS/Include/core_cm3.h **** 
1089:../CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1090:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1091:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1092:../CMSIS/Include/core_cm3.h **** 
1093:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1094:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1095:../CMSIS/Include/core_cm3.h **** 
1096:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1097:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1098:../CMSIS/Include/core_cm3.h **** 
1099:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1100:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1101:../CMSIS/Include/core_cm3.h **** 
1102:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1103:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1104:../CMSIS/Include/core_cm3.h **** 
1105:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1106:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1107:../CMSIS/Include/core_cm3.h **** 
1108:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1109:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1110:../CMSIS/Include/core_cm3.h **** 
1111:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1112:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1113:../CMSIS/Include/core_cm3.h **** 
1114:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1115:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1116:../CMSIS/Include/core_cm3.h **** 
1117:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1118:../CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1119:../CMSIS/Include/core_cm3.h **** 
1120:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1121:../CMSIS/Include/core_cm3.h **** #endif
1122:../CMSIS/Include/core_cm3.h **** 
1123:../CMSIS/Include/core_cm3.h **** 
1124:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1125:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1126:../CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1127:../CMSIS/Include/core_cm3.h ****   @{
1128:../CMSIS/Include/core_cm3.h ****  */
1129:../CMSIS/Include/core_cm3.h **** 
1130:../CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1131:../CMSIS/Include/core_cm3.h ****  */
ARM GAS  /tmp/ccnPSQXa.s 			page 65


1132:../CMSIS/Include/core_cm3.h **** typedef struct
1133:../CMSIS/Include/core_cm3.h **** {
1134:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1135:../CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1136:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1137:../CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1138:../CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1139:../CMSIS/Include/core_cm3.h **** 
1140:../CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1141:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1142:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1143:../CMSIS/Include/core_cm3.h **** 
1144:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1145:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1146:../CMSIS/Include/core_cm3.h **** 
1147:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1148:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1149:../CMSIS/Include/core_cm3.h **** 
1150:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1151:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1152:../CMSIS/Include/core_cm3.h **** 
1153:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1154:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1155:../CMSIS/Include/core_cm3.h **** 
1156:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1157:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1158:../CMSIS/Include/core_cm3.h **** 
1159:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1160:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1161:../CMSIS/Include/core_cm3.h **** 
1162:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1163:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1164:../CMSIS/Include/core_cm3.h **** 
1165:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1166:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1167:../CMSIS/Include/core_cm3.h **** 
1168:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1169:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1170:../CMSIS/Include/core_cm3.h **** 
1171:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1172:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1173:../CMSIS/Include/core_cm3.h **** 
1174:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1175:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1176:../CMSIS/Include/core_cm3.h **** 
1177:../CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1178:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1179:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1180:../CMSIS/Include/core_cm3.h **** 
1181:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1182:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1183:../CMSIS/Include/core_cm3.h **** 
1184:../CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1185:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1186:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1187:../CMSIS/Include/core_cm3.h **** 
1188:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
ARM GAS  /tmp/ccnPSQXa.s 			page 66


1189:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1190:../CMSIS/Include/core_cm3.h **** 
1191:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1192:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1193:../CMSIS/Include/core_cm3.h **** 
1194:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1195:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1196:../CMSIS/Include/core_cm3.h **** 
1197:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1198:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1199:../CMSIS/Include/core_cm3.h **** 
1200:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1201:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1202:../CMSIS/Include/core_cm3.h **** 
1203:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1204:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1205:../CMSIS/Include/core_cm3.h **** 
1206:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1207:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1208:../CMSIS/Include/core_cm3.h **** 
1209:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1210:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1211:../CMSIS/Include/core_cm3.h **** 
1212:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1213:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1214:../CMSIS/Include/core_cm3.h **** 
1215:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1216:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1217:../CMSIS/Include/core_cm3.h **** 
1218:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1219:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1220:../CMSIS/Include/core_cm3.h **** 
1221:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1222:../CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1223:../CMSIS/Include/core_cm3.h **** 
1224:../CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1225:../CMSIS/Include/core_cm3.h **** 
1226:../CMSIS/Include/core_cm3.h **** 
1227:../CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1228:../CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1229:../CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1230:../CMSIS/Include/core_cm3.h ****   @{
1231:../CMSIS/Include/core_cm3.h ****  */
1232:../CMSIS/Include/core_cm3.h **** 
1233:../CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1234:../CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1235:../CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1236:../CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1237:../CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1238:../CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1239:../CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1240:../CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1241:../CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1242:../CMSIS/Include/core_cm3.h **** 
1243:../CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1244:../CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1245:../CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
ARM GAS  /tmp/ccnPSQXa.s 			page 67


1246:../CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1247:../CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1248:../CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1249:../CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1250:../CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1251:../CMSIS/Include/core_cm3.h **** 
1252:../CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1253:../CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1254:../CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1255:../CMSIS/Include/core_cm3.h **** #endif
1256:../CMSIS/Include/core_cm3.h **** 
1257:../CMSIS/Include/core_cm3.h **** /*@} */
1258:../CMSIS/Include/core_cm3.h **** 
1259:../CMSIS/Include/core_cm3.h **** 
1260:../CMSIS/Include/core_cm3.h **** 
1261:../CMSIS/Include/core_cm3.h **** /*******************************************************************************
1262:../CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1263:../CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1264:../CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1265:../CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1266:../CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1267:../CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1268:../CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1269:../CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1270:../CMSIS/Include/core_cm3.h **** */
1271:../CMSIS/Include/core_cm3.h **** 
1272:../CMSIS/Include/core_cm3.h **** 
1273:../CMSIS/Include/core_cm3.h **** 
1274:../CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1275:../CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1276:../CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1277:../CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1278:../CMSIS/Include/core_cm3.h ****     @{
1279:../CMSIS/Include/core_cm3.h ****  */
1280:../CMSIS/Include/core_cm3.h **** 
1281:../CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1282:../CMSIS/Include/core_cm3.h **** 
1283:../CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1284:../CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1285:../CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1286:../CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1287:../CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1288:../CMSIS/Include/core_cm3.h **** 
1289:../CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1290:../CMSIS/Include/core_cm3.h ****  */
1291:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1292:../CMSIS/Include/core_cm3.h **** {
1293:../CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1294:../CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1295:../CMSIS/Include/core_cm3.h **** 
1296:../CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1297:../CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1298:../CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1299:../CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1300:../CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1301:../CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1302:../CMSIS/Include/core_cm3.h **** }
ARM GAS  /tmp/ccnPSQXa.s 			page 68


1303:../CMSIS/Include/core_cm3.h **** 
1304:../CMSIS/Include/core_cm3.h **** 
1305:../CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1306:../CMSIS/Include/core_cm3.h **** 
1307:../CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1308:../CMSIS/Include/core_cm3.h **** 
1309:../CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1310:../CMSIS/Include/core_cm3.h ****  */
1311:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1312:../CMSIS/Include/core_cm3.h **** {
1313:../CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1314:../CMSIS/Include/core_cm3.h **** }
1315:../CMSIS/Include/core_cm3.h **** 
1316:../CMSIS/Include/core_cm3.h **** 
1317:../CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1318:../CMSIS/Include/core_cm3.h **** 
1319:../CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1320:../CMSIS/Include/core_cm3.h **** 
1321:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1322:../CMSIS/Include/core_cm3.h ****  */
1323:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1324:../CMSIS/Include/core_cm3.h **** {
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1326:../CMSIS/Include/core_cm3.h **** }
1327:../CMSIS/Include/core_cm3.h **** 
1328:../CMSIS/Include/core_cm3.h **** 
1329:../CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1330:../CMSIS/Include/core_cm3.h **** 
1331:../CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1332:../CMSIS/Include/core_cm3.h **** 
1333:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1334:../CMSIS/Include/core_cm3.h ****  */
1335:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1336:../CMSIS/Include/core_cm3.h **** {
1337:../CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 1240              		.loc 3 1337 0
 1241 0000 0F4B     		ldr	r3, .L141
 1242 0002 0120     		movs	r0, #1
 1243 0004 C3F88000 		str	r0, [r3, #128]
 1244              	.LBE12:
 1245              	.LBE11:
1166:../emlib/src/em_dma.c ****   int i;
1167:../emlib/src/em_dma.c **** 
1168:../emlib/src/em_dma.c ****   /* Disable DMA interrupts */
1169:../emlib/src/em_dma.c ****   NVIC_DisableIRQ(DMA_IRQn);
1170:../emlib/src/em_dma.c **** 
1171:../emlib/src/em_dma.c ****   /* Put the DMA controller into a known state, first disabling it. */
1172:../emlib/src/em_dma.c ****   DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
 1246              		.loc 1 1172 0
 1247 0008 0E4B     		ldr	r3, .L141+4
1173:../emlib/src/em_dma.c ****   DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
 1248              		.loc 1 1173 0
 1249 000a FF22     		movs	r2, #255
1172:../emlib/src/em_dma.c ****   DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
 1250              		.loc 1 1172 0
 1251 000c 0021     		movs	r1, #0
 1252 000e 5960     		str	r1, [r3, #4]
ARM GAS  /tmp/ccnPSQXa.s 			page 69


 1253              		.loc 1 1173 0
 1254 0010 DA61     		str	r2, [r3, #28]
1174:../emlib/src/em_dma.c ****   DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
 1255              		.loc 1 1174 0
 1256 0012 5A62     		str	r2, [r3, #36]
1175:../emlib/src/em_dma.c ****   DMA->CHENC       = _DMA_CHENC_MASK;
 1257              		.loc 1 1175 0
 1258 0014 DA62     		str	r2, [r3, #44]
1176:../emlib/src/em_dma.c ****   DMA->CHALTC      = _DMA_CHALTC_MASK;
 1259              		.loc 1 1176 0
 1260 0016 5A63     		str	r2, [r3, #52]
1177:../emlib/src/em_dma.c ****   DMA->CHPRIC      = _DMA_CHPRIC_MASK;
 1261              		.loc 1 1177 0
 1262 0018 DA63     		str	r2, [r3, #60]
1178:../emlib/src/em_dma.c ****   DMA->ERRORC      = DMA_ERRORC_ERRORC;
 1263              		.loc 1 1178 0
 1264 001a D864     		str	r0, [r3, #76]
1179:../emlib/src/em_dma.c ****   DMA->IEN         = _DMA_IEN_RESETVALUE;
 1265              		.loc 1 1179 0
 1266 001c 41F20C02 		movw	r2, #4108
1180:../emlib/src/em_dma.c ****   DMA->IFC         = _DMA_IFC_MASK;
 1267              		.loc 1 1180 0
 1268 0020 0948     		ldr	r0, .L141+8
1179:../emlib/src/em_dma.c ****   DMA->IEN         = _DMA_IEN_RESETVALUE;
 1269              		.loc 1 1179 0
 1270 0022 9950     		str	r1, [r3, r2]
 1271              		.loc 1 1180 0
 1272 0024 41F20802 		movw	r2, #4104
 1273 0028 9850     		str	r0, [r3, r2]
 1274              	.LVL132:
1181:../emlib/src/em_dma.c **** 
1182:../emlib/src/em_dma.c ****   /* Clear channel control flags */
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1275              		.loc 1 1183 0
 1276 002a 0A46     		mov	r2, r1
 1277              	.LVL133:
 1278              	.L139:
1184:../emlib/src/em_dma.c ****   {
1185:../emlib/src/em_dma.c ****     DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
 1279              		.loc 1 1185 0 discriminator 2
 1280 002c 02F58861 		add	r1, r2, #1088
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1281              		.loc 1 1183 0 discriminator 2
 1282 0030 0132     		adds	r2, r2, #1
 1283              	.LVL134:
 1284              		.loc 1 1185 0 discriminator 2
 1285 0032 0020     		movs	r0, #0
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1286              		.loc 1 1183 0 discriminator 2
 1287 0034 082A     		cmp	r2, #8
 1288              		.loc 1 1185 0 discriminator 2
 1289 0036 43F82100 		str	r0, [r3, r1, lsl #2]
1183:../emlib/src/em_dma.c ****   for (i = 0; i < DMA_CHAN_COUNT; i++)
 1290              		.loc 1 1183 0 discriminator 2
 1291 003a F7D1     		bne	.L139
1186:../emlib/src/em_dma.c ****   }
1187:../emlib/src/em_dma.c **** }
ARM GAS  /tmp/ccnPSQXa.s 			page 70


 1292              		.loc 1 1187 0
 1293 003c 7047     		bx	lr
 1294              	.L142:
 1295 003e 00BF     		.align	2
 1296              	.L141:
 1297 0040 00E100E0 		.word	-536813312
 1298 0044 00200C40 		.word	1074536448
 1299 0048 FF000080 		.word	-2147483393
 1300              		.cfi_endproc
 1301              	.LFE83:
 1303              		.section	.text.DMA_Init,"ax",%progbits
 1304              		.align	1
 1305              		.global	DMA_Init
 1306              		.thumb
 1307              		.thumb_func
 1309              	DMA_Init:
 1310              	.LFB81:
1002:../emlib/src/em_dma.c **** {
 1311              		.loc 1 1002 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL135:
 1316 0000 10B5     		push	{r4, lr}
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 14, -4
1003:../emlib/src/em_dma.c ****   EFM_ASSERT(init);
 1320              		.loc 1 1003 0
 1321 0002 0446     		mov	r4, r0
 1322 0004 20B9     		cbnz	r0, .L144
1003:../emlib/src/em_dma.c ****   EFM_ASSERT(init);
 1323              		.loc 1 1003 0 is_stmt 0 discriminator 1
 1324 0006 1248     		ldr	r0, .L149
 1325              	.LVL136:
 1326 0008 40F2EB31 		movw	r1, #1003
 1327 000c FFF7FEFF 		bl	assertEFM
 1328              	.LVL137:
 1329              	.L144:
1006:../emlib/src/em_dma.c ****   EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
 1330              		.loc 1 1006 0 is_stmt 1
 1331 0010 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1332 0012 23B1     		cbz	r3, .L145
1006:../emlib/src/em_dma.c ****   EFM_ASSERT(!((uint32_t)(init->controlBlock) & (256 - 1)));
 1333              		.loc 1 1006 0 is_stmt 0 discriminator 1
 1334 0014 0E48     		ldr	r0, .L149
 1335 0016 40F2EE31 		movw	r1, #1006
 1336 001a FFF7FEFF 		bl	assertEFM
 1337              	.LVL138:
 1338              	.L145:
1009:../emlib/src/em_dma.c ****   CMU_ClockEnable(cmuClock_DMA, true);
 1339              		.loc 1 1009 0 is_stmt 1
 1340 001e 0121     		movs	r1, #1
 1341 0020 0C48     		ldr	r0, .L149+4
 1342 0022 FFF7FEFF 		bl	CMU_ClockEnable
 1343              	.LVL139:
1012:../emlib/src/em_dma.c ****   DMA_Reset();
ARM GAS  /tmp/ccnPSQXa.s 			page 71


 1344              		.loc 1 1012 0
 1345 0026 FFF7FEFF 		bl	DMA_Reset
 1346              	.LVL140:
 1347              	.LBB17:
 1348              	.LBB18:
1338:../CMSIS/Include/core_cm3.h **** }
1339:../CMSIS/Include/core_cm3.h **** 
1340:../CMSIS/Include/core_cm3.h **** 
1341:../CMSIS/Include/core_cm3.h **** /** \brief  Get Pending Interrupt
1342:../CMSIS/Include/core_cm3.h **** 
1343:../CMSIS/Include/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1344:../CMSIS/Include/core_cm3.h ****     for the specified interrupt.
1345:../CMSIS/Include/core_cm3.h **** 
1346:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1347:../CMSIS/Include/core_cm3.h **** 
1348:../CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not pending.
1349:../CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is pending.
1350:../CMSIS/Include/core_cm3.h ****  */
1351:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1352:../CMSIS/Include/core_cm3.h **** {
1353:../CMSIS/Include/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1354:../CMSIS/Include/core_cm3.h **** }
1355:../CMSIS/Include/core_cm3.h **** 
1356:../CMSIS/Include/core_cm3.h **** 
1357:../CMSIS/Include/core_cm3.h **** /** \brief  Set Pending Interrupt
1358:../CMSIS/Include/core_cm3.h **** 
1359:../CMSIS/Include/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1360:../CMSIS/Include/core_cm3.h **** 
1361:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1362:../CMSIS/Include/core_cm3.h ****  */
1363:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1364:../CMSIS/Include/core_cm3.h **** {
1365:../CMSIS/Include/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1366:../CMSIS/Include/core_cm3.h **** }
1367:../CMSIS/Include/core_cm3.h **** 
1368:../CMSIS/Include/core_cm3.h **** 
1369:../CMSIS/Include/core_cm3.h **** /** \brief  Clear Pending Interrupt
1370:../CMSIS/Include/core_cm3.h **** 
1371:../CMSIS/Include/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1372:../CMSIS/Include/core_cm3.h **** 
1373:../CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1374:../CMSIS/Include/core_cm3.h ****  */
1375:../CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1376:../CMSIS/Include/core_cm3.h **** {
1377:../CMSIS/Include/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 1349              		.loc 3 1377 0
 1350 002a 0B4B     		ldr	r3, .L149+8
 1351 002c 0122     		movs	r2, #1
 1352 002e C3F88021 		str	r2, [r3, #384]
 1353              	.LVL141:
 1354              	.LBE18:
 1355              	.LBE17:
 1356              	.LBB19:
 1357              	.LBB20:
1325:../CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 1358              		.loc 3 1325 0
 1359 0032 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccnPSQXa.s 			page 72


 1360              	.LBE20:
 1361              	.LBE19:
1019:../emlib/src/em_dma.c ****   DMA->IEN = DMA_IEN_ERR;
 1362              		.loc 1 1019 0
 1363 0034 094B     		ldr	r3, .L149+12
 1364 0036 41F20C02 		movw	r2, #4108
 1365 003a 4FF00041 		mov	r1, #-2147483648
 1366 003e 9950     		str	r1, [r3, r2]
1024:../emlib/src/em_dma.c ****   DMA->CTRLBASE = (uint32_t)(init->controlBlock);
 1367              		.loc 1 1024 0
 1368 0040 6268     		ldr	r2, [r4, #4]
 1369 0042 9A60     		str	r2, [r3, #8]
1027:../emlib/src/em_dma.c ****   DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT) | DMA_CONFIG_EN;
 1370              		.loc 1 1027 0
 1371 0044 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1372 0046 5201     		lsls	r2, r2, #5
 1373 0048 42F00102 		orr	r2, r2, #1
 1374 004c 5A60     		str	r2, [r3, #4]
 1375 004e 10BD     		pop	{r4, pc}
 1376              	.LVL142:
 1377              	.L150:
 1378              		.align	2
 1379              	.L149:
 1380 0050 00000000 		.word	.LC0
 1381 0054 00130400 		.word	267008
 1382 0058 00E100E0 		.word	-536813312
 1383 005c 00200C40 		.word	1074536448
 1384              		.cfi_endproc
 1385              	.LFE81:
 1387              		.section	.rodata.str1.1,"aMS",%progbits,1
 1388              	.LC0:
 1389 0000 2E2E2F65 		.ascii	"../emlib/src/em_dma.c\000"
 1389      6D6C6962 
 1389      2F737263 
 1389      2F656D5F 
 1389      646D612E 
 1390              		.text
 1391              	.Letext0:
 1392              		.file 4 "../Device/EnergyMicro/EFM32G/Include/efm32g230f128.h"
 1393              		.file 5 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/machine/_default_types.h"
 1394              		.file 6 "/opt/cross/gcc-arm-none-eabi-4_8-2014q3/arm-none-eabi/include/stdint.h"
 1395              		.file 7 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_ch.h"
 1396              		.file 8 "../Device/EnergyMicro/EFM32G/Include/efm32g_dma_descriptor.h"
 1397              		.file 9 "../emlib/inc/em_dma.h"
 1398              		.file 10 "../emlib/inc/em_cmu.h"
 1399              		.file 11 "../emlib/inc/em_assert.h"
